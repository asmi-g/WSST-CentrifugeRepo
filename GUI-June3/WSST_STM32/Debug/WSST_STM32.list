
WSST_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800a0f0  0800a0f0  0000b0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a620  0800a620  0000c234  2**0
                  CONTENTS
  4 .ARM          00000008  0800a620  0800a620  0000b620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a628  0800a628  0000c234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a628  0800a628  0000b628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a62c  0800a62c  0000b62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800a630  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043e0  20000234  0800a864  0000c234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004614  0800a864  0000c614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001605c  00000000  00000000  0000c264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332d  00000000  00000000  000222c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  000255f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f11  00000000  00000000  00026958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7a1  00000000  00000000  00027869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163d4  00000000  00000000  0004200a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a49d1  00000000  00000000  000583de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcdaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006390  00000000  00000000  000fcdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00103184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000234 	.word	0x20000234
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0d8 	.word	0x0800a0d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000238 	.word	0x20000238
 80001dc:	0800a0d8 	.word	0x0800a0d8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <vApplicationGetIdleTaskMemory+0x30>)
 8000f7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2280      	movs	r2, #128	@ 0x80
 8000f84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000250 	.word	0x20000250
 8000f98:	20000300 	.word	0x20000300

08000f9c <TEST_LED_BRIGHTNESS>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TEST_LED_BRIGHTNESS(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	TIM4->CCR1 = 500; // Divide by 1000 to get PWM Duty Cycle
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <TEST_LED_BRIGHTNESS+0x30>)
 8000fa2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fa6:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <TEST_LED_BRIGHTNESS+0x34>)
 8000fac:	f002 ffba 	bl	8003f24 <HAL_TIM_PWM_Start>
	rx_pwmval = atoi(rx_buffer);
 8000fb0:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <TEST_LED_BRIGHTNESS+0x38>)
 8000fb2:	f006 f847 	bl	8007044 <atoi>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <TEST_LED_BRIGHTNESS+0x3c>)
 8000fba:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, rx_pwmval);
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <TEST_LED_BRIGHTNESS+0x3c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <TEST_LED_BRIGHTNESS+0x34>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	635a      	str	r2, [r3, #52]	@ 0x34
	//rx_pwmval = 0;
	//memset(rx_data, 0, sizeof(rx_data));
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40000800 	.word	0x40000800
 8000fd0:	20000590 	.word	0x20000590
 8000fd4:	200006b8 	.word	0x200006b8
 8000fd8:	2000071c 	.word	0x2000071c

08000fdc <TURN_PWM>:

void TURN_PWM(int val){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	TIM4->CCR1 = 500; // Divide by 1000 to get PWM Duty Cycle
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <TURN_PWM+0x4c>)
 8000fe6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fea:	635a      	str	r2, [r3, #52]	@ 0x34

	switch(val){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <TURN_PWM+0x1e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d009      	beq.n	800100c <TURN_PWM+0x30>
	    	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 255);
	    	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	        break;
	}
}
 8000ff8:	e011      	b.n	800101e <TURN_PWM+0x42>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	480b      	ldr	r0, [pc, #44]	@ (800102c <TURN_PWM+0x50>)
 8000ffe:	f003 f841 	bl	8004084 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <TURN_PWM+0x50>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2200      	movs	r2, #0
 8001008:	635a      	str	r2, [r3, #52]	@ 0x34
	        break;
 800100a:	e008      	b.n	800101e <TURN_PWM+0x42>
	    	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800100c:	2100      	movs	r1, #0
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <TURN_PWM+0x50>)
 8001010:	f002 ff88 	bl	8003f24 <HAL_TIM_PWM_Start>
	    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 255);
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <TURN_PWM+0x50>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	22ff      	movs	r2, #255	@ 0xff
 800101a:	635a      	str	r2, [r3, #52]	@ 0x34
	        break;
 800101c:	bf00      	nop
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40000800 	.word	0x40000800
 800102c:	20000590 	.word	0x20000590

08001030 <set_setpoint>:

void set_setpoint(uint32_t new_setpoint)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	temp_setpoint = new_setpoint;
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <set_setpoint+0x1c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000638 	.word	0x20000638

08001050 <reset_setpoint>:

void reset_setpoint(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	temp_setpoint = 0;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <reset_setpoint+0x14>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	20000638 	.word	0x20000638

08001068 <thermistor_adc_to_temp_c>:

float thermistor_adc_to_temp_c(uint16_t thermistor_adc_value)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
	float thermistor_resistance_ohm = (float) THERMISTOR_RESISTOR * ((float) thermistor_adc_value / ((float) 4096 - (float) thermistor_adc_value));
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001086:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80010f8 <thermistor_adc_to_temp_c+0x90>
 800108a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800108e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001092:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109a:	edc7 7a03 	vstr	s15, [r7, #12]

	float thermistor_temp = -(30.21*logf(thermistor_resistance_ohm)) + 137.57;
 800109e:	ed97 0a03 	vldr	s0, [r7, #12]
 80010a2:	f008 fef3 	bl	8009e8c <logf>
 80010a6:	ee10 3a10 	vmov	r3, s0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa64 	bl	8000578 <__aeabi_f2d>
 80010b0:	a30d      	add	r3, pc, #52	@ (adr r3, 80010e8 <thermistor_adc_to_temp_c+0x80>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fab7 	bl	8000628 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	a10c      	add	r1, pc, #48	@ (adr r1, 80010f0 <thermistor_adc_to_temp_c+0x88>)
 80010c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010c4:	f7ff f8f8 	bl	80002b8 <__aeabi_dsub>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fd82 	bl	8000bd8 <__aeabi_d2f>
 80010d4:	4603      	mov	r3, r0
 80010d6:	60bb      	str	r3, [r7, #8]
	return thermistor_temp;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	ee07 3a90 	vmov	s15, r3
}
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	8f5c28f6 	.word	0x8f5c28f6
 80010ec:	403e35c2 	.word	0x403e35c2
 80010f0:	70a3d70a 	.word	0x70a3d70a
 80010f4:	4061323d 	.word	0x4061323d
 80010f8:	45800000 	.word	0x45800000

080010fc <cycle_heater_state>:

void cycle_heater_state(int active_heater)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  switch(heater_state[active_heater])
 8001104:	4a15      	ldr	r2, [pc, #84]	@ (800115c <cycle_heater_state+0x60>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d018      	beq.n	8001142 <cycle_heater_state+0x46>
 8001110:	2b02      	cmp	r3, #2
 8001112:	dc1e      	bgt.n	8001152 <cycle_heater_state+0x56>
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <cycle_heater_state+0x22>
 8001118:	2b01      	cmp	r3, #1
 800111a:	d009      	beq.n	8001130 <cycle_heater_state+0x34>
	case FULL_HEAT:
		heater_state[active_heater] = OFF;
		reset_setpoint();
		break;
  }
}
 800111c:	e019      	b.n	8001152 <cycle_heater_state+0x56>
		heater_state[active_heater] = PRE_HEAT;
 800111e:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <cycle_heater_state+0x60>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
		set_setpoint(PRE_HEAT_SETPOINT);
 8001128:	207d      	movs	r0, #125	@ 0x7d
 800112a:	f7ff ff81 	bl	8001030 <set_setpoint>
		break;
 800112e:	e010      	b.n	8001152 <cycle_heater_state+0x56>
		heater_state[active_heater] = FULL_HEAT;
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <cycle_heater_state+0x60>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	2202      	movs	r2, #2
 8001138:	701a      	strb	r2, [r3, #0]
		set_setpoint(FULL_HEAT_STOPPOINT);
 800113a:	20c8      	movs	r0, #200	@ 0xc8
 800113c:	f7ff ff78 	bl	8001030 <set_setpoint>
		break;
 8001140:	e007      	b.n	8001152 <cycle_heater_state+0x56>
		heater_state[active_heater] = OFF;
 8001142:	4a06      	ldr	r2, [pc, #24]	@ (800115c <cycle_heater_state+0x60>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
		reset_setpoint();
 800114c:	f7ff ff80 	bl	8001050 <reset_setpoint>
		break;
 8001150:	bf00      	nop
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000063c 	.word	0x2000063c

08001160 <select_active_heater_bank>:

void select_active_heater_bank(int active_heater_bank)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	switch(active_heater_bank)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d81b      	bhi.n	80011a6 <select_active_heater_bank+0x46>
 800116e:	a201      	add	r2, pc, #4	@ (adr r2, 8001174 <select_active_heater_bank+0x14>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	08001185 	.word	0x08001185
 8001178:	0800118d 	.word	0x0800118d
 800117c:	08001195 	.word	0x08001195
 8001180:	0800119d 	.word	0x0800119d
	{
		case HEATER_BANK_0:
			active_heater_bank_pin = HEATER_BANK_0_Pin;
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <select_active_heater_bank+0x54>)
 8001186:	2208      	movs	r2, #8
 8001188:	801a      	strh	r2, [r3, #0]
			break;
 800118a:	e00c      	b.n	80011a6 <select_active_heater_bank+0x46>
		case HEATER_BANK_1:
			active_heater_bank_pin = HEATER_BANK_1_Pin;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <select_active_heater_bank+0x54>)
 800118e:	2210      	movs	r2, #16
 8001190:	801a      	strh	r2, [r3, #0]
			break;
 8001192:	e008      	b.n	80011a6 <select_active_heater_bank+0x46>
		case HEATER_BANK_2:
			active_heater_bank_pin = HEATER_BANK_2_Pin;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <select_active_heater_bank+0x54>)
 8001196:	2220      	movs	r2, #32
 8001198:	801a      	strh	r2, [r3, #0]
			break;
 800119a:	e004      	b.n	80011a6 <select_active_heater_bank+0x46>
		case HEATER_BANK_3:
			active_heater_bank_pin = HEATER_BANK_3_Pin;
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <select_active_heater_bank+0x54>)
 800119e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a2:	801a      	strh	r2, [r3, #0]
			break;
 80011a4:	bf00      	nop
	}
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000644 	.word	0x20000644

080011b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011c8:	d105      	bne.n	80011d6 <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  cycle_heater_state(active_heater_bank);
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x38>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff94 	bl	80010fc <cycle_heater_state>
  else if(GPIO_Pin == GPIO_PIN_7)
  {
//	  rpm_time = HAL_GetTick();
	  IR_RPM_interrupt_count++;
  }
}
 80011d4:	e007      	b.n	80011e6 <HAL_GPIO_EXTI_Callback+0x2e>
  else if(GPIO_Pin == GPIO_PIN_7)
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	2b80      	cmp	r3, #128	@ 0x80
 80011da:	d104      	bne.n	80011e6 <HAL_GPIO_EXTI_Callback+0x2e>
	  IR_RPM_interrupt_count++;
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80011e4:	6013      	str	r3, [r2, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000648 	.word	0x20000648

080011f8 <read_and_accumulate_adc_channels>:

void read_and_accumulate_adc_channels()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	for(int i = 0; i < HEATER_COUNT; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	e019      	b.n	8001238 <read_and_accumulate_adc_channels+0x40>
	{
		HAL_ADC_Start(&hadc1);
 8001204:	4811      	ldr	r0, [pc, #68]	@ (800124c <read_and_accumulate_adc_channels+0x54>)
 8001206:	f001 fa2f 	bl	8002668 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800120a:	f04f 31ff 	mov.w	r1, #4294967295
 800120e:	480f      	ldr	r0, [pc, #60]	@ (800124c <read_and_accumulate_adc_channels+0x54>)
 8001210:	f001 fb11 	bl	8002836 <HAL_ADC_PollForConversion>
		adc_values[i] += HAL_ADC_GetValue(&hadc1);
 8001214:	480d      	ldr	r0, [pc, #52]	@ (800124c <read_and_accumulate_adc_channels+0x54>)
 8001216:	f001 fb99 	bl	800294c <HAL_ADC_GetValue>
 800121a:	4601      	mov	r1, r0
 800121c:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <read_and_accumulate_adc_channels+0x58>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001224:	b28b      	uxth	r3, r1
 8001226:	4413      	add	r3, r2
 8001228:	b299      	uxth	r1, r3
 800122a:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <read_and_accumulate_adc_channels+0x58>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < HEATER_COUNT; i++)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3301      	adds	r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b07      	cmp	r3, #7
 800123c:	dde2      	ble.n	8001204 <read_and_accumulate_adc_channels+0xc>
	}

	HAL_ADC_Stop(&hadc1);
 800123e:	4803      	ldr	r0, [pc, #12]	@ (800124c <read_and_accumulate_adc_channels+0x54>)
 8001240:	f001 fac6 	bl	80027d0 <HAL_ADC_Stop>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000500 	.word	0x20000500
 8001250:	20000680 	.word	0x20000680

08001254 <recieve_uart_messages>:

void recieve_uart_messages()
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	//TODO: ADD UART MSSG HANDLING HERE
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <handle_uart_messages>:

void handle_uart_messages()
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
	//TODO: parse UART messages
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b0aa      	sub	sp, #168	@ 0xa8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001276:	f001 f971 	bl	800255c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127a:	f000 f8ab 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127e:	f000 faa3 	bl	80017c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001282:	f000 f911 	bl	80014a8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001286:	f000 fa75 	bl	8001774 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800128a:	f000 f9c3 	bl	8001614 <MX_TIM2_Init>
  MX_TIM4_Init();
 800128e:	f000 fa19 	bl	80016c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001292:	4840      	ldr	r0, [pc, #256]	@ (8001394 <main+0x124>)
 8001294:	f001 f9e8 	bl	8002668 <HAL_ADC_Start>

  // Start PWM generation
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001298:	2100      	movs	r1, #0
 800129a:	483f      	ldr	r0, [pc, #252]	@ (8001398 <main+0x128>)
 800129c:	f002 fe42 	bl	8003f24 <HAL_TIM_PWM_Start>

  // Start UART receive interrupt
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	493e      	ldr	r1, [pc, #248]	@ (800139c <main+0x12c>)
 80012a4:	483e      	ldr	r0, [pc, #248]	@ (80013a0 <main+0x130>)
 80012a6:	f003 fcc6 	bl	8004c36 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80012aa:	4b3e      	ldr	r3, [pc, #248]	@ (80013a4 <main+0x134>)
 80012ac:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80012b0:	461d      	mov	r5, r3
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012be:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 fc50 	bl	8005b6a <osThreadCreate>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a36      	ldr	r2, [pc, #216]	@ (80013a8 <main+0x138>)
 80012ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of readSensors */
  osThreadDef(readSensors, startReadSensors, osPriorityNormal, 0, 128);
 80012d0:	4b36      	ldr	r3, [pc, #216]	@ (80013ac <main+0x13c>)
 80012d2:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80012d6:	461d      	mov	r5, r3
 80012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorsHandle = osThreadCreate(osThread(readSensors), NULL);
 80012e4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 fc3d 	bl	8005b6a <osThreadCreate>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a2f      	ldr	r2, [pc, #188]	@ (80013b0 <main+0x140>)
 80012f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of bangBangControl */
  osThreadDef(bangBangControl, StartBangBangControl, osPriorityRealtime, 0, 128);
 80012f6:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <main+0x144>)
 80012f8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bangBangControlHandle = osThreadCreate(osThread(bangBangControl), NULL);
 800130a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f004 fc2a 	bl	8005b6a <osThreadCreate>
 8001316:	4603      	mov	r3, r0
 8001318:	4a27      	ldr	r2, [pc, #156]	@ (80013b8 <main+0x148>)
 800131a:	6013      	str	r3, [r2, #0]

  /* definition and creation of communicationTa */
  osThreadDef(communicationTa, StartComTask, osPriorityNormal, 0, 1024);
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <main+0x14c>)
 800131e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001322:	461d      	mov	r5, r3
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800132c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  communicationTaHandle = osThreadCreate(osThread(communicationTa), NULL);
 8001330:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fc17 	bl	8005b6a <osThreadCreate>
 800133c:	4603      	mov	r3, r0
 800133e:	4a20      	ldr	r2, [pc, #128]	@ (80013c0 <main+0x150>)
 8001340:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, startMotorTask, osPriorityNormal, 0, 128);
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <main+0x154>)
 8001344:	f107 041c 	add.w	r4, r7, #28
 8001348:	461d      	mov	r5, r3
 800134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fc04 	bl	8005b6a <osThreadCreate>
 8001362:	4603      	mov	r3, r0
 8001364:	4a18      	ldr	r2, [pc, #96]	@ (80013c8 <main+0x158>)
 8001366:	6013      	str	r3, [r2, #0]

  /* definition and creation of messageHanldlerTask */
  osThreadDef(messageHanldlerTask, StartMessageHandlerTask, osPriorityNormal, 0, 256);
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <main+0x15c>)
 800136a:	463c      	mov	r4, r7
 800136c:	461d      	mov	r5, r3
 800136e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  messageHanldlerTaskHandle = osThreadCreate(osThread(messageHanldlerTask), NULL);
 800137a:	463b      	mov	r3, r7
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f004 fbf3 	bl	8005b6a <osThreadCreate>
 8001384:	4603      	mov	r3, r0
 8001386:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <main+0x160>)
 8001388:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800138a:	f004 fbe7 	bl	8005b5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800138e:	bf00      	nop
 8001390:	e7fd      	b.n	800138e <main+0x11e>
 8001392:	bf00      	nop
 8001394:	20000500 	.word	0x20000500
 8001398:	20000590 	.word	0x20000590
 800139c:	200006b4 	.word	0x200006b4
 80013a0:	200005d8 	.word	0x200005d8
 80013a4:	0800a0fc 	.word	0x0800a0fc
 80013a8:	20000620 	.word	0x20000620
 80013ac:	0800a124 	.word	0x0800a124
 80013b0:	20000624 	.word	0x20000624
 80013b4:	0800a150 	.word	0x0800a150
 80013b8:	20000628 	.word	0x20000628
 80013bc:	0800a17c 	.word	0x0800a17c
 80013c0:	2000062c 	.word	0x2000062c
 80013c4:	0800a1a4 	.word	0x0800a1a4
 80013c8:	20000630 	.word	0x20000630
 80013cc:	0800a1d4 	.word	0x0800a1d4
 80013d0:	20000634 	.word	0x20000634

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	@ 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	@ 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 fc33 	bl	8007c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <SystemClock_Config+0xcc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
 8001408:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <SystemClock_Config+0xcc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001420:	4a20      	ldr	r2, [pc, #128]	@ (80014a4 <SystemClock_Config+0xd0>)
 8001422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <SystemClock_Config+0xd0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2310      	movs	r3, #16
 800143e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001440:	2302      	movs	r3, #2
 8001442:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001448:	2308      	movs	r3, #8
 800144a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800144c:	2348      	movs	r3, #72	@ 0x48
 800144e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4618      	mov	r0, r3
 800145e:	f001 ffcb 	bl	80033f8 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001468:	f000 fd1c 	bl	8001ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2102      	movs	r1, #2
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fa2d 	bl	80038e8 <HAL_RCC_ClockConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001494:	f000 fd06 	bl	8001ea4 <Error_Handler>
  }
}
 8001498:	bf00      	nop
 800149a:	3750      	adds	r7, #80	@ 0x50
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ba:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014bc:	4a53      	ldr	r2, [pc, #332]	@ (800160c <MX_ADC1_Init+0x164>)
 80014be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014c0:	4b51      	ldr	r3, [pc, #324]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c6:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80014d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80014e0:	4b49      	ldr	r3, [pc, #292]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e6:	4b48      	ldr	r3, [pc, #288]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ec:	4b46      	ldr	r3, [pc, #280]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014ee:	4a48      	ldr	r2, [pc, #288]	@ (8001610 <MX_ADC1_Init+0x168>)
 80014f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f2:	4b45      	ldr	r3, [pc, #276]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80014f8:	4b43      	ldr	r3, [pc, #268]	@ (8001608 <MX_ADC1_Init+0x160>)
 80014fa:	2208      	movs	r2, #8
 80014fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014fe:	4b42      	ldr	r3, [pc, #264]	@ (8001608 <MX_ADC1_Init+0x160>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001506:	4b40      	ldr	r3, [pc, #256]	@ (8001608 <MX_ADC1_Init+0x160>)
 8001508:	2201      	movs	r2, #1
 800150a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800150c:	483e      	ldr	r0, [pc, #248]	@ (8001608 <MX_ADC1_Init+0x160>)
 800150e:	f001 f867 	bl	80025e0 <HAL_ADC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001518:	f000 fcc4 	bl	8001ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800151c:	2300      	movs	r3, #0
 800151e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4836      	ldr	r0, [pc, #216]	@ (8001608 <MX_ADC1_Init+0x160>)
 800152e:	f001 fa1b 	bl	8002968 <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001538:	f000 fcb4 	bl	8001ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800153c:	2301      	movs	r3, #1
 800153e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	482f      	ldr	r0, [pc, #188]	@ (8001608 <MX_ADC1_Init+0x160>)
 800154a:	f001 fa0d 	bl	8002968 <HAL_ADC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001554:	f000 fca6 	bl	8001ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001558:	2304      	movs	r3, #4
 800155a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800155c:	2303      	movs	r3, #3
 800155e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001560:	463b      	mov	r3, r7
 8001562:	4619      	mov	r1, r3
 8001564:	4828      	ldr	r0, [pc, #160]	@ (8001608 <MX_ADC1_Init+0x160>)
 8001566:	f001 f9ff 	bl	8002968 <HAL_ADC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001570:	f000 fc98 	bl	8001ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001574:	2308      	movs	r3, #8
 8001576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001578:	2304      	movs	r3, #4
 800157a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	4619      	mov	r1, r3
 8001580:	4821      	ldr	r0, [pc, #132]	@ (8001608 <MX_ADC1_Init+0x160>)
 8001582:	f001 f9f1 	bl	8002968 <HAL_ADC_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800158c:	f000 fc8a 	bl	8001ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001590:	230a      	movs	r3, #10
 8001592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001594:	2305      	movs	r3, #5
 8001596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001598:	463b      	mov	r3, r7
 800159a:	4619      	mov	r1, r3
 800159c:	481a      	ldr	r0, [pc, #104]	@ (8001608 <MX_ADC1_Init+0x160>)
 800159e:	f001 f9e3 	bl	8002968 <HAL_ADC_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80015a8:	f000 fc7c 	bl	8001ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80015ac:	230b      	movs	r3, #11
 80015ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80015b0:	2306      	movs	r3, #6
 80015b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	4813      	ldr	r0, [pc, #76]	@ (8001608 <MX_ADC1_Init+0x160>)
 80015ba:	f001 f9d5 	bl	8002968 <HAL_ADC_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80015c4:	f000 fc6e 	bl	8001ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015c8:	230c      	movs	r3, #12
 80015ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80015cc:	2307      	movs	r3, #7
 80015ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	@ (8001608 <MX_ADC1_Init+0x160>)
 80015d6:	f001 f9c7 	bl	8002968 <HAL_ADC_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80015e0:	f000 fc60 	bl	8001ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80015e4:	230d      	movs	r3, #13
 80015e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80015e8:	2308      	movs	r3, #8
 80015ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_ADC1_Init+0x160>)
 80015f2:	f001 f9b9 	bl	8002968 <HAL_ADC_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 80015fc:	f000 fc52 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000500 	.word	0x20000500
 800160c:	40012000 	.word	0x40012000
 8001610:	0f000001 	.word	0x0f000001

08001614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001636:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <MX_TIM2_Init+0xac>)
 8001638:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800163c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <MX_TIM2_Init+0xac>)
 8001640:	2247      	movs	r2, #71	@ 0x47
 8001642:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <MX_TIM2_Init+0xac>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800164a:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <MX_TIM2_Init+0xac>)
 800164c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001650:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <MX_TIM2_Init+0xac>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <MX_TIM2_Init+0xac>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800165e:	4818      	ldr	r0, [pc, #96]	@ (80016c0 <MX_TIM2_Init+0xac>)
 8001660:	f002 fc10 	bl	8003e84 <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800166a:	f000 fc1b 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	4619      	mov	r1, r3
 800167c:	4810      	ldr	r0, [pc, #64]	@ (80016c0 <MX_TIM2_Init+0xac>)
 800167e:	f003 f97d 	bl	800497c <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001688:	f000 fc0c 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	@ 0x60
 800168e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_TIM2_Init+0xac>)
 80016a4:	f002 fe42 	bl	800432c <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016ae:	f000 fbf9 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016b2:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <MX_TIM2_Init+0xac>)
 80016b4:	f000 fcf0 	bl	8002098 <HAL_TIM_MspPostInit>

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	@ 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000548 	.word	0x20000548

080016c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <MX_TIM4_Init+0xa8>)
 80016e8:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <MX_TIM4_Init+0xac>)
 80016ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <MX_TIM4_Init+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <MX_TIM4_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <MX_TIM4_Init+0xa8>)
 80016fa:	22ff      	movs	r2, #255	@ 0xff
 80016fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_TIM4_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <MX_TIM4_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800170a:	4818      	ldr	r0, [pc, #96]	@ (800176c <MX_TIM4_Init+0xa8>)
 800170c:	f002 fbba 	bl	8003e84 <HAL_TIM_PWM_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001716:	f000 fbc5 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	4619      	mov	r1, r3
 8001728:	4810      	ldr	r0, [pc, #64]	@ (800176c <MX_TIM4_Init+0xa8>)
 800172a:	f003 f927 	bl	800497c <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001734:	f000 fbb6 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001738:	2360      	movs	r3, #96	@ 0x60
 800173a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	4619      	mov	r1, r3
 800174e:	4807      	ldr	r0, [pc, #28]	@ (800176c <MX_TIM4_Init+0xa8>)
 8001750:	f002 fdec 	bl	800432c <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800175a:	f000 fba3 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800175e:	4803      	ldr	r0, [pc, #12]	@ (800176c <MX_TIM4_Init+0xa8>)
 8001760:	f000 fc9a 	bl	8002098 <HAL_TIM_MspPostInit>

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	@ 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000590 	.word	0x20000590
 8001770:	40000800 	.word	0x40000800

08001774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <MX_USART2_UART_Init+0x50>)
 800177c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017ac:	f003 f968 	bl	8004a80 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017b6:	f000 fb75 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200005d8 	.word	0x200005d8
 80017c4:	40004400 	.word	0x40004400

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b46      	ldr	r3, [pc, #280]	@ (80018fc <MX_GPIO_Init+0x134>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a45      	ldr	r2, [pc, #276]	@ (80018fc <MX_GPIO_Init+0x134>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b43      	ldr	r3, [pc, #268]	@ (80018fc <MX_GPIO_Init+0x134>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b3f      	ldr	r3, [pc, #252]	@ (80018fc <MX_GPIO_Init+0x134>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a3e      	ldr	r2, [pc, #248]	@ (80018fc <MX_GPIO_Init+0x134>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b3c      	ldr	r3, [pc, #240]	@ (80018fc <MX_GPIO_Init+0x134>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	4b38      	ldr	r3, [pc, #224]	@ (80018fc <MX_GPIO_Init+0x134>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a37      	ldr	r2, [pc, #220]	@ (80018fc <MX_GPIO_Init+0x134>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b35      	ldr	r3, [pc, #212]	@ (80018fc <MX_GPIO_Init+0x134>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8001838:	4831      	ldr	r0, [pc, #196]	@ (8001900 <MX_GPIO_Init+0x138>)
 800183a:	f001 fdab 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEATER_BANK_3_Pin|HEATER_BANK_0_Pin|HEATER_BANK_1_Pin|HEATER_BANK_2_Pin
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 8001844:	482f      	ldr	r0, [pc, #188]	@ (8001904 <MX_GPIO_Init+0x13c>)
 8001846:	f001 fda5 	bl	8003394 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : Blue_Button_Interrupt_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Interrupt_Pin;
 800184a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001850:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001856:	2301      	movs	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	4829      	ldr	r0, [pc, #164]	@ (8001908 <MX_GPIO_Init+0x140>)
 8001862:	f001 fc13 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001866:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800186a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	4619      	mov	r1, r3
 800187e:	4820      	ldr	r0, [pc, #128]	@ (8001900 <MX_GPIO_Init+0x138>)
 8001880:	f001 fc04 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Input_Interrupt_Pin */
  GPIO_InitStruct.Pin = IR_Input_Interrupt_Pin;
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001888:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800188c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_Input_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4619      	mov	r1, r3
 8001898:	4819      	ldr	r0, [pc, #100]	@ (8001900 <MX_GPIO_Init+0x138>)
 800189a:	f001 fbf7 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : HEATER_BANK_3_Pin HEATER_BANK_0_Pin HEATER_BANK_1_Pin HEATER_BANK_2_Pin
                           PB8 PB9 */
  GPIO_InitStruct.Pin = HEATER_BANK_3_Pin|HEATER_BANK_0_Pin|HEATER_BANK_1_Pin|HEATER_BANK_2_Pin
 800189e:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 80018a2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	4813      	ldr	r0, [pc, #76]	@ (8001904 <MX_GPIO_Init+0x13c>)
 80018b8:	f001 fbe8 	bl	800308c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2105      	movs	r1, #5
 80018c0:	2017      	movs	r0, #23
 80018c2:	f001 fb27 	bl	8002f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018c6:	2017      	movs	r0, #23
 80018c8:	f001 fb40 	bl	8002f4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2105      	movs	r1, #5
 80018d0:	2028      	movs	r0, #40	@ 0x28
 80018d2:	f001 fb1f 	bl	8002f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018d6:	2028      	movs	r0, #40	@ 0x28
 80018d8:	f001 fb38 	bl	8002f4c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018e2:	4808      	ldr	r0, [pc, #32]	@ (8001904 <MX_GPIO_Init+0x13c>)
 80018e4:	f001 fd56 	bl	8003394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <MX_GPIO_Init+0x13c>)
 80018f0:	f001 fd50 	bl	8003394 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800

0800190c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
  uint8_t i;
  if (huart->Instance == USART2){
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a3a      	ldr	r2, [pc, #232]	@ (8001a04 <HAL_UART_RxCpltCallback+0xf8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d16e      	bne.n	80019fc <HAL_UART_RxCpltCallback+0xf0>
	  if(rx_index == 0){
 800191e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <HAL_UART_RxCpltCallback+0xfc>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d111      	bne.n	800194a <HAL_UART_RxCpltCallback+0x3e>
		  for(i=0;i<100;i++){
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]
 800192a:	e00b      	b.n	8001944 <HAL_UART_RxCpltCallback+0x38>
			  rx_buffer[i]= 0;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	4a37      	ldr	r2, [pc, #220]	@ (8001a0c <HAL_UART_RxCpltCallback+0x100>)
 8001930:	2100      	movs	r1, #0
 8001932:	54d1      	strb	r1, [r2, r3]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	2140      	movs	r1, #64	@ 0x40
 8001938:	4835      	ldr	r0, [pc, #212]	@ (8001a10 <HAL_UART_RxCpltCallback+0x104>)
 800193a:	f001 fd2b 	bl	8003394 <HAL_GPIO_WritePin>
		  for(i=0;i<100;i++){
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	3301      	adds	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b63      	cmp	r3, #99	@ 0x63
 8001948:	d9f0      	bls.n	800192c <HAL_UART_RxCpltCallback+0x20>
		  }
	  }
	  if (rx_data[0] != 13){
 800194a:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <HAL_UART_RxCpltCallback+0x108>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b0d      	cmp	r3, #13
 8001950:	d00b      	beq.n	800196a <HAL_UART_RxCpltCallback+0x5e>
		  rx_buffer[rx_index++] = rx_data[0];
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <HAL_UART_RxCpltCallback+0xfc>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	b2d1      	uxtb	r1, r2
 800195a:	4a2b      	ldr	r2, [pc, #172]	@ (8001a08 <HAL_UART_RxCpltCallback+0xfc>)
 800195c:	7011      	strb	r1, [r2, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	4b2c      	ldr	r3, [pc, #176]	@ (8001a14 <HAL_UART_RxCpltCallback+0x108>)
 8001962:	7819      	ldrb	r1, [r3, #0]
 8001964:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <HAL_UART_RxCpltCallback+0x100>)
 8001966:	5499      	strb	r1, [r3, r2]
 8001968:	e039      	b.n	80019de <HAL_UART_RxCpltCallback+0xd2>
	  }
	  else{
		  rx_index = 0;
 800196a:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <HAL_UART_RxCpltCallback+0xfc>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
		  transfer_cplt = 1;
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <HAL_UART_RxCpltCallback+0x10c>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, "\n\r", 2,100);
 8001976:	2364      	movs	r3, #100	@ 0x64
 8001978:	2202      	movs	r2, #2
 800197a:	4928      	ldr	r1, [pc, #160]	@ (8001a1c <HAL_UART_RxCpltCallback+0x110>)
 800197c:	4828      	ldr	r0, [pc, #160]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 800197e:	f003 f8cf 	bl	8004b20 <HAL_UART_Transmit>
		  if(!strcmp(rx_buffer, "LED ON")){ //checking if input buffer indicates to turn LED on
 8001982:	4928      	ldr	r1, [pc, #160]	@ (8001a24 <HAL_UART_RxCpltCallback+0x118>)
 8001984:	4821      	ldr	r0, [pc, #132]	@ (8001a0c <HAL_UART_RxCpltCallback+0x100>)
 8001986:	f7fe fc2b 	bl	80001e0 <strcmp>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d108      	bne.n	80019a2 <HAL_UART_RxCpltCallback+0x96>
			  TURN_PWM(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff fb23 	bl	8000fdc <TURN_PWM>
			  HAL_UART_Transmit(&huart2, tx_buffer, 27, 10);
 8001996:	230a      	movs	r3, #10
 8001998:	221b      	movs	r2, #27
 800199a:	4923      	ldr	r1, [pc, #140]	@ (8001a28 <HAL_UART_RxCpltCallback+0x11c>)
 800199c:	4820      	ldr	r0, [pc, #128]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 800199e:	f003 f8bf 	bl	8004b20 <HAL_UART_Transmit>

			  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
			  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
			  //ADD IN CODE FOR PWM HERE
		  }
		  if(!strcmp(rx_buffer, "LED OFF")){ //checking if input buffer indicates to turn LED on
 80019a2:	4922      	ldr	r1, [pc, #136]	@ (8001a2c <HAL_UART_RxCpltCallback+0x120>)
 80019a4:	4819      	ldr	r0, [pc, #100]	@ (8001a0c <HAL_UART_RxCpltCallback+0x100>)
 80019a6:	f7fe fc1b 	bl	80001e0 <strcmp>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d108      	bne.n	80019c2 <HAL_UART_RxCpltCallback+0xb6>
		  	 TURN_PWM(0);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff fb13 	bl	8000fdc <TURN_PWM>
		  	 HAL_UART_Transmit(&huart2, tx_bufferalt, 27, 10);
 80019b6:	230a      	movs	r3, #10
 80019b8:	221b      	movs	r2, #27
 80019ba:	491d      	ldr	r1, [pc, #116]	@ (8001a30 <HAL_UART_RxCpltCallback+0x124>)
 80019bc:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 80019be:	f003 f8af 	bl	8004b20 <HAL_UART_Transmit>

		  			  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
		  			  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		  			  //ADD IN CODE FOR PWM HERE
		  }
		  if (strlen(rx_buffer) <= 3){
 80019c2:	4812      	ldr	r0, [pc, #72]	@ (8001a0c <HAL_UART_RxCpltCallback+0x100>)
 80019c4:	f7fe fc6c 	bl	80002a0 <strlen>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d807      	bhi.n	80019de <HAL_UART_RxCpltCallback+0xd2>
			 TEST_LED_BRIGHTNESS();
 80019ce:	f7ff fae5 	bl	8000f9c <TEST_LED_BRIGHTNESS>
			 HAL_UART_Transmit(&huart2, tx_bufferfinal, 27, 10);
 80019d2:	230a      	movs	r3, #10
 80019d4:	221b      	movs	r2, #27
 80019d6:	4917      	ldr	r1, [pc, #92]	@ (8001a34 <HAL_UART_RxCpltCallback+0x128>)
 80019d8:	4811      	ldr	r0, [pc, #68]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 80019da:	f003 f8a1 	bl	8004b20 <HAL_UART_Transmit>


	  }


	  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80019de:	2201      	movs	r2, #1
 80019e0:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <HAL_UART_RxCpltCallback+0x108>)
 80019e2:	480f      	ldr	r0, [pc, #60]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 80019e4:	f003 f927 	bl	8004c36 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, rx_data, strlen(rx_data), 100);
 80019e8:	480a      	ldr	r0, [pc, #40]	@ (8001a14 <HAL_UART_RxCpltCallback+0x108>)
 80019ea:	f7fe fc59 	bl	80002a0 <strlen>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	2364      	movs	r3, #100	@ 0x64
 80019f4:	4907      	ldr	r1, [pc, #28]	@ (8001a14 <HAL_UART_RxCpltCallback+0x108>)
 80019f6:	480a      	ldr	r0, [pc, #40]	@ (8001a20 <HAL_UART_RxCpltCallback+0x114>)
 80019f8:	f003 f892 	bl	8004b20 <HAL_UART_Transmit>

  }


//  HAL_UART_Transmit(&huart2, rx_data, 6, 10);
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40004400 	.word	0x40004400
 8001a08:	200006b0 	.word	0x200006b0
 8001a0c:	200006b8 	.word	0x200006b8
 8001a10:	40020400 	.word	0x40020400
 8001a14:	200006b4 	.word	0x200006b4
 8001a18:	20000720 	.word	0x20000720
 8001a1c:	0800a1f0 	.word	0x0800a1f0
 8001a20:	200005d8 	.word	0x200005d8
 8001a24:	0800a1f4 	.word	0x0800a1f4
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	0800a1fc 	.word	0x0800a1fc
 8001a30:	20000024 	.word	0x20000024
 8001a34:	20000040 	.word	0x20000040

08001a38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  reset_setpoint();
 8001a40:	f7ff fb06 	bl	8001050 <reset_setpoint>
  select_active_heater_bank(active_heater_bank);
 8001a44:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <StartDefaultTask+0x20>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fb89 	bl	8001160 <select_active_heater_bank>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001a4e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001a52:	f004 f8d6 	bl	8005c02 <osDelay>
 8001a56:	e7fa      	b.n	8001a4e <StartDefaultTask+0x16>
 8001a58:	20000000 	.word	0x20000000

08001a5c <startReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadSensors */
void startReadSensors(void const * argument)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadSensors */
  int oversample_count_max = 10;
 8001a64:	230a      	movs	r3, #10
 8001a66:	60fb      	str	r3, [r7, #12]
  int oversample_count = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  // add switch case here for reading ADC channels
  for(;;)
  {
	read_and_accumulate_adc_channels();
 8001a6c:	f7ff fbc4 	bl	80011f8 <read_and_accumulate_adc_channels>
	oversample_count++;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]

	if(oversample_count == oversample_count_max)
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d12b      	bne.n	8001ad6 <startReadSensors+0x7a>
	{
		oversample_count = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < HEATER_COUNT; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	e023      	b.n	8001ad0 <startReadSensors+0x74>
		{
			adc_values[i] = adc_values[i]/oversample_count_max;
 8001a88:	4a15      	ldr	r2, [pc, #84]	@ (8001ae0 <startReadSensors+0x84>)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a90:	461a      	mov	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a98:	b299      	uxth	r1, r3
 8001a9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <startReadSensors+0x84>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			temp_values[i] = thermistor_adc_to_temp_c(adc_values[i]);
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <startReadSensors+0x84>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fadc 	bl	8001068 <thermistor_adc_to_temp_c>
 8001ab0:	eef0 7a40 	vmov.f32	s15, s0
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae4 <startReadSensors+0x88>)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	edc3 7a00 	vstr	s15, [r3]
			adc_values[i] = 0;
 8001ac0:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <startReadSensors+0x84>)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < HEATER_COUNT; i++)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	3301      	adds	r3, #1
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	ddd8      	ble.n	8001a88 <startReadSensors+0x2c>
		}
	}
    osDelay(1);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f004 f893 	bl	8005c02 <osDelay>
	read_and_accumulate_adc_channels();
 8001adc:	e7c6      	b.n	8001a6c <startReadSensors+0x10>
 8001ade:	bf00      	nop
 8001ae0:	20000680 	.word	0x20000680
 8001ae4:	20000690 	.word	0x20000690

08001ae8 <StartBangBangControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBangBangControl */
void StartBangBangControl(void const * argument)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBangBangControl */
  TIM2->CCR1 = 500; // Divide by 1000 to get PWM Duty Cycle
 8001af0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001af4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001af8:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001afa:	2100      	movs	r1, #0
 8001afc:	483b      	ldr	r0, [pc, #236]	@ (8001bec <StartBangBangControl+0x104>)
 8001afe:	f002 fa11 	bl	8003f24 <HAL_TIM_PWM_Start>
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // D7 on board

  /* Infinite loop */
  for(;;)
  {
	if(heater_state[active_heater_bank] == PRE_HEAT)
 8001b02:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf0 <StartBangBangControl+0x108>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf4 <StartBangBangControl+0x10c>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d12b      	bne.n	8001b66 <StartBangBangControl+0x7e>
	{
		if(temp_values[active_heater_bank] < temp_setpoint - PRE_HEAT_DEADBAND)
 8001b0e:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <StartBangBangControl+0x108>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a39      	ldr	r2, [pc, #228]	@ (8001bf8 <StartBangBangControl+0x110>)
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <StartBangBangControl+0x114>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	d50c      	bpl.n	8001b4c <StartBangBangControl+0x64>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	2120      	movs	r1, #32
 8001b36:	4832      	ldr	r0, [pc, #200]	@ (8001c00 <StartBangBangControl+0x118>)
 8001b38:	f001 fc2c 	bl	8003394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_SET);
 8001b3c:	4b31      	ldr	r3, [pc, #196]	@ (8001c04 <StartBangBangControl+0x11c>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4619      	mov	r1, r3
 8001b44:	4830      	ldr	r0, [pc, #192]	@ (8001c08 <StartBangBangControl+0x120>)
 8001b46:	f001 fc25 	bl	8003394 <HAL_GPIO_WritePin>
 8001b4a:	e04b      	b.n	8001be4 <StartBangBangControl+0xfc>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2120      	movs	r1, #32
 8001b50:	482b      	ldr	r0, [pc, #172]	@ (8001c00 <StartBangBangControl+0x118>)
 8001b52:	f001 fc1f 	bl	8003394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_RESET);
 8001b56:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <StartBangBangControl+0x11c>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482a      	ldr	r0, [pc, #168]	@ (8001c08 <StartBangBangControl+0x120>)
 8001b60:	f001 fc18 	bl	8003394 <HAL_GPIO_WritePin>
 8001b64:	e03e      	b.n	8001be4 <StartBangBangControl+0xfc>
		}
	}
	else if(heater_state[active_heater_bank] == FULL_HEAT)
 8001b66:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <StartBangBangControl+0x108>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a22      	ldr	r2, [pc, #136]	@ (8001bf4 <StartBangBangControl+0x10c>)
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d12c      	bne.n	8001bcc <StartBangBangControl+0xe4>
	{
		if(temp_values[active_heater_bank] < FULL_HEAT_STOPPOINT)
 8001b72:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <StartBangBangControl+0x108>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a20      	ldr	r2, [pc, #128]	@ (8001bf8 <StartBangBangControl+0x110>)
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001c0c <StartBangBangControl+0x124>
 8001b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	d50c      	bpl.n	8001ba8 <StartBangBangControl+0xc0>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2120      	movs	r1, #32
 8001b92:	481b      	ldr	r0, [pc, #108]	@ (8001c00 <StartBangBangControl+0x118>)
 8001b94:	f001 fbfe 	bl	8003394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_SET); // D12 on board
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <StartBangBangControl+0x11c>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4819      	ldr	r0, [pc, #100]	@ (8001c08 <StartBangBangControl+0x120>)
 8001ba2:	f001 fbf7 	bl	8003394 <HAL_GPIO_WritePin>
 8001ba6:	e01d      	b.n	8001be4 <StartBangBangControl+0xfc>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2120      	movs	r1, #32
 8001bac:	4814      	ldr	r0, [pc, #80]	@ (8001c00 <StartBangBangControl+0x118>)
 8001bae:	f001 fbf1 	bl	8003394 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_RESET);
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <StartBangBangControl+0x11c>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4813      	ldr	r0, [pc, #76]	@ (8001c08 <StartBangBangControl+0x120>)
 8001bbc:	f001 fbea 	bl	8003394 <HAL_GPIO_WritePin>
			heater_state[active_heater_bank] = OFF;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <StartBangBangControl+0x108>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf4 <StartBangBangControl+0x10c>)
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	54d1      	strb	r1, [r2, r3]
 8001bca:	e00b      	b.n	8001be4 <StartBangBangControl+0xfc>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2120      	movs	r1, #32
 8001bd0:	480b      	ldr	r0, [pc, #44]	@ (8001c00 <StartBangBangControl+0x118>)
 8001bd2:	f001 fbdf 	bl	8003394 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_RESET);
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <StartBangBangControl+0x11c>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480a      	ldr	r0, [pc, #40]	@ (8001c08 <StartBangBangControl+0x120>)
 8001be0:	f001 fbd8 	bl	8003394 <HAL_GPIO_WritePin>
	}
	osDelay(100);
 8001be4:	2064      	movs	r0, #100	@ 0x64
 8001be6:	f004 f80c 	bl	8005c02 <osDelay>
	if(heater_state[active_heater_bank] == PRE_HEAT)
 8001bea:	e78a      	b.n	8001b02 <StartBangBangControl+0x1a>
 8001bec:	20000548 	.word	0x20000548
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	2000063c 	.word	0x2000063c
 8001bf8:	20000690 	.word	0x20000690
 8001bfc:	20000638 	.word	0x20000638
 8001c00:	40020000 	.word	0x40020000
 8001c04:	20000644 	.word	0x20000644
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	43480000 	.word	0x43480000

08001c10 <StartComTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartComTask */
void StartComTask(void const * argument)
{
 8001c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c14:	f5ad 7d1f 	sub.w	sp, sp, #636	@ 0x27c
 8001c18:	af12      	add	r7, sp, #72	@ 0x48
 8001c1a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001c1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c22:	6018      	str	r0, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	recieve_uart_messages();
 8001c24:	f7ff fb16 	bl	8001254 <recieve_uart_messages>

	char buf[512];
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
			"T6(C): %f // T7(C): %f // State: %d // RPM: %f\r\n", temp_values[0], temp_values[1],
 8001c28:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <StartComTask+0x108>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fca3 	bl	8000578 <__aeabi_f2d>
 8001c32:	e9c7 0108 	strd	r0, r1, [r7, #32]
			"T6(C): %f // T7(C): %f // State: %d // RPM: %f\r\n", temp_values[0], temp_values[1],
 8001c36:	4b38      	ldr	r3, [pc, #224]	@ (8001d18 <StartComTask+0x108>)
 8001c38:	685b      	ldr	r3, [r3, #4]
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc9c 	bl	8000578 <__aeabi_f2d>
 8001c40:	e9c7 0106 	strd	r0, r1, [r7, #24]
			temp_values[2], temp_values[3], temp_values[4], temp_values[5], temp_values[6],
 8001c44:	4b34      	ldr	r3, [pc, #208]	@ (8001d18 <StartComTask+0x108>)
 8001c46:	689b      	ldr	r3, [r3, #8]
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc95 	bl	8000578 <__aeabi_f2d>
 8001c4e:	e9c7 0104 	strd	r0, r1, [r7, #16]
			temp_values[2], temp_values[3], temp_values[4], temp_values[5], temp_values[6],
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <StartComTask+0x108>)
 8001c54:	68db      	ldr	r3, [r3, #12]
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc8e 	bl	8000578 <__aeabi_f2d>
 8001c5c:	e9c7 0102 	strd	r0, r1, [r7, #8]
			temp_values[2], temp_values[3], temp_values[4], temp_values[5], temp_values[6],
 8001c60:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <StartComTask+0x108>)
 8001c62:	691b      	ldr	r3, [r3, #16]
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc87 	bl	8000578 <__aeabi_f2d>
 8001c6a:	e9c7 0100 	strd	r0, r1, [r7]
			temp_values[2], temp_values[3], temp_values[4], temp_values[5], temp_values[6],
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d18 <StartComTask+0x108>)
 8001c70:	695b      	ldr	r3, [r3, #20]
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc80 	bl	8000578 <__aeabi_f2d>
 8001c78:	4682      	mov	sl, r0
 8001c7a:	468b      	mov	fp, r1
			temp_values[2], temp_values[3], temp_values[4], temp_values[5], temp_values[6],
 8001c7c:	4b26      	ldr	r3, [pc, #152]	@ (8001d18 <StartComTask+0x108>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc79 	bl	8000578 <__aeabi_f2d>
 8001c86:	4680      	mov	r8, r0
 8001c88:	4689      	mov	r9, r1
			temp_values[7], heater_state[active_heater_bank], global_rpm_avg);
 8001c8a:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <StartComTask+0x108>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc72 	bl	8000578 <__aeabi_f2d>
 8001c94:	4604      	mov	r4, r0
 8001c96:	460d      	mov	r5, r1
			temp_values[7], heater_state[active_heater_bank], global_rpm_avg);
 8001c98:	4b20      	ldr	r3, [pc, #128]	@ (8001d1c <StartComTask+0x10c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <StartComTask+0x110>)
 8001c9e:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(buf, "T0(C): %f // T1(C): %f // T2(C): %f // T3(C): %f // T4(C): %f // T5(C): %f // "
 8001ca0:	461e      	mov	r6, r3
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <StartComTask+0x114>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc66 	bl	8000578 <__aeabi_f2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001cb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8001cb8:	960e      	str	r6, [sp, #56]	@ 0x38
 8001cba:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8001cbe:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001cc2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001cc6:	ed97 7b00 	vldr	d7, [r7]
 8001cca:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001cce:	ed97 7b02 	vldr	d7, [r7, #8]
 8001cd2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001cd6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001cda:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001cde:	ed97 7b06 	vldr	d7, [r7, #24]
 8001ce2:	ed8d 7b00 	vstr	d7, [sp]
 8001ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cea:	490f      	ldr	r1, [pc, #60]	@ (8001d28 <StartComTask+0x118>)
 8001cec:	f005 ff4c 	bl	8007b88 <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8001cf0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fad3 	bl	80002a0 <strlen>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	4809      	ldr	r0, [pc, #36]	@ (8001d2c <StartComTask+0x11c>)
 8001d08:	f002 ff0a 	bl	8004b20 <HAL_UART_Transmit>

    osDelay(200);
 8001d0c:	20c8      	movs	r0, #200	@ 0xc8
 8001d0e:	f003 ff78 	bl	8005c02 <osDelay>
  {
 8001d12:	bf00      	nop
 8001d14:	e786      	b.n	8001c24 <StartComTask+0x14>
 8001d16:	bf00      	nop
 8001d18:	20000690 	.word	0x20000690
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	2000063c 	.word	0x2000063c
 8001d24:	2000067c 	.word	0x2000067c
 8001d28:	0800a204 	.word	0x0800a204
 8001d2c:	200005d8 	.word	0x200005d8

08001d30 <startMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMotorTask */
void startMotorTask(void const * argument)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMotorTask */
  int i = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  float rpm_avg = 0;
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d48:	483c      	ldr	r0, [pc, #240]	@ (8001e3c <startMotorTask+0x10c>)
 8001d4a:	f001 fb23 	bl	8003394 <HAL_GPIO_WritePin>

      // To set PC7 high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d54:	4839      	ldr	r0, [pc, #228]	@ (8001e3c <startMotorTask+0x10c>)
 8001d56:	f001 fb1d 	bl	8003394 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, rx_data, 1); //global interrupt when byte recieved
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4938      	ldr	r1, [pc, #224]	@ (8001e40 <startMotorTask+0x110>)
 8001d5e:	4839      	ldr	r0, [pc, #228]	@ (8001e44 <startMotorTask+0x114>)
 8001d60:	f002 ff69 	bl	8004c36 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
	rpm_time = HAL_GetTick();
 8001d64:	f000 fc30 	bl	80025c8 <HAL_GetTick>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a37      	ldr	r2, [pc, #220]	@ (8001e48 <startMotorTask+0x118>)
 8001d6c:	6013      	str	r3, [r2, #0]
	float time_delta = ((float) rpm_time - (float) prev_rpm_time)/MS_TO_S;
 8001d6e:	4b36      	ldr	r3, [pc, #216]	@ (8001e48 <startMotorTask+0x118>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	ee07 3a90 	vmov	s15, r3
 8001d76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d7a:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <startMotorTask+0x11c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d8a:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <startMotorTask+0x120>)
 8001d8c:	ed93 7a00 	vldr	s14, [r3]
 8001d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d94:	edc7 7a02 	vstr	s15, [r7, #8]
	centrifuge_RPM[i] = ((IR_RPM_interrupt_count/time_delta)*60)/8;
 8001d98:	4b2e      	ldr	r3, [pc, #184]	@ (8001e54 <startMotorTask+0x124>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001da4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dac:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001e58 <startMotorTask+0x128>
 8001db0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001db4:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dbc:	4a27      	ldr	r2, [pc, #156]	@ (8001e5c <startMotorTask+0x12c>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
	IR_RPM_interrupt_count = 0;
 8001dc8:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <startMotorTask+0x124>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
	prev_rpm_time = rpm_time;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <startMotorTask+0x118>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <startMotorTask+0x11c>)
 8001dd4:	6013      	str	r3, [r2, #0]

	rpm_avg = 0;
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]

	for(int index = 0; index < 10; index++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e00e      	b.n	8001e00 <startMotorTask+0xd0>
	{
		rpm_avg += centrifuge_RPM[index];
 8001de2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <startMotorTask+0x12c>)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ed97 7a04 	vldr	s14, [r7, #16]
 8001df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df6:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int index = 0; index < 10; index++)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	dded      	ble.n	8001de2 <startMotorTask+0xb2>
	}

	global_rpm_avg = (rpm_avg/10);
 8001e06:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e0a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001e0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <startMotorTask+0x130>)
 8001e14:	edc3 7a00 	vstr	s15, [r3]

	i = (i+1) % 10;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <startMotorTask+0x134>)
 8001e1e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e22:	1099      	asrs	r1, r3, #2
 8001e24:	17d3      	asrs	r3, r2, #31
 8001e26:	1ac9      	subs	r1, r1, r3
 8001e28:	460b      	mov	r3, r1
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]

    osDelay(100);
 8001e34:	2064      	movs	r0, #100	@ 0x64
 8001e36:	f003 fee4 	bl	8005c02 <osDelay>
  {
 8001e3a:	e793      	b.n	8001d64 <startMotorTask+0x34>
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	200006b4 	.word	0x200006b4
 8001e44:	200005d8 	.word	0x200005d8
 8001e48:	20000674 	.word	0x20000674
 8001e4c:	20000678 	.word	0x20000678
 8001e50:	20000004 	.word	0x20000004
 8001e54:	20000648 	.word	0x20000648
 8001e58:	42700000 	.word	0x42700000
 8001e5c:	2000064c 	.word	0x2000064c
 8001e60:	2000067c 	.word	0x2000067c
 8001e64:	66666667 	.word	0x66666667

08001e68 <StartMessageHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessageHandlerTask */
void StartMessageHandlerTask(void const * argument)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMessageHandlerTask */
  /* Infinite loop */
  for(;;)
  {
	handle_uart_messages();
 8001e70:	f7ff f9f7 	bl	8001262 <handle_uart_messages>

    osDelay(100);
 8001e74:	2064      	movs	r0, #100	@ 0x64
 8001e76:	f003 fec4 	bl	8005c02 <osDelay>
	handle_uart_messages();
 8001e7a:	bf00      	nop
 8001e7c:	e7f8      	b.n	8001e70 <StartMessageHandlerTask+0x8>
	...

08001e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e92:	f000 fb85 	bl	80025a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40010000 	.word	0x40010000

08001ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b090      	sub	sp, #64	@ 0x40
 8001ea8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eaa:	b672      	cpsid	i
}
 8001eac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char buf[64];
  sprintf(buf, "BRUH MOMENT");
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4908      	ldr	r1, [pc, #32]	@ (8001ed4 <Error_Handler+0x30>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f005 fe68 	bl	8007b88 <siprintf>

  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe f9f0 	bl	80002a0 <strlen>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4639      	mov	r1, r7
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	4803      	ldr	r0, [pc, #12]	@ (8001ed8 <Error_Handler+0x34>)
 8001ecc:	f002 fe28 	bl	8004b20 <HAL_UART_Transmit>
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <Error_Handler+0x2c>
 8001ed4:	0800a284 	.word	0x0800a284
 8001ed8:	200005d8 	.word	0x200005d8

08001edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_MspInit+0x54>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	4a11      	ldr	r2, [pc, #68]	@ (8001f30 <HAL_MspInit+0x54>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <HAL_MspInit+0x54>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_MspInit+0x54>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <HAL_MspInit+0x54>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0e:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <HAL_MspInit+0x54>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	f06f 0001 	mvn.w	r0, #1
 8001f22:	f000 fff7 	bl	8002f14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	@ 0x30
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a31      	ldr	r2, [pc, #196]	@ (8002018 <HAL_ADC_MspInit+0xe4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d15b      	bne.n	800200e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	4b30      	ldr	r3, [pc, #192]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f66:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	4b29      	ldr	r3, [pc, #164]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	4a28      	ldr	r2, [pc, #160]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b22      	ldr	r3, [pc, #136]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a21      	ldr	r2, [pc, #132]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_ADC_MspInit+0xe8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fc6:	230f      	movs	r3, #15
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4811      	ldr	r0, [pc, #68]	@ (8002020 <HAL_ADC_MspInit+0xec>)
 8001fda:	f001 f857 	bl	800308c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001fde:	2313      	movs	r3, #19
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	@ (8002024 <HAL_ADC_MspInit+0xf0>)
 8001ff2:	f001 f84b 	bl	800308c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	4807      	ldr	r0, [pc, #28]	@ (8002028 <HAL_ADC_MspInit+0xf4>)
 800200a:	f001 f83f 	bl	800308c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3730      	adds	r7, #48	@ 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40012000 	.word	0x40012000
 800201c:	40023800 	.word	0x40023800
 8002020:	40020800 	.word	0x40020800
 8002024:	40020000 	.word	0x40020000
 8002028:	40020400 	.word	0x40020400

0800202c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800203c:	d10e      	bne.n	800205c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <HAL_TIM_PWM_MspInit+0x64>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <HAL_TIM_PWM_MspInit+0x64>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <HAL_TIM_PWM_MspInit+0x64>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800205a:	e012      	b.n	8002082 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <HAL_TIM_PWM_MspInit+0x68>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d10d      	bne.n	8002082 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_TIM_PWM_MspInit+0x64>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	4a08      	ldr	r2, [pc, #32]	@ (8002090 <HAL_TIM_PWM_MspInit+0x64>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	6413      	str	r3, [r2, #64]	@ 0x40
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_TIM_PWM_MspInit+0x64>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40000800 	.word	0x40000800

08002098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b8:	d11f      	bne.n	80020fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <HAL_TIM_MspPostInit+0xb0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4a21      	ldr	r2, [pc, #132]	@ (8002148 <HAL_TIM_MspPostInit+0xb0>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <HAL_TIM_MspPostInit+0xb0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020e8:	2301      	movs	r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4619      	mov	r1, r3
 80020f2:	4816      	ldr	r0, [pc, #88]	@ (800214c <HAL_TIM_MspPostInit+0xb4>)
 80020f4:	f000 ffca 	bl	800308c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020f8:	e022      	b.n	8002140 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <HAL_TIM_MspPostInit+0xb8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d11d      	bne.n	8002140 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4b0f      	ldr	r3, [pc, #60]	@ (8002148 <HAL_TIM_MspPostInit+0xb0>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	4a0e      	ldr	r2, [pc, #56]	@ (8002148 <HAL_TIM_MspPostInit+0xb0>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	6313      	str	r3, [r2, #48]	@ 0x30
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <HAL_TIM_MspPostInit+0xb0>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002120:	2340      	movs	r3, #64	@ 0x40
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002130:	2302      	movs	r3, #2
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	4806      	ldr	r0, [pc, #24]	@ (8002154 <HAL_TIM_MspPostInit+0xbc>)
 800213c:	f000 ffa6 	bl	800308c <HAL_GPIO_Init>
}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	@ 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000
 8002150:	40000800 	.word	0x40000800
 8002154:	40020400 	.word	0x40020400

08002158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	@ 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <HAL_UART_MspInit+0x94>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d133      	bne.n	80021e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <HAL_UART_MspInit+0x98>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4a1b      	ldr	r2, [pc, #108]	@ (80021f0 <HAL_UART_MspInit+0x98>)
 8002184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002188:	6413      	str	r3, [r2, #64]	@ 0x40
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_UART_MspInit+0x98>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_UART_MspInit+0x98>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a14      	ldr	r2, [pc, #80]	@ (80021f0 <HAL_UART_MspInit+0x98>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_UART_MspInit+0x98>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021b2:	230c      	movs	r3, #12
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c2:	2307      	movs	r3, #7
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <HAL_UART_MspInit+0x9c>)
 80021ce:	f000 ff5d 	bl	800308c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2105      	movs	r1, #5
 80021d6:	2026      	movs	r0, #38	@ 0x26
 80021d8:	f000 fe9c 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021dc:	2026      	movs	r0, #38	@ 0x26
 80021de:	f000 feb5 	bl	8002f4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	@ 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40004400 	.word	0x40004400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	@ 0x30
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	4b2e      	ldr	r3, [pc, #184]	@ (80022c8 <HAL_InitTick+0xd0>)
 800220e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002210:	4a2d      	ldr	r2, [pc, #180]	@ (80022c8 <HAL_InitTick+0xd0>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6453      	str	r3, [r2, #68]	@ 0x44
 8002218:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <HAL_InitTick+0xd0>)
 800221a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002224:	f107 020c 	add.w	r2, r7, #12
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f001 fd3a 	bl	8003ca8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002234:	f001 fd24 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8002238:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800223a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223c:	4a23      	ldr	r2, [pc, #140]	@ (80022cc <HAL_InitTick+0xd4>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0c9b      	lsrs	r3, r3, #18
 8002244:	3b01      	subs	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002248:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <HAL_InitTick+0xd8>)
 800224a:	4a22      	ldr	r2, [pc, #136]	@ (80022d4 <HAL_InitTick+0xdc>)
 800224c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_InitTick+0xd8>)
 8002250:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002254:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002256:	4a1e      	ldr	r2, [pc, #120]	@ (80022d0 <HAL_InitTick+0xd8>)
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800225c:	4b1c      	ldr	r3, [pc, #112]	@ (80022d0 <HAL_InitTick+0xd8>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_InitTick+0xd8>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_InitTick+0xd8>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800226e:	4818      	ldr	r0, [pc, #96]	@ (80022d0 <HAL_InitTick+0xd8>)
 8002270:	f001 fd4c 	bl	8003d0c <HAL_TIM_Base_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800227a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11b      	bne.n	80022ba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002282:	4813      	ldr	r0, [pc, #76]	@ (80022d0 <HAL_InitTick+0xd8>)
 8002284:	f001 fd9c 	bl	8003dc0 <HAL_TIM_Base_Start_IT>
 8002288:	4603      	mov	r3, r0
 800228a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800228e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002292:	2b00      	cmp	r3, #0
 8002294:	d111      	bne.n	80022ba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002296:	2019      	movs	r0, #25
 8002298:	f000 fe58 	bl	8002f4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b0f      	cmp	r3, #15
 80022a0:	d808      	bhi.n	80022b4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80022a2:	2200      	movs	r2, #0
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	2019      	movs	r0, #25
 80022a8:	f000 fe34 	bl	8002f14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <HAL_InitTick+0xe0>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e002      	b.n	80022ba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3730      	adds	r7, #48	@ 0x30
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	431bde83 	.word	0x431bde83
 80022d0:	20000724 	.word	0x20000724
 80022d4:	40010000 	.word	0x40010000
 80022d8:	20000060 	.word	0x20000060

080022dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <NMI_Handler+0x4>

080022e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <MemManage_Handler+0x4>

080022f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <BusFault_Handler+0x4>

080022fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <UsageFault_Handler+0x4>

08002304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Input_Interrupt_Pin);
 8002316:	2080      	movs	r0, #128	@ 0x80
 8002318:	f001 f856 	bl	80033c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002324:	4802      	ldr	r0, [pc, #8]	@ (8002330 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002326:	f001 ff11 	bl	800414c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000724 	.word	0x20000724

08002334 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002338:	4802      	ldr	r0, [pc, #8]	@ (8002344 <USART2_IRQHandler+0x10>)
 800233a:	f002 fca1 	bl	8004c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200005d8 	.word	0x200005d8

08002348 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Interrupt_Pin);
 800234c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002350:	f001 f83a 	bl	80033c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return 1;
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_kill>:

int _kill(int pid, int sig)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002372:	f005 fd15 	bl	8007da0 <__errno>
 8002376:	4603      	mov	r3, r0
 8002378:	2216      	movs	r2, #22
 800237a:	601a      	str	r2, [r3, #0]
  return -1;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <_exit>:

void _exit (int status)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ffe7 	bl	8002368 <_kill>
  while (1) {}    /* Make sure we hang here */
 800239a:	bf00      	nop
 800239c:	e7fd      	b.n	800239a <_exit+0x12>

0800239e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e00a      	b.n	80023c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023b0:	f3af 8000 	nop.w
 80023b4:	4601      	mov	r1, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	60ba      	str	r2, [r7, #8]
 80023bc:	b2ca      	uxtb	r2, r1
 80023be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3301      	adds	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dbf0      	blt.n	80023b0 <_read+0x12>
  }

  return len;
 80023ce:	687b      	ldr	r3, [r7, #4]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e009      	b.n	80023fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	60ba      	str	r2, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3301      	adds	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	dbf1      	blt.n	80023ea <_write+0x12>
  }
  return len;
 8002406:	687b      	ldr	r3, [r7, #4]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_close>:

int _close(int file)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002438:	605a      	str	r2, [r3, #4]
  return 0;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_isatty>:

int _isatty(int file)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002480:	4a14      	ldr	r2, [pc, #80]	@ (80024d4 <_sbrk+0x5c>)
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <_sbrk+0x60>)
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <_sbrk+0x64>)
 8002496:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <_sbrk+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a8:	f005 fc7a 	bl	8007da0 <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	220c      	movs	r2, #12
 80024b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e009      	b.n	80024cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024be:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <_sbrk+0x64>)
 80024c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20018000 	.word	0x20018000
 80024d8:	00000400 	.word	0x00000400
 80024dc:	2000076c 	.word	0x2000076c
 80024e0:	20004618 	.word	0x20004618

080024e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <SystemInit+0x20>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <SystemInit+0x20>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800250c:	f7ff ffea 	bl	80024e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	@ (8002548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	@ (8002554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002536:	f005 fc39 	bl	8007dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253a:	f7fe fe99 	bl	8001270 <main>
  bx  lr    
 800253e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002540:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002548:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 800254c:	0800a630 	.word	0x0800a630
  ldr r2, =_sbss
 8002550:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002554:	20004614 	.word	0x20004614

08002558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC_IRQHandler>
	...

0800255c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002560:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <HAL_Init+0x40>)
 8002566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800256a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_Init+0x40>)
 8002572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_Init+0x40>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002584:	2003      	movs	r0, #3
 8002586:	f000 fcba 	bl	8002efe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258a:	200f      	movs	r0, #15
 800258c:	f7ff fe34 	bl	80021f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002590:	f7ff fca4 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00

080025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_IncTick+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_IncTick+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <HAL_IncTick+0x24>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000064 	.word	0x20000064
 80025c4:	20000770 	.word	0x20000770

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000770 	.word	0x20000770

080025e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e033      	b.n	800265e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fc98 	bl	8001f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002626:	f023 0302 	bic.w	r3, r3, #2
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 faba 	bl	8002bac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40
 800264e:	e001      	b.n	8002654 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Start+0x1a>
 800267e:	2302      	movs	r3, #2
 8002680:	e097      	b.n	80027b2 <HAL_ADC_Start+0x14a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d018      	beq.n	80026ca <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026a8:	4b45      	ldr	r3, [pc, #276]	@ (80027c0 <HAL_ADC_Start+0x158>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a45      	ldr	r2, [pc, #276]	@ (80027c4 <HAL_ADC_Start+0x15c>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9a      	lsrs	r2, r3, #18
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026bc:	e002      	b.n	80026c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f9      	bne.n	80026be <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d15f      	bne.n	8002798 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002702:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002716:	d106      	bne.n	8002726 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271c:	f023 0206 	bic.w	r2, r3, #6
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	645a      	str	r2, [r3, #68]	@ 0x44
 8002724:	e002      	b.n	800272c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002734:	4b24      	ldr	r3, [pc, #144]	@ (80027c8 <HAL_ADC_Start+0x160>)
 8002736:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002740:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d129      	bne.n	80027b0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	e020      	b.n	80027b0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a16      	ldr	r2, [pc, #88]	@ (80027cc <HAL_ADC_Start+0x164>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d11b      	bne.n	80027b0 <HAL_ADC_Start+0x148>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d114      	bne.n	80027b0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	e00b      	b.n	80027b0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	f043 0210 	orr.w	r2, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	2000005c 	.word	0x2000005c
 80027c4:	431bde83 	.word	0x431bde83
 80027c8:	40012300 	.word	0x40012300
 80027cc:	40012000 	.word	0x40012000

080027d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Stop+0x16>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e021      	b.n	800282a <HAL_ADC_Stop+0x5a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002852:	d113      	bne.n	800287c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800285e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002862:	d10b      	bne.n	800287c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e063      	b.n	8002944 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800287c:	f7ff fea4 	bl	80025c8 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002882:	e021      	b.n	80028c8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d01d      	beq.n	80028c8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x6c>
 8002892:	f7ff fe99 	bl	80025c8 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d212      	bcs.n	80028c8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d00b      	beq.n	80028c8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e03d      	b.n	8002944 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d1d6      	bne.n	8002884 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0212 	mvn.w	r2, #18
 80028de:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d123      	bne.n	8002942 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d11f      	bne.n	8002942 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	d111      	bne.n	8002942 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e105      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x228>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b09      	cmp	r3, #9
 8002992:	d925      	bls.n	80029e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68d9      	ldr	r1, [r3, #12]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	3b1e      	subs	r3, #30
 80029aa:	2207      	movs	r2, #7
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43da      	mvns	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	400a      	ands	r2, r1
 80029b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68d9      	ldr	r1, [r3, #12]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	4603      	mov	r3, r0
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4403      	add	r3, r0
 80029d2:	3b1e      	subs	r3, #30
 80029d4:	409a      	lsls	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	e022      	b.n	8002a26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6919      	ldr	r1, [r3, #16]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	2207      	movs	r2, #7
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	400a      	ands	r2, r1
 8002a02:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6919      	ldr	r1, [r3, #16]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	4618      	mov	r0, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4403      	add	r3, r0
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d824      	bhi.n	8002a78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b05      	subs	r3, #5
 8002a40:	221f      	movs	r2, #31
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	3b05      	subs	r3, #5
 8002a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a76:	e04c      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	d824      	bhi.n	8002aca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b23      	subs	r3, #35	@ 0x23
 8002a92:	221f      	movs	r2, #31
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b23      	subs	r3, #35	@ 0x23
 8002abc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ac8:	e023      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	3b41      	subs	r3, #65	@ 0x41
 8002adc:	221f      	movs	r2, #31
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	400a      	ands	r2, r1
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	4618      	mov	r0, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3b41      	subs	r3, #65	@ 0x41
 8002b06:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b12:	4b22      	ldr	r3, [pc, #136]	@ (8002b9c <HAL_ADC_ConfigChannel+0x234>)
 8002b14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a21      	ldr	r2, [pc, #132]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x238>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d109      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1cc>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b12      	cmp	r3, #18
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a19      	ldr	r2, [pc, #100]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x238>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d123      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x21e>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d003      	beq.n	8002b4e <HAL_ADC_ConfigChannel+0x1e6>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b11      	cmp	r3, #17
 8002b4c:	d11b      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d111      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x23c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a10      	ldr	r2, [pc, #64]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x240>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	0c9a      	lsrs	r2, r3, #18
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b78:	e002      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40012300 	.word	0x40012300
 8002ba0:	40012000 	.word	0x40012000
 8002ba4:	2000005c 	.word	0x2000005c
 8002ba8:	431bde83 	.word	0x431bde83

08002bac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bb4:	4b79      	ldr	r3, [pc, #484]	@ (8002d9c <ADC_Init+0x1f0>)
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002be0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	021a      	lsls	r2, r3, #8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	4a58      	ldr	r2, [pc, #352]	@ (8002da0 <ADC_Init+0x1f4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d022      	beq.n	8002c8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6899      	ldr	r1, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6899      	ldr	r1, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	e00f      	b.n	8002caa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ca8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0202 	bic.w	r2, r2, #2
 8002cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6899      	ldr	r1, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7e1b      	ldrb	r3, [r3, #24]
 8002cc4:	005a      	lsls	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01b      	beq.n	8002d10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ce6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	3b01      	subs	r3, #1
 8002d04:	035a      	lsls	r2, r3, #13
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	e007      	b.n	8002d20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	051a      	lsls	r2, r3, #20
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6899      	ldr	r1, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d62:	025a      	lsls	r2, r3, #9
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6899      	ldr	r1, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	029a      	lsls	r2, r3, #10
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40012300 	.word	0x40012300
 8002da0:	0f000001 	.word	0x0f000001

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	@ (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60d3      	str	r3, [r2, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	@ (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	@ (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	@ (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	@ 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	@ 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff4c 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f26:	f7ff ff61 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	6978      	ldr	r0, [r7, #20]
 8002f32:	f7ff ffb1 	bl	8002e98 <NVIC_EncodePriority>
 8002f36:	4602      	mov	r2, r0
 8002f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff80 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f44:	bf00      	nop
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff54 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f76:	f7ff fb27 	bl	80025c8 <HAL_GetTick>
 8002f7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d008      	beq.n	8002f9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2280      	movs	r2, #128	@ 0x80
 8002f8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e052      	b.n	8003040 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0216 	bic.w	r2, r2, #22
 8002fa8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_DMA_Abort+0x62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0208 	bic.w	r2, r2, #8
 8002fd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fea:	e013      	b.n	8003014 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fec:	f7ff faec 	bl	80025c8 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d90c      	bls.n	8003014 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2203      	movs	r2, #3
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e015      	b.n	8003040 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e4      	bne.n	8002fec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	223f      	movs	r2, #63	@ 0x3f
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d004      	beq.n	8003066 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2280      	movs	r2, #128	@ 0x80
 8003060:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00c      	b.n	8003080 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2205      	movs	r2, #5
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	@ 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	e159      	b.n	800335c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030a8:	2201      	movs	r2, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	f040 8148 	bne.w	8003356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d005      	beq.n	80030de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d130      	bne.n	8003140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003114:	2201      	movs	r2, #1
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 0201 	and.w	r2, r3, #1
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	2b03      	cmp	r3, #3
 800314a:	d017      	beq.n	800317c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d123      	bne.n	80031d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	08da      	lsrs	r2, r3, #3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3208      	adds	r2, #8
 8003190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	220f      	movs	r2, #15
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	08da      	lsrs	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	69b9      	ldr	r1, [r7, #24]
 80031cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0203 	and.w	r2, r3, #3
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80a2 	beq.w	8003356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	4b57      	ldr	r3, [pc, #348]	@ (8003374 <HAL_GPIO_Init+0x2e8>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	4a56      	ldr	r2, [pc, #344]	@ (8003374 <HAL_GPIO_Init+0x2e8>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003220:	6453      	str	r3, [r2, #68]	@ 0x44
 8003222:	4b54      	ldr	r3, [pc, #336]	@ (8003374 <HAL_GPIO_Init+0x2e8>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800322e:	4a52      	ldr	r2, [pc, #328]	@ (8003378 <HAL_GPIO_Init+0x2ec>)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a49      	ldr	r2, [pc, #292]	@ (800337c <HAL_GPIO_Init+0x2f0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d019      	beq.n	800328e <HAL_GPIO_Init+0x202>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a48      	ldr	r2, [pc, #288]	@ (8003380 <HAL_GPIO_Init+0x2f4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0x1fe>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a47      	ldr	r2, [pc, #284]	@ (8003384 <HAL_GPIO_Init+0x2f8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00d      	beq.n	8003286 <HAL_GPIO_Init+0x1fa>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a46      	ldr	r2, [pc, #280]	@ (8003388 <HAL_GPIO_Init+0x2fc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x1f6>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a45      	ldr	r2, [pc, #276]	@ (800338c <HAL_GPIO_Init+0x300>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_GPIO_Init+0x1f2>
 800327a:	2304      	movs	r3, #4
 800327c:	e008      	b.n	8003290 <HAL_GPIO_Init+0x204>
 800327e:	2307      	movs	r3, #7
 8003280:	e006      	b.n	8003290 <HAL_GPIO_Init+0x204>
 8003282:	2303      	movs	r3, #3
 8003284:	e004      	b.n	8003290 <HAL_GPIO_Init+0x204>
 8003286:	2302      	movs	r3, #2
 8003288:	e002      	b.n	8003290 <HAL_GPIO_Init+0x204>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_GPIO_Init+0x204>
 800328e:	2300      	movs	r3, #0
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f002 0203 	and.w	r2, r2, #3
 8003296:	0092      	lsls	r2, r2, #2
 8003298:	4093      	lsls	r3, r2
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a0:	4935      	ldr	r1, [pc, #212]	@ (8003378 <HAL_GPIO_Init+0x2ec>)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	3302      	adds	r3, #2
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ae:	4b38      	ldr	r3, [pc, #224]	@ (8003390 <HAL_GPIO_Init+0x304>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003390 <HAL_GPIO_Init+0x304>)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003390 <HAL_GPIO_Init+0x304>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032fc:	4a24      	ldr	r2, [pc, #144]	@ (8003390 <HAL_GPIO_Init+0x304>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003302:	4b23      	ldr	r3, [pc, #140]	@ (8003390 <HAL_GPIO_Init+0x304>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003326:	4a1a      	ldr	r2, [pc, #104]	@ (8003390 <HAL_GPIO_Init+0x304>)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800332c:	4b18      	ldr	r3, [pc, #96]	@ (8003390 <HAL_GPIO_Init+0x304>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003350:	4a0f      	ldr	r2, [pc, #60]	@ (8003390 <HAL_GPIO_Init+0x304>)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3301      	adds	r3, #1
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b0f      	cmp	r3, #15
 8003360:	f67f aea2 	bls.w	80030a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3724      	adds	r7, #36	@ 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800
 8003378:	40013800 	.word	0x40013800
 800337c:	40020000 	.word	0x40020000
 8003380:	40020400 	.word	0x40020400
 8003384:	40020800 	.word	0x40020800
 8003388:	40020c00 	.word	0x40020c00
 800338c:	40021000 	.word	0x40021000
 8003390:	40013c00 	.word	0x40013c00

08003394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
 80033a0:	4613      	mov	r3, r2
 80033a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a4:	787b      	ldrb	r3, [r7, #1]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033b0:	e003      	b.n	80033ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	041a      	lsls	r2, r3, #16
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	619a      	str	r2, [r3, #24]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033d2:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d006      	beq.n	80033ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033de:	4a05      	ldr	r2, [pc, #20]	@ (80033f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fee6 	bl	80011b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40013c00 	.word	0x40013c00

080033f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e267      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d075      	beq.n	8003502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003416:	4b88      	ldr	r3, [pc, #544]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b04      	cmp	r3, #4
 8003420:	d00c      	beq.n	800343c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003422:	4b85      	ldr	r3, [pc, #532]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800342a:	2b08      	cmp	r3, #8
 800342c:	d112      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342e:	4b82      	ldr	r3, [pc, #520]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343a:	d10b      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	4b7e      	ldr	r3, [pc, #504]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05b      	beq.n	8003500 <HAL_RCC_OscConfig+0x108>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d157      	bne.n	8003500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e242      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345c:	d106      	bne.n	800346c <HAL_RCC_OscConfig+0x74>
 800345e:	4b76      	ldr	r3, [pc, #472]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a75      	ldr	r2, [pc, #468]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01d      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x98>
 8003476:	4b70      	ldr	r3, [pc, #448]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a6f      	ldr	r2, [pc, #444]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b6d      	ldr	r3, [pc, #436]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6c      	ldr	r2, [pc, #432]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 8003490:	4b69      	ldr	r3, [pc, #420]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a68      	ldr	r2, [pc, #416]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b66      	ldr	r3, [pc, #408]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a65      	ldr	r2, [pc, #404]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7ff f88a 	bl	80025c8 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7ff f886 	bl	80025c8 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e207      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0xc0>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7ff f876 	bl	80025c8 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e0:	f7ff f872 	bl	80025c8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	@ 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1f3      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	4b51      	ldr	r3, [pc, #324]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0xe8>
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d063      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350e:	4b4a      	ldr	r3, [pc, #296]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351a:	4b47      	ldr	r3, [pc, #284]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003522:	2b08      	cmp	r3, #8
 8003524:	d11c      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003526:	4b44      	ldr	r3, [pc, #272]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d116      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	4b41      	ldr	r3, [pc, #260]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e1c7      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b3b      	ldr	r3, [pc, #236]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4937      	ldr	r1, [pc, #220]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	e03a      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003568:	4b34      	ldr	r3, [pc, #208]	@ (800363c <HAL_RCC_OscConfig+0x244>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7ff f82b 	bl	80025c8 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003576:	f7ff f827 	bl	80025c8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1a8      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	4b2b      	ldr	r3, [pc, #172]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b28      	ldr	r3, [pc, #160]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4925      	ldr	r1, [pc, #148]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035aa:	4b24      	ldr	r3, [pc, #144]	@ (800363c <HAL_RCC_OscConfig+0x244>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7ff f80a 	bl	80025c8 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b8:	f7ff f806 	bl	80025c8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e187      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d036      	beq.n	8003650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b15      	ldr	r3, [pc, #84]	@ (8003640 <HAL_RCC_OscConfig+0x248>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe ffea 	bl	80025c8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fe ffe6 	bl	80025c8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e167      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <HAL_RCC_OscConfig+0x240>)
 800360c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x200>
 8003616:	e01b      	b.n	8003650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003618:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <HAL_RCC_OscConfig+0x248>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe ffd3 	bl	80025c8 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	e00e      	b.n	8003644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003626:	f7fe ffcf 	bl	80025c8 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d907      	bls.n	8003644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e150      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
 8003638:	40023800 	.word	0x40023800
 800363c:	42470000 	.word	0x42470000
 8003640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003644:	4b88      	ldr	r3, [pc, #544]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ea      	bne.n	8003626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8097 	beq.w	800378c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003662:	4b81      	ldr	r3, [pc, #516]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	4b7d      	ldr	r3, [pc, #500]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	4a7c      	ldr	r2, [pc, #496]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367c:	6413      	str	r3, [r2, #64]	@ 0x40
 800367e:	4b7a      	ldr	r3, [pc, #488]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	4b77      	ldr	r3, [pc, #476]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d118      	bne.n	80036cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369a:	4b74      	ldr	r3, [pc, #464]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a73      	ldr	r2, [pc, #460]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a6:	f7fe ff8f 	bl	80025c8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ae:	f7fe ff8b 	bl	80025c8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e10c      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	4b6a      	ldr	r3, [pc, #424]	@ (800386c <HAL_RCC_OscConfig+0x474>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x2ea>
 80036d4:	4b64      	ldr	r3, [pc, #400]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d8:	4a63      	ldr	r2, [pc, #396]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e0:	e01c      	b.n	800371c <HAL_RCC_OscConfig+0x324>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x30c>
 80036ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6713      	str	r3, [r2, #112]	@ 0x70
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0x324>
 8003704:	4b58      	ldr	r3, [pc, #352]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003708:	4a57      	ldr	r2, [pc, #348]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003710:	4b55      	ldr	r3, [pc, #340]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003714:	4a54      	ldr	r2, [pc, #336]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003716:	f023 0304 	bic.w	r3, r3, #4
 800371a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d015      	beq.n	8003750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe ff50 	bl	80025c8 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372a:	e00a      	b.n	8003742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fe ff4c 	bl	80025c8 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0cb      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003742:	4b49      	ldr	r3, [pc, #292]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0ee      	beq.n	800372c <HAL_RCC_OscConfig+0x334>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003750:	f7fe ff3a 	bl	80025c8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fe ff36 	bl	80025c8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0b5      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376e:	4b3e      	ldr	r3, [pc, #248]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ee      	bne.n	8003758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003780:	4b39      	ldr	r3, [pc, #228]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	4a38      	ldr	r2, [pc, #224]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800378a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80a1 	beq.w	80038d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003796:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d05c      	beq.n	800385c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d141      	bne.n	800382e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b31      	ldr	r3, [pc, #196]	@ (8003870 <HAL_RCC_OscConfig+0x478>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe ff0a 	bl	80025c8 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe ff06 	bl	80025c8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e087      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	4b27      	ldr	r3, [pc, #156]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	019b      	lsls	r3, r3, #6
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	3b01      	subs	r3, #1
 80037f0:	041b      	lsls	r3, r3, #16
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	061b      	lsls	r3, r3, #24
 80037fa:	491b      	ldr	r1, [pc, #108]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <HAL_RCC_OscConfig+0x478>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7fe fedf 	bl	80025c8 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380e:	f7fe fedb 	bl	80025c8 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e05c      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x416>
 800382c:	e054      	b.n	80038d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <HAL_RCC_OscConfig+0x478>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fe fec8 	bl	80025c8 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383c:	f7fe fec4 	bl	80025c8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e045      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_RCC_OscConfig+0x470>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x444>
 800385a:	e03d      	b.n	80038d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e038      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
 8003868:	40023800 	.word	0x40023800
 800386c:	40007000 	.word	0x40007000
 8003870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003874:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <HAL_RCC_OscConfig+0x4ec>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d028      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d121      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d11a      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d111      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	3b01      	subs	r3, #1
 80038be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800

080038e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0cc      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038fc:	4b68      	ldr	r3, [pc, #416]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d90c      	bls.n	8003924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b65      	ldr	r3, [pc, #404]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b63      	ldr	r3, [pc, #396]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800393c:	4b59      	ldr	r3, [pc, #356]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a58      	ldr	r2, [pc, #352]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003954:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a52      	ldr	r2, [pc, #328]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800395e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b50      	ldr	r3, [pc, #320]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	494d      	ldr	r1, [pc, #308]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d044      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b47      	ldr	r3, [pc, #284]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d119      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e067      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c6:	4b37      	ldr	r3, [pc, #220]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 0203 	bic.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4934      	ldr	r1, [pc, #208]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d8:	f7fe fdf6 	bl	80025c8 <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e0:	f7fe fdf2 	bl	80025c8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e04f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 020c 	and.w	r2, r3, #12
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1eb      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a08:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d20c      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b22      	ldr	r3, [pc, #136]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4916      	ldr	r1, [pc, #88]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	490e      	ldr	r1, [pc, #56]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6e:	f000 f821 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4602      	mov	r2, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	490a      	ldr	r1, [pc, #40]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	5ccb      	ldrb	r3, [r1, r3]
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a09      	ldr	r2, [pc, #36]	@ (8003aac <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fbb2 	bl	80021f8 <HAL_InitTick>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023c00 	.word	0x40023c00
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	0800a298 	.word	0x0800a298
 8003aac:	2000005c 	.word	0x2000005c
 8003ab0:	20000060 	.word	0x20000060

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab8:	b090      	sub	sp, #64	@ 0x40
 8003aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003acc:	4b59      	ldr	r3, [pc, #356]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d00d      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	f200 80a1 	bhi.w	8003c20 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae6:	e09b      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b53      	ldr	r3, [pc, #332]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aea:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003aec:	e09b      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aee:	4b53      	ldr	r3, [pc, #332]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003af0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003af2:	e098      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af4:	4b4f      	ldr	r3, [pc, #316]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003afc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afe:	4b4d      	ldr	r3, [pc, #308]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d028      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	099b      	lsrs	r3, r3, #6
 8003b10:	2200      	movs	r2, #0
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4b47      	ldr	r3, [pc, #284]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b20:	fb03 f201 	mul.w	r2, r3, r1
 8003b24:	2300      	movs	r3, #0
 8003b26:	fb00 f303 	mul.w	r3, r0, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4a43      	ldr	r2, [pc, #268]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b2e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b34:	460a      	mov	r2, r1
 8003b36:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b3a:	4413      	add	r3, r2
 8003b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b40:	2200      	movs	r2, #0
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	61fa      	str	r2, [r7, #28]
 8003b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b4e:	f7fd f893 	bl	8000c78 <__aeabi_uldivmod>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4613      	mov	r3, r2
 8003b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b5a:	e053      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5c:	4b35      	ldr	r3, [pc, #212]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	2200      	movs	r2, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	617a      	str	r2, [r7, #20]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b6e:	f04f 0b00 	mov.w	fp, #0
 8003b72:	4652      	mov	r2, sl
 8003b74:	465b      	mov	r3, fp
 8003b76:	f04f 0000 	mov.w	r0, #0
 8003b7a:	f04f 0100 	mov.w	r1, #0
 8003b7e:	0159      	lsls	r1, r3, #5
 8003b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b84:	0150      	lsls	r0, r2, #5
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b8e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ba2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ba6:	ebb2 0408 	subs.w	r4, r2, r8
 8003baa:	eb63 0509 	sbc.w	r5, r3, r9
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	00eb      	lsls	r3, r5, #3
 8003bb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bbc:	00e2      	lsls	r2, r4, #3
 8003bbe:	4614      	mov	r4, r2
 8003bc0:	461d      	mov	r5, r3
 8003bc2:	eb14 030a 	adds.w	r3, r4, sl
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	eb45 030b 	adc.w	r3, r5, fp
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	028b      	lsls	r3, r1, #10
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be4:	4621      	mov	r1, r4
 8003be6:	028a      	lsls	r2, r1, #10
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	2200      	movs	r2, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	60fa      	str	r2, [r7, #12]
 8003bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf8:	f7fd f83e 	bl	8000c78 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003c14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c1e:	e002      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3740      	adds	r7, #64	@ 0x40
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	017d7840 	.word	0x017d7840

08003c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b03      	ldr	r3, [pc, #12]	@ (8003c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	2000005c 	.word	0x2000005c

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c5c:	f7ff fff0 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	@ (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	0800a2a8 	.word	0x0800a2a8

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c84:	f7ff ffdc 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0b5b      	lsrs	r3, r3, #13
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	0800a2a8 	.word	0x0800a2a8

08003ca8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cb8:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <HAL_RCC_GetClockConfig+0x5c>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0203 	and.w	r2, r3, #3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <HAL_RCC_GetClockConfig+0x5c>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <HAL_RCC_GetClockConfig+0x5c>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <HAL_RCC_GetClockConfig+0x60>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0207 	and.w	r2, r3, #7
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	601a      	str	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40023c00 	.word	0x40023c00

08003d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e041      	b.n	8003da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f839 	bl	8003daa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 fbd8 	bl	8004500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d001      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e044      	b.n	8003e62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e70 <HAL_TIM_Base_Start_IT+0xb0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d018      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e02:	d013      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1a      	ldr	r2, [pc, #104]	@ (8003e74 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a19      	ldr	r2, [pc, #100]	@ (8003e78 <HAL_TIM_Base_Start_IT+0xb8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <HAL_TIM_Base_Start_IT+0xbc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x6c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a16      	ldr	r2, [pc, #88]	@ (8003e80 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d010      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4e:	e007      	b.n	8003e60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40014000 	.word	0x40014000

08003e84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e041      	b.n	8003f1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fe f8be 	bl	800202c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f000 fb1c 	bl	8004500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d109      	bne.n	8003f48 <HAL_TIM_PWM_Start+0x24>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e022      	b.n	8003f8e <HAL_TIM_PWM_Start+0x6a>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d109      	bne.n	8003f62 <HAL_TIM_PWM_Start+0x3e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	bf14      	ite	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	2300      	moveq	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	e015      	b.n	8003f8e <HAL_TIM_PWM_Start+0x6a>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d109      	bne.n	8003f7c <HAL_TIM_PWM_Start+0x58>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e008      	b.n	8003f8e <HAL_TIM_PWM_Start+0x6a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	2300      	moveq	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e068      	b.n	8004068 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0x82>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fa4:	e013      	b.n	8003fce <HAL_TIM_PWM_Start+0xaa>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0x92>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb4:	e00b      	b.n	8003fce <HAL_TIM_PWM_Start+0xaa>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_PWM_Start+0xa2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc4:	e003      	b.n	8003fce <HAL_TIM_PWM_Start+0xaa>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	6839      	ldr	r1, [r7, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fcaa 	bl	8004930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a23      	ldr	r2, [pc, #140]	@ (8004070 <HAL_TIM_PWM_Start+0x14c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8004070 <HAL_TIM_PWM_Start+0x14c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_TIM_PWM_Start+0x10e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004008:	d013      	beq.n	8004032 <HAL_TIM_PWM_Start+0x10e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a19      	ldr	r2, [pc, #100]	@ (8004074 <HAL_TIM_PWM_Start+0x150>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_TIM_PWM_Start+0x10e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a17      	ldr	r2, [pc, #92]	@ (8004078 <HAL_TIM_PWM_Start+0x154>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_TIM_PWM_Start+0x10e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a16      	ldr	r2, [pc, #88]	@ (800407c <HAL_TIM_PWM_Start+0x158>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_TIM_PWM_Start+0x10e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <HAL_TIM_PWM_Start+0x15c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d111      	bne.n	8004056 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b06      	cmp	r3, #6
 8004042:	d010      	beq.n	8004066 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	e007      	b.n	8004066 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40010000 	.word	0x40010000
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00
 8004080:	40014000 	.word	0x40014000

08004084 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	6839      	ldr	r1, [r7, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fc4a 	bl	8004930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a29      	ldr	r2, [pc, #164]	@ (8004148 <HAL_TIM_PWM_Stop+0xc4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d117      	bne.n	80040d6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10f      	bne.n	80040d6 <HAL_TIM_PWM_Stop+0x52>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	f240 4344 	movw	r3, #1092	@ 0x444
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <HAL_TIM_PWM_Stop+0x52>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <HAL_TIM_PWM_Stop+0x82>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a1a      	ldr	r2, [r3, #32]
 80040ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <HAL_TIM_PWM_Stop+0x82>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <HAL_TIM_PWM_Stop+0x92>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004114:	e013      	b.n	800413e <HAL_TIM_PWM_Stop+0xba>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b04      	cmp	r3, #4
 800411a:	d104      	bne.n	8004126 <HAL_TIM_PWM_Stop+0xa2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004124:	e00b      	b.n	800413e <HAL_TIM_PWM_Stop+0xba>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d104      	bne.n	8004136 <HAL_TIM_PWM_Stop+0xb2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004134:	e003      	b.n	800413e <HAL_TIM_PWM_Stop+0xba>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40010000 	.word	0x40010000

0800414c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d020      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01b      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0202 	mvn.w	r2, #2
 8004180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f994 	bl	80044c4 <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f986 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f997 	bl	80044d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d020      	beq.n	80041fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01b      	beq.n	80041fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0204 	mvn.w	r2, #4
 80041cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f96e 	bl	80044c4 <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f960 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f971 	bl	80044d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d020      	beq.n	8004248 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01b      	beq.n	8004248 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0208 	mvn.w	r2, #8
 8004218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2204      	movs	r2, #4
 800421e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f948 	bl	80044c4 <HAL_TIM_IC_CaptureCallback>
 8004234:	e005      	b.n	8004242 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f93a 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f94b 	bl	80044d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b00      	cmp	r3, #0
 8004250:	d020      	beq.n	8004294 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01b      	beq.n	8004294 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0210 	mvn.w	r2, #16
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2208      	movs	r2, #8
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f922 	bl	80044c4 <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f914 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f925 	bl	80044d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0201 	mvn.w	r2, #1
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd fde4 	bl	8001e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fbc8 	bl	8004a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8f6 	bl	80044ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0220 	mvn.w	r2, #32
 800431c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fb9a 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004346:	2302      	movs	r3, #2
 8004348:	e0ae      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	f200 809f 	bhi.w	8004498 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800435a:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	08004395 	.word	0x08004395
 8004364:	08004499 	.word	0x08004499
 8004368:	08004499 	.word	0x08004499
 800436c:	08004499 	.word	0x08004499
 8004370:	080043d5 	.word	0x080043d5
 8004374:	08004499 	.word	0x08004499
 8004378:	08004499 	.word	0x08004499
 800437c:	08004499 	.word	0x08004499
 8004380:	08004417 	.word	0x08004417
 8004384:	08004499 	.word	0x08004499
 8004388:	08004499 	.word	0x08004499
 800438c:	08004499 	.word	0x08004499
 8004390:	08004457 	.word	0x08004457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f93c 	bl	8004618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0208 	orr.w	r2, r2, #8
 80043ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0204 	bic.w	r2, r2, #4
 80043be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6999      	ldr	r1, [r3, #24]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	619a      	str	r2, [r3, #24]
      break;
 80043d2:	e064      	b.n	800449e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f982 	bl	80046e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6999      	ldr	r1, [r3, #24]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	021a      	lsls	r2, r3, #8
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	619a      	str	r2, [r3, #24]
      break;
 8004414:	e043      	b.n	800449e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f9cd 	bl	80047bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0208 	orr.w	r2, r2, #8
 8004430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0204 	bic.w	r2, r2, #4
 8004440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69d9      	ldr	r1, [r3, #28]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	61da      	str	r2, [r3, #28]
      break;
 8004454:	e023      	b.n	800449e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fa17 	bl	8004890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69d9      	ldr	r1, [r3, #28]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	021a      	lsls	r2, r3, #8
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	61da      	str	r2, [r3, #28]
      break;
 8004496:	e002      	b.n	800449e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]
      break;
 800449c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3a      	ldr	r2, [pc, #232]	@ (80045fc <TIM_Base_SetConfig+0xfc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00f      	beq.n	8004538 <TIM_Base_SetConfig+0x38>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451e:	d00b      	beq.n	8004538 <TIM_Base_SetConfig+0x38>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a37      	ldr	r2, [pc, #220]	@ (8004600 <TIM_Base_SetConfig+0x100>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <TIM_Base_SetConfig+0x38>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a36      	ldr	r2, [pc, #216]	@ (8004604 <TIM_Base_SetConfig+0x104>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_Base_SetConfig+0x38>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a35      	ldr	r2, [pc, #212]	@ (8004608 <TIM_Base_SetConfig+0x108>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d108      	bne.n	800454a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2b      	ldr	r2, [pc, #172]	@ (80045fc <TIM_Base_SetConfig+0xfc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01b      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004558:	d017      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a28      	ldr	r2, [pc, #160]	@ (8004600 <TIM_Base_SetConfig+0x100>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a27      	ldr	r2, [pc, #156]	@ (8004604 <TIM_Base_SetConfig+0x104>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00f      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a26      	ldr	r2, [pc, #152]	@ (8004608 <TIM_Base_SetConfig+0x108>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a25      	ldr	r2, [pc, #148]	@ (800460c <TIM_Base_SetConfig+0x10c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a24      	ldr	r2, [pc, #144]	@ (8004610 <TIM_Base_SetConfig+0x110>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a23      	ldr	r2, [pc, #140]	@ (8004614 <TIM_Base_SetConfig+0x114>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a0e      	ldr	r2, [pc, #56]	@ (80045fc <TIM_Base_SetConfig+0xfc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d103      	bne.n	80045d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d105      	bne.n	80045ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f023 0201 	bic.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	611a      	str	r2, [r3, #16]
  }
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40014000 	.word	0x40014000
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800

08004618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f023 0201 	bic.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 0302 	bic.w	r3, r3, #2
 8004660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <TIM_OC1_SetConfig+0xc8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10c      	bne.n	800468e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0308 	bic.w	r3, r3, #8
 800467a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a13      	ldr	r2, [pc, #76]	@ (80046e0 <TIM_OC1_SetConfig+0xc8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d111      	bne.n	80046ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800469c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	621a      	str	r2, [r3, #32]
}
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40010000 	.word	0x40010000

080046e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f023 0210 	bic.w	r2, r3, #16
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800471a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0320 	bic.w	r3, r3, #32
 800472e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <TIM_OC2_SetConfig+0xd4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10d      	bne.n	8004760 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800474a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a15      	ldr	r2, [pc, #84]	@ (80047b8 <TIM_OC2_SetConfig+0xd4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d113      	bne.n	8004790 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800476e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000

080047bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <TIM_OC3_SetConfig+0xd0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10d      	bne.n	8004836 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a14      	ldr	r2, [pc, #80]	@ (800488c <TIM_OC3_SetConfig+0xd0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d113      	bne.n	8004866 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	621a      	str	r2, [r3, #32]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40010000 	.word	0x40010000

08004890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	031b      	lsls	r3, r3, #12
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a10      	ldr	r2, [pc, #64]	@ (800492c <TIM_OC4_SetConfig+0x9c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d109      	bne.n	8004904 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000

08004930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2201      	movs	r2, #1
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	43db      	mvns	r3, r3
 8004952:	401a      	ands	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1a      	ldr	r2, [r3, #32]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	431a      	orrs	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004990:	2302      	movs	r3, #2
 8004992:	e050      	b.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d018      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e0:	d013      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a18      	ldr	r2, [pc, #96]	@ (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a16      	ldr	r2, [pc, #88]	@ (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a15      	ldr	r2, [pc, #84]	@ (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a13      	ldr	r2, [pc, #76]	@ (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10c      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40014000 	.word	0x40014000

08004a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e042      	b.n	8004b18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fd fb56 	bl	8002158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	@ 0x24
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fdbd 	bl	8005644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	@ 0x28
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d175      	bne.n	8004c2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_UART_Transmit+0x2c>
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e06e      	b.n	8004c2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2221      	movs	r2, #33	@ 0x21
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b5e:	f7fd fd33 	bl	80025c8 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	88fa      	ldrh	r2, [r7, #6]
 8004b68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b78:	d108      	bne.n	8004b8c <HAL_UART_Transmit+0x6c>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e003      	b.n	8004b94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b94:	e02e      	b.n	8004bf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2180      	movs	r1, #128	@ 0x80
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fb1f 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e03a      	b.n	8004c2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	e007      	b.n	8004be6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1cb      	bne.n	8004b96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2140      	movs	r1, #64	@ 0x40
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 faeb 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e006      	b.n	8004c2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e000      	b.n	8004c2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	4613      	mov	r3, r2
 8004c42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d112      	bne.n	8004c76 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_UART_Receive_IT+0x26>
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e00b      	b.n	8004c78 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fb12 	bl	8005296 <UART_Start_Receive_IT>
 8004c72:	4603      	mov	r3, r0
 8004c74:	e000      	b.n	8004c78 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b0ba      	sub	sp, #232	@ 0xe8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x66>
 8004cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fbf2 	bl	80054c8 <UART_Receive_IT>
      return;
 8004ce4:	e25b      	b.n	800519e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80de 	beq.w	8004eac <HAL_UART_IRQHandler+0x22c>
 8004cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 80d1 	beq.w	8004eac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <HAL_UART_IRQHandler+0xae>
 8004d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_UART_IRQHandler+0xd2>
 8004d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	f043 0202 	orr.w	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_UART_IRQHandler+0xf6>
 8004d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	f043 0204 	orr.w	r2, r3, #4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d011      	beq.n	8004da6 <HAL_UART_IRQHandler+0x126>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d105      	bne.n	8004d9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	f043 0208 	orr.w	r2, r3, #8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 81f2 	beq.w	8005194 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_UART_IRQHandler+0x14e>
 8004dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fb7d 	bl	80054c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b40      	cmp	r3, #64	@ 0x40
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <HAL_UART_IRQHandler+0x17a>
 8004df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d04f      	beq.n	8004e9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa85 	bl	800530a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0a:	2b40      	cmp	r3, #64	@ 0x40
 8004e0c:	d141      	bne.n	8004e92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3314      	adds	r3, #20
 8004e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3314      	adds	r3, #20
 8004e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1d9      	bne.n	8004e0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d013      	beq.n	8004e8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e66:	4a7e      	ldr	r2, [pc, #504]	@ (8005060 <HAL_UART_IRQHandler+0x3e0>)
 8004e68:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe f8ea 	bl	8003048 <HAL_DMA_Abort_IT>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e84:	4610      	mov	r0, r2
 8004e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	e00e      	b.n	8004ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f994 	bl	80051b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	e00a      	b.n	8004ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f990 	bl	80051b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	e006      	b.n	8004ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f98c 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004ea6:	e175      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	bf00      	nop
    return;
 8004eaa:	e173      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	f040 814f 	bne.w	8005154 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8148 	beq.w	8005154 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8141 	beq.w	8005154 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef2:	2b40      	cmp	r3, #64	@ 0x40
 8004ef4:	f040 80b6 	bne.w	8005064 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8145 	beq.w	8005198 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f16:	429a      	cmp	r2, r3
 8004f18:	f080 813e 	bcs.w	8005198 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f2e:	f000 8088 	beq.w	8005042 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	330c      	adds	r3, #12
 8004f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1d9      	bne.n	8004f32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3314      	adds	r3, #20
 8004f84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3314      	adds	r3, #20
 8004f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e1      	bne.n	8004f7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3314      	adds	r3, #20
 8004fc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fe4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e3      	bne.n	8004fba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005012:	f023 0310 	bic.w	r3, r3, #16
 8005016:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005024:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005026:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800502a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e3      	bne.n	8005000 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503c:	4618      	mov	r0, r3
 800503e:	f7fd ff93 	bl	8002f68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2202      	movs	r2, #2
 8005046:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005050:	b29b      	uxth	r3, r3
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f8b7 	bl	80051cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800505e:	e09b      	b.n	8005198 <HAL_UART_IRQHandler+0x518>
 8005060:	080053d1 	.word	0x080053d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800506c:	b29b      	uxth	r3, r3
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 808e 	beq.w	800519c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8089 	beq.w	800519c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800509a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	330c      	adds	r3, #12
 80050aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80050b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e3      	bne.n	800508a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3314      	adds	r3, #20
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	623b      	str	r3, [r7, #32]
   return(result);
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3314      	adds	r3, #20
 80050e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e3      	bne.n	80050c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	60fb      	str	r3, [r7, #12]
   return(result);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0310 	bic.w	r3, r3, #16
 800511e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800512c:	61fa      	str	r2, [r7, #28]
 800512e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	69b9      	ldr	r1, [r7, #24]
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	617b      	str	r3, [r7, #20]
   return(result);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e3      	bne.n	8005108 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005146:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f83d 	bl	80051cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005152:	e023      	b.n	800519c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <HAL_UART_IRQHandler+0x4f4>
 8005160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f943 	bl	80053f8 <UART_Transmit_IT>
    return;
 8005172:	e014      	b.n	800519e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00e      	beq.n	800519e <HAL_UART_IRQHandler+0x51e>
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f983 	bl	8005498 <UART_EndTransmit_IT>
    return;
 8005192:	e004      	b.n	800519e <HAL_UART_IRQHandler+0x51e>
    return;
 8005194:	bf00      	nop
 8005196:	e002      	b.n	800519e <HAL_UART_IRQHandler+0x51e>
      return;
 8005198:	bf00      	nop
 800519a:	e000      	b.n	800519e <HAL_UART_IRQHandler+0x51e>
      return;
 800519c:	bf00      	nop
  }
}
 800519e:	37e8      	adds	r7, #232	@ 0xe8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f4:	e03b      	b.n	800526e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d037      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fd f9e3 	bl	80025c8 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	6a3a      	ldr	r2, [r7, #32]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <UART_WaitOnFlagUntilTimeout+0x30>
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e03a      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d023      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b80      	cmp	r3, #128	@ 0x80
 800522a:	d020      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x8a>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b40      	cmp	r3, #64	@ 0x40
 8005230:	d01d      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b08      	cmp	r3, #8
 800523e:	d116      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f857 	bl	800530a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2208      	movs	r2, #8
 8005260:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e00f      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4013      	ands	r3, r2
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	429a      	cmp	r2, r3
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	429a      	cmp	r2, r3
 800528a:	d0b4      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	4613      	mov	r3, r2
 80052a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	88fa      	ldrh	r2, [r7, #6]
 80052ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2222      	movs	r2, #34	@ 0x22
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0220 	orr.w	r2, r2, #32
 80052fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530a:	b480      	push	{r7}
 800530c:	b095      	sub	sp, #84	@ 0x54
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	330c      	adds	r3, #12
 8005318:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005328:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005332:	643a      	str	r2, [r7, #64]	@ 0x40
 8005334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005338:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e5      	bne.n	8005312 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	61fb      	str	r3, [r7, #28]
   return(result);
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800536c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e5      	bne.n	8005346 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537e:	2b01      	cmp	r3, #1
 8005380:	d119      	bne.n	80053b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	330c      	adds	r3, #12
 8005388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	60bb      	str	r3, [r7, #8]
   return(result);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f023 0310 	bic.w	r3, r3, #16
 8005398:	647b      	str	r3, [r7, #68]	@ 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a2:	61ba      	str	r2, [r7, #24]
 80053a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6979      	ldr	r1, [r7, #20]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	613b      	str	r3, [r7, #16]
   return(result);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e5      	bne.n	8005382 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053c4:	bf00      	nop
 80053c6:	3754      	adds	r7, #84	@ 0x54
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff fee4 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b21      	cmp	r3, #33	@ 0x21
 800540a:	d13e      	bne.n	800548a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005414:	d114      	bne.n	8005440 <UART_Transmit_IT+0x48>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d110      	bne.n	8005440 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005432:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	1c9a      	adds	r2, r3, #2
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	621a      	str	r2, [r3, #32]
 800543e:	e008      	b.n	8005452 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	1c59      	adds	r1, r3, #1
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6211      	str	r1, [r2, #32]
 800544a:	781a      	ldrb	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29b      	uxth	r3, r3
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	4619      	mov	r1, r3
 8005460:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10f      	bne.n	8005486 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005474:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005484:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
  }
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff fe73 	bl	80051a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08c      	sub	sp, #48	@ 0x30
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b22      	cmp	r3, #34	@ 0x22
 80054da:	f040 80ae 	bne.w	800563a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e6:	d117      	bne.n	8005518 <UART_Receive_IT+0x50>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d113      	bne.n	8005518 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	b29b      	uxth	r3, r3
 8005502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005506:	b29a      	uxth	r2, r3
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005510:	1c9a      	adds	r2, r3, #2
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	629a      	str	r2, [r3, #40]	@ 0x28
 8005516:	e026      	b.n	8005566 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552a:	d007      	beq.n	800553c <UART_Receive_IT+0x74>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <UART_Receive_IT+0x82>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	b2da      	uxtb	r2, r3
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	e008      	b.n	800555c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005556:	b2da      	uxtb	r2, r3
 8005558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29b      	uxth	r3, r3
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	4619      	mov	r1, r3
 8005574:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005576:	2b00      	cmp	r3, #0
 8005578:	d15d      	bne.n	8005636 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0220 	bic.w	r2, r2, #32
 8005588:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005598:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d135      	bne.n	800562c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	613b      	str	r3, [r7, #16]
   return(result);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f023 0310 	bic.w	r3, r3, #16
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e6:	623a      	str	r2, [r7, #32]
 80055e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	69f9      	ldr	r1, [r7, #28]
 80055ec:	6a3a      	ldr	r2, [r7, #32]
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e5      	bne.n	80055c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b10      	cmp	r3, #16
 8005606:	d10a      	bne.n	800561e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff fdd1 	bl	80051cc <HAL_UARTEx_RxEventCallback>
 800562a:	e002      	b.n	8005632 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7fc f96d 	bl	800190c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	e002      	b.n	800563c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e000      	b.n	800563c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800563a:	2302      	movs	r3, #2
  }
}
 800563c:	4618      	mov	r0, r3
 800563e:	3730      	adds	r7, #48	@ 0x30
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005648:	b0c0      	sub	sp, #256	@ 0x100
 800564a:	af00      	add	r7, sp, #0
 800564c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005660:	68d9      	ldr	r1, [r3, #12]
 8005662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	ea40 0301 	orr.w	r3, r0, r1
 800566c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	431a      	orrs	r2, r3
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	431a      	orrs	r2, r3
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800569c:	f021 010c 	bic.w	r1, r1, #12
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056aa:	430b      	orrs	r3, r1
 80056ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056be:	6999      	ldr	r1, [r3, #24]
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	ea40 0301 	orr.w	r3, r0, r1
 80056ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005910 <UART_SetConfig+0x2cc>)
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d005      	beq.n	80056e4 <UART_SetConfig+0xa0>
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b8d      	ldr	r3, [pc, #564]	@ (8005914 <UART_SetConfig+0x2d0>)
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d104      	bne.n	80056ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056e4:	f7fe facc 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 80056e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056ec:	e003      	b.n	80056f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056ee:	f7fe fab3 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 80056f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005700:	f040 810c 	bne.w	800591c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005708:	2200      	movs	r2, #0
 800570a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800570e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005712:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005716:	4622      	mov	r2, r4
 8005718:	462b      	mov	r3, r5
 800571a:	1891      	adds	r1, r2, r2
 800571c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800571e:	415b      	adcs	r3, r3
 8005720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005722:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005726:	4621      	mov	r1, r4
 8005728:	eb12 0801 	adds.w	r8, r2, r1
 800572c:	4629      	mov	r1, r5
 800572e:	eb43 0901 	adc.w	r9, r3, r1
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800573e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005746:	4690      	mov	r8, r2
 8005748:	4699      	mov	r9, r3
 800574a:	4623      	mov	r3, r4
 800574c:	eb18 0303 	adds.w	r3, r8, r3
 8005750:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005754:	462b      	mov	r3, r5
 8005756:	eb49 0303 	adc.w	r3, r9, r3
 800575a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800576a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800576e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005772:	460b      	mov	r3, r1
 8005774:	18db      	adds	r3, r3, r3
 8005776:	653b      	str	r3, [r7, #80]	@ 0x50
 8005778:	4613      	mov	r3, r2
 800577a:	eb42 0303 	adc.w	r3, r2, r3
 800577e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005780:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005784:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005788:	f7fb fa76 	bl	8000c78 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4b61      	ldr	r3, [pc, #388]	@ (8005918 <UART_SetConfig+0x2d4>)
 8005792:	fba3 2302 	umull	r2, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	011c      	lsls	r4, r3, #4
 800579a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	1891      	adds	r1, r2, r2
 80057b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057b4:	415b      	adcs	r3, r3
 80057b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057bc:	4641      	mov	r1, r8
 80057be:	eb12 0a01 	adds.w	sl, r2, r1
 80057c2:	4649      	mov	r1, r9
 80057c4:	eb43 0b01 	adc.w	fp, r3, r1
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057dc:	4692      	mov	sl, r2
 80057de:	469b      	mov	fp, r3
 80057e0:	4643      	mov	r3, r8
 80057e2:	eb1a 0303 	adds.w	r3, sl, r3
 80057e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057ea:	464b      	mov	r3, r9
 80057ec:	eb4b 0303 	adc.w	r3, fp, r3
 80057f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005800:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005804:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005808:	460b      	mov	r3, r1
 800580a:	18db      	adds	r3, r3, r3
 800580c:	643b      	str	r3, [r7, #64]	@ 0x40
 800580e:	4613      	mov	r3, r2
 8005810:	eb42 0303 	adc.w	r3, r2, r3
 8005814:	647b      	str	r3, [r7, #68]	@ 0x44
 8005816:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800581a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800581e:	f7fb fa2b 	bl	8000c78 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4611      	mov	r1, r2
 8005828:	4b3b      	ldr	r3, [pc, #236]	@ (8005918 <UART_SetConfig+0x2d4>)
 800582a:	fba3 2301 	umull	r2, r3, r3, r1
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2264      	movs	r2, #100	@ 0x64
 8005832:	fb02 f303 	mul.w	r3, r2, r3
 8005836:	1acb      	subs	r3, r1, r3
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800583e:	4b36      	ldr	r3, [pc, #216]	@ (8005918 <UART_SetConfig+0x2d4>)
 8005840:	fba3 2302 	umull	r2, r3, r3, r2
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800584c:	441c      	add	r4, r3
 800584e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005852:	2200      	movs	r2, #0
 8005854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005858:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800585c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	1891      	adds	r1, r2, r2
 8005866:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005868:	415b      	adcs	r3, r3
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800586c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005870:	4641      	mov	r1, r8
 8005872:	1851      	adds	r1, r2, r1
 8005874:	6339      	str	r1, [r7, #48]	@ 0x30
 8005876:	4649      	mov	r1, r9
 8005878:	414b      	adcs	r3, r1
 800587a:	637b      	str	r3, [r7, #52]	@ 0x34
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005888:	4659      	mov	r1, fp
 800588a:	00cb      	lsls	r3, r1, #3
 800588c:	4651      	mov	r1, sl
 800588e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005892:	4651      	mov	r1, sl
 8005894:	00ca      	lsls	r2, r1, #3
 8005896:	4610      	mov	r0, r2
 8005898:	4619      	mov	r1, r3
 800589a:	4603      	mov	r3, r0
 800589c:	4642      	mov	r2, r8
 800589e:	189b      	adds	r3, r3, r2
 80058a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058a4:	464b      	mov	r3, r9
 80058a6:	460a      	mov	r2, r1
 80058a8:	eb42 0303 	adc.w	r3, r2, r3
 80058ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058c4:	460b      	mov	r3, r1
 80058c6:	18db      	adds	r3, r3, r3
 80058c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ca:	4613      	mov	r3, r2
 80058cc:	eb42 0303 	adc.w	r3, r2, r3
 80058d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058da:	f7fb f9cd 	bl	8000c78 <__aeabi_uldivmod>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <UART_SetConfig+0x2d4>)
 80058e4:	fba3 1302 	umull	r1, r3, r3, r2
 80058e8:	095b      	lsrs	r3, r3, #5
 80058ea:	2164      	movs	r1, #100	@ 0x64
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	3332      	adds	r3, #50	@ 0x32
 80058f6:	4a08      	ldr	r2, [pc, #32]	@ (8005918 <UART_SetConfig+0x2d4>)
 80058f8:	fba2 2303 	umull	r2, r3, r2, r3
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	f003 0207 	and.w	r2, r3, #7
 8005902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4422      	add	r2, r4
 800590a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800590c:	e106      	b.n	8005b1c <UART_SetConfig+0x4d8>
 800590e:	bf00      	nop
 8005910:	40011000 	.word	0x40011000
 8005914:	40011400 	.word	0x40011400
 8005918:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800591c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005920:	2200      	movs	r2, #0
 8005922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005926:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800592a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800592e:	4642      	mov	r2, r8
 8005930:	464b      	mov	r3, r9
 8005932:	1891      	adds	r1, r2, r2
 8005934:	6239      	str	r1, [r7, #32]
 8005936:	415b      	adcs	r3, r3
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
 800593a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800593e:	4641      	mov	r1, r8
 8005940:	1854      	adds	r4, r2, r1
 8005942:	4649      	mov	r1, r9
 8005944:	eb43 0501 	adc.w	r5, r3, r1
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	00eb      	lsls	r3, r5, #3
 8005952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005956:	00e2      	lsls	r2, r4, #3
 8005958:	4614      	mov	r4, r2
 800595a:	461d      	mov	r5, r3
 800595c:	4643      	mov	r3, r8
 800595e:	18e3      	adds	r3, r4, r3
 8005960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005964:	464b      	mov	r3, r9
 8005966:	eb45 0303 	adc.w	r3, r5, r3
 800596a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800597a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800598a:	4629      	mov	r1, r5
 800598c:	008b      	lsls	r3, r1, #2
 800598e:	4621      	mov	r1, r4
 8005990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005994:	4621      	mov	r1, r4
 8005996:	008a      	lsls	r2, r1, #2
 8005998:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800599c:	f7fb f96c 	bl	8000c78 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4b60      	ldr	r3, [pc, #384]	@ (8005b28 <UART_SetConfig+0x4e4>)
 80059a6:	fba3 2302 	umull	r2, r3, r3, r2
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	011c      	lsls	r4, r3, #4
 80059ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059c0:	4642      	mov	r2, r8
 80059c2:	464b      	mov	r3, r9
 80059c4:	1891      	adds	r1, r2, r2
 80059c6:	61b9      	str	r1, [r7, #24]
 80059c8:	415b      	adcs	r3, r3
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d0:	4641      	mov	r1, r8
 80059d2:	1851      	adds	r1, r2, r1
 80059d4:	6139      	str	r1, [r7, #16]
 80059d6:	4649      	mov	r1, r9
 80059d8:	414b      	adcs	r3, r1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059e8:	4659      	mov	r1, fp
 80059ea:	00cb      	lsls	r3, r1, #3
 80059ec:	4651      	mov	r1, sl
 80059ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059f2:	4651      	mov	r1, sl
 80059f4:	00ca      	lsls	r2, r1, #3
 80059f6:	4610      	mov	r0, r2
 80059f8:	4619      	mov	r1, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	4642      	mov	r2, r8
 80059fe:	189b      	adds	r3, r3, r2
 8005a00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a04:	464b      	mov	r3, r9
 8005a06:	460a      	mov	r2, r1
 8005a08:	eb42 0303 	adc.w	r3, r2, r3
 8005a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a28:	4649      	mov	r1, r9
 8005a2a:	008b      	lsls	r3, r1, #2
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a32:	4641      	mov	r1, r8
 8005a34:	008a      	lsls	r2, r1, #2
 8005a36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a3a:	f7fb f91d 	bl	8000c78 <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4611      	mov	r1, r2
 8005a44:	4b38      	ldr	r3, [pc, #224]	@ (8005b28 <UART_SetConfig+0x4e4>)
 8005a46:	fba3 2301 	umull	r2, r3, r3, r1
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	2264      	movs	r2, #100	@ 0x64
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	1acb      	subs	r3, r1, r3
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	3332      	adds	r3, #50	@ 0x32
 8005a58:	4a33      	ldr	r2, [pc, #204]	@ (8005b28 <UART_SetConfig+0x4e4>)
 8005a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a64:	441c      	add	r4, r3
 8005a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a74:	4642      	mov	r2, r8
 8005a76:	464b      	mov	r3, r9
 8005a78:	1891      	adds	r1, r2, r2
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	415b      	adcs	r3, r3
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a84:	4641      	mov	r1, r8
 8005a86:	1851      	adds	r1, r2, r1
 8005a88:	6039      	str	r1, [r7, #0]
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	414b      	adcs	r3, r1
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a9c:	4659      	mov	r1, fp
 8005a9e:	00cb      	lsls	r3, r1, #3
 8005aa0:	4651      	mov	r1, sl
 8005aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa6:	4651      	mov	r1, sl
 8005aa8:	00ca      	lsls	r2, r1, #3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	189b      	adds	r3, r3, r2
 8005ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	460a      	mov	r2, r1
 8005aba:	eb42 0303 	adc.w	r3, r2, r3
 8005abe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aca:	667a      	str	r2, [r7, #100]	@ 0x64
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ad8:	4649      	mov	r1, r9
 8005ada:	008b      	lsls	r3, r1, #2
 8005adc:	4641      	mov	r1, r8
 8005ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	008a      	lsls	r2, r1, #2
 8005ae6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005aea:	f7fb f8c5 	bl	8000c78 <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <UART_SetConfig+0x4e4>)
 8005af4:	fba3 1302 	umull	r1, r3, r3, r2
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	2164      	movs	r1, #100	@ 0x64
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	3332      	adds	r3, #50	@ 0x32
 8005b06:	4a08      	ldr	r2, [pc, #32]	@ (8005b28 <UART_SetConfig+0x4e4>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	f003 020f 	and.w	r2, r3, #15
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4422      	add	r2, r4
 8005b1a:	609a      	str	r2, [r3, #8]
}
 8005b1c:	bf00      	nop
 8005b1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b22:	46bd      	mov	sp, r7
 8005b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b28:	51eb851f 	.word	0x51eb851f

08005b2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b3e:	2b84      	cmp	r3, #132	@ 0x84
 8005b40:	d005      	beq.n	8005b4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005b42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3303      	adds	r3, #3
 8005b4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b60:	f000 fafc 	bl	800615c <vTaskStartScheduler>
  
  return osOK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b6c:	b089      	sub	sp, #36	@ 0x24
 8005b6e:	af04      	add	r7, sp, #16
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d020      	beq.n	8005bbe <osThreadCreate+0x54>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01c      	beq.n	8005bbe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685c      	ldr	r4, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691e      	ldr	r6, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff ffc8 	bl	8005b2c <makeFreeRtosPriority>
 8005b9c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ba6:	9202      	str	r2, [sp, #8]
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	9100      	str	r1, [sp, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4632      	mov	r2, r6
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 f8ed 	bl	8005d92 <xTaskCreateStatic>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e01c      	b.n	8005bf8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685c      	ldr	r4, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff ffaa 	bl	8005b2c <makeFreeRtosPriority>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	f107 030c 	add.w	r3, r7, #12
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	9200      	str	r2, [sp, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	4632      	mov	r2, r6
 8005be6:	4629      	mov	r1, r5
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 f932 	bl	8005e52 <xTaskCreate>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d001      	beq.n	8005bf8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c02 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <osDelay+0x16>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	e000      	b.n	8005c1a <osDelay+0x18>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fa68 	bl	80060f0 <vTaskDelay>
  
  return osOK;
 8005c20:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f103 0208 	add.w	r2, r3, #8
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f103 0208 	add.w	r2, r3, #8
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f103 0208 	add.w	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d103      	bne.n	8005cec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e00c      	b.n	8005d06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	e002      	b.n	8005cfa <vListInsert+0x2e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d2f6      	bcs.n	8005cf4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6892      	ldr	r2, [r2, #8]
 8005d54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6852      	ldr	r2, [r2, #4]
 8005d5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d103      	bne.n	8005d72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1e5a      	subs	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b08e      	sub	sp, #56	@ 0x38
 8005d96:	af04      	add	r7, sp, #16
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10b      	bne.n	8005dbe <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10b      	bne.n	8005ddc <xTaskCreateStatic+0x4a>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	61fb      	str	r3, [r7, #28]
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ddc:	23b0      	movs	r3, #176	@ 0xb0
 8005dde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2bb0      	cmp	r3, #176	@ 0xb0
 8005de4:	d00b      	beq.n	8005dfe <xTaskCreateStatic+0x6c>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	61bb      	str	r3, [r7, #24]
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	e7fd      	b.n	8005dfa <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01e      	beq.n	8005e44 <xTaskCreateStatic+0xb2>
 8005e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01b      	beq.n	8005e44 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e14:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9303      	str	r3, [sp, #12]
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	9302      	str	r3, [sp, #8]
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f850 	bl	8005edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e3e:	f000 f8ed 	bl	800601c <prvAddNewTaskToReadyList>
 8005e42:	e001      	b.n	8005e48 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e48:	697b      	ldr	r3, [r7, #20]
	}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3728      	adds	r7, #40	@ 0x28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b08c      	sub	sp, #48	@ 0x30
 8005e56:	af04      	add	r7, sp, #16
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fefe 	bl	8006c68 <pvPortMalloc>
 8005e6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00e      	beq.n	8005e92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e74:	20b0      	movs	r0, #176	@ 0xb0
 8005e76:	f000 fef7 	bl	8006c68 <pvPortMalloc>
 8005e7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e88:	e005      	b.n	8005e96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f000 ffba 	bl	8006e04 <vPortFree>
 8005e90:	e001      	b.n	8005e96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d017      	beq.n	8005ecc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ea4:	88fa      	ldrh	r2, [r7, #6]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	9303      	str	r3, [sp, #12]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	9302      	str	r3, [sp, #8]
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f80e 	bl	8005edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ec0:	69f8      	ldr	r0, [r7, #28]
 8005ec2:	f000 f8ab 	bl	800601c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	e002      	b.n	8005ed2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f023 0307 	bic.w	r3, r3, #7
 8005f02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	617b      	str	r3, [r7, #20]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01f      	beq.n	8005f6c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	e012      	b.n	8005f58 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	7819      	ldrb	r1, [r3, #0]
 8005f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	3334      	adds	r3, #52	@ 0x34
 8005f42:	460a      	mov	r2, r1
 8005f44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d006      	beq.n	8005f60 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	3301      	adds	r3, #1
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b1f      	cmp	r3, #31
 8005f5c:	d9e9      	bls.n	8005f32 <prvInitialiseNewTask+0x56>
 8005f5e:	e000      	b.n	8005f62 <prvInitialiseNewTask+0x86>
			{
				break;
 8005f60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8005f6a:	e003      	b.n	8005f74 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f76:	2b06      	cmp	r3, #6
 8005f78:	d901      	bls.n	8005f7e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f7a:	2306      	movs	r3, #6
 8005f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f88:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	3304      	adds	r3, #4
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fe68 	bl	8005c6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9c:	3318      	adds	r3, #24
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fe63 	bl	8005c6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fac:	f1c3 0207 	rsb	r2, r3, #7
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fcc:	335c      	adds	r3, #92	@ 0x5c
 8005fce:	224c      	movs	r2, #76	@ 0x4c
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 fe3b 	bl	8007c4e <memset>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fda:	4a0d      	ldr	r2, [pc, #52]	@ (8006010 <prvInitialiseNewTask+0x134>)
 8005fdc:	661a      	str	r2, [r3, #96]	@ 0x60
 8005fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8006014 <prvInitialiseNewTask+0x138>)
 8005fe2:	665a      	str	r2, [r3, #100]	@ 0x64
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8006018 <prvInitialiseNewTask+0x13c>)
 8005fe8:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68f9      	ldr	r1, [r7, #12]
 8005fee:	69b8      	ldr	r0, [r7, #24]
 8005ff0:	f000 fc2a 	bl	8006848 <pxPortInitialiseStack>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006006:	bf00      	nop
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200044c8 	.word	0x200044c8
 8006014:	20004530 	.word	0x20004530
 8006018:	20004598 	.word	0x20004598

0800601c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006024:	f000 fd40 	bl	8006aa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006028:	4b2a      	ldr	r3, [pc, #168]	@ (80060d4 <prvAddNewTaskToReadyList+0xb8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3301      	adds	r3, #1
 800602e:	4a29      	ldr	r2, [pc, #164]	@ (80060d4 <prvAddNewTaskToReadyList+0xb8>)
 8006030:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006032:	4b29      	ldr	r3, [pc, #164]	@ (80060d8 <prvAddNewTaskToReadyList+0xbc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800603a:	4a27      	ldr	r2, [pc, #156]	@ (80060d8 <prvAddNewTaskToReadyList+0xbc>)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006040:	4b24      	ldr	r3, [pc, #144]	@ (80060d4 <prvAddNewTaskToReadyList+0xb8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d110      	bne.n	800606a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006048:	f000 fad4 	bl	80065f4 <prvInitialiseTaskLists>
 800604c:	e00d      	b.n	800606a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800604e:	4b23      	ldr	r3, [pc, #140]	@ (80060dc <prvAddNewTaskToReadyList+0xc0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006056:	4b20      	ldr	r3, [pc, #128]	@ (80060d8 <prvAddNewTaskToReadyList+0xbc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006060:	429a      	cmp	r2, r3
 8006062:	d802      	bhi.n	800606a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006064:	4a1c      	ldr	r2, [pc, #112]	@ (80060d8 <prvAddNewTaskToReadyList+0xbc>)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800606a:	4b1d      	ldr	r3, [pc, #116]	@ (80060e0 <prvAddNewTaskToReadyList+0xc4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	4a1b      	ldr	r2, [pc, #108]	@ (80060e0 <prvAddNewTaskToReadyList+0xc4>)
 8006072:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	2201      	movs	r2, #1
 800607a:	409a      	lsls	r2, r3
 800607c:	4b19      	ldr	r3, [pc, #100]	@ (80060e4 <prvAddNewTaskToReadyList+0xc8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4313      	orrs	r3, r2
 8006082:	4a18      	ldr	r2, [pc, #96]	@ (80060e4 <prvAddNewTaskToReadyList+0xc8>)
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4a15      	ldr	r2, [pc, #84]	@ (80060e8 <prvAddNewTaskToReadyList+0xcc>)
 8006094:	441a      	add	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3304      	adds	r3, #4
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f7ff fdf1 	bl	8005c84 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060a2:	f000 fd33 	bl	8006b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060a6:	4b0d      	ldr	r3, [pc, #52]	@ (80060dc <prvAddNewTaskToReadyList+0xc0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060ae:	4b0a      	ldr	r3, [pc, #40]	@ (80060d8 <prvAddNewTaskToReadyList+0xbc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d207      	bcs.n	80060cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060bc:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <prvAddNewTaskToReadyList+0xd0>)
 80060be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000874 	.word	0x20000874
 80060d8:	20000774 	.word	0x20000774
 80060dc:	20000880 	.word	0x20000880
 80060e0:	20000890 	.word	0x20000890
 80060e4:	2000087c 	.word	0x2000087c
 80060e8:	20000778 	.word	0x20000778
 80060ec:	e000ed04 	.word	0xe000ed04

080060f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d018      	beq.n	8006134 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006102:	4b14      	ldr	r3, [pc, #80]	@ (8006154 <vTaskDelay+0x64>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <vTaskDelay+0x32>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	60bb      	str	r3, [r7, #8]
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	e7fd      	b.n	800611e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006122:	f000 f885 	bl	8006230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006126:	2100      	movs	r1, #0
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fb27 	bl	800677c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800612e:	f000 f88d 	bl	800624c <xTaskResumeAll>
 8006132:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800613a:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <vTaskDelay+0x68>)
 800613c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	2000089c 	.word	0x2000089c
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	@ 0x28
 8006160:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800616a:	463a      	mov	r2, r7
 800616c:	1d39      	adds	r1, r7, #4
 800616e:	f107 0308 	add.w	r3, r7, #8
 8006172:	4618      	mov	r0, r3
 8006174:	f7fa fef8 	bl	8000f68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	9202      	str	r2, [sp, #8]
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	2300      	movs	r3, #0
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	2300      	movs	r3, #0
 8006188:	460a      	mov	r2, r1
 800618a:	4921      	ldr	r1, [pc, #132]	@ (8006210 <vTaskStartScheduler+0xb4>)
 800618c:	4821      	ldr	r0, [pc, #132]	@ (8006214 <vTaskStartScheduler+0xb8>)
 800618e:	f7ff fe00 	bl	8005d92 <xTaskCreateStatic>
 8006192:	4603      	mov	r3, r0
 8006194:	4a20      	ldr	r2, [pc, #128]	@ (8006218 <vTaskStartScheduler+0xbc>)
 8006196:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006198:	4b1f      	ldr	r3, [pc, #124]	@ (8006218 <vTaskStartScheduler+0xbc>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e001      	b.n	80061aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d11b      	bne.n	80061e8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
}
 80061c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061c4:	4b15      	ldr	r3, [pc, #84]	@ (800621c <vTaskStartScheduler+0xc0>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	335c      	adds	r3, #92	@ 0x5c
 80061ca:	4a15      	ldr	r2, [pc, #84]	@ (8006220 <vTaskStartScheduler+0xc4>)
 80061cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061ce:	4b15      	ldr	r3, [pc, #84]	@ (8006224 <vTaskStartScheduler+0xc8>)
 80061d0:	f04f 32ff 	mov.w	r2, #4294967295
 80061d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061d6:	4b14      	ldr	r3, [pc, #80]	@ (8006228 <vTaskStartScheduler+0xcc>)
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061dc:	4b13      	ldr	r3, [pc, #76]	@ (800622c <vTaskStartScheduler+0xd0>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061e2:	f000 fbbd 	bl	8006960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061e6:	e00f      	b.n	8006208 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d10b      	bne.n	8006208 <vTaskStartScheduler+0xac>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	60fb      	str	r3, [r7, #12]
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	e7fd      	b.n	8006204 <vTaskStartScheduler+0xa8>
}
 8006208:	bf00      	nop
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	0800a290 	.word	0x0800a290
 8006214:	080065c5 	.word	0x080065c5
 8006218:	20000898 	.word	0x20000898
 800621c:	20000774 	.word	0x20000774
 8006220:	20000078 	.word	0x20000078
 8006224:	20000894 	.word	0x20000894
 8006228:	20000880 	.word	0x20000880
 800622c:	20000878 	.word	0x20000878

08006230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006234:	4b04      	ldr	r3, [pc, #16]	@ (8006248 <vTaskSuspendAll+0x18>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	4a03      	ldr	r2, [pc, #12]	@ (8006248 <vTaskSuspendAll+0x18>)
 800623c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800623e:	bf00      	nop
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	2000089c 	.word	0x2000089c

0800624c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006256:	2300      	movs	r3, #0
 8006258:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800625a:	4b42      	ldr	r3, [pc, #264]	@ (8006364 <xTaskResumeAll+0x118>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10b      	bne.n	800627a <xTaskResumeAll+0x2e>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	603b      	str	r3, [r7, #0]
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800627a:	f000 fc15 	bl	8006aa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800627e:	4b39      	ldr	r3, [pc, #228]	@ (8006364 <xTaskResumeAll+0x118>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3b01      	subs	r3, #1
 8006284:	4a37      	ldr	r2, [pc, #220]	@ (8006364 <xTaskResumeAll+0x118>)
 8006286:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006288:	4b36      	ldr	r3, [pc, #216]	@ (8006364 <xTaskResumeAll+0x118>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d161      	bne.n	8006354 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006290:	4b35      	ldr	r3, [pc, #212]	@ (8006368 <xTaskResumeAll+0x11c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d05d      	beq.n	8006354 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006298:	e02e      	b.n	80062f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629a:	4b34      	ldr	r3, [pc, #208]	@ (800636c <xTaskResumeAll+0x120>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3318      	adds	r3, #24
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fd49 	bl	8005d3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff fd44 	bl	8005d3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	2201      	movs	r2, #1
 80062bc:	409a      	lsls	r2, r3
 80062be:	4b2c      	ldr	r3, [pc, #176]	@ (8006370 <xTaskResumeAll+0x124>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006370 <xTaskResumeAll+0x124>)
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4a27      	ldr	r2, [pc, #156]	@ (8006374 <xTaskResumeAll+0x128>)
 80062d6:	441a      	add	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f7ff fcd0 	bl	8005c84 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e8:	4b23      	ldr	r3, [pc, #140]	@ (8006378 <xTaskResumeAll+0x12c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d302      	bcc.n	80062f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062f2:	4b22      	ldr	r3, [pc, #136]	@ (800637c <xTaskResumeAll+0x130>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062f8:	4b1c      	ldr	r3, [pc, #112]	@ (800636c <xTaskResumeAll+0x120>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1cc      	bne.n	800629a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006306:	f000 fa19 	bl	800673c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800630a:	4b1d      	ldr	r3, [pc, #116]	@ (8006380 <xTaskResumeAll+0x134>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006316:	f000 f837 	bl	8006388 <xTaskIncrementTick>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006320:	4b16      	ldr	r3, [pc, #88]	@ (800637c <xTaskResumeAll+0x130>)
 8006322:	2201      	movs	r2, #1
 8006324:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3b01      	subs	r3, #1
 800632a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f1      	bne.n	8006316 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006332:	4b13      	ldr	r3, [pc, #76]	@ (8006380 <xTaskResumeAll+0x134>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006338:	4b10      	ldr	r3, [pc, #64]	@ (800637c <xTaskResumeAll+0x130>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006340:	2301      	movs	r3, #1
 8006342:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006344:	4b0f      	ldr	r3, [pc, #60]	@ (8006384 <xTaskResumeAll+0x138>)
 8006346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006354:	f000 fbda 	bl	8006b0c <vPortExitCritical>

	return xAlreadyYielded;
 8006358:	68bb      	ldr	r3, [r7, #8]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	2000089c 	.word	0x2000089c
 8006368:	20000874 	.word	0x20000874
 800636c:	20000834 	.word	0x20000834
 8006370:	2000087c 	.word	0x2000087c
 8006374:	20000778 	.word	0x20000778
 8006378:	20000774 	.word	0x20000774
 800637c:	20000888 	.word	0x20000888
 8006380:	20000884 	.word	0x20000884
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006392:	4b4f      	ldr	r3, [pc, #316]	@ (80064d0 <xTaskIncrementTick+0x148>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f040 808f 	bne.w	80064ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800639c:	4b4d      	ldr	r3, [pc, #308]	@ (80064d4 <xTaskIncrementTick+0x14c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3301      	adds	r3, #1
 80063a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063a4:	4a4b      	ldr	r2, [pc, #300]	@ (80064d4 <xTaskIncrementTick+0x14c>)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d121      	bne.n	80063f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80063b0:	4b49      	ldr	r3, [pc, #292]	@ (80064d8 <xTaskIncrementTick+0x150>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	603b      	str	r3, [r7, #0]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <xTaskIncrementTick+0x46>
 80063d2:	4b41      	ldr	r3, [pc, #260]	@ (80064d8 <xTaskIncrementTick+0x150>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	4b40      	ldr	r3, [pc, #256]	@ (80064dc <xTaskIncrementTick+0x154>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a3e      	ldr	r2, [pc, #248]	@ (80064d8 <xTaskIncrementTick+0x150>)
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	4a3e      	ldr	r2, [pc, #248]	@ (80064dc <xTaskIncrementTick+0x154>)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b3e      	ldr	r3, [pc, #248]	@ (80064e0 <xTaskIncrementTick+0x158>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	4a3c      	ldr	r2, [pc, #240]	@ (80064e0 <xTaskIncrementTick+0x158>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	f000 f9a4 	bl	800673c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063f4:	4b3b      	ldr	r3, [pc, #236]	@ (80064e4 <xTaskIncrementTick+0x15c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d348      	bcc.n	8006490 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063fe:	4b36      	ldr	r3, [pc, #216]	@ (80064d8 <xTaskIncrementTick+0x150>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006408:	4b36      	ldr	r3, [pc, #216]	@ (80064e4 <xTaskIncrementTick+0x15c>)
 800640a:	f04f 32ff 	mov.w	r2, #4294967295
 800640e:	601a      	str	r2, [r3, #0]
					break;
 8006410:	e03e      	b.n	8006490 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006412:	4b31      	ldr	r3, [pc, #196]	@ (80064d8 <xTaskIncrementTick+0x150>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d203      	bcs.n	8006432 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800642a:	4a2e      	ldr	r2, [pc, #184]	@ (80064e4 <xTaskIncrementTick+0x15c>)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006430:	e02e      	b.n	8006490 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	3304      	adds	r3, #4
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fc81 	bl	8005d3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	3318      	adds	r3, #24
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fc78 	bl	8005d3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	2201      	movs	r2, #1
 8006454:	409a      	lsls	r2, r3
 8006456:	4b24      	ldr	r3, [pc, #144]	@ (80064e8 <xTaskIncrementTick+0x160>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4313      	orrs	r3, r2
 800645c:	4a22      	ldr	r2, [pc, #136]	@ (80064e8 <xTaskIncrementTick+0x160>)
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4a1f      	ldr	r2, [pc, #124]	@ (80064ec <xTaskIncrementTick+0x164>)
 800646e:	441a      	add	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f7ff fc04 	bl	8005c84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006480:	4b1b      	ldr	r3, [pc, #108]	@ (80064f0 <xTaskIncrementTick+0x168>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006486:	429a      	cmp	r2, r3
 8006488:	d3b9      	bcc.n	80063fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800648a:	2301      	movs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800648e:	e7b6      	b.n	80063fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006490:	4b17      	ldr	r3, [pc, #92]	@ (80064f0 <xTaskIncrementTick+0x168>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006496:	4915      	ldr	r1, [pc, #84]	@ (80064ec <xTaskIncrementTick+0x164>)
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d901      	bls.n	80064ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064ac:	4b11      	ldr	r3, [pc, #68]	@ (80064f4 <xTaskIncrementTick+0x16c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064b4:	2301      	movs	r3, #1
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e004      	b.n	80064c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064ba:	4b0f      	ldr	r3, [pc, #60]	@ (80064f8 <xTaskIncrementTick+0x170>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3301      	adds	r3, #1
 80064c0:	4a0d      	ldr	r2, [pc, #52]	@ (80064f8 <xTaskIncrementTick+0x170>)
 80064c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064c4:	697b      	ldr	r3, [r7, #20]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	2000089c 	.word	0x2000089c
 80064d4:	20000878 	.word	0x20000878
 80064d8:	2000082c 	.word	0x2000082c
 80064dc:	20000830 	.word	0x20000830
 80064e0:	2000088c 	.word	0x2000088c
 80064e4:	20000894 	.word	0x20000894
 80064e8:	2000087c 	.word	0x2000087c
 80064ec:	20000778 	.word	0x20000778
 80064f0:	20000774 	.word	0x20000774
 80064f4:	20000888 	.word	0x20000888
 80064f8:	20000884 	.word	0x20000884

080064fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006502:	4b2a      	ldr	r3, [pc, #168]	@ (80065ac <vTaskSwitchContext+0xb0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800650a:	4b29      	ldr	r3, [pc, #164]	@ (80065b0 <vTaskSwitchContext+0xb4>)
 800650c:	2201      	movs	r2, #1
 800650e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006510:	e045      	b.n	800659e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006512:	4b27      	ldr	r3, [pc, #156]	@ (80065b0 <vTaskSwitchContext+0xb4>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006518:	4b26      	ldr	r3, [pc, #152]	@ (80065b4 <vTaskSwitchContext+0xb8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	fab3 f383 	clz	r3, r3
 8006524:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	f1c3 031f 	rsb	r3, r3, #31
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	4922      	ldr	r1, [pc, #136]	@ (80065b8 <vTaskSwitchContext+0xbc>)
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10b      	bne.n	800655a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	607b      	str	r3, [r7, #4]
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	e7fd      	b.n	8006556 <vTaskSwitchContext+0x5a>
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4a14      	ldr	r2, [pc, #80]	@ (80065b8 <vTaskSwitchContext+0xbc>)
 8006566:	4413      	add	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	3308      	adds	r3, #8
 800657c:	429a      	cmp	r2, r3
 800657e:	d104      	bne.n	800658a <vTaskSwitchContext+0x8e>
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	605a      	str	r2, [r3, #4]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a0a      	ldr	r2, [pc, #40]	@ (80065bc <vTaskSwitchContext+0xc0>)
 8006592:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006594:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <vTaskSwitchContext+0xc0>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	335c      	adds	r3, #92	@ 0x5c
 800659a:	4a09      	ldr	r2, [pc, #36]	@ (80065c0 <vTaskSwitchContext+0xc4>)
 800659c:	6013      	str	r3, [r2, #0]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	2000089c 	.word	0x2000089c
 80065b0:	20000888 	.word	0x20000888
 80065b4:	2000087c 	.word	0x2000087c
 80065b8:	20000778 	.word	0x20000778
 80065bc:	20000774 	.word	0x20000774
 80065c0:	20000078 	.word	0x20000078

080065c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065cc:	f000 f852 	bl	8006674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065d0:	4b06      	ldr	r3, [pc, #24]	@ (80065ec <prvIdleTask+0x28>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d9f9      	bls.n	80065cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80065d8:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <prvIdleTask+0x2c>)
 80065da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065e8:	e7f0      	b.n	80065cc <prvIdleTask+0x8>
 80065ea:	bf00      	nop
 80065ec:	20000778 	.word	0x20000778
 80065f0:	e000ed04 	.word	0xe000ed04

080065f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
 80065fe:	e00c      	b.n	800661a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4a12      	ldr	r2, [pc, #72]	@ (8006654 <prvInitialiseTaskLists+0x60>)
 800660c:	4413      	add	r3, r2
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fb0b 	bl	8005c2a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3301      	adds	r3, #1
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b06      	cmp	r3, #6
 800661e:	d9ef      	bls.n	8006600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006620:	480d      	ldr	r0, [pc, #52]	@ (8006658 <prvInitialiseTaskLists+0x64>)
 8006622:	f7ff fb02 	bl	8005c2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006626:	480d      	ldr	r0, [pc, #52]	@ (800665c <prvInitialiseTaskLists+0x68>)
 8006628:	f7ff faff 	bl	8005c2a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800662c:	480c      	ldr	r0, [pc, #48]	@ (8006660 <prvInitialiseTaskLists+0x6c>)
 800662e:	f7ff fafc 	bl	8005c2a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006632:	480c      	ldr	r0, [pc, #48]	@ (8006664 <prvInitialiseTaskLists+0x70>)
 8006634:	f7ff faf9 	bl	8005c2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006638:	480b      	ldr	r0, [pc, #44]	@ (8006668 <prvInitialiseTaskLists+0x74>)
 800663a:	f7ff faf6 	bl	8005c2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800663e:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <prvInitialiseTaskLists+0x78>)
 8006640:	4a05      	ldr	r2, [pc, #20]	@ (8006658 <prvInitialiseTaskLists+0x64>)
 8006642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006644:	4b0a      	ldr	r3, [pc, #40]	@ (8006670 <prvInitialiseTaskLists+0x7c>)
 8006646:	4a05      	ldr	r2, [pc, #20]	@ (800665c <prvInitialiseTaskLists+0x68>)
 8006648:	601a      	str	r2, [r3, #0]
}
 800664a:	bf00      	nop
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000778 	.word	0x20000778
 8006658:	20000804 	.word	0x20000804
 800665c:	20000818 	.word	0x20000818
 8006660:	20000834 	.word	0x20000834
 8006664:	20000848 	.word	0x20000848
 8006668:	20000860 	.word	0x20000860
 800666c:	2000082c 	.word	0x2000082c
 8006670:	20000830 	.word	0x20000830

08006674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800667a:	e019      	b.n	80066b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800667c:	f000 fa14 	bl	8006aa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006680:	4b10      	ldr	r3, [pc, #64]	@ (80066c4 <prvCheckTasksWaitingTermination+0x50>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3304      	adds	r3, #4
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fb56 	bl	8005d3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006692:	4b0d      	ldr	r3, [pc, #52]	@ (80066c8 <prvCheckTasksWaitingTermination+0x54>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3b01      	subs	r3, #1
 8006698:	4a0b      	ldr	r2, [pc, #44]	@ (80066c8 <prvCheckTasksWaitingTermination+0x54>)
 800669a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800669c:	4b0b      	ldr	r3, [pc, #44]	@ (80066cc <prvCheckTasksWaitingTermination+0x58>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	4a0a      	ldr	r2, [pc, #40]	@ (80066cc <prvCheckTasksWaitingTermination+0x58>)
 80066a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066a6:	f000 fa31 	bl	8006b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f810 	bl	80066d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066b0:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <prvCheckTasksWaitingTermination+0x58>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e1      	bne.n	800667c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000848 	.word	0x20000848
 80066c8:	20000874 	.word	0x20000874
 80066cc:	2000085c 	.word	0x2000085c

080066d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	335c      	adds	r3, #92	@ 0x5c
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 fad3 	bl	8007c88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d108      	bne.n	80066fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fb87 	bl	8006e04 <vPortFree>
				vPortFree( pxTCB );
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fb84 	bl	8006e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066fc:	e019      	b.n	8006732 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006704:	2b01      	cmp	r3, #1
 8006706:	d103      	bne.n	8006710 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fb7b 	bl	8006e04 <vPortFree>
	}
 800670e:	e010      	b.n	8006732 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006716:	2b02      	cmp	r3, #2
 8006718:	d00b      	beq.n	8006732 <prvDeleteTCB+0x62>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	60fb      	str	r3, [r7, #12]
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	e7fd      	b.n	800672e <prvDeleteTCB+0x5e>
	}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006742:	4b0c      	ldr	r3, [pc, #48]	@ (8006774 <prvResetNextTaskUnblockTime+0x38>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800674c:	4b0a      	ldr	r3, [pc, #40]	@ (8006778 <prvResetNextTaskUnblockTime+0x3c>)
 800674e:	f04f 32ff 	mov.w	r2, #4294967295
 8006752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006754:	e008      	b.n	8006768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006756:	4b07      	ldr	r3, [pc, #28]	@ (8006774 <prvResetNextTaskUnblockTime+0x38>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4a04      	ldr	r2, [pc, #16]	@ (8006778 <prvResetNextTaskUnblockTime+0x3c>)
 8006766:	6013      	str	r3, [r2, #0]
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	2000082c 	.word	0x2000082c
 8006778:	20000894 	.word	0x20000894

0800677c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006786:	4b29      	ldr	r3, [pc, #164]	@ (800682c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800678c:	4b28      	ldr	r3, [pc, #160]	@ (8006830 <prvAddCurrentTaskToDelayedList+0xb4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fad3 	bl	8005d3e <uxListRemove>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10b      	bne.n	80067b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800679e:	4b24      	ldr	r3, [pc, #144]	@ (8006830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	2201      	movs	r2, #1
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43da      	mvns	r2, r3
 80067ac:	4b21      	ldr	r3, [pc, #132]	@ (8006834 <prvAddCurrentTaskToDelayedList+0xb8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4013      	ands	r3, r2
 80067b2:	4a20      	ldr	r2, [pc, #128]	@ (8006834 <prvAddCurrentTaskToDelayedList+0xb8>)
 80067b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067bc:	d10a      	bne.n	80067d4 <prvAddCurrentTaskToDelayedList+0x58>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4619      	mov	r1, r3
 80067cc:	481a      	ldr	r0, [pc, #104]	@ (8006838 <prvAddCurrentTaskToDelayedList+0xbc>)
 80067ce:	f7ff fa59 	bl	8005c84 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067d2:	e026      	b.n	8006822 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4413      	add	r3, r2
 80067da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067dc:	4b14      	ldr	r3, [pc, #80]	@ (8006830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d209      	bcs.n	8006800 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ec:	4b13      	ldr	r3, [pc, #76]	@ (800683c <prvAddCurrentTaskToDelayedList+0xc0>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006830 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f7ff fa67 	bl	8005ccc <vListInsert>
}
 80067fe:	e010      	b.n	8006822 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006800:	4b0f      	ldr	r3, [pc, #60]	@ (8006840 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	4b0a      	ldr	r3, [pc, #40]	@ (8006830 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3304      	adds	r3, #4
 800680a:	4619      	mov	r1, r3
 800680c:	4610      	mov	r0, r2
 800680e:	f7ff fa5d 	bl	8005ccc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006812:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	429a      	cmp	r2, r3
 800681a:	d202      	bcs.n	8006822 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800681c:	4a09      	ldr	r2, [pc, #36]	@ (8006844 <prvAddCurrentTaskToDelayedList+0xc8>)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6013      	str	r3, [r2, #0]
}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000878 	.word	0x20000878
 8006830:	20000774 	.word	0x20000774
 8006834:	2000087c 	.word	0x2000087c
 8006838:	20000860 	.word	0x20000860
 800683c:	20000830 	.word	0x20000830
 8006840:	2000082c 	.word	0x2000082c
 8006844:	20000894 	.word	0x20000894

08006848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3b04      	subs	r3, #4
 8006858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3b04      	subs	r3, #4
 8006866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f023 0201 	bic.w	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3b04      	subs	r3, #4
 8006876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006878:	4a0c      	ldr	r2, [pc, #48]	@ (80068ac <pxPortInitialiseStack+0x64>)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3b14      	subs	r3, #20
 8006882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3b04      	subs	r3, #4
 800688e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f06f 0202 	mvn.w	r2, #2
 8006896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3b20      	subs	r3, #32
 800689c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800689e:	68fb      	ldr	r3, [r7, #12]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	080068b1 	.word	0x080068b1

080068b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068ba:	4b13      	ldr	r3, [pc, #76]	@ (8006908 <prvTaskExitError+0x58>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d00b      	beq.n	80068dc <prvTaskExitError+0x2c>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	60fb      	str	r3, [r7, #12]
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <prvTaskExitError+0x28>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	60bb      	str	r3, [r7, #8]
}
 80068ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068f0:	bf00      	nop
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0fc      	beq.n	80068f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	20000068 	.word	0x20000068
 800690c:	00000000 	.word	0x00000000

08006910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006910:	4b07      	ldr	r3, [pc, #28]	@ (8006930 <pxCurrentTCBConst2>)
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	6808      	ldr	r0, [r1, #0]
 8006916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691a:	f380 8809 	msr	PSP, r0
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8811 	msr	BASEPRI, r0
 800692a:	4770      	bx	lr
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst2>:
 8006930:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006938:	4808      	ldr	r0, [pc, #32]	@ (800695c <prvPortStartFirstTask+0x24>)
 800693a:	6800      	ldr	r0, [r0, #0]
 800693c:	6800      	ldr	r0, [r0, #0]
 800693e:	f380 8808 	msr	MSP, r0
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8814 	msr	CONTROL, r0
 800694a:	b662      	cpsie	i
 800694c:	b661      	cpsie	f
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	df00      	svc	0
 8006958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800695a:	bf00      	nop
 800695c:	e000ed08 	.word	0xe000ed08

08006960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006966:	4b47      	ldr	r3, [pc, #284]	@ (8006a84 <xPortStartScheduler+0x124>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a47      	ldr	r2, [pc, #284]	@ (8006a88 <xPortStartScheduler+0x128>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10b      	bne.n	8006988 <xPortStartScheduler+0x28>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	613b      	str	r3, [r7, #16]
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	e7fd      	b.n	8006984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006988:	4b3e      	ldr	r3, [pc, #248]	@ (8006a84 <xPortStartScheduler+0x124>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a8c <xPortStartScheduler+0x12c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d10b      	bne.n	80069aa <xPortStartScheduler+0x4a>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60fb      	str	r3, [r7, #12]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069aa:	4b39      	ldr	r3, [pc, #228]	@ (8006a90 <xPortStartScheduler+0x130>)
 80069ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	22ff      	movs	r2, #255	@ 0xff
 80069ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	4b31      	ldr	r3, [pc, #196]	@ (8006a94 <xPortStartScheduler+0x134>)
 80069d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069d2:	4b31      	ldr	r3, [pc, #196]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069d4:	2207      	movs	r2, #7
 80069d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069d8:	e009      	b.n	80069ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80069da:	4b2f      	ldr	r3, [pc, #188]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3b01      	subs	r3, #1
 80069e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f6:	2b80      	cmp	r3, #128	@ 0x80
 80069f8:	d0ef      	beq.n	80069da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069fa:	4b27      	ldr	r3, [pc, #156]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1c3 0307 	rsb	r3, r3, #7
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d00b      	beq.n	8006a1e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	60bb      	str	r3, [r7, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	e7fd      	b.n	8006a1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	4a1c      	ldr	r2, [pc, #112]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a28:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a30:	4a19      	ldr	r2, [pc, #100]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a3c:	4b17      	ldr	r3, [pc, #92]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a48:	4b14      	ldr	r3, [pc, #80]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a13      	ldr	r2, [pc, #76]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a54:	f000 f8da 	bl	8006c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a58:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <xPortStartScheduler+0x140>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a5e:	f000 f8f9 	bl	8006c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a62:	4b10      	ldr	r3, [pc, #64]	@ (8006aa4 <xPortStartScheduler+0x144>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a0f      	ldr	r2, [pc, #60]	@ (8006aa4 <xPortStartScheduler+0x144>)
 8006a68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006a6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a6e:	f7ff ff63 	bl	8006938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a72:	f7ff fd43 	bl	80064fc <vTaskSwitchContext>
	prvTaskExitError();
 8006a76:	f7ff ff1b 	bl	80068b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	e000ed00 	.word	0xe000ed00
 8006a88:	410fc271 	.word	0x410fc271
 8006a8c:	410fc270 	.word	0x410fc270
 8006a90:	e000e400 	.word	0xe000e400
 8006a94:	200008a0 	.word	0x200008a0
 8006a98:	200008a4 	.word	0x200008a4
 8006a9c:	e000ed20 	.word	0xe000ed20
 8006aa0:	20000068 	.word	0x20000068
 8006aa4:	e000ef34 	.word	0xe000ef34

08006aa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ac2:	4b10      	ldr	r3, [pc, #64]	@ (8006b04 <vPortEnterCritical+0x5c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b04 <vPortEnterCritical+0x5c>)
 8006aca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006acc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <vPortEnterCritical+0x5c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d110      	bne.n	8006af6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b08 <vPortEnterCritical+0x60>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	603b      	str	r3, [r7, #0]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <vPortEnterCritical+0x4a>
	}
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000068 	.word	0x20000068
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b12:	4b12      	ldr	r3, [pc, #72]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <vPortExitCritical+0x26>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	607b      	str	r3, [r7, #4]
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	e7fd      	b.n	8006b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b32:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	4a08      	ldr	r2, [pc, #32]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b3c:	4b07      	ldr	r3, [pc, #28]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d105      	bne.n	8006b50 <vPortExitCritical+0x44>
 8006b44:	2300      	movs	r3, #0
 8006b46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	20000068 	.word	0x20000068

08006b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b60:	f3ef 8009 	mrs	r0, PSP
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4b15      	ldr	r3, [pc, #84]	@ (8006bc0 <pxCurrentTCBConst>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	f01e 0f10 	tst.w	lr, #16
 8006b70:	bf08      	it	eq
 8006b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7a:	6010      	str	r0, [r2, #0]
 8006b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006b84:	f380 8811 	msr	BASEPRI, r0
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f7ff fcb4 	bl	80064fc <vTaskSwitchContext>
 8006b94:	f04f 0000 	mov.w	r0, #0
 8006b98:	f380 8811 	msr	BASEPRI, r0
 8006b9c:	bc09      	pop	{r0, r3}
 8006b9e:	6819      	ldr	r1, [r3, #0]
 8006ba0:	6808      	ldr	r0, [r1, #0]
 8006ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba6:	f01e 0f10 	tst.w	lr, #16
 8006baa:	bf08      	it	eq
 8006bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bb0:	f380 8809 	msr	PSP, r0
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	f3af 8000 	nop.w

08006bc0 <pxCurrentTCBConst>:
 8006bc0:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop

08006bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
}
 8006be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006be2:	f7ff fbd1 	bl	8006388 <xTaskIncrementTick>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bec:	4b06      	ldr	r3, [pc, #24]	@ (8006c08 <SysTick_Handler+0x40>)
 8006bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	f383 8811 	msr	BASEPRI, r3
}
 8006bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <vPortSetupTimerInterrupt+0x34>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c16:	4b0b      	ldr	r3, [pc, #44]	@ (8006c44 <vPortSetupTimerInterrupt+0x38>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c48 <vPortSetupTimerInterrupt+0x3c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a0a      	ldr	r2, [pc, #40]	@ (8006c4c <vPortSetupTimerInterrupt+0x40>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	099b      	lsrs	r3, r3, #6
 8006c28:	4a09      	ldr	r2, [pc, #36]	@ (8006c50 <vPortSetupTimerInterrupt+0x44>)
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c2e:	4b04      	ldr	r3, [pc, #16]	@ (8006c40 <vPortSetupTimerInterrupt+0x34>)
 8006c30:	2207      	movs	r2, #7
 8006c32:	601a      	str	r2, [r3, #0]
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	e000e010 	.word	0xe000e010
 8006c44:	e000e018 	.word	0xe000e018
 8006c48:	2000005c 	.word	0x2000005c
 8006c4c:	10624dd3 	.word	0x10624dd3
 8006c50:	e000e014 	.word	0xe000e014

08006c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c64 <vPortEnableVFP+0x10>
 8006c58:	6801      	ldr	r1, [r0, #0]
 8006c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c5e:	6001      	str	r1, [r0, #0]
 8006c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c62:	bf00      	nop
 8006c64:	e000ed88 	.word	0xe000ed88

08006c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	@ 0x28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c74:	f7ff fadc 	bl	8006230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c78:	4b5c      	ldr	r3, [pc, #368]	@ (8006dec <pvPortMalloc+0x184>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c80:	f000 f924 	bl	8006ecc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c84:	4b5a      	ldr	r3, [pc, #360]	@ (8006df0 <pvPortMalloc+0x188>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f040 8095 	bne.w	8006dbc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01e      	beq.n	8006cd6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c98:	2208      	movs	r2, #8
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d015      	beq.n	8006cd6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <pvPortMalloc+0x6e>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	617b      	str	r3, [r7, #20]
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	e7fd      	b.n	8006cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d06f      	beq.n	8006dbc <pvPortMalloc+0x154>
 8006cdc:	4b45      	ldr	r3, [pc, #276]	@ (8006df4 <pvPortMalloc+0x18c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d86a      	bhi.n	8006dbc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ce6:	4b44      	ldr	r3, [pc, #272]	@ (8006df8 <pvPortMalloc+0x190>)
 8006ce8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cea:	4b43      	ldr	r3, [pc, #268]	@ (8006df8 <pvPortMalloc+0x190>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cf0:	e004      	b.n	8006cfc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d903      	bls.n	8006d0e <pvPortMalloc+0xa6>
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f1      	bne.n	8006cf2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d0e:	4b37      	ldr	r3, [pc, #220]	@ (8006dec <pvPortMalloc+0x184>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d051      	beq.n	8006dbc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	4413      	add	r3, r2
 8006d20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	1ad2      	subs	r2, r2, r3
 8006d32:	2308      	movs	r3, #8
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d920      	bls.n	8006d7c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4413      	add	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <pvPortMalloc+0xfc>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	613b      	str	r3, [r7, #16]
}
 8006d5e:	bf00      	nop
 8006d60:	bf00      	nop
 8006d62:	e7fd      	b.n	8006d60 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1ad2      	subs	r2, r2, r3
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d76:	69b8      	ldr	r0, [r7, #24]
 8006d78:	f000 f90a 	bl	8006f90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006df4 <pvPortMalloc+0x18c>)
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	4a1b      	ldr	r2, [pc, #108]	@ (8006df4 <pvPortMalloc+0x18c>)
 8006d88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006df4 <pvPortMalloc+0x18c>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006dfc <pvPortMalloc+0x194>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d203      	bcs.n	8006d9e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d96:	4b17      	ldr	r3, [pc, #92]	@ (8006df4 <pvPortMalloc+0x18c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a18      	ldr	r2, [pc, #96]	@ (8006dfc <pvPortMalloc+0x194>)
 8006d9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	4b13      	ldr	r3, [pc, #76]	@ (8006df0 <pvPortMalloc+0x188>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006daa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006db2:	4b13      	ldr	r3, [pc, #76]	@ (8006e00 <pvPortMalloc+0x198>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3301      	adds	r3, #1
 8006db8:	4a11      	ldr	r2, [pc, #68]	@ (8006e00 <pvPortMalloc+0x198>)
 8006dba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006dbc:	f7ff fa46 	bl	800624c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00b      	beq.n	8006de2 <pvPortMalloc+0x17a>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60fb      	str	r3, [r7, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <pvPortMalloc+0x176>
	return pvReturn;
 8006de2:	69fb      	ldr	r3, [r7, #28]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3728      	adds	r7, #40	@ 0x28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	200044b0 	.word	0x200044b0
 8006df0:	200044c4 	.word	0x200044c4
 8006df4:	200044b4 	.word	0x200044b4
 8006df8:	200044a8 	.word	0x200044a8
 8006dfc:	200044b8 	.word	0x200044b8
 8006e00:	200044bc 	.word	0x200044bc

08006e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d04f      	beq.n	8006eb6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e16:	2308      	movs	r3, #8
 8006e18:	425b      	negs	r3, r3
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	4b25      	ldr	r3, [pc, #148]	@ (8006ec0 <vPortFree+0xbc>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10b      	bne.n	8006e4a <vPortFree+0x46>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60fb      	str	r3, [r7, #12]
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	e7fd      	b.n	8006e46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00b      	beq.n	8006e6a <vPortFree+0x66>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	60bb      	str	r3, [r7, #8]
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop
 8006e68:	e7fd      	b.n	8006e66 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ec0 <vPortFree+0xbc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01e      	beq.n	8006eb6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d11a      	bne.n	8006eb6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	4b0e      	ldr	r3, [pc, #56]	@ (8006ec0 <vPortFree+0xbc>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	401a      	ands	r2, r3
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e90:	f7ff f9ce 	bl	8006230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec4 <vPortFree+0xc0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	4a09      	ldr	r2, [pc, #36]	@ (8006ec4 <vPortFree+0xc0>)
 8006ea0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ea2:	6938      	ldr	r0, [r7, #16]
 8006ea4:	f000 f874 	bl	8006f90 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ea8:	4b07      	ldr	r3, [pc, #28]	@ (8006ec8 <vPortFree+0xc4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3301      	adds	r3, #1
 8006eae:	4a06      	ldr	r2, [pc, #24]	@ (8006ec8 <vPortFree+0xc4>)
 8006eb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006eb2:	f7ff f9cb 	bl	800624c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200044c4 	.word	0x200044c4
 8006ec4:	200044b4 	.word	0x200044b4
 8006ec8:	200044c0 	.word	0x200044c0

08006ecc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ed2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006ed6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ed8:	4b27      	ldr	r3, [pc, #156]	@ (8006f78 <prvHeapInit+0xac>)
 8006eda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00c      	beq.n	8006f00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3307      	adds	r3, #7
 8006eea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0307 	bic.w	r3, r3, #7
 8006ef2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	4a1f      	ldr	r2, [pc, #124]	@ (8006f78 <prvHeapInit+0xac>)
 8006efc:	4413      	add	r3, r2
 8006efe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f04:	4a1d      	ldr	r2, [pc, #116]	@ (8006f7c <prvHeapInit+0xb0>)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006f7c <prvHeapInit+0xb0>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4413      	add	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f18:	2208      	movs	r2, #8
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0307 	bic.w	r3, r3, #7
 8006f26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <prvHeapInit+0xb4>)
 8006f2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f2e:	4b14      	ldr	r3, [pc, #80]	@ (8006f80 <prvHeapInit+0xb4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f36:	4b12      	ldr	r3, [pc, #72]	@ (8006f80 <prvHeapInit+0xb4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f80 <prvHeapInit+0xb4>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4a0a      	ldr	r2, [pc, #40]	@ (8006f84 <prvHeapInit+0xb8>)
 8006f5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4a09      	ldr	r2, [pc, #36]	@ (8006f88 <prvHeapInit+0xbc>)
 8006f62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f64:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <prvHeapInit+0xc0>)
 8006f66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006f6a:	601a      	str	r2, [r3, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	200008a8 	.word	0x200008a8
 8006f7c:	200044a8 	.word	0x200044a8
 8006f80:	200044b0 	.word	0x200044b0
 8006f84:	200044b8 	.word	0x200044b8
 8006f88:	200044b4 	.word	0x200044b4
 8006f8c:	200044c4 	.word	0x200044c4

08006f90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f98:	4b28      	ldr	r3, [pc, #160]	@ (800703c <prvInsertBlockIntoFreeList+0xac>)
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e002      	b.n	8006fa4 <prvInsertBlockIntoFreeList+0x14>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d8f7      	bhi.n	8006f9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d108      	bne.n	8006fd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	441a      	add	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	441a      	add	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d118      	bne.n	8007018 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4b15      	ldr	r3, [pc, #84]	@ (8007040 <prvInsertBlockIntoFreeList+0xb0>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d00d      	beq.n	800700e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	441a      	add	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e008      	b.n	8007020 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800700e:	4b0c      	ldr	r3, [pc, #48]	@ (8007040 <prvInsertBlockIntoFreeList+0xb0>)
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	e003      	b.n	8007020 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	429a      	cmp	r2, r3
 8007026:	d002      	beq.n	800702e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	200044a8 	.word	0x200044a8
 8007040:	200044b0 	.word	0x200044b0

08007044 <atoi>:
 8007044:	220a      	movs	r2, #10
 8007046:	2100      	movs	r1, #0
 8007048:	f000 b87a 	b.w	8007140 <strtol>

0800704c <_strtol_l.constprop.0>:
 800704c:	2b24      	cmp	r3, #36	@ 0x24
 800704e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007052:	4686      	mov	lr, r0
 8007054:	4690      	mov	r8, r2
 8007056:	d801      	bhi.n	800705c <_strtol_l.constprop.0+0x10>
 8007058:	2b01      	cmp	r3, #1
 800705a:	d106      	bne.n	800706a <_strtol_l.constprop.0+0x1e>
 800705c:	f000 fea0 	bl	8007da0 <__errno>
 8007060:	2316      	movs	r3, #22
 8007062:	6003      	str	r3, [r0, #0]
 8007064:	2000      	movs	r0, #0
 8007066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706a:	4834      	ldr	r0, [pc, #208]	@ (800713c <_strtol_l.constprop.0+0xf0>)
 800706c:	460d      	mov	r5, r1
 800706e:	462a      	mov	r2, r5
 8007070:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007074:	5d06      	ldrb	r6, [r0, r4]
 8007076:	f016 0608 	ands.w	r6, r6, #8
 800707a:	d1f8      	bne.n	800706e <_strtol_l.constprop.0+0x22>
 800707c:	2c2d      	cmp	r4, #45	@ 0x2d
 800707e:	d12d      	bne.n	80070dc <_strtol_l.constprop.0+0x90>
 8007080:	782c      	ldrb	r4, [r5, #0]
 8007082:	2601      	movs	r6, #1
 8007084:	1c95      	adds	r5, r2, #2
 8007086:	f033 0210 	bics.w	r2, r3, #16
 800708a:	d109      	bne.n	80070a0 <_strtol_l.constprop.0+0x54>
 800708c:	2c30      	cmp	r4, #48	@ 0x30
 800708e:	d12a      	bne.n	80070e6 <_strtol_l.constprop.0+0x9a>
 8007090:	782a      	ldrb	r2, [r5, #0]
 8007092:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007096:	2a58      	cmp	r2, #88	@ 0x58
 8007098:	d125      	bne.n	80070e6 <_strtol_l.constprop.0+0x9a>
 800709a:	786c      	ldrb	r4, [r5, #1]
 800709c:	2310      	movs	r3, #16
 800709e:	3502      	adds	r5, #2
 80070a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80070a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80070a8:	2200      	movs	r2, #0
 80070aa:	fbbc f9f3 	udiv	r9, ip, r3
 80070ae:	4610      	mov	r0, r2
 80070b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80070b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80070b8:	2f09      	cmp	r7, #9
 80070ba:	d81b      	bhi.n	80070f4 <_strtol_l.constprop.0+0xa8>
 80070bc:	463c      	mov	r4, r7
 80070be:	42a3      	cmp	r3, r4
 80070c0:	dd27      	ble.n	8007112 <_strtol_l.constprop.0+0xc6>
 80070c2:	1c57      	adds	r7, r2, #1
 80070c4:	d007      	beq.n	80070d6 <_strtol_l.constprop.0+0x8a>
 80070c6:	4581      	cmp	r9, r0
 80070c8:	d320      	bcc.n	800710c <_strtol_l.constprop.0+0xc0>
 80070ca:	d101      	bne.n	80070d0 <_strtol_l.constprop.0+0x84>
 80070cc:	45a2      	cmp	sl, r4
 80070ce:	db1d      	blt.n	800710c <_strtol_l.constprop.0+0xc0>
 80070d0:	fb00 4003 	mla	r0, r0, r3, r4
 80070d4:	2201      	movs	r2, #1
 80070d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070da:	e7eb      	b.n	80070b4 <_strtol_l.constprop.0+0x68>
 80070dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80070de:	bf04      	itt	eq
 80070e0:	782c      	ldrbeq	r4, [r5, #0]
 80070e2:	1c95      	addeq	r5, r2, #2
 80070e4:	e7cf      	b.n	8007086 <_strtol_l.constprop.0+0x3a>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1da      	bne.n	80070a0 <_strtol_l.constprop.0+0x54>
 80070ea:	2c30      	cmp	r4, #48	@ 0x30
 80070ec:	bf0c      	ite	eq
 80070ee:	2308      	moveq	r3, #8
 80070f0:	230a      	movne	r3, #10
 80070f2:	e7d5      	b.n	80070a0 <_strtol_l.constprop.0+0x54>
 80070f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80070f8:	2f19      	cmp	r7, #25
 80070fa:	d801      	bhi.n	8007100 <_strtol_l.constprop.0+0xb4>
 80070fc:	3c37      	subs	r4, #55	@ 0x37
 80070fe:	e7de      	b.n	80070be <_strtol_l.constprop.0+0x72>
 8007100:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007104:	2f19      	cmp	r7, #25
 8007106:	d804      	bhi.n	8007112 <_strtol_l.constprop.0+0xc6>
 8007108:	3c57      	subs	r4, #87	@ 0x57
 800710a:	e7d8      	b.n	80070be <_strtol_l.constprop.0+0x72>
 800710c:	f04f 32ff 	mov.w	r2, #4294967295
 8007110:	e7e1      	b.n	80070d6 <_strtol_l.constprop.0+0x8a>
 8007112:	1c53      	adds	r3, r2, #1
 8007114:	d108      	bne.n	8007128 <_strtol_l.constprop.0+0xdc>
 8007116:	2322      	movs	r3, #34	@ 0x22
 8007118:	f8ce 3000 	str.w	r3, [lr]
 800711c:	4660      	mov	r0, ip
 800711e:	f1b8 0f00 	cmp.w	r8, #0
 8007122:	d0a0      	beq.n	8007066 <_strtol_l.constprop.0+0x1a>
 8007124:	1e69      	subs	r1, r5, #1
 8007126:	e006      	b.n	8007136 <_strtol_l.constprop.0+0xea>
 8007128:	b106      	cbz	r6, 800712c <_strtol_l.constprop.0+0xe0>
 800712a:	4240      	negs	r0, r0
 800712c:	f1b8 0f00 	cmp.w	r8, #0
 8007130:	d099      	beq.n	8007066 <_strtol_l.constprop.0+0x1a>
 8007132:	2a00      	cmp	r2, #0
 8007134:	d1f6      	bne.n	8007124 <_strtol_l.constprop.0+0xd8>
 8007136:	f8c8 1000 	str.w	r1, [r8]
 800713a:	e794      	b.n	8007066 <_strtol_l.constprop.0+0x1a>
 800713c:	0800a2b1 	.word	0x0800a2b1

08007140 <strtol>:
 8007140:	4613      	mov	r3, r2
 8007142:	460a      	mov	r2, r1
 8007144:	4601      	mov	r1, r0
 8007146:	4802      	ldr	r0, [pc, #8]	@ (8007150 <strtol+0x10>)
 8007148:	6800      	ldr	r0, [r0, #0]
 800714a:	f7ff bf7f 	b.w	800704c <_strtol_l.constprop.0>
 800714e:	bf00      	nop
 8007150:	20000078 	.word	0x20000078

08007154 <__cvt>:
 8007154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	ec57 6b10 	vmov	r6, r7, d0
 800715c:	2f00      	cmp	r7, #0
 800715e:	460c      	mov	r4, r1
 8007160:	4619      	mov	r1, r3
 8007162:	463b      	mov	r3, r7
 8007164:	bfbb      	ittet	lt
 8007166:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800716a:	461f      	movlt	r7, r3
 800716c:	2300      	movge	r3, #0
 800716e:	232d      	movlt	r3, #45	@ 0x2d
 8007170:	700b      	strb	r3, [r1, #0]
 8007172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007174:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007178:	4691      	mov	r9, r2
 800717a:	f023 0820 	bic.w	r8, r3, #32
 800717e:	bfbc      	itt	lt
 8007180:	4632      	movlt	r2, r6
 8007182:	4616      	movlt	r6, r2
 8007184:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007188:	d005      	beq.n	8007196 <__cvt+0x42>
 800718a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800718e:	d100      	bne.n	8007192 <__cvt+0x3e>
 8007190:	3401      	adds	r4, #1
 8007192:	2102      	movs	r1, #2
 8007194:	e000      	b.n	8007198 <__cvt+0x44>
 8007196:	2103      	movs	r1, #3
 8007198:	ab03      	add	r3, sp, #12
 800719a:	9301      	str	r3, [sp, #4]
 800719c:	ab02      	add	r3, sp, #8
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	ec47 6b10 	vmov	d0, r6, r7
 80071a4:	4653      	mov	r3, sl
 80071a6:	4622      	mov	r2, r4
 80071a8:	f000 febe 	bl	8007f28 <_dtoa_r>
 80071ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80071b0:	4605      	mov	r5, r0
 80071b2:	d119      	bne.n	80071e8 <__cvt+0x94>
 80071b4:	f019 0f01 	tst.w	r9, #1
 80071b8:	d00e      	beq.n	80071d8 <__cvt+0x84>
 80071ba:	eb00 0904 	add.w	r9, r0, r4
 80071be:	2200      	movs	r2, #0
 80071c0:	2300      	movs	r3, #0
 80071c2:	4630      	mov	r0, r6
 80071c4:	4639      	mov	r1, r7
 80071c6:	f7f9 fc97 	bl	8000af8 <__aeabi_dcmpeq>
 80071ca:	b108      	cbz	r0, 80071d0 <__cvt+0x7c>
 80071cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80071d0:	2230      	movs	r2, #48	@ 0x30
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	454b      	cmp	r3, r9
 80071d6:	d31e      	bcc.n	8007216 <__cvt+0xc2>
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071dc:	1b5b      	subs	r3, r3, r5
 80071de:	4628      	mov	r0, r5
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	b004      	add	sp, #16
 80071e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80071ec:	eb00 0904 	add.w	r9, r0, r4
 80071f0:	d1e5      	bne.n	80071be <__cvt+0x6a>
 80071f2:	7803      	ldrb	r3, [r0, #0]
 80071f4:	2b30      	cmp	r3, #48	@ 0x30
 80071f6:	d10a      	bne.n	800720e <__cvt+0xba>
 80071f8:	2200      	movs	r2, #0
 80071fa:	2300      	movs	r3, #0
 80071fc:	4630      	mov	r0, r6
 80071fe:	4639      	mov	r1, r7
 8007200:	f7f9 fc7a 	bl	8000af8 <__aeabi_dcmpeq>
 8007204:	b918      	cbnz	r0, 800720e <__cvt+0xba>
 8007206:	f1c4 0401 	rsb	r4, r4, #1
 800720a:	f8ca 4000 	str.w	r4, [sl]
 800720e:	f8da 3000 	ldr.w	r3, [sl]
 8007212:	4499      	add	r9, r3
 8007214:	e7d3      	b.n	80071be <__cvt+0x6a>
 8007216:	1c59      	adds	r1, r3, #1
 8007218:	9103      	str	r1, [sp, #12]
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	e7d9      	b.n	80071d2 <__cvt+0x7e>

0800721e <__exponent>:
 800721e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007220:	2900      	cmp	r1, #0
 8007222:	bfba      	itte	lt
 8007224:	4249      	neglt	r1, r1
 8007226:	232d      	movlt	r3, #45	@ 0x2d
 8007228:	232b      	movge	r3, #43	@ 0x2b
 800722a:	2909      	cmp	r1, #9
 800722c:	7002      	strb	r2, [r0, #0]
 800722e:	7043      	strb	r3, [r0, #1]
 8007230:	dd29      	ble.n	8007286 <__exponent+0x68>
 8007232:	f10d 0307 	add.w	r3, sp, #7
 8007236:	461d      	mov	r5, r3
 8007238:	270a      	movs	r7, #10
 800723a:	461a      	mov	r2, r3
 800723c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007240:	fb07 1416 	mls	r4, r7, r6, r1
 8007244:	3430      	adds	r4, #48	@ 0x30
 8007246:	f802 4c01 	strb.w	r4, [r2, #-1]
 800724a:	460c      	mov	r4, r1
 800724c:	2c63      	cmp	r4, #99	@ 0x63
 800724e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007252:	4631      	mov	r1, r6
 8007254:	dcf1      	bgt.n	800723a <__exponent+0x1c>
 8007256:	3130      	adds	r1, #48	@ 0x30
 8007258:	1e94      	subs	r4, r2, #2
 800725a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800725e:	1c41      	adds	r1, r0, #1
 8007260:	4623      	mov	r3, r4
 8007262:	42ab      	cmp	r3, r5
 8007264:	d30a      	bcc.n	800727c <__exponent+0x5e>
 8007266:	f10d 0309 	add.w	r3, sp, #9
 800726a:	1a9b      	subs	r3, r3, r2
 800726c:	42ac      	cmp	r4, r5
 800726e:	bf88      	it	hi
 8007270:	2300      	movhi	r3, #0
 8007272:	3302      	adds	r3, #2
 8007274:	4403      	add	r3, r0
 8007276:	1a18      	subs	r0, r3, r0
 8007278:	b003      	add	sp, #12
 800727a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007280:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007284:	e7ed      	b.n	8007262 <__exponent+0x44>
 8007286:	2330      	movs	r3, #48	@ 0x30
 8007288:	3130      	adds	r1, #48	@ 0x30
 800728a:	7083      	strb	r3, [r0, #2]
 800728c:	70c1      	strb	r1, [r0, #3]
 800728e:	1d03      	adds	r3, r0, #4
 8007290:	e7f1      	b.n	8007276 <__exponent+0x58>
	...

08007294 <_printf_float>:
 8007294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	b08d      	sub	sp, #52	@ 0x34
 800729a:	460c      	mov	r4, r1
 800729c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80072a0:	4616      	mov	r6, r2
 80072a2:	461f      	mov	r7, r3
 80072a4:	4605      	mov	r5, r0
 80072a6:	f000 fcdb 	bl	8007c60 <_localeconv_r>
 80072aa:	6803      	ldr	r3, [r0, #0]
 80072ac:	9304      	str	r3, [sp, #16]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7f8 fff6 	bl	80002a0 <strlen>
 80072b4:	2300      	movs	r3, #0
 80072b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b8:	f8d8 3000 	ldr.w	r3, [r8]
 80072bc:	9005      	str	r0, [sp, #20]
 80072be:	3307      	adds	r3, #7
 80072c0:	f023 0307 	bic.w	r3, r3, #7
 80072c4:	f103 0208 	add.w	r2, r3, #8
 80072c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80072cc:	f8d4 b000 	ldr.w	fp, [r4]
 80072d0:	f8c8 2000 	str.w	r2, [r8]
 80072d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80072dc:	9307      	str	r3, [sp, #28]
 80072de:	f8cd 8018 	str.w	r8, [sp, #24]
 80072e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80072e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ea:	4b9c      	ldr	r3, [pc, #624]	@ (800755c <_printf_float+0x2c8>)
 80072ec:	f04f 32ff 	mov.w	r2, #4294967295
 80072f0:	f7f9 fc34 	bl	8000b5c <__aeabi_dcmpun>
 80072f4:	bb70      	cbnz	r0, 8007354 <_printf_float+0xc0>
 80072f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072fa:	4b98      	ldr	r3, [pc, #608]	@ (800755c <_printf_float+0x2c8>)
 80072fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007300:	f7f9 fc0e 	bl	8000b20 <__aeabi_dcmple>
 8007304:	bb30      	cbnz	r0, 8007354 <_printf_float+0xc0>
 8007306:	2200      	movs	r2, #0
 8007308:	2300      	movs	r3, #0
 800730a:	4640      	mov	r0, r8
 800730c:	4649      	mov	r1, r9
 800730e:	f7f9 fbfd 	bl	8000b0c <__aeabi_dcmplt>
 8007312:	b110      	cbz	r0, 800731a <_printf_float+0x86>
 8007314:	232d      	movs	r3, #45	@ 0x2d
 8007316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800731a:	4a91      	ldr	r2, [pc, #580]	@ (8007560 <_printf_float+0x2cc>)
 800731c:	4b91      	ldr	r3, [pc, #580]	@ (8007564 <_printf_float+0x2d0>)
 800731e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007322:	bf94      	ite	ls
 8007324:	4690      	movls	r8, r2
 8007326:	4698      	movhi	r8, r3
 8007328:	2303      	movs	r3, #3
 800732a:	6123      	str	r3, [r4, #16]
 800732c:	f02b 0304 	bic.w	r3, fp, #4
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	f04f 0900 	mov.w	r9, #0
 8007336:	9700      	str	r7, [sp, #0]
 8007338:	4633      	mov	r3, r6
 800733a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800733c:	4621      	mov	r1, r4
 800733e:	4628      	mov	r0, r5
 8007340:	f000 f9d2 	bl	80076e8 <_printf_common>
 8007344:	3001      	adds	r0, #1
 8007346:	f040 808d 	bne.w	8007464 <_printf_float+0x1d0>
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	b00d      	add	sp, #52	@ 0x34
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	4642      	mov	r2, r8
 8007356:	464b      	mov	r3, r9
 8007358:	4640      	mov	r0, r8
 800735a:	4649      	mov	r1, r9
 800735c:	f7f9 fbfe 	bl	8000b5c <__aeabi_dcmpun>
 8007360:	b140      	cbz	r0, 8007374 <_printf_float+0xe0>
 8007362:	464b      	mov	r3, r9
 8007364:	2b00      	cmp	r3, #0
 8007366:	bfbc      	itt	lt
 8007368:	232d      	movlt	r3, #45	@ 0x2d
 800736a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800736e:	4a7e      	ldr	r2, [pc, #504]	@ (8007568 <_printf_float+0x2d4>)
 8007370:	4b7e      	ldr	r3, [pc, #504]	@ (800756c <_printf_float+0x2d8>)
 8007372:	e7d4      	b.n	800731e <_printf_float+0x8a>
 8007374:	6863      	ldr	r3, [r4, #4]
 8007376:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800737a:	9206      	str	r2, [sp, #24]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	d13b      	bne.n	80073f8 <_printf_float+0x164>
 8007380:	2306      	movs	r3, #6
 8007382:	6063      	str	r3, [r4, #4]
 8007384:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007388:	2300      	movs	r3, #0
 800738a:	6022      	str	r2, [r4, #0]
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007390:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007394:	ab09      	add	r3, sp, #36	@ 0x24
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	6861      	ldr	r1, [r4, #4]
 800739a:	ec49 8b10 	vmov	d0, r8, r9
 800739e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80073a2:	4628      	mov	r0, r5
 80073a4:	f7ff fed6 	bl	8007154 <__cvt>
 80073a8:	9b06      	ldr	r3, [sp, #24]
 80073aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073ac:	2b47      	cmp	r3, #71	@ 0x47
 80073ae:	4680      	mov	r8, r0
 80073b0:	d129      	bne.n	8007406 <_printf_float+0x172>
 80073b2:	1cc8      	adds	r0, r1, #3
 80073b4:	db02      	blt.n	80073bc <_printf_float+0x128>
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	4299      	cmp	r1, r3
 80073ba:	dd41      	ble.n	8007440 <_printf_float+0x1ac>
 80073bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80073c0:	fa5f fa8a 	uxtb.w	sl, sl
 80073c4:	3901      	subs	r1, #1
 80073c6:	4652      	mov	r2, sl
 80073c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80073cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80073ce:	f7ff ff26 	bl	800721e <__exponent>
 80073d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073d4:	1813      	adds	r3, r2, r0
 80073d6:	2a01      	cmp	r2, #1
 80073d8:	4681      	mov	r9, r0
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	dc02      	bgt.n	80073e4 <_printf_float+0x150>
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	07d2      	lsls	r2, r2, #31
 80073e2:	d501      	bpl.n	80073e8 <_printf_float+0x154>
 80073e4:	3301      	adds	r3, #1
 80073e6:	6123      	str	r3, [r4, #16]
 80073e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0a2      	beq.n	8007336 <_printf_float+0xa2>
 80073f0:	232d      	movs	r3, #45	@ 0x2d
 80073f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073f6:	e79e      	b.n	8007336 <_printf_float+0xa2>
 80073f8:	9a06      	ldr	r2, [sp, #24]
 80073fa:	2a47      	cmp	r2, #71	@ 0x47
 80073fc:	d1c2      	bne.n	8007384 <_printf_float+0xf0>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1c0      	bne.n	8007384 <_printf_float+0xf0>
 8007402:	2301      	movs	r3, #1
 8007404:	e7bd      	b.n	8007382 <_printf_float+0xee>
 8007406:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800740a:	d9db      	bls.n	80073c4 <_printf_float+0x130>
 800740c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007410:	d118      	bne.n	8007444 <_printf_float+0x1b0>
 8007412:	2900      	cmp	r1, #0
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	dd0b      	ble.n	8007430 <_printf_float+0x19c>
 8007418:	6121      	str	r1, [r4, #16]
 800741a:	b913      	cbnz	r3, 8007422 <_printf_float+0x18e>
 800741c:	6822      	ldr	r2, [r4, #0]
 800741e:	07d0      	lsls	r0, r2, #31
 8007420:	d502      	bpl.n	8007428 <_printf_float+0x194>
 8007422:	3301      	adds	r3, #1
 8007424:	440b      	add	r3, r1
 8007426:	6123      	str	r3, [r4, #16]
 8007428:	65a1      	str	r1, [r4, #88]	@ 0x58
 800742a:	f04f 0900 	mov.w	r9, #0
 800742e:	e7db      	b.n	80073e8 <_printf_float+0x154>
 8007430:	b913      	cbnz	r3, 8007438 <_printf_float+0x1a4>
 8007432:	6822      	ldr	r2, [r4, #0]
 8007434:	07d2      	lsls	r2, r2, #31
 8007436:	d501      	bpl.n	800743c <_printf_float+0x1a8>
 8007438:	3302      	adds	r3, #2
 800743a:	e7f4      	b.n	8007426 <_printf_float+0x192>
 800743c:	2301      	movs	r3, #1
 800743e:	e7f2      	b.n	8007426 <_printf_float+0x192>
 8007440:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007446:	4299      	cmp	r1, r3
 8007448:	db05      	blt.n	8007456 <_printf_float+0x1c2>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	6121      	str	r1, [r4, #16]
 800744e:	07d8      	lsls	r0, r3, #31
 8007450:	d5ea      	bpl.n	8007428 <_printf_float+0x194>
 8007452:	1c4b      	adds	r3, r1, #1
 8007454:	e7e7      	b.n	8007426 <_printf_float+0x192>
 8007456:	2900      	cmp	r1, #0
 8007458:	bfd4      	ite	le
 800745a:	f1c1 0202 	rsble	r2, r1, #2
 800745e:	2201      	movgt	r2, #1
 8007460:	4413      	add	r3, r2
 8007462:	e7e0      	b.n	8007426 <_printf_float+0x192>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	055a      	lsls	r2, r3, #21
 8007468:	d407      	bmi.n	800747a <_printf_float+0x1e6>
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	4642      	mov	r2, r8
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	d12b      	bne.n	80074d0 <_printf_float+0x23c>
 8007478:	e767      	b.n	800734a <_printf_float+0xb6>
 800747a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800747e:	f240 80dd 	bls.w	800763c <_printf_float+0x3a8>
 8007482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007486:	2200      	movs	r2, #0
 8007488:	2300      	movs	r3, #0
 800748a:	f7f9 fb35 	bl	8000af8 <__aeabi_dcmpeq>
 800748e:	2800      	cmp	r0, #0
 8007490:	d033      	beq.n	80074fa <_printf_float+0x266>
 8007492:	4a37      	ldr	r2, [pc, #220]	@ (8007570 <_printf_float+0x2dc>)
 8007494:	2301      	movs	r3, #1
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f af54 	beq.w	800734a <_printf_float+0xb6>
 80074a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80074a6:	4543      	cmp	r3, r8
 80074a8:	db02      	blt.n	80074b0 <_printf_float+0x21c>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	07d8      	lsls	r0, r3, #31
 80074ae:	d50f      	bpl.n	80074d0 <_printf_float+0x23c>
 80074b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074b4:	4631      	mov	r1, r6
 80074b6:	4628      	mov	r0, r5
 80074b8:	47b8      	blx	r7
 80074ba:	3001      	adds	r0, #1
 80074bc:	f43f af45 	beq.w	800734a <_printf_float+0xb6>
 80074c0:	f04f 0900 	mov.w	r9, #0
 80074c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80074c8:	f104 0a1a 	add.w	sl, r4, #26
 80074cc:	45c8      	cmp	r8, r9
 80074ce:	dc09      	bgt.n	80074e4 <_printf_float+0x250>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	079b      	lsls	r3, r3, #30
 80074d4:	f100 8103 	bmi.w	80076de <_printf_float+0x44a>
 80074d8:	68e0      	ldr	r0, [r4, #12]
 80074da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074dc:	4298      	cmp	r0, r3
 80074de:	bfb8      	it	lt
 80074e0:	4618      	movlt	r0, r3
 80074e2:	e734      	b.n	800734e <_printf_float+0xba>
 80074e4:	2301      	movs	r3, #1
 80074e6:	4652      	mov	r2, sl
 80074e8:	4631      	mov	r1, r6
 80074ea:	4628      	mov	r0, r5
 80074ec:	47b8      	blx	r7
 80074ee:	3001      	adds	r0, #1
 80074f0:	f43f af2b 	beq.w	800734a <_printf_float+0xb6>
 80074f4:	f109 0901 	add.w	r9, r9, #1
 80074f8:	e7e8      	b.n	80074cc <_printf_float+0x238>
 80074fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	dc39      	bgt.n	8007574 <_printf_float+0x2e0>
 8007500:	4a1b      	ldr	r2, [pc, #108]	@ (8007570 <_printf_float+0x2dc>)
 8007502:	2301      	movs	r3, #1
 8007504:	4631      	mov	r1, r6
 8007506:	4628      	mov	r0, r5
 8007508:	47b8      	blx	r7
 800750a:	3001      	adds	r0, #1
 800750c:	f43f af1d 	beq.w	800734a <_printf_float+0xb6>
 8007510:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007514:	ea59 0303 	orrs.w	r3, r9, r3
 8007518:	d102      	bne.n	8007520 <_printf_float+0x28c>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	07d9      	lsls	r1, r3, #31
 800751e:	d5d7      	bpl.n	80074d0 <_printf_float+0x23c>
 8007520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007524:	4631      	mov	r1, r6
 8007526:	4628      	mov	r0, r5
 8007528:	47b8      	blx	r7
 800752a:	3001      	adds	r0, #1
 800752c:	f43f af0d 	beq.w	800734a <_printf_float+0xb6>
 8007530:	f04f 0a00 	mov.w	sl, #0
 8007534:	f104 0b1a 	add.w	fp, r4, #26
 8007538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800753a:	425b      	negs	r3, r3
 800753c:	4553      	cmp	r3, sl
 800753e:	dc01      	bgt.n	8007544 <_printf_float+0x2b0>
 8007540:	464b      	mov	r3, r9
 8007542:	e793      	b.n	800746c <_printf_float+0x1d8>
 8007544:	2301      	movs	r3, #1
 8007546:	465a      	mov	r2, fp
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	f43f aefb 	beq.w	800734a <_printf_float+0xb6>
 8007554:	f10a 0a01 	add.w	sl, sl, #1
 8007558:	e7ee      	b.n	8007538 <_printf_float+0x2a4>
 800755a:	bf00      	nop
 800755c:	7fefffff 	.word	0x7fefffff
 8007560:	0800a3b1 	.word	0x0800a3b1
 8007564:	0800a3b5 	.word	0x0800a3b5
 8007568:	0800a3b9 	.word	0x0800a3b9
 800756c:	0800a3bd 	.word	0x0800a3bd
 8007570:	0800a3c1 	.word	0x0800a3c1
 8007574:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007576:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800757a:	4553      	cmp	r3, sl
 800757c:	bfa8      	it	ge
 800757e:	4653      	movge	r3, sl
 8007580:	2b00      	cmp	r3, #0
 8007582:	4699      	mov	r9, r3
 8007584:	dc36      	bgt.n	80075f4 <_printf_float+0x360>
 8007586:	f04f 0b00 	mov.w	fp, #0
 800758a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800758e:	f104 021a 	add.w	r2, r4, #26
 8007592:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007594:	9306      	str	r3, [sp, #24]
 8007596:	eba3 0309 	sub.w	r3, r3, r9
 800759a:	455b      	cmp	r3, fp
 800759c:	dc31      	bgt.n	8007602 <_printf_float+0x36e>
 800759e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a0:	459a      	cmp	sl, r3
 80075a2:	dc3a      	bgt.n	800761a <_printf_float+0x386>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	07da      	lsls	r2, r3, #31
 80075a8:	d437      	bmi.n	800761a <_printf_float+0x386>
 80075aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ac:	ebaa 0903 	sub.w	r9, sl, r3
 80075b0:	9b06      	ldr	r3, [sp, #24]
 80075b2:	ebaa 0303 	sub.w	r3, sl, r3
 80075b6:	4599      	cmp	r9, r3
 80075b8:	bfa8      	it	ge
 80075ba:	4699      	movge	r9, r3
 80075bc:	f1b9 0f00 	cmp.w	r9, #0
 80075c0:	dc33      	bgt.n	800762a <_printf_float+0x396>
 80075c2:	f04f 0800 	mov.w	r8, #0
 80075c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075ca:	f104 0b1a 	add.w	fp, r4, #26
 80075ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d0:	ebaa 0303 	sub.w	r3, sl, r3
 80075d4:	eba3 0309 	sub.w	r3, r3, r9
 80075d8:	4543      	cmp	r3, r8
 80075da:	f77f af79 	ble.w	80074d0 <_printf_float+0x23c>
 80075de:	2301      	movs	r3, #1
 80075e0:	465a      	mov	r2, fp
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	f43f aeae 	beq.w	800734a <_printf_float+0xb6>
 80075ee:	f108 0801 	add.w	r8, r8, #1
 80075f2:	e7ec      	b.n	80075ce <_printf_float+0x33a>
 80075f4:	4642      	mov	r2, r8
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	d1c2      	bne.n	8007586 <_printf_float+0x2f2>
 8007600:	e6a3      	b.n	800734a <_printf_float+0xb6>
 8007602:	2301      	movs	r3, #1
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	9206      	str	r2, [sp, #24]
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	f43f ae9c 	beq.w	800734a <_printf_float+0xb6>
 8007612:	9a06      	ldr	r2, [sp, #24]
 8007614:	f10b 0b01 	add.w	fp, fp, #1
 8007618:	e7bb      	b.n	8007592 <_printf_float+0x2fe>
 800761a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	d1c0      	bne.n	80075aa <_printf_float+0x316>
 8007628:	e68f      	b.n	800734a <_printf_float+0xb6>
 800762a:	9a06      	ldr	r2, [sp, #24]
 800762c:	464b      	mov	r3, r9
 800762e:	4442      	add	r2, r8
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	d1c3      	bne.n	80075c2 <_printf_float+0x32e>
 800763a:	e686      	b.n	800734a <_printf_float+0xb6>
 800763c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007640:	f1ba 0f01 	cmp.w	sl, #1
 8007644:	dc01      	bgt.n	800764a <_printf_float+0x3b6>
 8007646:	07db      	lsls	r3, r3, #31
 8007648:	d536      	bpl.n	80076b8 <_printf_float+0x424>
 800764a:	2301      	movs	r3, #1
 800764c:	4642      	mov	r2, r8
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f ae78 	beq.w	800734a <_printf_float+0xb6>
 800765a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	47b8      	blx	r7
 8007664:	3001      	adds	r0, #1
 8007666:	f43f ae70 	beq.w	800734a <_printf_float+0xb6>
 800766a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800766e:	2200      	movs	r2, #0
 8007670:	2300      	movs	r3, #0
 8007672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007676:	f7f9 fa3f 	bl	8000af8 <__aeabi_dcmpeq>
 800767a:	b9c0      	cbnz	r0, 80076ae <_printf_float+0x41a>
 800767c:	4653      	mov	r3, sl
 800767e:	f108 0201 	add.w	r2, r8, #1
 8007682:	4631      	mov	r1, r6
 8007684:	4628      	mov	r0, r5
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	d10c      	bne.n	80076a6 <_printf_float+0x412>
 800768c:	e65d      	b.n	800734a <_printf_float+0xb6>
 800768e:	2301      	movs	r3, #1
 8007690:	465a      	mov	r2, fp
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	f43f ae56 	beq.w	800734a <_printf_float+0xb6>
 800769e:	f108 0801 	add.w	r8, r8, #1
 80076a2:	45d0      	cmp	r8, sl
 80076a4:	dbf3      	blt.n	800768e <_printf_float+0x3fa>
 80076a6:	464b      	mov	r3, r9
 80076a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80076ac:	e6df      	b.n	800746e <_printf_float+0x1da>
 80076ae:	f04f 0800 	mov.w	r8, #0
 80076b2:	f104 0b1a 	add.w	fp, r4, #26
 80076b6:	e7f4      	b.n	80076a2 <_printf_float+0x40e>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4642      	mov	r2, r8
 80076bc:	e7e1      	b.n	8007682 <_printf_float+0x3ee>
 80076be:	2301      	movs	r3, #1
 80076c0:	464a      	mov	r2, r9
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b8      	blx	r7
 80076c8:	3001      	adds	r0, #1
 80076ca:	f43f ae3e 	beq.w	800734a <_printf_float+0xb6>
 80076ce:	f108 0801 	add.w	r8, r8, #1
 80076d2:	68e3      	ldr	r3, [r4, #12]
 80076d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076d6:	1a5b      	subs	r3, r3, r1
 80076d8:	4543      	cmp	r3, r8
 80076da:	dcf0      	bgt.n	80076be <_printf_float+0x42a>
 80076dc:	e6fc      	b.n	80074d8 <_printf_float+0x244>
 80076de:	f04f 0800 	mov.w	r8, #0
 80076e2:	f104 0919 	add.w	r9, r4, #25
 80076e6:	e7f4      	b.n	80076d2 <_printf_float+0x43e>

080076e8 <_printf_common>:
 80076e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	4616      	mov	r6, r2
 80076ee:	4698      	mov	r8, r3
 80076f0:	688a      	ldr	r2, [r1, #8]
 80076f2:	690b      	ldr	r3, [r1, #16]
 80076f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	bfb8      	it	lt
 80076fc:	4613      	movlt	r3, r2
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007704:	4607      	mov	r7, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b10a      	cbz	r2, 800770e <_printf_common+0x26>
 800770a:	3301      	adds	r3, #1
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	0699      	lsls	r1, r3, #26
 8007712:	bf42      	ittt	mi
 8007714:	6833      	ldrmi	r3, [r6, #0]
 8007716:	3302      	addmi	r3, #2
 8007718:	6033      	strmi	r3, [r6, #0]
 800771a:	6825      	ldr	r5, [r4, #0]
 800771c:	f015 0506 	ands.w	r5, r5, #6
 8007720:	d106      	bne.n	8007730 <_printf_common+0x48>
 8007722:	f104 0a19 	add.w	sl, r4, #25
 8007726:	68e3      	ldr	r3, [r4, #12]
 8007728:	6832      	ldr	r2, [r6, #0]
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	42ab      	cmp	r3, r5
 800772e:	dc26      	bgt.n	800777e <_printf_common+0x96>
 8007730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007734:	6822      	ldr	r2, [r4, #0]
 8007736:	3b00      	subs	r3, #0
 8007738:	bf18      	it	ne
 800773a:	2301      	movne	r3, #1
 800773c:	0692      	lsls	r2, r2, #26
 800773e:	d42b      	bmi.n	8007798 <_printf_common+0xb0>
 8007740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007744:	4641      	mov	r1, r8
 8007746:	4638      	mov	r0, r7
 8007748:	47c8      	blx	r9
 800774a:	3001      	adds	r0, #1
 800774c:	d01e      	beq.n	800778c <_printf_common+0xa4>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	6922      	ldr	r2, [r4, #16]
 8007752:	f003 0306 	and.w	r3, r3, #6
 8007756:	2b04      	cmp	r3, #4
 8007758:	bf02      	ittt	eq
 800775a:	68e5      	ldreq	r5, [r4, #12]
 800775c:	6833      	ldreq	r3, [r6, #0]
 800775e:	1aed      	subeq	r5, r5, r3
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	bf0c      	ite	eq
 8007764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007768:	2500      	movne	r5, #0
 800776a:	4293      	cmp	r3, r2
 800776c:	bfc4      	itt	gt
 800776e:	1a9b      	subgt	r3, r3, r2
 8007770:	18ed      	addgt	r5, r5, r3
 8007772:	2600      	movs	r6, #0
 8007774:	341a      	adds	r4, #26
 8007776:	42b5      	cmp	r5, r6
 8007778:	d11a      	bne.n	80077b0 <_printf_common+0xc8>
 800777a:	2000      	movs	r0, #0
 800777c:	e008      	b.n	8007790 <_printf_common+0xa8>
 800777e:	2301      	movs	r3, #1
 8007780:	4652      	mov	r2, sl
 8007782:	4641      	mov	r1, r8
 8007784:	4638      	mov	r0, r7
 8007786:	47c8      	blx	r9
 8007788:	3001      	adds	r0, #1
 800778a:	d103      	bne.n	8007794 <_printf_common+0xac>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007794:	3501      	adds	r5, #1
 8007796:	e7c6      	b.n	8007726 <_printf_common+0x3e>
 8007798:	18e1      	adds	r1, r4, r3
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	2030      	movs	r0, #48	@ 0x30
 800779e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077a2:	4422      	add	r2, r4
 80077a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077ac:	3302      	adds	r3, #2
 80077ae:	e7c7      	b.n	8007740 <_printf_common+0x58>
 80077b0:	2301      	movs	r3, #1
 80077b2:	4622      	mov	r2, r4
 80077b4:	4641      	mov	r1, r8
 80077b6:	4638      	mov	r0, r7
 80077b8:	47c8      	blx	r9
 80077ba:	3001      	adds	r0, #1
 80077bc:	d0e6      	beq.n	800778c <_printf_common+0xa4>
 80077be:	3601      	adds	r6, #1
 80077c0:	e7d9      	b.n	8007776 <_printf_common+0x8e>
	...

080077c4 <_printf_i>:
 80077c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	7e0f      	ldrb	r7, [r1, #24]
 80077ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077cc:	2f78      	cmp	r7, #120	@ 0x78
 80077ce:	4691      	mov	r9, r2
 80077d0:	4680      	mov	r8, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	469a      	mov	sl, r3
 80077d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077da:	d807      	bhi.n	80077ec <_printf_i+0x28>
 80077dc:	2f62      	cmp	r7, #98	@ 0x62
 80077de:	d80a      	bhi.n	80077f6 <_printf_i+0x32>
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	f000 80d2 	beq.w	800798a <_printf_i+0x1c6>
 80077e6:	2f58      	cmp	r7, #88	@ 0x58
 80077e8:	f000 80b9 	beq.w	800795e <_printf_i+0x19a>
 80077ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077f4:	e03a      	b.n	800786c <_printf_i+0xa8>
 80077f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077fa:	2b15      	cmp	r3, #21
 80077fc:	d8f6      	bhi.n	80077ec <_printf_i+0x28>
 80077fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007804 <_printf_i+0x40>)
 8007800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007804:	0800785d 	.word	0x0800785d
 8007808:	08007871 	.word	0x08007871
 800780c:	080077ed 	.word	0x080077ed
 8007810:	080077ed 	.word	0x080077ed
 8007814:	080077ed 	.word	0x080077ed
 8007818:	080077ed 	.word	0x080077ed
 800781c:	08007871 	.word	0x08007871
 8007820:	080077ed 	.word	0x080077ed
 8007824:	080077ed 	.word	0x080077ed
 8007828:	080077ed 	.word	0x080077ed
 800782c:	080077ed 	.word	0x080077ed
 8007830:	08007971 	.word	0x08007971
 8007834:	0800789b 	.word	0x0800789b
 8007838:	0800792b 	.word	0x0800792b
 800783c:	080077ed 	.word	0x080077ed
 8007840:	080077ed 	.word	0x080077ed
 8007844:	08007993 	.word	0x08007993
 8007848:	080077ed 	.word	0x080077ed
 800784c:	0800789b 	.word	0x0800789b
 8007850:	080077ed 	.word	0x080077ed
 8007854:	080077ed 	.word	0x080077ed
 8007858:	08007933 	.word	0x08007933
 800785c:	6833      	ldr	r3, [r6, #0]
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6032      	str	r2, [r6, #0]
 8007864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800786c:	2301      	movs	r3, #1
 800786e:	e09d      	b.n	80079ac <_printf_i+0x1e8>
 8007870:	6833      	ldr	r3, [r6, #0]
 8007872:	6820      	ldr	r0, [r4, #0]
 8007874:	1d19      	adds	r1, r3, #4
 8007876:	6031      	str	r1, [r6, #0]
 8007878:	0606      	lsls	r6, r0, #24
 800787a:	d501      	bpl.n	8007880 <_printf_i+0xbc>
 800787c:	681d      	ldr	r5, [r3, #0]
 800787e:	e003      	b.n	8007888 <_printf_i+0xc4>
 8007880:	0645      	lsls	r5, r0, #25
 8007882:	d5fb      	bpl.n	800787c <_printf_i+0xb8>
 8007884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007888:	2d00      	cmp	r5, #0
 800788a:	da03      	bge.n	8007894 <_printf_i+0xd0>
 800788c:	232d      	movs	r3, #45	@ 0x2d
 800788e:	426d      	negs	r5, r5
 8007890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007894:	4859      	ldr	r0, [pc, #356]	@ (80079fc <_printf_i+0x238>)
 8007896:	230a      	movs	r3, #10
 8007898:	e011      	b.n	80078be <_printf_i+0xfa>
 800789a:	6821      	ldr	r1, [r4, #0]
 800789c:	6833      	ldr	r3, [r6, #0]
 800789e:	0608      	lsls	r0, r1, #24
 80078a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80078a4:	d402      	bmi.n	80078ac <_printf_i+0xe8>
 80078a6:	0649      	lsls	r1, r1, #25
 80078a8:	bf48      	it	mi
 80078aa:	b2ad      	uxthmi	r5, r5
 80078ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80078ae:	4853      	ldr	r0, [pc, #332]	@ (80079fc <_printf_i+0x238>)
 80078b0:	6033      	str	r3, [r6, #0]
 80078b2:	bf14      	ite	ne
 80078b4:	230a      	movne	r3, #10
 80078b6:	2308      	moveq	r3, #8
 80078b8:	2100      	movs	r1, #0
 80078ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078be:	6866      	ldr	r6, [r4, #4]
 80078c0:	60a6      	str	r6, [r4, #8]
 80078c2:	2e00      	cmp	r6, #0
 80078c4:	bfa2      	ittt	ge
 80078c6:	6821      	ldrge	r1, [r4, #0]
 80078c8:	f021 0104 	bicge.w	r1, r1, #4
 80078cc:	6021      	strge	r1, [r4, #0]
 80078ce:	b90d      	cbnz	r5, 80078d4 <_printf_i+0x110>
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	d04b      	beq.n	800796c <_printf_i+0x1a8>
 80078d4:	4616      	mov	r6, r2
 80078d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80078da:	fb03 5711 	mls	r7, r3, r1, r5
 80078de:	5dc7      	ldrb	r7, [r0, r7]
 80078e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078e4:	462f      	mov	r7, r5
 80078e6:	42bb      	cmp	r3, r7
 80078e8:	460d      	mov	r5, r1
 80078ea:	d9f4      	bls.n	80078d6 <_printf_i+0x112>
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d10b      	bne.n	8007908 <_printf_i+0x144>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	07df      	lsls	r7, r3, #31
 80078f4:	d508      	bpl.n	8007908 <_printf_i+0x144>
 80078f6:	6923      	ldr	r3, [r4, #16]
 80078f8:	6861      	ldr	r1, [r4, #4]
 80078fa:	4299      	cmp	r1, r3
 80078fc:	bfde      	ittt	le
 80078fe:	2330      	movle	r3, #48	@ 0x30
 8007900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007908:	1b92      	subs	r2, r2, r6
 800790a:	6122      	str	r2, [r4, #16]
 800790c:	f8cd a000 	str.w	sl, [sp]
 8007910:	464b      	mov	r3, r9
 8007912:	aa03      	add	r2, sp, #12
 8007914:	4621      	mov	r1, r4
 8007916:	4640      	mov	r0, r8
 8007918:	f7ff fee6 	bl	80076e8 <_printf_common>
 800791c:	3001      	adds	r0, #1
 800791e:	d14a      	bne.n	80079b6 <_printf_i+0x1f2>
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	b004      	add	sp, #16
 8007926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	f043 0320 	orr.w	r3, r3, #32
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	4833      	ldr	r0, [pc, #204]	@ (8007a00 <_printf_i+0x23c>)
 8007934:	2778      	movs	r7, #120	@ 0x78
 8007936:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	6831      	ldr	r1, [r6, #0]
 800793e:	061f      	lsls	r7, r3, #24
 8007940:	f851 5b04 	ldr.w	r5, [r1], #4
 8007944:	d402      	bmi.n	800794c <_printf_i+0x188>
 8007946:	065f      	lsls	r7, r3, #25
 8007948:	bf48      	it	mi
 800794a:	b2ad      	uxthmi	r5, r5
 800794c:	6031      	str	r1, [r6, #0]
 800794e:	07d9      	lsls	r1, r3, #31
 8007950:	bf44      	itt	mi
 8007952:	f043 0320 	orrmi.w	r3, r3, #32
 8007956:	6023      	strmi	r3, [r4, #0]
 8007958:	b11d      	cbz	r5, 8007962 <_printf_i+0x19e>
 800795a:	2310      	movs	r3, #16
 800795c:	e7ac      	b.n	80078b8 <_printf_i+0xf4>
 800795e:	4827      	ldr	r0, [pc, #156]	@ (80079fc <_printf_i+0x238>)
 8007960:	e7e9      	b.n	8007936 <_printf_i+0x172>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f023 0320 	bic.w	r3, r3, #32
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	e7f6      	b.n	800795a <_printf_i+0x196>
 800796c:	4616      	mov	r6, r2
 800796e:	e7bd      	b.n	80078ec <_printf_i+0x128>
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	6825      	ldr	r5, [r4, #0]
 8007974:	6961      	ldr	r1, [r4, #20]
 8007976:	1d18      	adds	r0, r3, #4
 8007978:	6030      	str	r0, [r6, #0]
 800797a:	062e      	lsls	r6, r5, #24
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	d501      	bpl.n	8007984 <_printf_i+0x1c0>
 8007980:	6019      	str	r1, [r3, #0]
 8007982:	e002      	b.n	800798a <_printf_i+0x1c6>
 8007984:	0668      	lsls	r0, r5, #25
 8007986:	d5fb      	bpl.n	8007980 <_printf_i+0x1bc>
 8007988:	8019      	strh	r1, [r3, #0]
 800798a:	2300      	movs	r3, #0
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	4616      	mov	r6, r2
 8007990:	e7bc      	b.n	800790c <_printf_i+0x148>
 8007992:	6833      	ldr	r3, [r6, #0]
 8007994:	1d1a      	adds	r2, r3, #4
 8007996:	6032      	str	r2, [r6, #0]
 8007998:	681e      	ldr	r6, [r3, #0]
 800799a:	6862      	ldr	r2, [r4, #4]
 800799c:	2100      	movs	r1, #0
 800799e:	4630      	mov	r0, r6
 80079a0:	f7f8 fc2e 	bl	8000200 <memchr>
 80079a4:	b108      	cbz	r0, 80079aa <_printf_i+0x1e6>
 80079a6:	1b80      	subs	r0, r0, r6
 80079a8:	6060      	str	r0, [r4, #4]
 80079aa:	6863      	ldr	r3, [r4, #4]
 80079ac:	6123      	str	r3, [r4, #16]
 80079ae:	2300      	movs	r3, #0
 80079b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079b4:	e7aa      	b.n	800790c <_printf_i+0x148>
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	4632      	mov	r2, r6
 80079ba:	4649      	mov	r1, r9
 80079bc:	4640      	mov	r0, r8
 80079be:	47d0      	blx	sl
 80079c0:	3001      	adds	r0, #1
 80079c2:	d0ad      	beq.n	8007920 <_printf_i+0x15c>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	079b      	lsls	r3, r3, #30
 80079c8:	d413      	bmi.n	80079f2 <_printf_i+0x22e>
 80079ca:	68e0      	ldr	r0, [r4, #12]
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	4298      	cmp	r0, r3
 80079d0:	bfb8      	it	lt
 80079d2:	4618      	movlt	r0, r3
 80079d4:	e7a6      	b.n	8007924 <_printf_i+0x160>
 80079d6:	2301      	movs	r3, #1
 80079d8:	4632      	mov	r2, r6
 80079da:	4649      	mov	r1, r9
 80079dc:	4640      	mov	r0, r8
 80079de:	47d0      	blx	sl
 80079e0:	3001      	adds	r0, #1
 80079e2:	d09d      	beq.n	8007920 <_printf_i+0x15c>
 80079e4:	3501      	adds	r5, #1
 80079e6:	68e3      	ldr	r3, [r4, #12]
 80079e8:	9903      	ldr	r1, [sp, #12]
 80079ea:	1a5b      	subs	r3, r3, r1
 80079ec:	42ab      	cmp	r3, r5
 80079ee:	dcf2      	bgt.n	80079d6 <_printf_i+0x212>
 80079f0:	e7eb      	b.n	80079ca <_printf_i+0x206>
 80079f2:	2500      	movs	r5, #0
 80079f4:	f104 0619 	add.w	r6, r4, #25
 80079f8:	e7f5      	b.n	80079e6 <_printf_i+0x222>
 80079fa:	bf00      	nop
 80079fc:	0800a3c3 	.word	0x0800a3c3
 8007a00:	0800a3d4 	.word	0x0800a3d4

08007a04 <std>:
 8007a04:	2300      	movs	r3, #0
 8007a06:	b510      	push	{r4, lr}
 8007a08:	4604      	mov	r4, r0
 8007a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a12:	6083      	str	r3, [r0, #8]
 8007a14:	8181      	strh	r1, [r0, #12]
 8007a16:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a18:	81c2      	strh	r2, [r0, #14]
 8007a1a:	6183      	str	r3, [r0, #24]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	2208      	movs	r2, #8
 8007a20:	305c      	adds	r0, #92	@ 0x5c
 8007a22:	f000 f914 	bl	8007c4e <memset>
 8007a26:	4b0d      	ldr	r3, [pc, #52]	@ (8007a5c <std+0x58>)
 8007a28:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a60 <std+0x5c>)
 8007a2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a64 <std+0x60>)
 8007a30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a32:	4b0d      	ldr	r3, [pc, #52]	@ (8007a68 <std+0x64>)
 8007a34:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a36:	4b0d      	ldr	r3, [pc, #52]	@ (8007a6c <std+0x68>)
 8007a38:	6224      	str	r4, [r4, #32]
 8007a3a:	429c      	cmp	r4, r3
 8007a3c:	d006      	beq.n	8007a4c <std+0x48>
 8007a3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a42:	4294      	cmp	r4, r2
 8007a44:	d002      	beq.n	8007a4c <std+0x48>
 8007a46:	33d0      	adds	r3, #208	@ 0xd0
 8007a48:	429c      	cmp	r4, r3
 8007a4a:	d105      	bne.n	8007a58 <std+0x54>
 8007a4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a54:	f000 b9ce 	b.w	8007df4 <__retarget_lock_init_recursive>
 8007a58:	bd10      	pop	{r4, pc}
 8007a5a:	bf00      	nop
 8007a5c:	08007bc9 	.word	0x08007bc9
 8007a60:	08007beb 	.word	0x08007beb
 8007a64:	08007c23 	.word	0x08007c23
 8007a68:	08007c47 	.word	0x08007c47
 8007a6c:	200044c8 	.word	0x200044c8

08007a70 <stdio_exit_handler>:
 8007a70:	4a02      	ldr	r2, [pc, #8]	@ (8007a7c <stdio_exit_handler+0xc>)
 8007a72:	4903      	ldr	r1, [pc, #12]	@ (8007a80 <stdio_exit_handler+0x10>)
 8007a74:	4803      	ldr	r0, [pc, #12]	@ (8007a84 <stdio_exit_handler+0x14>)
 8007a76:	f000 b869 	b.w	8007b4c <_fwalk_sglue>
 8007a7a:	bf00      	nop
 8007a7c:	2000006c 	.word	0x2000006c
 8007a80:	0800976d 	.word	0x0800976d
 8007a84:	2000007c 	.word	0x2000007c

08007a88 <cleanup_stdio>:
 8007a88:	6841      	ldr	r1, [r0, #4]
 8007a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007abc <cleanup_stdio+0x34>)
 8007a8c:	4299      	cmp	r1, r3
 8007a8e:	b510      	push	{r4, lr}
 8007a90:	4604      	mov	r4, r0
 8007a92:	d001      	beq.n	8007a98 <cleanup_stdio+0x10>
 8007a94:	f001 fe6a 	bl	800976c <_fflush_r>
 8007a98:	68a1      	ldr	r1, [r4, #8]
 8007a9a:	4b09      	ldr	r3, [pc, #36]	@ (8007ac0 <cleanup_stdio+0x38>)
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	d002      	beq.n	8007aa6 <cleanup_stdio+0x1e>
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f001 fe63 	bl	800976c <_fflush_r>
 8007aa6:	68e1      	ldr	r1, [r4, #12]
 8007aa8:	4b06      	ldr	r3, [pc, #24]	@ (8007ac4 <cleanup_stdio+0x3c>)
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	d004      	beq.n	8007ab8 <cleanup_stdio+0x30>
 8007aae:	4620      	mov	r0, r4
 8007ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ab4:	f001 be5a 	b.w	800976c <_fflush_r>
 8007ab8:	bd10      	pop	{r4, pc}
 8007aba:	bf00      	nop
 8007abc:	200044c8 	.word	0x200044c8
 8007ac0:	20004530 	.word	0x20004530
 8007ac4:	20004598 	.word	0x20004598

08007ac8 <global_stdio_init.part.0>:
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	4b0b      	ldr	r3, [pc, #44]	@ (8007af8 <global_stdio_init.part.0+0x30>)
 8007acc:	4c0b      	ldr	r4, [pc, #44]	@ (8007afc <global_stdio_init.part.0+0x34>)
 8007ace:	4a0c      	ldr	r2, [pc, #48]	@ (8007b00 <global_stdio_init.part.0+0x38>)
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2104      	movs	r1, #4
 8007ad8:	f7ff ff94 	bl	8007a04 <std>
 8007adc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	2109      	movs	r1, #9
 8007ae4:	f7ff ff8e 	bl	8007a04 <std>
 8007ae8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007aec:	2202      	movs	r2, #2
 8007aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af2:	2112      	movs	r1, #18
 8007af4:	f7ff bf86 	b.w	8007a04 <std>
 8007af8:	20004600 	.word	0x20004600
 8007afc:	200044c8 	.word	0x200044c8
 8007b00:	08007a71 	.word	0x08007a71

08007b04 <__sfp_lock_acquire>:
 8007b04:	4801      	ldr	r0, [pc, #4]	@ (8007b0c <__sfp_lock_acquire+0x8>)
 8007b06:	f000 b976 	b.w	8007df6 <__retarget_lock_acquire_recursive>
 8007b0a:	bf00      	nop
 8007b0c:	20004609 	.word	0x20004609

08007b10 <__sfp_lock_release>:
 8007b10:	4801      	ldr	r0, [pc, #4]	@ (8007b18 <__sfp_lock_release+0x8>)
 8007b12:	f000 b971 	b.w	8007df8 <__retarget_lock_release_recursive>
 8007b16:	bf00      	nop
 8007b18:	20004609 	.word	0x20004609

08007b1c <__sinit>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	4604      	mov	r4, r0
 8007b20:	f7ff fff0 	bl	8007b04 <__sfp_lock_acquire>
 8007b24:	6a23      	ldr	r3, [r4, #32]
 8007b26:	b11b      	cbz	r3, 8007b30 <__sinit+0x14>
 8007b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b2c:	f7ff bff0 	b.w	8007b10 <__sfp_lock_release>
 8007b30:	4b04      	ldr	r3, [pc, #16]	@ (8007b44 <__sinit+0x28>)
 8007b32:	6223      	str	r3, [r4, #32]
 8007b34:	4b04      	ldr	r3, [pc, #16]	@ (8007b48 <__sinit+0x2c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f5      	bne.n	8007b28 <__sinit+0xc>
 8007b3c:	f7ff ffc4 	bl	8007ac8 <global_stdio_init.part.0>
 8007b40:	e7f2      	b.n	8007b28 <__sinit+0xc>
 8007b42:	bf00      	nop
 8007b44:	08007a89 	.word	0x08007a89
 8007b48:	20004600 	.word	0x20004600

08007b4c <_fwalk_sglue>:
 8007b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b50:	4607      	mov	r7, r0
 8007b52:	4688      	mov	r8, r1
 8007b54:	4614      	mov	r4, r2
 8007b56:	2600      	movs	r6, #0
 8007b58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b5c:	f1b9 0901 	subs.w	r9, r9, #1
 8007b60:	d505      	bpl.n	8007b6e <_fwalk_sglue+0x22>
 8007b62:	6824      	ldr	r4, [r4, #0]
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	d1f7      	bne.n	8007b58 <_fwalk_sglue+0xc>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b6e:	89ab      	ldrh	r3, [r5, #12]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d907      	bls.n	8007b84 <_fwalk_sglue+0x38>
 8007b74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	d003      	beq.n	8007b84 <_fwalk_sglue+0x38>
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	4638      	mov	r0, r7
 8007b80:	47c0      	blx	r8
 8007b82:	4306      	orrs	r6, r0
 8007b84:	3568      	adds	r5, #104	@ 0x68
 8007b86:	e7e9      	b.n	8007b5c <_fwalk_sglue+0x10>

08007b88 <siprintf>:
 8007b88:	b40e      	push	{r1, r2, r3}
 8007b8a:	b500      	push	{lr}
 8007b8c:	b09c      	sub	sp, #112	@ 0x70
 8007b8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b90:	9002      	str	r0, [sp, #8]
 8007b92:	9006      	str	r0, [sp, #24]
 8007b94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b98:	4809      	ldr	r0, [pc, #36]	@ (8007bc0 <siprintf+0x38>)
 8007b9a:	9107      	str	r1, [sp, #28]
 8007b9c:	9104      	str	r1, [sp, #16]
 8007b9e:	4909      	ldr	r1, [pc, #36]	@ (8007bc4 <siprintf+0x3c>)
 8007ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba4:	9105      	str	r1, [sp, #20]
 8007ba6:	6800      	ldr	r0, [r0, #0]
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	a902      	add	r1, sp, #8
 8007bac:	f001 fc5e 	bl	800946c <_svfiprintf_r>
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	b01c      	add	sp, #112	@ 0x70
 8007bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bbc:	b003      	add	sp, #12
 8007bbe:	4770      	bx	lr
 8007bc0:	20000078 	.word	0x20000078
 8007bc4:	ffff0208 	.word	0xffff0208

08007bc8 <__sread>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	460c      	mov	r4, r1
 8007bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd0:	f000 f8c2 	bl	8007d58 <_read_r>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	bfab      	itete	ge
 8007bd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bda:	89a3      	ldrhlt	r3, [r4, #12]
 8007bdc:	181b      	addge	r3, r3, r0
 8007bde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007be2:	bfac      	ite	ge
 8007be4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007be6:	81a3      	strhlt	r3, [r4, #12]
 8007be8:	bd10      	pop	{r4, pc}

08007bea <__swrite>:
 8007bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bee:	461f      	mov	r7, r3
 8007bf0:	898b      	ldrh	r3, [r1, #12]
 8007bf2:	05db      	lsls	r3, r3, #23
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	4616      	mov	r6, r2
 8007bfa:	d505      	bpl.n	8007c08 <__swrite+0x1e>
 8007bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c00:	2302      	movs	r3, #2
 8007c02:	2200      	movs	r2, #0
 8007c04:	f000 f896 	bl	8007d34 <_lseek_r>
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	4632      	mov	r2, r6
 8007c16:	463b      	mov	r3, r7
 8007c18:	4628      	mov	r0, r5
 8007c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c1e:	f000 b8ad 	b.w	8007d7c <_write_r>

08007c22 <__sseek>:
 8007c22:	b510      	push	{r4, lr}
 8007c24:	460c      	mov	r4, r1
 8007c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2a:	f000 f883 	bl	8007d34 <_lseek_r>
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	bf15      	itete	ne
 8007c34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c3e:	81a3      	strheq	r3, [r4, #12]
 8007c40:	bf18      	it	ne
 8007c42:	81a3      	strhne	r3, [r4, #12]
 8007c44:	bd10      	pop	{r4, pc}

08007c46 <__sclose>:
 8007c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c4a:	f000 b80d 	b.w	8007c68 <_close_r>

08007c4e <memset>:
 8007c4e:	4402      	add	r2, r0
 8007c50:	4603      	mov	r3, r0
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d100      	bne.n	8007c58 <memset+0xa>
 8007c56:	4770      	bx	lr
 8007c58:	f803 1b01 	strb.w	r1, [r3], #1
 8007c5c:	e7f9      	b.n	8007c52 <memset+0x4>
	...

08007c60 <_localeconv_r>:
 8007c60:	4800      	ldr	r0, [pc, #0]	@ (8007c64 <_localeconv_r+0x4>)
 8007c62:	4770      	bx	lr
 8007c64:	200001b8 	.word	0x200001b8

08007c68 <_close_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4d06      	ldr	r5, [pc, #24]	@ (8007c84 <_close_r+0x1c>)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4604      	mov	r4, r0
 8007c70:	4608      	mov	r0, r1
 8007c72:	602b      	str	r3, [r5, #0]
 8007c74:	f7fa fbcc 	bl	8002410 <_close>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_close_r+0x1a>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_close_r+0x1a>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	20004604 	.word	0x20004604

08007c88 <_reclaim_reent>:
 8007c88:	4b29      	ldr	r3, [pc, #164]	@ (8007d30 <_reclaim_reent+0xa8>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4283      	cmp	r3, r0
 8007c8e:	b570      	push	{r4, r5, r6, lr}
 8007c90:	4604      	mov	r4, r0
 8007c92:	d04b      	beq.n	8007d2c <_reclaim_reent+0xa4>
 8007c94:	69c3      	ldr	r3, [r0, #28]
 8007c96:	b1ab      	cbz	r3, 8007cc4 <_reclaim_reent+0x3c>
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	b16b      	cbz	r3, 8007cb8 <_reclaim_reent+0x30>
 8007c9c:	2500      	movs	r5, #0
 8007c9e:	69e3      	ldr	r3, [r4, #28]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	5959      	ldr	r1, [r3, r5]
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d13b      	bne.n	8007d20 <_reclaim_reent+0x98>
 8007ca8:	3504      	adds	r5, #4
 8007caa:	2d80      	cmp	r5, #128	@ 0x80
 8007cac:	d1f7      	bne.n	8007c9e <_reclaim_reent+0x16>
 8007cae:	69e3      	ldr	r3, [r4, #28]
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	68d9      	ldr	r1, [r3, #12]
 8007cb4:	f000 fefc 	bl	8008ab0 <_free_r>
 8007cb8:	69e3      	ldr	r3, [r4, #28]
 8007cba:	6819      	ldr	r1, [r3, #0]
 8007cbc:	b111      	cbz	r1, 8007cc4 <_reclaim_reent+0x3c>
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 fef6 	bl	8008ab0 <_free_r>
 8007cc4:	6961      	ldr	r1, [r4, #20]
 8007cc6:	b111      	cbz	r1, 8007cce <_reclaim_reent+0x46>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fef1 	bl	8008ab0 <_free_r>
 8007cce:	69e1      	ldr	r1, [r4, #28]
 8007cd0:	b111      	cbz	r1, 8007cd8 <_reclaim_reent+0x50>
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 feec 	bl	8008ab0 <_free_r>
 8007cd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007cda:	b111      	cbz	r1, 8007ce2 <_reclaim_reent+0x5a>
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f000 fee7 	bl	8008ab0 <_free_r>
 8007ce2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ce4:	b111      	cbz	r1, 8007cec <_reclaim_reent+0x64>
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f000 fee2 	bl	8008ab0 <_free_r>
 8007cec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007cee:	b111      	cbz	r1, 8007cf6 <_reclaim_reent+0x6e>
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 fedd 	bl	8008ab0 <_free_r>
 8007cf6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007cf8:	b111      	cbz	r1, 8007d00 <_reclaim_reent+0x78>
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 fed8 	bl	8008ab0 <_free_r>
 8007d00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d02:	b111      	cbz	r1, 8007d0a <_reclaim_reent+0x82>
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 fed3 	bl	8008ab0 <_free_r>
 8007d0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007d0c:	b111      	cbz	r1, 8007d14 <_reclaim_reent+0x8c>
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 fece 	bl	8008ab0 <_free_r>
 8007d14:	6a23      	ldr	r3, [r4, #32]
 8007d16:	b14b      	cbz	r3, 8007d2c <_reclaim_reent+0xa4>
 8007d18:	4620      	mov	r0, r4
 8007d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d1e:	4718      	bx	r3
 8007d20:	680e      	ldr	r6, [r1, #0]
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 fec4 	bl	8008ab0 <_free_r>
 8007d28:	4631      	mov	r1, r6
 8007d2a:	e7bb      	b.n	8007ca4 <_reclaim_reent+0x1c>
 8007d2c:	bd70      	pop	{r4, r5, r6, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000078 	.word	0x20000078

08007d34 <_lseek_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d07      	ldr	r5, [pc, #28]	@ (8007d54 <_lseek_r+0x20>)
 8007d38:	4604      	mov	r4, r0
 8007d3a:	4608      	mov	r0, r1
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	2200      	movs	r2, #0
 8007d40:	602a      	str	r2, [r5, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f7fa fb8b 	bl	800245e <_lseek>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_lseek_r+0x1e>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_lseek_r+0x1e>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	20004604 	.word	0x20004604

08007d58 <_read_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d07      	ldr	r5, [pc, #28]	@ (8007d78 <_read_r+0x20>)
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	4608      	mov	r0, r1
 8007d60:	4611      	mov	r1, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	602a      	str	r2, [r5, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f7fa fb19 	bl	800239e <_read>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_read_r+0x1e>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_read_r+0x1e>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	20004604 	.word	0x20004604

08007d7c <_write_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	@ (8007d9c <_write_r+0x20>)
 8007d80:	4604      	mov	r4, r0
 8007d82:	4608      	mov	r0, r1
 8007d84:	4611      	mov	r1, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7fa fb24 	bl	80023d8 <_write>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_write_r+0x1e>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_write_r+0x1e>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	20004604 	.word	0x20004604

08007da0 <__errno>:
 8007da0:	4b01      	ldr	r3, [pc, #4]	@ (8007da8 <__errno+0x8>)
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20000078 	.word	0x20000078

08007dac <__libc_init_array>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4d0d      	ldr	r5, [pc, #52]	@ (8007de4 <__libc_init_array+0x38>)
 8007db0:	4c0d      	ldr	r4, [pc, #52]	@ (8007de8 <__libc_init_array+0x3c>)
 8007db2:	1b64      	subs	r4, r4, r5
 8007db4:	10a4      	asrs	r4, r4, #2
 8007db6:	2600      	movs	r6, #0
 8007db8:	42a6      	cmp	r6, r4
 8007dba:	d109      	bne.n	8007dd0 <__libc_init_array+0x24>
 8007dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8007dec <__libc_init_array+0x40>)
 8007dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8007df0 <__libc_init_array+0x44>)
 8007dc0:	f002 f98a 	bl	800a0d8 <_init>
 8007dc4:	1b64      	subs	r4, r4, r5
 8007dc6:	10a4      	asrs	r4, r4, #2
 8007dc8:	2600      	movs	r6, #0
 8007dca:	42a6      	cmp	r6, r4
 8007dcc:	d105      	bne.n	8007dda <__libc_init_array+0x2e>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd4:	4798      	blx	r3
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	e7ee      	b.n	8007db8 <__libc_init_array+0xc>
 8007dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dde:	4798      	blx	r3
 8007de0:	3601      	adds	r6, #1
 8007de2:	e7f2      	b.n	8007dca <__libc_init_array+0x1e>
 8007de4:	0800a628 	.word	0x0800a628
 8007de8:	0800a628 	.word	0x0800a628
 8007dec:	0800a628 	.word	0x0800a628
 8007df0:	0800a62c 	.word	0x0800a62c

08007df4 <__retarget_lock_init_recursive>:
 8007df4:	4770      	bx	lr

08007df6 <__retarget_lock_acquire_recursive>:
 8007df6:	4770      	bx	lr

08007df8 <__retarget_lock_release_recursive>:
 8007df8:	4770      	bx	lr

08007dfa <memcpy>:
 8007dfa:	440a      	add	r2, r1
 8007dfc:	4291      	cmp	r1, r2
 8007dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e02:	d100      	bne.n	8007e06 <memcpy+0xc>
 8007e04:	4770      	bx	lr
 8007e06:	b510      	push	{r4, lr}
 8007e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e10:	4291      	cmp	r1, r2
 8007e12:	d1f9      	bne.n	8007e08 <memcpy+0xe>
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <quorem>:
 8007e16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1a:	6903      	ldr	r3, [r0, #16]
 8007e1c:	690c      	ldr	r4, [r1, #16]
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	4607      	mov	r7, r0
 8007e22:	db7e      	blt.n	8007f22 <quorem+0x10c>
 8007e24:	3c01      	subs	r4, #1
 8007e26:	f101 0814 	add.w	r8, r1, #20
 8007e2a:	00a3      	lsls	r3, r4, #2
 8007e2c:	f100 0514 	add.w	r5, r0, #20
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e40:	3301      	adds	r3, #1
 8007e42:	429a      	cmp	r2, r3
 8007e44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e48:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e4c:	d32e      	bcc.n	8007eac <quorem+0x96>
 8007e4e:	f04f 0a00 	mov.w	sl, #0
 8007e52:	46c4      	mov	ip, r8
 8007e54:	46ae      	mov	lr, r5
 8007e56:	46d3      	mov	fp, sl
 8007e58:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e5c:	b298      	uxth	r0, r3
 8007e5e:	fb06 a000 	mla	r0, r6, r0, sl
 8007e62:	0c02      	lsrs	r2, r0, #16
 8007e64:	0c1b      	lsrs	r3, r3, #16
 8007e66:	fb06 2303 	mla	r3, r6, r3, r2
 8007e6a:	f8de 2000 	ldr.w	r2, [lr]
 8007e6e:	b280      	uxth	r0, r0
 8007e70:	b292      	uxth	r2, r2
 8007e72:	1a12      	subs	r2, r2, r0
 8007e74:	445a      	add	r2, fp
 8007e76:	f8de 0000 	ldr.w	r0, [lr]
 8007e7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e84:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e88:	b292      	uxth	r2, r2
 8007e8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e8e:	45e1      	cmp	r9, ip
 8007e90:	f84e 2b04 	str.w	r2, [lr], #4
 8007e94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e98:	d2de      	bcs.n	8007e58 <quorem+0x42>
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	58eb      	ldr	r3, [r5, r3]
 8007e9e:	b92b      	cbnz	r3, 8007eac <quorem+0x96>
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	3b04      	subs	r3, #4
 8007ea4:	429d      	cmp	r5, r3
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	d32f      	bcc.n	8007f0a <quorem+0xf4>
 8007eaa:	613c      	str	r4, [r7, #16]
 8007eac:	4638      	mov	r0, r7
 8007eae:	f001 f979 	bl	80091a4 <__mcmp>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	db25      	blt.n	8007f02 <quorem+0xec>
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	2000      	movs	r0, #0
 8007eba:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ebe:	f8d1 c000 	ldr.w	ip, [r1]
 8007ec2:	fa1f fe82 	uxth.w	lr, r2
 8007ec6:	fa1f f38c 	uxth.w	r3, ip
 8007eca:	eba3 030e 	sub.w	r3, r3, lr
 8007ece:	4403      	add	r3, r0
 8007ed0:	0c12      	lsrs	r2, r2, #16
 8007ed2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ed6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ee0:	45c1      	cmp	r9, r8
 8007ee2:	f841 3b04 	str.w	r3, [r1], #4
 8007ee6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007eea:	d2e6      	bcs.n	8007eba <quorem+0xa4>
 8007eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ef0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ef4:	b922      	cbnz	r2, 8007f00 <quorem+0xea>
 8007ef6:	3b04      	subs	r3, #4
 8007ef8:	429d      	cmp	r5, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	d30b      	bcc.n	8007f16 <quorem+0x100>
 8007efe:	613c      	str	r4, [r7, #16]
 8007f00:	3601      	adds	r6, #1
 8007f02:	4630      	mov	r0, r6
 8007f04:	b003      	add	sp, #12
 8007f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0a:	6812      	ldr	r2, [r2, #0]
 8007f0c:	3b04      	subs	r3, #4
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	d1cb      	bne.n	8007eaa <quorem+0x94>
 8007f12:	3c01      	subs	r4, #1
 8007f14:	e7c6      	b.n	8007ea4 <quorem+0x8e>
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	3b04      	subs	r3, #4
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d1ef      	bne.n	8007efe <quorem+0xe8>
 8007f1e:	3c01      	subs	r4, #1
 8007f20:	e7ea      	b.n	8007ef8 <quorem+0xe2>
 8007f22:	2000      	movs	r0, #0
 8007f24:	e7ee      	b.n	8007f04 <quorem+0xee>
	...

08007f28 <_dtoa_r>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	69c7      	ldr	r7, [r0, #28]
 8007f2e:	b099      	sub	sp, #100	@ 0x64
 8007f30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f34:	ec55 4b10 	vmov	r4, r5, d0
 8007f38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007f3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f3c:	4683      	mov	fp, r0
 8007f3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f42:	b97f      	cbnz	r7, 8007f64 <_dtoa_r+0x3c>
 8007f44:	2010      	movs	r0, #16
 8007f46:	f000 fdfd 	bl	8008b44 <malloc>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007f50:	b920      	cbnz	r0, 8007f5c <_dtoa_r+0x34>
 8007f52:	4ba7      	ldr	r3, [pc, #668]	@ (80081f0 <_dtoa_r+0x2c8>)
 8007f54:	21ef      	movs	r1, #239	@ 0xef
 8007f56:	48a7      	ldr	r0, [pc, #668]	@ (80081f4 <_dtoa_r+0x2cc>)
 8007f58:	f001 fc5a 	bl	8009810 <__assert_func>
 8007f5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f60:	6007      	str	r7, [r0, #0]
 8007f62:	60c7      	str	r7, [r0, #12]
 8007f64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	b159      	cbz	r1, 8007f84 <_dtoa_r+0x5c>
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	604a      	str	r2, [r1, #4]
 8007f70:	2301      	movs	r3, #1
 8007f72:	4093      	lsls	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
 8007f76:	4658      	mov	r0, fp
 8007f78:	f000 feda 	bl	8008d30 <_Bfree>
 8007f7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	1e2b      	subs	r3, r5, #0
 8007f86:	bfb9      	ittee	lt
 8007f88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f8c:	9303      	strlt	r3, [sp, #12]
 8007f8e:	2300      	movge	r3, #0
 8007f90:	6033      	strge	r3, [r6, #0]
 8007f92:	9f03      	ldr	r7, [sp, #12]
 8007f94:	4b98      	ldr	r3, [pc, #608]	@ (80081f8 <_dtoa_r+0x2d0>)
 8007f96:	bfbc      	itt	lt
 8007f98:	2201      	movlt	r2, #1
 8007f9a:	6032      	strlt	r2, [r6, #0]
 8007f9c:	43bb      	bics	r3, r7
 8007f9e:	d112      	bne.n	8007fc6 <_dtoa_r+0x9e>
 8007fa0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007fa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fac:	4323      	orrs	r3, r4
 8007fae:	f000 854d 	beq.w	8008a4c <_dtoa_r+0xb24>
 8007fb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800820c <_dtoa_r+0x2e4>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 854f 	beq.w	8008a5c <_dtoa_r+0xb34>
 8007fbe:	f10a 0303 	add.w	r3, sl, #3
 8007fc2:	f000 bd49 	b.w	8008a58 <_dtoa_r+0xb30>
 8007fc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	ec51 0b17 	vmov	r0, r1, d7
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007fd6:	f7f8 fd8f 	bl	8000af8 <__aeabi_dcmpeq>
 8007fda:	4680      	mov	r8, r0
 8007fdc:	b158      	cbz	r0, 8007ff6 <_dtoa_r+0xce>
 8007fde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fe6:	b113      	cbz	r3, 8007fee <_dtoa_r+0xc6>
 8007fe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007fea:	4b84      	ldr	r3, [pc, #528]	@ (80081fc <_dtoa_r+0x2d4>)
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008210 <_dtoa_r+0x2e8>
 8007ff2:	f000 bd33 	b.w	8008a5c <_dtoa_r+0xb34>
 8007ff6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007ffa:	aa16      	add	r2, sp, #88	@ 0x58
 8007ffc:	a917      	add	r1, sp, #92	@ 0x5c
 8007ffe:	4658      	mov	r0, fp
 8008000:	f001 f980 	bl	8009304 <__d2b>
 8008004:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008008:	4681      	mov	r9, r0
 800800a:	2e00      	cmp	r6, #0
 800800c:	d077      	beq.n	80080fe <_dtoa_r+0x1d6>
 800800e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008010:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800801c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008020:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008024:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008028:	4619      	mov	r1, r3
 800802a:	2200      	movs	r2, #0
 800802c:	4b74      	ldr	r3, [pc, #464]	@ (8008200 <_dtoa_r+0x2d8>)
 800802e:	f7f8 f943 	bl	80002b8 <__aeabi_dsub>
 8008032:	a369      	add	r3, pc, #420	@ (adr r3, 80081d8 <_dtoa_r+0x2b0>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 faf6 	bl	8000628 <__aeabi_dmul>
 800803c:	a368      	add	r3, pc, #416	@ (adr r3, 80081e0 <_dtoa_r+0x2b8>)
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	f7f8 f93b 	bl	80002bc <__adddf3>
 8008046:	4604      	mov	r4, r0
 8008048:	4630      	mov	r0, r6
 800804a:	460d      	mov	r5, r1
 800804c:	f7f8 fa82 	bl	8000554 <__aeabi_i2d>
 8008050:	a365      	add	r3, pc, #404	@ (adr r3, 80081e8 <_dtoa_r+0x2c0>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f7f8 fae7 	bl	8000628 <__aeabi_dmul>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 f92b 	bl	80002bc <__adddf3>
 8008066:	4604      	mov	r4, r0
 8008068:	460d      	mov	r5, r1
 800806a:	f7f8 fd8d 	bl	8000b88 <__aeabi_d2iz>
 800806e:	2200      	movs	r2, #0
 8008070:	4607      	mov	r7, r0
 8008072:	2300      	movs	r3, #0
 8008074:	4620      	mov	r0, r4
 8008076:	4629      	mov	r1, r5
 8008078:	f7f8 fd48 	bl	8000b0c <__aeabi_dcmplt>
 800807c:	b140      	cbz	r0, 8008090 <_dtoa_r+0x168>
 800807e:	4638      	mov	r0, r7
 8008080:	f7f8 fa68 	bl	8000554 <__aeabi_i2d>
 8008084:	4622      	mov	r2, r4
 8008086:	462b      	mov	r3, r5
 8008088:	f7f8 fd36 	bl	8000af8 <__aeabi_dcmpeq>
 800808c:	b900      	cbnz	r0, 8008090 <_dtoa_r+0x168>
 800808e:	3f01      	subs	r7, #1
 8008090:	2f16      	cmp	r7, #22
 8008092:	d851      	bhi.n	8008138 <_dtoa_r+0x210>
 8008094:	4b5b      	ldr	r3, [pc, #364]	@ (8008204 <_dtoa_r+0x2dc>)
 8008096:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080a2:	f7f8 fd33 	bl	8000b0c <__aeabi_dcmplt>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d048      	beq.n	800813c <_dtoa_r+0x214>
 80080aa:	3f01      	subs	r7, #1
 80080ac:	2300      	movs	r3, #0
 80080ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80080b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80080b2:	1b9b      	subs	r3, r3, r6
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	bf44      	itt	mi
 80080b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80080bc:	2300      	movmi	r3, #0
 80080be:	9208      	str	r2, [sp, #32]
 80080c0:	bf54      	ite	pl
 80080c2:	f04f 0800 	movpl.w	r8, #0
 80080c6:	9308      	strmi	r3, [sp, #32]
 80080c8:	2f00      	cmp	r7, #0
 80080ca:	db39      	blt.n	8008140 <_dtoa_r+0x218>
 80080cc:	9b08      	ldr	r3, [sp, #32]
 80080ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80080d0:	443b      	add	r3, r7
 80080d2:	9308      	str	r3, [sp, #32]
 80080d4:	2300      	movs	r3, #0
 80080d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080da:	2b09      	cmp	r3, #9
 80080dc:	d864      	bhi.n	80081a8 <_dtoa_r+0x280>
 80080de:	2b05      	cmp	r3, #5
 80080e0:	bfc4      	itt	gt
 80080e2:	3b04      	subgt	r3, #4
 80080e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80080e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e8:	f1a3 0302 	sub.w	r3, r3, #2
 80080ec:	bfcc      	ite	gt
 80080ee:	2400      	movgt	r4, #0
 80080f0:	2401      	movle	r4, #1
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d863      	bhi.n	80081be <_dtoa_r+0x296>
 80080f6:	e8df f003 	tbb	[pc, r3]
 80080fa:	372a      	.short	0x372a
 80080fc:	5535      	.short	0x5535
 80080fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008102:	441e      	add	r6, r3
 8008104:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008108:	2b20      	cmp	r3, #32
 800810a:	bfc1      	itttt	gt
 800810c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008110:	409f      	lslgt	r7, r3
 8008112:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008116:	fa24 f303 	lsrgt.w	r3, r4, r3
 800811a:	bfd6      	itet	le
 800811c:	f1c3 0320 	rsble	r3, r3, #32
 8008120:	ea47 0003 	orrgt.w	r0, r7, r3
 8008124:	fa04 f003 	lslle.w	r0, r4, r3
 8008128:	f7f8 fa04 	bl	8000534 <__aeabi_ui2d>
 800812c:	2201      	movs	r2, #1
 800812e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008132:	3e01      	subs	r6, #1
 8008134:	9214      	str	r2, [sp, #80]	@ 0x50
 8008136:	e777      	b.n	8008028 <_dtoa_r+0x100>
 8008138:	2301      	movs	r3, #1
 800813a:	e7b8      	b.n	80080ae <_dtoa_r+0x186>
 800813c:	9012      	str	r0, [sp, #72]	@ 0x48
 800813e:	e7b7      	b.n	80080b0 <_dtoa_r+0x188>
 8008140:	427b      	negs	r3, r7
 8008142:	930a      	str	r3, [sp, #40]	@ 0x28
 8008144:	2300      	movs	r3, #0
 8008146:	eba8 0807 	sub.w	r8, r8, r7
 800814a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800814c:	e7c4      	b.n	80080d8 <_dtoa_r+0x1b0>
 800814e:	2300      	movs	r3, #0
 8008150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008154:	2b00      	cmp	r3, #0
 8008156:	dc35      	bgt.n	80081c4 <_dtoa_r+0x29c>
 8008158:	2301      	movs	r3, #1
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	9307      	str	r3, [sp, #28]
 800815e:	461a      	mov	r2, r3
 8008160:	920e      	str	r2, [sp, #56]	@ 0x38
 8008162:	e00b      	b.n	800817c <_dtoa_r+0x254>
 8008164:	2301      	movs	r3, #1
 8008166:	e7f3      	b.n	8008150 <_dtoa_r+0x228>
 8008168:	2300      	movs	r3, #0
 800816a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800816c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800816e:	18fb      	adds	r3, r7, r3
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	3301      	adds	r3, #1
 8008174:	2b01      	cmp	r3, #1
 8008176:	9307      	str	r3, [sp, #28]
 8008178:	bfb8      	it	lt
 800817a:	2301      	movlt	r3, #1
 800817c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008180:	2100      	movs	r1, #0
 8008182:	2204      	movs	r2, #4
 8008184:	f102 0514 	add.w	r5, r2, #20
 8008188:	429d      	cmp	r5, r3
 800818a:	d91f      	bls.n	80081cc <_dtoa_r+0x2a4>
 800818c:	6041      	str	r1, [r0, #4]
 800818e:	4658      	mov	r0, fp
 8008190:	f000 fd8e 	bl	8008cb0 <_Balloc>
 8008194:	4682      	mov	sl, r0
 8008196:	2800      	cmp	r0, #0
 8008198:	d13c      	bne.n	8008214 <_dtoa_r+0x2ec>
 800819a:	4b1b      	ldr	r3, [pc, #108]	@ (8008208 <_dtoa_r+0x2e0>)
 800819c:	4602      	mov	r2, r0
 800819e:	f240 11af 	movw	r1, #431	@ 0x1af
 80081a2:	e6d8      	b.n	8007f56 <_dtoa_r+0x2e>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e7e0      	b.n	800816a <_dtoa_r+0x242>
 80081a8:	2401      	movs	r4, #1
 80081aa:	2300      	movs	r3, #0
 80081ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80081b0:	f04f 33ff 	mov.w	r3, #4294967295
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	9307      	str	r3, [sp, #28]
 80081b8:	2200      	movs	r2, #0
 80081ba:	2312      	movs	r3, #18
 80081bc:	e7d0      	b.n	8008160 <_dtoa_r+0x238>
 80081be:	2301      	movs	r3, #1
 80081c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081c2:	e7f5      	b.n	80081b0 <_dtoa_r+0x288>
 80081c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	9307      	str	r3, [sp, #28]
 80081ca:	e7d7      	b.n	800817c <_dtoa_r+0x254>
 80081cc:	3101      	adds	r1, #1
 80081ce:	0052      	lsls	r2, r2, #1
 80081d0:	e7d8      	b.n	8008184 <_dtoa_r+0x25c>
 80081d2:	bf00      	nop
 80081d4:	f3af 8000 	nop.w
 80081d8:	636f4361 	.word	0x636f4361
 80081dc:	3fd287a7 	.word	0x3fd287a7
 80081e0:	8b60c8b3 	.word	0x8b60c8b3
 80081e4:	3fc68a28 	.word	0x3fc68a28
 80081e8:	509f79fb 	.word	0x509f79fb
 80081ec:	3fd34413 	.word	0x3fd34413
 80081f0:	0800a3f2 	.word	0x0800a3f2
 80081f4:	0800a409 	.word	0x0800a409
 80081f8:	7ff00000 	.word	0x7ff00000
 80081fc:	0800a3c2 	.word	0x0800a3c2
 8008200:	3ff80000 	.word	0x3ff80000
 8008204:	0800a500 	.word	0x0800a500
 8008208:	0800a461 	.word	0x0800a461
 800820c:	0800a3ee 	.word	0x0800a3ee
 8008210:	0800a3c1 	.word	0x0800a3c1
 8008214:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008218:	6018      	str	r0, [r3, #0]
 800821a:	9b07      	ldr	r3, [sp, #28]
 800821c:	2b0e      	cmp	r3, #14
 800821e:	f200 80a4 	bhi.w	800836a <_dtoa_r+0x442>
 8008222:	2c00      	cmp	r4, #0
 8008224:	f000 80a1 	beq.w	800836a <_dtoa_r+0x442>
 8008228:	2f00      	cmp	r7, #0
 800822a:	dd33      	ble.n	8008294 <_dtoa_r+0x36c>
 800822c:	4bad      	ldr	r3, [pc, #692]	@ (80084e4 <_dtoa_r+0x5bc>)
 800822e:	f007 020f 	and.w	r2, r7, #15
 8008232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008236:	ed93 7b00 	vldr	d7, [r3]
 800823a:	05f8      	lsls	r0, r7, #23
 800823c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008240:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008244:	d516      	bpl.n	8008274 <_dtoa_r+0x34c>
 8008246:	4ba8      	ldr	r3, [pc, #672]	@ (80084e8 <_dtoa_r+0x5c0>)
 8008248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800824c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008250:	f7f8 fb14 	bl	800087c <__aeabi_ddiv>
 8008254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008258:	f004 040f 	and.w	r4, r4, #15
 800825c:	2603      	movs	r6, #3
 800825e:	4da2      	ldr	r5, [pc, #648]	@ (80084e8 <_dtoa_r+0x5c0>)
 8008260:	b954      	cbnz	r4, 8008278 <_dtoa_r+0x350>
 8008262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800826a:	f7f8 fb07 	bl	800087c <__aeabi_ddiv>
 800826e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008272:	e028      	b.n	80082c6 <_dtoa_r+0x39e>
 8008274:	2602      	movs	r6, #2
 8008276:	e7f2      	b.n	800825e <_dtoa_r+0x336>
 8008278:	07e1      	lsls	r1, r4, #31
 800827a:	d508      	bpl.n	800828e <_dtoa_r+0x366>
 800827c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008280:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008284:	f7f8 f9d0 	bl	8000628 <__aeabi_dmul>
 8008288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800828c:	3601      	adds	r6, #1
 800828e:	1064      	asrs	r4, r4, #1
 8008290:	3508      	adds	r5, #8
 8008292:	e7e5      	b.n	8008260 <_dtoa_r+0x338>
 8008294:	f000 80d2 	beq.w	800843c <_dtoa_r+0x514>
 8008298:	427c      	negs	r4, r7
 800829a:	4b92      	ldr	r3, [pc, #584]	@ (80084e4 <_dtoa_r+0x5bc>)
 800829c:	4d92      	ldr	r5, [pc, #584]	@ (80084e8 <_dtoa_r+0x5c0>)
 800829e:	f004 020f 	and.w	r2, r4, #15
 80082a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082ae:	f7f8 f9bb 	bl	8000628 <__aeabi_dmul>
 80082b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b6:	1124      	asrs	r4, r4, #4
 80082b8:	2300      	movs	r3, #0
 80082ba:	2602      	movs	r6, #2
 80082bc:	2c00      	cmp	r4, #0
 80082be:	f040 80b2 	bne.w	8008426 <_dtoa_r+0x4fe>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1d3      	bne.n	800826e <_dtoa_r+0x346>
 80082c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80b7 	beq.w	8008440 <_dtoa_r+0x518>
 80082d2:	4b86      	ldr	r3, [pc, #536]	@ (80084ec <_dtoa_r+0x5c4>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	4620      	mov	r0, r4
 80082d8:	4629      	mov	r1, r5
 80082da:	f7f8 fc17 	bl	8000b0c <__aeabi_dcmplt>
 80082de:	2800      	cmp	r0, #0
 80082e0:	f000 80ae 	beq.w	8008440 <_dtoa_r+0x518>
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 80aa 	beq.w	8008440 <_dtoa_r+0x518>
 80082ec:	9b00      	ldr	r3, [sp, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	dd37      	ble.n	8008362 <_dtoa_r+0x43a>
 80082f2:	1e7b      	subs	r3, r7, #1
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	4620      	mov	r0, r4
 80082f8:	4b7d      	ldr	r3, [pc, #500]	@ (80084f0 <_dtoa_r+0x5c8>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	4629      	mov	r1, r5
 80082fe:	f7f8 f993 	bl	8000628 <__aeabi_dmul>
 8008302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008306:	9c00      	ldr	r4, [sp, #0]
 8008308:	3601      	adds	r6, #1
 800830a:	4630      	mov	r0, r6
 800830c:	f7f8 f922 	bl	8000554 <__aeabi_i2d>
 8008310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008314:	f7f8 f988 	bl	8000628 <__aeabi_dmul>
 8008318:	4b76      	ldr	r3, [pc, #472]	@ (80084f4 <_dtoa_r+0x5cc>)
 800831a:	2200      	movs	r2, #0
 800831c:	f7f7 ffce 	bl	80002bc <__adddf3>
 8008320:	4605      	mov	r5, r0
 8008322:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008326:	2c00      	cmp	r4, #0
 8008328:	f040 808d 	bne.w	8008446 <_dtoa_r+0x51e>
 800832c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008330:	4b71      	ldr	r3, [pc, #452]	@ (80084f8 <_dtoa_r+0x5d0>)
 8008332:	2200      	movs	r2, #0
 8008334:	f7f7 ffc0 	bl	80002b8 <__aeabi_dsub>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008340:	462a      	mov	r2, r5
 8008342:	4633      	mov	r3, r6
 8008344:	f7f8 fc00 	bl	8000b48 <__aeabi_dcmpgt>
 8008348:	2800      	cmp	r0, #0
 800834a:	f040 828b 	bne.w	8008864 <_dtoa_r+0x93c>
 800834e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008352:	462a      	mov	r2, r5
 8008354:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008358:	f7f8 fbd8 	bl	8000b0c <__aeabi_dcmplt>
 800835c:	2800      	cmp	r0, #0
 800835e:	f040 8128 	bne.w	80085b2 <_dtoa_r+0x68a>
 8008362:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008366:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800836a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800836c:	2b00      	cmp	r3, #0
 800836e:	f2c0 815a 	blt.w	8008626 <_dtoa_r+0x6fe>
 8008372:	2f0e      	cmp	r7, #14
 8008374:	f300 8157 	bgt.w	8008626 <_dtoa_r+0x6fe>
 8008378:	4b5a      	ldr	r3, [pc, #360]	@ (80084e4 <_dtoa_r+0x5bc>)
 800837a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800837e:	ed93 7b00 	vldr	d7, [r3]
 8008382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008384:	2b00      	cmp	r3, #0
 8008386:	ed8d 7b00 	vstr	d7, [sp]
 800838a:	da03      	bge.n	8008394 <_dtoa_r+0x46c>
 800838c:	9b07      	ldr	r3, [sp, #28]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f340 8101 	ble.w	8008596 <_dtoa_r+0x66e>
 8008394:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008398:	4656      	mov	r6, sl
 800839a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800839e:	4620      	mov	r0, r4
 80083a0:	4629      	mov	r1, r5
 80083a2:	f7f8 fa6b 	bl	800087c <__aeabi_ddiv>
 80083a6:	f7f8 fbef 	bl	8000b88 <__aeabi_d2iz>
 80083aa:	4680      	mov	r8, r0
 80083ac:	f7f8 f8d2 	bl	8000554 <__aeabi_i2d>
 80083b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083b4:	f7f8 f938 	bl	8000628 <__aeabi_dmul>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4620      	mov	r0, r4
 80083be:	4629      	mov	r1, r5
 80083c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80083c4:	f7f7 ff78 	bl	80002b8 <__aeabi_dsub>
 80083c8:	f806 4b01 	strb.w	r4, [r6], #1
 80083cc:	9d07      	ldr	r5, [sp, #28]
 80083ce:	eba6 040a 	sub.w	r4, r6, sl
 80083d2:	42a5      	cmp	r5, r4
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	f040 8117 	bne.w	800860a <_dtoa_r+0x6e2>
 80083dc:	f7f7 ff6e 	bl	80002bc <__adddf3>
 80083e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083e4:	4604      	mov	r4, r0
 80083e6:	460d      	mov	r5, r1
 80083e8:	f7f8 fbae 	bl	8000b48 <__aeabi_dcmpgt>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	f040 80f9 	bne.w	80085e4 <_dtoa_r+0x6bc>
 80083f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083f6:	4620      	mov	r0, r4
 80083f8:	4629      	mov	r1, r5
 80083fa:	f7f8 fb7d 	bl	8000af8 <__aeabi_dcmpeq>
 80083fe:	b118      	cbz	r0, 8008408 <_dtoa_r+0x4e0>
 8008400:	f018 0f01 	tst.w	r8, #1
 8008404:	f040 80ee 	bne.w	80085e4 <_dtoa_r+0x6bc>
 8008408:	4649      	mov	r1, r9
 800840a:	4658      	mov	r0, fp
 800840c:	f000 fc90 	bl	8008d30 <_Bfree>
 8008410:	2300      	movs	r3, #0
 8008412:	7033      	strb	r3, [r6, #0]
 8008414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008416:	3701      	adds	r7, #1
 8008418:	601f      	str	r7, [r3, #0]
 800841a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 831d 	beq.w	8008a5c <_dtoa_r+0xb34>
 8008422:	601e      	str	r6, [r3, #0]
 8008424:	e31a      	b.n	8008a5c <_dtoa_r+0xb34>
 8008426:	07e2      	lsls	r2, r4, #31
 8008428:	d505      	bpl.n	8008436 <_dtoa_r+0x50e>
 800842a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800842e:	f7f8 f8fb 	bl	8000628 <__aeabi_dmul>
 8008432:	3601      	adds	r6, #1
 8008434:	2301      	movs	r3, #1
 8008436:	1064      	asrs	r4, r4, #1
 8008438:	3508      	adds	r5, #8
 800843a:	e73f      	b.n	80082bc <_dtoa_r+0x394>
 800843c:	2602      	movs	r6, #2
 800843e:	e742      	b.n	80082c6 <_dtoa_r+0x39e>
 8008440:	9c07      	ldr	r4, [sp, #28]
 8008442:	9704      	str	r7, [sp, #16]
 8008444:	e761      	b.n	800830a <_dtoa_r+0x3e2>
 8008446:	4b27      	ldr	r3, [pc, #156]	@ (80084e4 <_dtoa_r+0x5bc>)
 8008448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800844a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800844e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008452:	4454      	add	r4, sl
 8008454:	2900      	cmp	r1, #0
 8008456:	d053      	beq.n	8008500 <_dtoa_r+0x5d8>
 8008458:	4928      	ldr	r1, [pc, #160]	@ (80084fc <_dtoa_r+0x5d4>)
 800845a:	2000      	movs	r0, #0
 800845c:	f7f8 fa0e 	bl	800087c <__aeabi_ddiv>
 8008460:	4633      	mov	r3, r6
 8008462:	462a      	mov	r2, r5
 8008464:	f7f7 ff28 	bl	80002b8 <__aeabi_dsub>
 8008468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800846c:	4656      	mov	r6, sl
 800846e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008472:	f7f8 fb89 	bl	8000b88 <__aeabi_d2iz>
 8008476:	4605      	mov	r5, r0
 8008478:	f7f8 f86c 	bl	8000554 <__aeabi_i2d>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008484:	f7f7 ff18 	bl	80002b8 <__aeabi_dsub>
 8008488:	3530      	adds	r5, #48	@ 0x30
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008492:	f806 5b01 	strb.w	r5, [r6], #1
 8008496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800849a:	f7f8 fb37 	bl	8000b0c <__aeabi_dcmplt>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d171      	bne.n	8008586 <_dtoa_r+0x65e>
 80084a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084a6:	4911      	ldr	r1, [pc, #68]	@ (80084ec <_dtoa_r+0x5c4>)
 80084a8:	2000      	movs	r0, #0
 80084aa:	f7f7 ff05 	bl	80002b8 <__aeabi_dsub>
 80084ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084b2:	f7f8 fb2b 	bl	8000b0c <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f040 8095 	bne.w	80085e6 <_dtoa_r+0x6be>
 80084bc:	42a6      	cmp	r6, r4
 80084be:	f43f af50 	beq.w	8008362 <_dtoa_r+0x43a>
 80084c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084c6:	4b0a      	ldr	r3, [pc, #40]	@ (80084f0 <_dtoa_r+0x5c8>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	f7f8 f8ad 	bl	8000628 <__aeabi_dmul>
 80084ce:	4b08      	ldr	r3, [pc, #32]	@ (80084f0 <_dtoa_r+0x5c8>)
 80084d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084d4:	2200      	movs	r2, #0
 80084d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084da:	f7f8 f8a5 	bl	8000628 <__aeabi_dmul>
 80084de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e2:	e7c4      	b.n	800846e <_dtoa_r+0x546>
 80084e4:	0800a500 	.word	0x0800a500
 80084e8:	0800a4d8 	.word	0x0800a4d8
 80084ec:	3ff00000 	.word	0x3ff00000
 80084f0:	40240000 	.word	0x40240000
 80084f4:	401c0000 	.word	0x401c0000
 80084f8:	40140000 	.word	0x40140000
 80084fc:	3fe00000 	.word	0x3fe00000
 8008500:	4631      	mov	r1, r6
 8008502:	4628      	mov	r0, r5
 8008504:	f7f8 f890 	bl	8000628 <__aeabi_dmul>
 8008508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800850c:	9415      	str	r4, [sp, #84]	@ 0x54
 800850e:	4656      	mov	r6, sl
 8008510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008514:	f7f8 fb38 	bl	8000b88 <__aeabi_d2iz>
 8008518:	4605      	mov	r5, r0
 800851a:	f7f8 f81b 	bl	8000554 <__aeabi_i2d>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008526:	f7f7 fec7 	bl	80002b8 <__aeabi_dsub>
 800852a:	3530      	adds	r5, #48	@ 0x30
 800852c:	f806 5b01 	strb.w	r5, [r6], #1
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	42a6      	cmp	r6, r4
 8008536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	d124      	bne.n	800858a <_dtoa_r+0x662>
 8008540:	4bac      	ldr	r3, [pc, #688]	@ (80087f4 <_dtoa_r+0x8cc>)
 8008542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008546:	f7f7 feb9 	bl	80002bc <__adddf3>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008552:	f7f8 faf9 	bl	8000b48 <__aeabi_dcmpgt>
 8008556:	2800      	cmp	r0, #0
 8008558:	d145      	bne.n	80085e6 <_dtoa_r+0x6be>
 800855a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800855e:	49a5      	ldr	r1, [pc, #660]	@ (80087f4 <_dtoa_r+0x8cc>)
 8008560:	2000      	movs	r0, #0
 8008562:	f7f7 fea9 	bl	80002b8 <__aeabi_dsub>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800856e:	f7f8 facd 	bl	8000b0c <__aeabi_dcmplt>
 8008572:	2800      	cmp	r0, #0
 8008574:	f43f aef5 	beq.w	8008362 <_dtoa_r+0x43a>
 8008578:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800857a:	1e73      	subs	r3, r6, #1
 800857c:	9315      	str	r3, [sp, #84]	@ 0x54
 800857e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008582:	2b30      	cmp	r3, #48	@ 0x30
 8008584:	d0f8      	beq.n	8008578 <_dtoa_r+0x650>
 8008586:	9f04      	ldr	r7, [sp, #16]
 8008588:	e73e      	b.n	8008408 <_dtoa_r+0x4e0>
 800858a:	4b9b      	ldr	r3, [pc, #620]	@ (80087f8 <_dtoa_r+0x8d0>)
 800858c:	f7f8 f84c 	bl	8000628 <__aeabi_dmul>
 8008590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008594:	e7bc      	b.n	8008510 <_dtoa_r+0x5e8>
 8008596:	d10c      	bne.n	80085b2 <_dtoa_r+0x68a>
 8008598:	4b98      	ldr	r3, [pc, #608]	@ (80087fc <_dtoa_r+0x8d4>)
 800859a:	2200      	movs	r2, #0
 800859c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085a0:	f7f8 f842 	bl	8000628 <__aeabi_dmul>
 80085a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a8:	f7f8 fac4 	bl	8000b34 <__aeabi_dcmpge>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f000 8157 	beq.w	8008860 <_dtoa_r+0x938>
 80085b2:	2400      	movs	r4, #0
 80085b4:	4625      	mov	r5, r4
 80085b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b8:	43db      	mvns	r3, r3
 80085ba:	9304      	str	r3, [sp, #16]
 80085bc:	4656      	mov	r6, sl
 80085be:	2700      	movs	r7, #0
 80085c0:	4621      	mov	r1, r4
 80085c2:	4658      	mov	r0, fp
 80085c4:	f000 fbb4 	bl	8008d30 <_Bfree>
 80085c8:	2d00      	cmp	r5, #0
 80085ca:	d0dc      	beq.n	8008586 <_dtoa_r+0x65e>
 80085cc:	b12f      	cbz	r7, 80085da <_dtoa_r+0x6b2>
 80085ce:	42af      	cmp	r7, r5
 80085d0:	d003      	beq.n	80085da <_dtoa_r+0x6b2>
 80085d2:	4639      	mov	r1, r7
 80085d4:	4658      	mov	r0, fp
 80085d6:	f000 fbab 	bl	8008d30 <_Bfree>
 80085da:	4629      	mov	r1, r5
 80085dc:	4658      	mov	r0, fp
 80085de:	f000 fba7 	bl	8008d30 <_Bfree>
 80085e2:	e7d0      	b.n	8008586 <_dtoa_r+0x65e>
 80085e4:	9704      	str	r7, [sp, #16]
 80085e6:	4633      	mov	r3, r6
 80085e8:	461e      	mov	r6, r3
 80085ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ee:	2a39      	cmp	r2, #57	@ 0x39
 80085f0:	d107      	bne.n	8008602 <_dtoa_r+0x6da>
 80085f2:	459a      	cmp	sl, r3
 80085f4:	d1f8      	bne.n	80085e8 <_dtoa_r+0x6c0>
 80085f6:	9a04      	ldr	r2, [sp, #16]
 80085f8:	3201      	adds	r2, #1
 80085fa:	9204      	str	r2, [sp, #16]
 80085fc:	2230      	movs	r2, #48	@ 0x30
 80085fe:	f88a 2000 	strb.w	r2, [sl]
 8008602:	781a      	ldrb	r2, [r3, #0]
 8008604:	3201      	adds	r2, #1
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	e7bd      	b.n	8008586 <_dtoa_r+0x65e>
 800860a:	4b7b      	ldr	r3, [pc, #492]	@ (80087f8 <_dtoa_r+0x8d0>)
 800860c:	2200      	movs	r2, #0
 800860e:	f7f8 f80b 	bl	8000628 <__aeabi_dmul>
 8008612:	2200      	movs	r2, #0
 8008614:	2300      	movs	r3, #0
 8008616:	4604      	mov	r4, r0
 8008618:	460d      	mov	r5, r1
 800861a:	f7f8 fa6d 	bl	8000af8 <__aeabi_dcmpeq>
 800861e:	2800      	cmp	r0, #0
 8008620:	f43f aebb 	beq.w	800839a <_dtoa_r+0x472>
 8008624:	e6f0      	b.n	8008408 <_dtoa_r+0x4e0>
 8008626:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008628:	2a00      	cmp	r2, #0
 800862a:	f000 80db 	beq.w	80087e4 <_dtoa_r+0x8bc>
 800862e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008630:	2a01      	cmp	r2, #1
 8008632:	f300 80bf 	bgt.w	80087b4 <_dtoa_r+0x88c>
 8008636:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008638:	2a00      	cmp	r2, #0
 800863a:	f000 80b7 	beq.w	80087ac <_dtoa_r+0x884>
 800863e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008642:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008644:	4646      	mov	r6, r8
 8008646:	9a08      	ldr	r2, [sp, #32]
 8008648:	2101      	movs	r1, #1
 800864a:	441a      	add	r2, r3
 800864c:	4658      	mov	r0, fp
 800864e:	4498      	add	r8, r3
 8008650:	9208      	str	r2, [sp, #32]
 8008652:	f000 fc21 	bl	8008e98 <__i2b>
 8008656:	4605      	mov	r5, r0
 8008658:	b15e      	cbz	r6, 8008672 <_dtoa_r+0x74a>
 800865a:	9b08      	ldr	r3, [sp, #32]
 800865c:	2b00      	cmp	r3, #0
 800865e:	dd08      	ble.n	8008672 <_dtoa_r+0x74a>
 8008660:	42b3      	cmp	r3, r6
 8008662:	9a08      	ldr	r2, [sp, #32]
 8008664:	bfa8      	it	ge
 8008666:	4633      	movge	r3, r6
 8008668:	eba8 0803 	sub.w	r8, r8, r3
 800866c:	1af6      	subs	r6, r6, r3
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	9308      	str	r3, [sp, #32]
 8008672:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008674:	b1f3      	cbz	r3, 80086b4 <_dtoa_r+0x78c>
 8008676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 80b7 	beq.w	80087ec <_dtoa_r+0x8c4>
 800867e:	b18c      	cbz	r4, 80086a4 <_dtoa_r+0x77c>
 8008680:	4629      	mov	r1, r5
 8008682:	4622      	mov	r2, r4
 8008684:	4658      	mov	r0, fp
 8008686:	f000 fcc7 	bl	8009018 <__pow5mult>
 800868a:	464a      	mov	r2, r9
 800868c:	4601      	mov	r1, r0
 800868e:	4605      	mov	r5, r0
 8008690:	4658      	mov	r0, fp
 8008692:	f000 fc17 	bl	8008ec4 <__multiply>
 8008696:	4649      	mov	r1, r9
 8008698:	9004      	str	r0, [sp, #16]
 800869a:	4658      	mov	r0, fp
 800869c:	f000 fb48 	bl	8008d30 <_Bfree>
 80086a0:	9b04      	ldr	r3, [sp, #16]
 80086a2:	4699      	mov	r9, r3
 80086a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086a6:	1b1a      	subs	r2, r3, r4
 80086a8:	d004      	beq.n	80086b4 <_dtoa_r+0x78c>
 80086aa:	4649      	mov	r1, r9
 80086ac:	4658      	mov	r0, fp
 80086ae:	f000 fcb3 	bl	8009018 <__pow5mult>
 80086b2:	4681      	mov	r9, r0
 80086b4:	2101      	movs	r1, #1
 80086b6:	4658      	mov	r0, fp
 80086b8:	f000 fbee 	bl	8008e98 <__i2b>
 80086bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086be:	4604      	mov	r4, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 81cf 	beq.w	8008a64 <_dtoa_r+0xb3c>
 80086c6:	461a      	mov	r2, r3
 80086c8:	4601      	mov	r1, r0
 80086ca:	4658      	mov	r0, fp
 80086cc:	f000 fca4 	bl	8009018 <__pow5mult>
 80086d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	4604      	mov	r4, r0
 80086d6:	f300 8095 	bgt.w	8008804 <_dtoa_r+0x8dc>
 80086da:	9b02      	ldr	r3, [sp, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f040 8087 	bne.w	80087f0 <_dtoa_r+0x8c8>
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f040 8089 	bne.w	8008800 <_dtoa_r+0x8d8>
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086f4:	0d1b      	lsrs	r3, r3, #20
 80086f6:	051b      	lsls	r3, r3, #20
 80086f8:	b12b      	cbz	r3, 8008706 <_dtoa_r+0x7de>
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	3301      	adds	r3, #1
 80086fe:	9308      	str	r3, [sp, #32]
 8008700:	f108 0801 	add.w	r8, r8, #1
 8008704:	2301      	movs	r3, #1
 8008706:	930a      	str	r3, [sp, #40]	@ 0x28
 8008708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 81b0 	beq.w	8008a70 <_dtoa_r+0xb48>
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008716:	6918      	ldr	r0, [r3, #16]
 8008718:	f000 fb72 	bl	8008e00 <__hi0bits>
 800871c:	f1c0 0020 	rsb	r0, r0, #32
 8008720:	9b08      	ldr	r3, [sp, #32]
 8008722:	4418      	add	r0, r3
 8008724:	f010 001f 	ands.w	r0, r0, #31
 8008728:	d077      	beq.n	800881a <_dtoa_r+0x8f2>
 800872a:	f1c0 0320 	rsb	r3, r0, #32
 800872e:	2b04      	cmp	r3, #4
 8008730:	dd6b      	ble.n	800880a <_dtoa_r+0x8e2>
 8008732:	9b08      	ldr	r3, [sp, #32]
 8008734:	f1c0 001c 	rsb	r0, r0, #28
 8008738:	4403      	add	r3, r0
 800873a:	4480      	add	r8, r0
 800873c:	4406      	add	r6, r0
 800873e:	9308      	str	r3, [sp, #32]
 8008740:	f1b8 0f00 	cmp.w	r8, #0
 8008744:	dd05      	ble.n	8008752 <_dtoa_r+0x82a>
 8008746:	4649      	mov	r1, r9
 8008748:	4642      	mov	r2, r8
 800874a:	4658      	mov	r0, fp
 800874c:	f000 fcbe 	bl	80090cc <__lshift>
 8008750:	4681      	mov	r9, r0
 8008752:	9b08      	ldr	r3, [sp, #32]
 8008754:	2b00      	cmp	r3, #0
 8008756:	dd05      	ble.n	8008764 <_dtoa_r+0x83c>
 8008758:	4621      	mov	r1, r4
 800875a:	461a      	mov	r2, r3
 800875c:	4658      	mov	r0, fp
 800875e:	f000 fcb5 	bl	80090cc <__lshift>
 8008762:	4604      	mov	r4, r0
 8008764:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008766:	2b00      	cmp	r3, #0
 8008768:	d059      	beq.n	800881e <_dtoa_r+0x8f6>
 800876a:	4621      	mov	r1, r4
 800876c:	4648      	mov	r0, r9
 800876e:	f000 fd19 	bl	80091a4 <__mcmp>
 8008772:	2800      	cmp	r0, #0
 8008774:	da53      	bge.n	800881e <_dtoa_r+0x8f6>
 8008776:	1e7b      	subs	r3, r7, #1
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	4649      	mov	r1, r9
 800877c:	2300      	movs	r3, #0
 800877e:	220a      	movs	r2, #10
 8008780:	4658      	mov	r0, fp
 8008782:	f000 faf7 	bl	8008d74 <__multadd>
 8008786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008788:	4681      	mov	r9, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 8172 	beq.w	8008a74 <_dtoa_r+0xb4c>
 8008790:	2300      	movs	r3, #0
 8008792:	4629      	mov	r1, r5
 8008794:	220a      	movs	r2, #10
 8008796:	4658      	mov	r0, fp
 8008798:	f000 faec 	bl	8008d74 <__multadd>
 800879c:	9b00      	ldr	r3, [sp, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	4605      	mov	r5, r0
 80087a2:	dc67      	bgt.n	8008874 <_dtoa_r+0x94c>
 80087a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	dc41      	bgt.n	800882e <_dtoa_r+0x906>
 80087aa:	e063      	b.n	8008874 <_dtoa_r+0x94c>
 80087ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80087ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80087b2:	e746      	b.n	8008642 <_dtoa_r+0x71a>
 80087b4:	9b07      	ldr	r3, [sp, #28]
 80087b6:	1e5c      	subs	r4, r3, #1
 80087b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	bfbf      	itttt	lt
 80087be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80087c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80087c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80087c4:	1ae3      	sublt	r3, r4, r3
 80087c6:	bfb4      	ite	lt
 80087c8:	18d2      	addlt	r2, r2, r3
 80087ca:	1b1c      	subge	r4, r3, r4
 80087cc:	9b07      	ldr	r3, [sp, #28]
 80087ce:	bfbc      	itt	lt
 80087d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80087d2:	2400      	movlt	r4, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bfb5      	itete	lt
 80087d8:	eba8 0603 	sublt.w	r6, r8, r3
 80087dc:	9b07      	ldrge	r3, [sp, #28]
 80087de:	2300      	movlt	r3, #0
 80087e0:	4646      	movge	r6, r8
 80087e2:	e730      	b.n	8008646 <_dtoa_r+0x71e>
 80087e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80087e8:	4646      	mov	r6, r8
 80087ea:	e735      	b.n	8008658 <_dtoa_r+0x730>
 80087ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087ee:	e75c      	b.n	80086aa <_dtoa_r+0x782>
 80087f0:	2300      	movs	r3, #0
 80087f2:	e788      	b.n	8008706 <_dtoa_r+0x7de>
 80087f4:	3fe00000 	.word	0x3fe00000
 80087f8:	40240000 	.word	0x40240000
 80087fc:	40140000 	.word	0x40140000
 8008800:	9b02      	ldr	r3, [sp, #8]
 8008802:	e780      	b.n	8008706 <_dtoa_r+0x7de>
 8008804:	2300      	movs	r3, #0
 8008806:	930a      	str	r3, [sp, #40]	@ 0x28
 8008808:	e782      	b.n	8008710 <_dtoa_r+0x7e8>
 800880a:	d099      	beq.n	8008740 <_dtoa_r+0x818>
 800880c:	9a08      	ldr	r2, [sp, #32]
 800880e:	331c      	adds	r3, #28
 8008810:	441a      	add	r2, r3
 8008812:	4498      	add	r8, r3
 8008814:	441e      	add	r6, r3
 8008816:	9208      	str	r2, [sp, #32]
 8008818:	e792      	b.n	8008740 <_dtoa_r+0x818>
 800881a:	4603      	mov	r3, r0
 800881c:	e7f6      	b.n	800880c <_dtoa_r+0x8e4>
 800881e:	9b07      	ldr	r3, [sp, #28]
 8008820:	9704      	str	r7, [sp, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	dc20      	bgt.n	8008868 <_dtoa_r+0x940>
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800882a:	2b02      	cmp	r3, #2
 800882c:	dd1e      	ble.n	800886c <_dtoa_r+0x944>
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	f47f aec0 	bne.w	80085b6 <_dtoa_r+0x68e>
 8008836:	4621      	mov	r1, r4
 8008838:	2205      	movs	r2, #5
 800883a:	4658      	mov	r0, fp
 800883c:	f000 fa9a 	bl	8008d74 <__multadd>
 8008840:	4601      	mov	r1, r0
 8008842:	4604      	mov	r4, r0
 8008844:	4648      	mov	r0, r9
 8008846:	f000 fcad 	bl	80091a4 <__mcmp>
 800884a:	2800      	cmp	r0, #0
 800884c:	f77f aeb3 	ble.w	80085b6 <_dtoa_r+0x68e>
 8008850:	4656      	mov	r6, sl
 8008852:	2331      	movs	r3, #49	@ 0x31
 8008854:	f806 3b01 	strb.w	r3, [r6], #1
 8008858:	9b04      	ldr	r3, [sp, #16]
 800885a:	3301      	adds	r3, #1
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	e6ae      	b.n	80085be <_dtoa_r+0x696>
 8008860:	9c07      	ldr	r4, [sp, #28]
 8008862:	9704      	str	r7, [sp, #16]
 8008864:	4625      	mov	r5, r4
 8008866:	e7f3      	b.n	8008850 <_dtoa_r+0x928>
 8008868:	9b07      	ldr	r3, [sp, #28]
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 8104 	beq.w	8008a7c <_dtoa_r+0xb54>
 8008874:	2e00      	cmp	r6, #0
 8008876:	dd05      	ble.n	8008884 <_dtoa_r+0x95c>
 8008878:	4629      	mov	r1, r5
 800887a:	4632      	mov	r2, r6
 800887c:	4658      	mov	r0, fp
 800887e:	f000 fc25 	bl	80090cc <__lshift>
 8008882:	4605      	mov	r5, r0
 8008884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008886:	2b00      	cmp	r3, #0
 8008888:	d05a      	beq.n	8008940 <_dtoa_r+0xa18>
 800888a:	6869      	ldr	r1, [r5, #4]
 800888c:	4658      	mov	r0, fp
 800888e:	f000 fa0f 	bl	8008cb0 <_Balloc>
 8008892:	4606      	mov	r6, r0
 8008894:	b928      	cbnz	r0, 80088a2 <_dtoa_r+0x97a>
 8008896:	4b84      	ldr	r3, [pc, #528]	@ (8008aa8 <_dtoa_r+0xb80>)
 8008898:	4602      	mov	r2, r0
 800889a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800889e:	f7ff bb5a 	b.w	8007f56 <_dtoa_r+0x2e>
 80088a2:	692a      	ldr	r2, [r5, #16]
 80088a4:	3202      	adds	r2, #2
 80088a6:	0092      	lsls	r2, r2, #2
 80088a8:	f105 010c 	add.w	r1, r5, #12
 80088ac:	300c      	adds	r0, #12
 80088ae:	f7ff faa4 	bl	8007dfa <memcpy>
 80088b2:	2201      	movs	r2, #1
 80088b4:	4631      	mov	r1, r6
 80088b6:	4658      	mov	r0, fp
 80088b8:	f000 fc08 	bl	80090cc <__lshift>
 80088bc:	f10a 0301 	add.w	r3, sl, #1
 80088c0:	9307      	str	r3, [sp, #28]
 80088c2:	9b00      	ldr	r3, [sp, #0]
 80088c4:	4453      	add	r3, sl
 80088c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	462f      	mov	r7, r5
 80088d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80088d2:	4605      	mov	r5, r0
 80088d4:	9b07      	ldr	r3, [sp, #28]
 80088d6:	4621      	mov	r1, r4
 80088d8:	3b01      	subs	r3, #1
 80088da:	4648      	mov	r0, r9
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	f7ff fa9a 	bl	8007e16 <quorem>
 80088e2:	4639      	mov	r1, r7
 80088e4:	9002      	str	r0, [sp, #8]
 80088e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80088ea:	4648      	mov	r0, r9
 80088ec:	f000 fc5a 	bl	80091a4 <__mcmp>
 80088f0:	462a      	mov	r2, r5
 80088f2:	9008      	str	r0, [sp, #32]
 80088f4:	4621      	mov	r1, r4
 80088f6:	4658      	mov	r0, fp
 80088f8:	f000 fc70 	bl	80091dc <__mdiff>
 80088fc:	68c2      	ldr	r2, [r0, #12]
 80088fe:	4606      	mov	r6, r0
 8008900:	bb02      	cbnz	r2, 8008944 <_dtoa_r+0xa1c>
 8008902:	4601      	mov	r1, r0
 8008904:	4648      	mov	r0, r9
 8008906:	f000 fc4d 	bl	80091a4 <__mcmp>
 800890a:	4602      	mov	r2, r0
 800890c:	4631      	mov	r1, r6
 800890e:	4658      	mov	r0, fp
 8008910:	920e      	str	r2, [sp, #56]	@ 0x38
 8008912:	f000 fa0d 	bl	8008d30 <_Bfree>
 8008916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008918:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800891a:	9e07      	ldr	r6, [sp, #28]
 800891c:	ea43 0102 	orr.w	r1, r3, r2
 8008920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008922:	4319      	orrs	r1, r3
 8008924:	d110      	bne.n	8008948 <_dtoa_r+0xa20>
 8008926:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800892a:	d029      	beq.n	8008980 <_dtoa_r+0xa58>
 800892c:	9b08      	ldr	r3, [sp, #32]
 800892e:	2b00      	cmp	r3, #0
 8008930:	dd02      	ble.n	8008938 <_dtoa_r+0xa10>
 8008932:	9b02      	ldr	r3, [sp, #8]
 8008934:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008938:	9b00      	ldr	r3, [sp, #0]
 800893a:	f883 8000 	strb.w	r8, [r3]
 800893e:	e63f      	b.n	80085c0 <_dtoa_r+0x698>
 8008940:	4628      	mov	r0, r5
 8008942:	e7bb      	b.n	80088bc <_dtoa_r+0x994>
 8008944:	2201      	movs	r2, #1
 8008946:	e7e1      	b.n	800890c <_dtoa_r+0x9e4>
 8008948:	9b08      	ldr	r3, [sp, #32]
 800894a:	2b00      	cmp	r3, #0
 800894c:	db04      	blt.n	8008958 <_dtoa_r+0xa30>
 800894e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008950:	430b      	orrs	r3, r1
 8008952:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008954:	430b      	orrs	r3, r1
 8008956:	d120      	bne.n	800899a <_dtoa_r+0xa72>
 8008958:	2a00      	cmp	r2, #0
 800895a:	dded      	ble.n	8008938 <_dtoa_r+0xa10>
 800895c:	4649      	mov	r1, r9
 800895e:	2201      	movs	r2, #1
 8008960:	4658      	mov	r0, fp
 8008962:	f000 fbb3 	bl	80090cc <__lshift>
 8008966:	4621      	mov	r1, r4
 8008968:	4681      	mov	r9, r0
 800896a:	f000 fc1b 	bl	80091a4 <__mcmp>
 800896e:	2800      	cmp	r0, #0
 8008970:	dc03      	bgt.n	800897a <_dtoa_r+0xa52>
 8008972:	d1e1      	bne.n	8008938 <_dtoa_r+0xa10>
 8008974:	f018 0f01 	tst.w	r8, #1
 8008978:	d0de      	beq.n	8008938 <_dtoa_r+0xa10>
 800897a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800897e:	d1d8      	bne.n	8008932 <_dtoa_r+0xa0a>
 8008980:	9a00      	ldr	r2, [sp, #0]
 8008982:	2339      	movs	r3, #57	@ 0x39
 8008984:	7013      	strb	r3, [r2, #0]
 8008986:	4633      	mov	r3, r6
 8008988:	461e      	mov	r6, r3
 800898a:	3b01      	subs	r3, #1
 800898c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008990:	2a39      	cmp	r2, #57	@ 0x39
 8008992:	d052      	beq.n	8008a3a <_dtoa_r+0xb12>
 8008994:	3201      	adds	r2, #1
 8008996:	701a      	strb	r2, [r3, #0]
 8008998:	e612      	b.n	80085c0 <_dtoa_r+0x698>
 800899a:	2a00      	cmp	r2, #0
 800899c:	dd07      	ble.n	80089ae <_dtoa_r+0xa86>
 800899e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089a2:	d0ed      	beq.n	8008980 <_dtoa_r+0xa58>
 80089a4:	9a00      	ldr	r2, [sp, #0]
 80089a6:	f108 0301 	add.w	r3, r8, #1
 80089aa:	7013      	strb	r3, [r2, #0]
 80089ac:	e608      	b.n	80085c0 <_dtoa_r+0x698>
 80089ae:	9b07      	ldr	r3, [sp, #28]
 80089b0:	9a07      	ldr	r2, [sp, #28]
 80089b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80089b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d028      	beq.n	8008a0e <_dtoa_r+0xae6>
 80089bc:	4649      	mov	r1, r9
 80089be:	2300      	movs	r3, #0
 80089c0:	220a      	movs	r2, #10
 80089c2:	4658      	mov	r0, fp
 80089c4:	f000 f9d6 	bl	8008d74 <__multadd>
 80089c8:	42af      	cmp	r7, r5
 80089ca:	4681      	mov	r9, r0
 80089cc:	f04f 0300 	mov.w	r3, #0
 80089d0:	f04f 020a 	mov.w	r2, #10
 80089d4:	4639      	mov	r1, r7
 80089d6:	4658      	mov	r0, fp
 80089d8:	d107      	bne.n	80089ea <_dtoa_r+0xac2>
 80089da:	f000 f9cb 	bl	8008d74 <__multadd>
 80089de:	4607      	mov	r7, r0
 80089e0:	4605      	mov	r5, r0
 80089e2:	9b07      	ldr	r3, [sp, #28]
 80089e4:	3301      	adds	r3, #1
 80089e6:	9307      	str	r3, [sp, #28]
 80089e8:	e774      	b.n	80088d4 <_dtoa_r+0x9ac>
 80089ea:	f000 f9c3 	bl	8008d74 <__multadd>
 80089ee:	4629      	mov	r1, r5
 80089f0:	4607      	mov	r7, r0
 80089f2:	2300      	movs	r3, #0
 80089f4:	220a      	movs	r2, #10
 80089f6:	4658      	mov	r0, fp
 80089f8:	f000 f9bc 	bl	8008d74 <__multadd>
 80089fc:	4605      	mov	r5, r0
 80089fe:	e7f0      	b.n	80089e2 <_dtoa_r+0xaba>
 8008a00:	9b00      	ldr	r3, [sp, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	bfcc      	ite	gt
 8008a06:	461e      	movgt	r6, r3
 8008a08:	2601      	movle	r6, #1
 8008a0a:	4456      	add	r6, sl
 8008a0c:	2700      	movs	r7, #0
 8008a0e:	4649      	mov	r1, r9
 8008a10:	2201      	movs	r2, #1
 8008a12:	4658      	mov	r0, fp
 8008a14:	f000 fb5a 	bl	80090cc <__lshift>
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4681      	mov	r9, r0
 8008a1c:	f000 fbc2 	bl	80091a4 <__mcmp>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	dcb0      	bgt.n	8008986 <_dtoa_r+0xa5e>
 8008a24:	d102      	bne.n	8008a2c <_dtoa_r+0xb04>
 8008a26:	f018 0f01 	tst.w	r8, #1
 8008a2a:	d1ac      	bne.n	8008986 <_dtoa_r+0xa5e>
 8008a2c:	4633      	mov	r3, r6
 8008a2e:	461e      	mov	r6, r3
 8008a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a34:	2a30      	cmp	r2, #48	@ 0x30
 8008a36:	d0fa      	beq.n	8008a2e <_dtoa_r+0xb06>
 8008a38:	e5c2      	b.n	80085c0 <_dtoa_r+0x698>
 8008a3a:	459a      	cmp	sl, r3
 8008a3c:	d1a4      	bne.n	8008988 <_dtoa_r+0xa60>
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	3301      	adds	r3, #1
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	2331      	movs	r3, #49	@ 0x31
 8008a46:	f88a 3000 	strb.w	r3, [sl]
 8008a4a:	e5b9      	b.n	80085c0 <_dtoa_r+0x698>
 8008a4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008aac <_dtoa_r+0xb84>
 8008a52:	b11b      	cbz	r3, 8008a5c <_dtoa_r+0xb34>
 8008a54:	f10a 0308 	add.w	r3, sl, #8
 8008a58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	4650      	mov	r0, sl
 8008a5e:	b019      	add	sp, #100	@ 0x64
 8008a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	f77f ae37 	ble.w	80086da <_dtoa_r+0x7b2>
 8008a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a70:	2001      	movs	r0, #1
 8008a72:	e655      	b.n	8008720 <_dtoa_r+0x7f8>
 8008a74:	9b00      	ldr	r3, [sp, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f77f aed6 	ble.w	8008828 <_dtoa_r+0x900>
 8008a7c:	4656      	mov	r6, sl
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4648      	mov	r0, r9
 8008a82:	f7ff f9c8 	bl	8007e16 <quorem>
 8008a86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a8a:	f806 8b01 	strb.w	r8, [r6], #1
 8008a8e:	9b00      	ldr	r3, [sp, #0]
 8008a90:	eba6 020a 	sub.w	r2, r6, sl
 8008a94:	4293      	cmp	r3, r2
 8008a96:	ddb3      	ble.n	8008a00 <_dtoa_r+0xad8>
 8008a98:	4649      	mov	r1, r9
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	220a      	movs	r2, #10
 8008a9e:	4658      	mov	r0, fp
 8008aa0:	f000 f968 	bl	8008d74 <__multadd>
 8008aa4:	4681      	mov	r9, r0
 8008aa6:	e7ea      	b.n	8008a7e <_dtoa_r+0xb56>
 8008aa8:	0800a461 	.word	0x0800a461
 8008aac:	0800a3e5 	.word	0x0800a3e5

08008ab0 <_free_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	2900      	cmp	r1, #0
 8008ab6:	d041      	beq.n	8008b3c <_free_r+0x8c>
 8008ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008abc:	1f0c      	subs	r4, r1, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfb8      	it	lt
 8008ac2:	18e4      	addlt	r4, r4, r3
 8008ac4:	f000 f8e8 	bl	8008c98 <__malloc_lock>
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b40 <_free_r+0x90>)
 8008aca:	6813      	ldr	r3, [r2, #0]
 8008acc:	b933      	cbnz	r3, 8008adc <_free_r+0x2c>
 8008ace:	6063      	str	r3, [r4, #4]
 8008ad0:	6014      	str	r4, [r2, #0]
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ad8:	f000 b8e4 	b.w	8008ca4 <__malloc_unlock>
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	d908      	bls.n	8008af2 <_free_r+0x42>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	1821      	adds	r1, r4, r0
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	bf01      	itttt	eq
 8008ae8:	6819      	ldreq	r1, [r3, #0]
 8008aea:	685b      	ldreq	r3, [r3, #4]
 8008aec:	1809      	addeq	r1, r1, r0
 8008aee:	6021      	streq	r1, [r4, #0]
 8008af0:	e7ed      	b.n	8008ace <_free_r+0x1e>
 8008af2:	461a      	mov	r2, r3
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	b10b      	cbz	r3, 8008afc <_free_r+0x4c>
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	d9fa      	bls.n	8008af2 <_free_r+0x42>
 8008afc:	6811      	ldr	r1, [r2, #0]
 8008afe:	1850      	adds	r0, r2, r1
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d10b      	bne.n	8008b1c <_free_r+0x6c>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	4401      	add	r1, r0
 8008b08:	1850      	adds	r0, r2, r1
 8008b0a:	4283      	cmp	r3, r0
 8008b0c:	6011      	str	r1, [r2, #0]
 8008b0e:	d1e0      	bne.n	8008ad2 <_free_r+0x22>
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	6053      	str	r3, [r2, #4]
 8008b16:	4408      	add	r0, r1
 8008b18:	6010      	str	r0, [r2, #0]
 8008b1a:	e7da      	b.n	8008ad2 <_free_r+0x22>
 8008b1c:	d902      	bls.n	8008b24 <_free_r+0x74>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	e7d6      	b.n	8008ad2 <_free_r+0x22>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	1821      	adds	r1, r4, r0
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	bf04      	itt	eq
 8008b2c:	6819      	ldreq	r1, [r3, #0]
 8008b2e:	685b      	ldreq	r3, [r3, #4]
 8008b30:	6063      	str	r3, [r4, #4]
 8008b32:	bf04      	itt	eq
 8008b34:	1809      	addeq	r1, r1, r0
 8008b36:	6021      	streq	r1, [r4, #0]
 8008b38:	6054      	str	r4, [r2, #4]
 8008b3a:	e7ca      	b.n	8008ad2 <_free_r+0x22>
 8008b3c:	bd38      	pop	{r3, r4, r5, pc}
 8008b3e:	bf00      	nop
 8008b40:	20004610 	.word	0x20004610

08008b44 <malloc>:
 8008b44:	4b02      	ldr	r3, [pc, #8]	@ (8008b50 <malloc+0xc>)
 8008b46:	4601      	mov	r1, r0
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	f000 b825 	b.w	8008b98 <_malloc_r>
 8008b4e:	bf00      	nop
 8008b50:	20000078 	.word	0x20000078

08008b54 <sbrk_aligned>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	4e0f      	ldr	r6, [pc, #60]	@ (8008b94 <sbrk_aligned+0x40>)
 8008b58:	460c      	mov	r4, r1
 8008b5a:	6831      	ldr	r1, [r6, #0]
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	b911      	cbnz	r1, 8008b66 <sbrk_aligned+0x12>
 8008b60:	f000 fe46 	bl	80097f0 <_sbrk_r>
 8008b64:	6030      	str	r0, [r6, #0]
 8008b66:	4621      	mov	r1, r4
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f000 fe41 	bl	80097f0 <_sbrk_r>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	d103      	bne.n	8008b7a <sbrk_aligned+0x26>
 8008b72:	f04f 34ff 	mov.w	r4, #4294967295
 8008b76:	4620      	mov	r0, r4
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	1cc4      	adds	r4, r0, #3
 8008b7c:	f024 0403 	bic.w	r4, r4, #3
 8008b80:	42a0      	cmp	r0, r4
 8008b82:	d0f8      	beq.n	8008b76 <sbrk_aligned+0x22>
 8008b84:	1a21      	subs	r1, r4, r0
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 fe32 	bl	80097f0 <_sbrk_r>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d1f2      	bne.n	8008b76 <sbrk_aligned+0x22>
 8008b90:	e7ef      	b.n	8008b72 <sbrk_aligned+0x1e>
 8008b92:	bf00      	nop
 8008b94:	2000460c 	.word	0x2000460c

08008b98 <_malloc_r>:
 8008b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	1ccd      	adds	r5, r1, #3
 8008b9e:	f025 0503 	bic.w	r5, r5, #3
 8008ba2:	3508      	adds	r5, #8
 8008ba4:	2d0c      	cmp	r5, #12
 8008ba6:	bf38      	it	cc
 8008ba8:	250c      	movcc	r5, #12
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	4606      	mov	r6, r0
 8008bae:	db01      	blt.n	8008bb4 <_malloc_r+0x1c>
 8008bb0:	42a9      	cmp	r1, r5
 8008bb2:	d904      	bls.n	8008bbe <_malloc_r+0x26>
 8008bb4:	230c      	movs	r3, #12
 8008bb6:	6033      	str	r3, [r6, #0]
 8008bb8:	2000      	movs	r0, #0
 8008bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c94 <_malloc_r+0xfc>
 8008bc2:	f000 f869 	bl	8008c98 <__malloc_lock>
 8008bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8008bca:	461c      	mov	r4, r3
 8008bcc:	bb44      	cbnz	r4, 8008c20 <_malloc_r+0x88>
 8008bce:	4629      	mov	r1, r5
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff ffbf 	bl	8008b54 <sbrk_aligned>
 8008bd6:	1c43      	adds	r3, r0, #1
 8008bd8:	4604      	mov	r4, r0
 8008bda:	d158      	bne.n	8008c8e <_malloc_r+0xf6>
 8008bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8008be0:	4627      	mov	r7, r4
 8008be2:	2f00      	cmp	r7, #0
 8008be4:	d143      	bne.n	8008c6e <_malloc_r+0xd6>
 8008be6:	2c00      	cmp	r4, #0
 8008be8:	d04b      	beq.n	8008c82 <_malloc_r+0xea>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	4639      	mov	r1, r7
 8008bee:	4630      	mov	r0, r6
 8008bf0:	eb04 0903 	add.w	r9, r4, r3
 8008bf4:	f000 fdfc 	bl	80097f0 <_sbrk_r>
 8008bf8:	4581      	cmp	r9, r0
 8008bfa:	d142      	bne.n	8008c82 <_malloc_r+0xea>
 8008bfc:	6821      	ldr	r1, [r4, #0]
 8008bfe:	1a6d      	subs	r5, r5, r1
 8008c00:	4629      	mov	r1, r5
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7ff ffa6 	bl	8008b54 <sbrk_aligned>
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d03a      	beq.n	8008c82 <_malloc_r+0xea>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	442b      	add	r3, r5
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	f8d8 3000 	ldr.w	r3, [r8]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	bb62      	cbnz	r2, 8008c74 <_malloc_r+0xdc>
 8008c1a:	f8c8 7000 	str.w	r7, [r8]
 8008c1e:	e00f      	b.n	8008c40 <_malloc_r+0xa8>
 8008c20:	6822      	ldr	r2, [r4, #0]
 8008c22:	1b52      	subs	r2, r2, r5
 8008c24:	d420      	bmi.n	8008c68 <_malloc_r+0xd0>
 8008c26:	2a0b      	cmp	r2, #11
 8008c28:	d917      	bls.n	8008c5a <_malloc_r+0xc2>
 8008c2a:	1961      	adds	r1, r4, r5
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	6025      	str	r5, [r4, #0]
 8008c30:	bf18      	it	ne
 8008c32:	6059      	strne	r1, [r3, #4]
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	bf08      	it	eq
 8008c38:	f8c8 1000 	streq.w	r1, [r8]
 8008c3c:	5162      	str	r2, [r4, r5]
 8008c3e:	604b      	str	r3, [r1, #4]
 8008c40:	4630      	mov	r0, r6
 8008c42:	f000 f82f 	bl	8008ca4 <__malloc_unlock>
 8008c46:	f104 000b 	add.w	r0, r4, #11
 8008c4a:	1d23      	adds	r3, r4, #4
 8008c4c:	f020 0007 	bic.w	r0, r0, #7
 8008c50:	1ac2      	subs	r2, r0, r3
 8008c52:	bf1c      	itt	ne
 8008c54:	1a1b      	subne	r3, r3, r0
 8008c56:	50a3      	strne	r3, [r4, r2]
 8008c58:	e7af      	b.n	8008bba <_malloc_r+0x22>
 8008c5a:	6862      	ldr	r2, [r4, #4]
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	bf0c      	ite	eq
 8008c60:	f8c8 2000 	streq.w	r2, [r8]
 8008c64:	605a      	strne	r2, [r3, #4]
 8008c66:	e7eb      	b.n	8008c40 <_malloc_r+0xa8>
 8008c68:	4623      	mov	r3, r4
 8008c6a:	6864      	ldr	r4, [r4, #4]
 8008c6c:	e7ae      	b.n	8008bcc <_malloc_r+0x34>
 8008c6e:	463c      	mov	r4, r7
 8008c70:	687f      	ldr	r7, [r7, #4]
 8008c72:	e7b6      	b.n	8008be2 <_malloc_r+0x4a>
 8008c74:	461a      	mov	r2, r3
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	d1fb      	bne.n	8008c74 <_malloc_r+0xdc>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	6053      	str	r3, [r2, #4]
 8008c80:	e7de      	b.n	8008c40 <_malloc_r+0xa8>
 8008c82:	230c      	movs	r3, #12
 8008c84:	6033      	str	r3, [r6, #0]
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 f80c 	bl	8008ca4 <__malloc_unlock>
 8008c8c:	e794      	b.n	8008bb8 <_malloc_r+0x20>
 8008c8e:	6005      	str	r5, [r0, #0]
 8008c90:	e7d6      	b.n	8008c40 <_malloc_r+0xa8>
 8008c92:	bf00      	nop
 8008c94:	20004610 	.word	0x20004610

08008c98 <__malloc_lock>:
 8008c98:	4801      	ldr	r0, [pc, #4]	@ (8008ca0 <__malloc_lock+0x8>)
 8008c9a:	f7ff b8ac 	b.w	8007df6 <__retarget_lock_acquire_recursive>
 8008c9e:	bf00      	nop
 8008ca0:	20004608 	.word	0x20004608

08008ca4 <__malloc_unlock>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	@ (8008cac <__malloc_unlock+0x8>)
 8008ca6:	f7ff b8a7 	b.w	8007df8 <__retarget_lock_release_recursive>
 8008caa:	bf00      	nop
 8008cac:	20004608 	.word	0x20004608

08008cb0 <_Balloc>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	69c6      	ldr	r6, [r0, #28]
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	b976      	cbnz	r6, 8008cd8 <_Balloc+0x28>
 8008cba:	2010      	movs	r0, #16
 8008cbc:	f7ff ff42 	bl	8008b44 <malloc>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	61e0      	str	r0, [r4, #28]
 8008cc4:	b920      	cbnz	r0, 8008cd0 <_Balloc+0x20>
 8008cc6:	4b18      	ldr	r3, [pc, #96]	@ (8008d28 <_Balloc+0x78>)
 8008cc8:	4818      	ldr	r0, [pc, #96]	@ (8008d2c <_Balloc+0x7c>)
 8008cca:	216b      	movs	r1, #107	@ 0x6b
 8008ccc:	f000 fda0 	bl	8009810 <__assert_func>
 8008cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cd4:	6006      	str	r6, [r0, #0]
 8008cd6:	60c6      	str	r6, [r0, #12]
 8008cd8:	69e6      	ldr	r6, [r4, #28]
 8008cda:	68f3      	ldr	r3, [r6, #12]
 8008cdc:	b183      	cbz	r3, 8008d00 <_Balloc+0x50>
 8008cde:	69e3      	ldr	r3, [r4, #28]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ce6:	b9b8      	cbnz	r0, 8008d18 <_Balloc+0x68>
 8008ce8:	2101      	movs	r1, #1
 8008cea:	fa01 f605 	lsl.w	r6, r1, r5
 8008cee:	1d72      	adds	r2, r6, #5
 8008cf0:	0092      	lsls	r2, r2, #2
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 fdaa 	bl	800984c <_calloc_r>
 8008cf8:	b160      	cbz	r0, 8008d14 <_Balloc+0x64>
 8008cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cfe:	e00e      	b.n	8008d1e <_Balloc+0x6e>
 8008d00:	2221      	movs	r2, #33	@ 0x21
 8008d02:	2104      	movs	r1, #4
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fda1 	bl	800984c <_calloc_r>
 8008d0a:	69e3      	ldr	r3, [r4, #28]
 8008d0c:	60f0      	str	r0, [r6, #12]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e4      	bne.n	8008cde <_Balloc+0x2e>
 8008d14:	2000      	movs	r0, #0
 8008d16:	bd70      	pop	{r4, r5, r6, pc}
 8008d18:	6802      	ldr	r2, [r0, #0]
 8008d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d24:	e7f7      	b.n	8008d16 <_Balloc+0x66>
 8008d26:	bf00      	nop
 8008d28:	0800a3f2 	.word	0x0800a3f2
 8008d2c:	0800a472 	.word	0x0800a472

08008d30 <_Bfree>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	69c6      	ldr	r6, [r0, #28]
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	b976      	cbnz	r6, 8008d58 <_Bfree+0x28>
 8008d3a:	2010      	movs	r0, #16
 8008d3c:	f7ff ff02 	bl	8008b44 <malloc>
 8008d40:	4602      	mov	r2, r0
 8008d42:	61e8      	str	r0, [r5, #28]
 8008d44:	b920      	cbnz	r0, 8008d50 <_Bfree+0x20>
 8008d46:	4b09      	ldr	r3, [pc, #36]	@ (8008d6c <_Bfree+0x3c>)
 8008d48:	4809      	ldr	r0, [pc, #36]	@ (8008d70 <_Bfree+0x40>)
 8008d4a:	218f      	movs	r1, #143	@ 0x8f
 8008d4c:	f000 fd60 	bl	8009810 <__assert_func>
 8008d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d54:	6006      	str	r6, [r0, #0]
 8008d56:	60c6      	str	r6, [r0, #12]
 8008d58:	b13c      	cbz	r4, 8008d6a <_Bfree+0x3a>
 8008d5a:	69eb      	ldr	r3, [r5, #28]
 8008d5c:	6862      	ldr	r2, [r4, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d64:	6021      	str	r1, [r4, #0]
 8008d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	0800a3f2 	.word	0x0800a3f2
 8008d70:	0800a472 	.word	0x0800a472

08008d74 <__multadd>:
 8008d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d78:	690d      	ldr	r5, [r1, #16]
 8008d7a:	4607      	mov	r7, r0
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	461e      	mov	r6, r3
 8008d80:	f101 0c14 	add.w	ip, r1, #20
 8008d84:	2000      	movs	r0, #0
 8008d86:	f8dc 3000 	ldr.w	r3, [ip]
 8008d8a:	b299      	uxth	r1, r3
 8008d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8008d90:	0c1e      	lsrs	r6, r3, #16
 8008d92:	0c0b      	lsrs	r3, r1, #16
 8008d94:	fb02 3306 	mla	r3, r2, r6, r3
 8008d98:	b289      	uxth	r1, r1
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008da0:	4285      	cmp	r5, r0
 8008da2:	f84c 1b04 	str.w	r1, [ip], #4
 8008da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008daa:	dcec      	bgt.n	8008d86 <__multadd+0x12>
 8008dac:	b30e      	cbz	r6, 8008df2 <__multadd+0x7e>
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	42ab      	cmp	r3, r5
 8008db2:	dc19      	bgt.n	8008de8 <__multadd+0x74>
 8008db4:	6861      	ldr	r1, [r4, #4]
 8008db6:	4638      	mov	r0, r7
 8008db8:	3101      	adds	r1, #1
 8008dba:	f7ff ff79 	bl	8008cb0 <_Balloc>
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	b928      	cbnz	r0, 8008dce <__multadd+0x5a>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008df8 <__multadd+0x84>)
 8008dc6:	480d      	ldr	r0, [pc, #52]	@ (8008dfc <__multadd+0x88>)
 8008dc8:	21ba      	movs	r1, #186	@ 0xba
 8008dca:	f000 fd21 	bl	8009810 <__assert_func>
 8008dce:	6922      	ldr	r2, [r4, #16]
 8008dd0:	3202      	adds	r2, #2
 8008dd2:	f104 010c 	add.w	r1, r4, #12
 8008dd6:	0092      	lsls	r2, r2, #2
 8008dd8:	300c      	adds	r0, #12
 8008dda:	f7ff f80e 	bl	8007dfa <memcpy>
 8008dde:	4621      	mov	r1, r4
 8008de0:	4638      	mov	r0, r7
 8008de2:	f7ff ffa5 	bl	8008d30 <_Bfree>
 8008de6:	4644      	mov	r4, r8
 8008de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dec:	3501      	adds	r5, #1
 8008dee:	615e      	str	r6, [r3, #20]
 8008df0:	6125      	str	r5, [r4, #16]
 8008df2:	4620      	mov	r0, r4
 8008df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df8:	0800a461 	.word	0x0800a461
 8008dfc:	0800a472 	.word	0x0800a472

08008e00 <__hi0bits>:
 8008e00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e04:	4603      	mov	r3, r0
 8008e06:	bf36      	itet	cc
 8008e08:	0403      	lslcc	r3, r0, #16
 8008e0a:	2000      	movcs	r0, #0
 8008e0c:	2010      	movcc	r0, #16
 8008e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e12:	bf3c      	itt	cc
 8008e14:	021b      	lslcc	r3, r3, #8
 8008e16:	3008      	addcc	r0, #8
 8008e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e1c:	bf3c      	itt	cc
 8008e1e:	011b      	lslcc	r3, r3, #4
 8008e20:	3004      	addcc	r0, #4
 8008e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e26:	bf3c      	itt	cc
 8008e28:	009b      	lslcc	r3, r3, #2
 8008e2a:	3002      	addcc	r0, #2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	db05      	blt.n	8008e3c <__hi0bits+0x3c>
 8008e30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e34:	f100 0001 	add.w	r0, r0, #1
 8008e38:	bf08      	it	eq
 8008e3a:	2020      	moveq	r0, #32
 8008e3c:	4770      	bx	lr

08008e3e <__lo0bits>:
 8008e3e:	6803      	ldr	r3, [r0, #0]
 8008e40:	4602      	mov	r2, r0
 8008e42:	f013 0007 	ands.w	r0, r3, #7
 8008e46:	d00b      	beq.n	8008e60 <__lo0bits+0x22>
 8008e48:	07d9      	lsls	r1, r3, #31
 8008e4a:	d421      	bmi.n	8008e90 <__lo0bits+0x52>
 8008e4c:	0798      	lsls	r0, r3, #30
 8008e4e:	bf49      	itett	mi
 8008e50:	085b      	lsrmi	r3, r3, #1
 8008e52:	089b      	lsrpl	r3, r3, #2
 8008e54:	2001      	movmi	r0, #1
 8008e56:	6013      	strmi	r3, [r2, #0]
 8008e58:	bf5c      	itt	pl
 8008e5a:	6013      	strpl	r3, [r2, #0]
 8008e5c:	2002      	movpl	r0, #2
 8008e5e:	4770      	bx	lr
 8008e60:	b299      	uxth	r1, r3
 8008e62:	b909      	cbnz	r1, 8008e68 <__lo0bits+0x2a>
 8008e64:	0c1b      	lsrs	r3, r3, #16
 8008e66:	2010      	movs	r0, #16
 8008e68:	b2d9      	uxtb	r1, r3
 8008e6a:	b909      	cbnz	r1, 8008e70 <__lo0bits+0x32>
 8008e6c:	3008      	adds	r0, #8
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	0719      	lsls	r1, r3, #28
 8008e72:	bf04      	itt	eq
 8008e74:	091b      	lsreq	r3, r3, #4
 8008e76:	3004      	addeq	r0, #4
 8008e78:	0799      	lsls	r1, r3, #30
 8008e7a:	bf04      	itt	eq
 8008e7c:	089b      	lsreq	r3, r3, #2
 8008e7e:	3002      	addeq	r0, #2
 8008e80:	07d9      	lsls	r1, r3, #31
 8008e82:	d403      	bmi.n	8008e8c <__lo0bits+0x4e>
 8008e84:	085b      	lsrs	r3, r3, #1
 8008e86:	f100 0001 	add.w	r0, r0, #1
 8008e8a:	d003      	beq.n	8008e94 <__lo0bits+0x56>
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	4770      	bx	lr
 8008e90:	2000      	movs	r0, #0
 8008e92:	4770      	bx	lr
 8008e94:	2020      	movs	r0, #32
 8008e96:	4770      	bx	lr

08008e98 <__i2b>:
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	f7ff ff07 	bl	8008cb0 <_Balloc>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	b928      	cbnz	r0, 8008eb2 <__i2b+0x1a>
 8008ea6:	4b05      	ldr	r3, [pc, #20]	@ (8008ebc <__i2b+0x24>)
 8008ea8:	4805      	ldr	r0, [pc, #20]	@ (8008ec0 <__i2b+0x28>)
 8008eaa:	f240 1145 	movw	r1, #325	@ 0x145
 8008eae:	f000 fcaf 	bl	8009810 <__assert_func>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	6144      	str	r4, [r0, #20]
 8008eb6:	6103      	str	r3, [r0, #16]
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	bf00      	nop
 8008ebc:	0800a461 	.word	0x0800a461
 8008ec0:	0800a472 	.word	0x0800a472

08008ec4 <__multiply>:
 8008ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	4614      	mov	r4, r2
 8008eca:	690a      	ldr	r2, [r1, #16]
 8008ecc:	6923      	ldr	r3, [r4, #16]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	bfa8      	it	ge
 8008ed2:	4623      	movge	r3, r4
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	bfa4      	itt	ge
 8008ed8:	460c      	movge	r4, r1
 8008eda:	461f      	movge	r7, r3
 8008edc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008ee0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008ee4:	68a3      	ldr	r3, [r4, #8]
 8008ee6:	6861      	ldr	r1, [r4, #4]
 8008ee8:	eb0a 0609 	add.w	r6, sl, r9
 8008eec:	42b3      	cmp	r3, r6
 8008eee:	b085      	sub	sp, #20
 8008ef0:	bfb8      	it	lt
 8008ef2:	3101      	addlt	r1, #1
 8008ef4:	f7ff fedc 	bl	8008cb0 <_Balloc>
 8008ef8:	b930      	cbnz	r0, 8008f08 <__multiply+0x44>
 8008efa:	4602      	mov	r2, r0
 8008efc:	4b44      	ldr	r3, [pc, #272]	@ (8009010 <__multiply+0x14c>)
 8008efe:	4845      	ldr	r0, [pc, #276]	@ (8009014 <__multiply+0x150>)
 8008f00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f04:	f000 fc84 	bl	8009810 <__assert_func>
 8008f08:	f100 0514 	add.w	r5, r0, #20
 8008f0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f10:	462b      	mov	r3, r5
 8008f12:	2200      	movs	r2, #0
 8008f14:	4543      	cmp	r3, r8
 8008f16:	d321      	bcc.n	8008f5c <__multiply+0x98>
 8008f18:	f107 0114 	add.w	r1, r7, #20
 8008f1c:	f104 0214 	add.w	r2, r4, #20
 8008f20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008f24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008f28:	9302      	str	r3, [sp, #8]
 8008f2a:	1b13      	subs	r3, r2, r4
 8008f2c:	3b15      	subs	r3, #21
 8008f2e:	f023 0303 	bic.w	r3, r3, #3
 8008f32:	3304      	adds	r3, #4
 8008f34:	f104 0715 	add.w	r7, r4, #21
 8008f38:	42ba      	cmp	r2, r7
 8008f3a:	bf38      	it	cc
 8008f3c:	2304      	movcc	r3, #4
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	9103      	str	r1, [sp, #12]
 8008f44:	428b      	cmp	r3, r1
 8008f46:	d80c      	bhi.n	8008f62 <__multiply+0x9e>
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	dd03      	ble.n	8008f54 <__multiply+0x90>
 8008f4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d05b      	beq.n	800900c <__multiply+0x148>
 8008f54:	6106      	str	r6, [r0, #16]
 8008f56:	b005      	add	sp, #20
 8008f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5c:	f843 2b04 	str.w	r2, [r3], #4
 8008f60:	e7d8      	b.n	8008f14 <__multiply+0x50>
 8008f62:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f66:	f1ba 0f00 	cmp.w	sl, #0
 8008f6a:	d024      	beq.n	8008fb6 <__multiply+0xf2>
 8008f6c:	f104 0e14 	add.w	lr, r4, #20
 8008f70:	46a9      	mov	r9, r5
 8008f72:	f04f 0c00 	mov.w	ip, #0
 8008f76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f7a:	f8d9 3000 	ldr.w	r3, [r9]
 8008f7e:	fa1f fb87 	uxth.w	fp, r7
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008f8c:	f8d9 7000 	ldr.w	r7, [r9]
 8008f90:	4463      	add	r3, ip
 8008f92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f96:	fb0a c70b 	mla	r7, sl, fp, ip
 8008f9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008fa4:	4572      	cmp	r2, lr
 8008fa6:	f849 3b04 	str.w	r3, [r9], #4
 8008faa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008fae:	d8e2      	bhi.n	8008f76 <__multiply+0xb2>
 8008fb0:	9b01      	ldr	r3, [sp, #4]
 8008fb2:	f845 c003 	str.w	ip, [r5, r3]
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008fbc:	3104      	adds	r1, #4
 8008fbe:	f1b9 0f00 	cmp.w	r9, #0
 8008fc2:	d021      	beq.n	8009008 <__multiply+0x144>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	f104 0c14 	add.w	ip, r4, #20
 8008fca:	46ae      	mov	lr, r5
 8008fcc:	f04f 0a00 	mov.w	sl, #0
 8008fd0:	f8bc b000 	ldrh.w	fp, [ip]
 8008fd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008fd8:	fb09 770b 	mla	r7, r9, fp, r7
 8008fdc:	4457      	add	r7, sl
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008fe4:	f84e 3b04 	str.w	r3, [lr], #4
 8008fe8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ff0:	f8be 3000 	ldrh.w	r3, [lr]
 8008ff4:	fb09 330a 	mla	r3, r9, sl, r3
 8008ff8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008ffc:	4562      	cmp	r2, ip
 8008ffe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009002:	d8e5      	bhi.n	8008fd0 <__multiply+0x10c>
 8009004:	9f01      	ldr	r7, [sp, #4]
 8009006:	51eb      	str	r3, [r5, r7]
 8009008:	3504      	adds	r5, #4
 800900a:	e799      	b.n	8008f40 <__multiply+0x7c>
 800900c:	3e01      	subs	r6, #1
 800900e:	e79b      	b.n	8008f48 <__multiply+0x84>
 8009010:	0800a461 	.word	0x0800a461
 8009014:	0800a472 	.word	0x0800a472

08009018 <__pow5mult>:
 8009018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800901c:	4615      	mov	r5, r2
 800901e:	f012 0203 	ands.w	r2, r2, #3
 8009022:	4607      	mov	r7, r0
 8009024:	460e      	mov	r6, r1
 8009026:	d007      	beq.n	8009038 <__pow5mult+0x20>
 8009028:	4c25      	ldr	r4, [pc, #148]	@ (80090c0 <__pow5mult+0xa8>)
 800902a:	3a01      	subs	r2, #1
 800902c:	2300      	movs	r3, #0
 800902e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009032:	f7ff fe9f 	bl	8008d74 <__multadd>
 8009036:	4606      	mov	r6, r0
 8009038:	10ad      	asrs	r5, r5, #2
 800903a:	d03d      	beq.n	80090b8 <__pow5mult+0xa0>
 800903c:	69fc      	ldr	r4, [r7, #28]
 800903e:	b97c      	cbnz	r4, 8009060 <__pow5mult+0x48>
 8009040:	2010      	movs	r0, #16
 8009042:	f7ff fd7f 	bl	8008b44 <malloc>
 8009046:	4602      	mov	r2, r0
 8009048:	61f8      	str	r0, [r7, #28]
 800904a:	b928      	cbnz	r0, 8009058 <__pow5mult+0x40>
 800904c:	4b1d      	ldr	r3, [pc, #116]	@ (80090c4 <__pow5mult+0xac>)
 800904e:	481e      	ldr	r0, [pc, #120]	@ (80090c8 <__pow5mult+0xb0>)
 8009050:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009054:	f000 fbdc 	bl	8009810 <__assert_func>
 8009058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800905c:	6004      	str	r4, [r0, #0]
 800905e:	60c4      	str	r4, [r0, #12]
 8009060:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009068:	b94c      	cbnz	r4, 800907e <__pow5mult+0x66>
 800906a:	f240 2171 	movw	r1, #625	@ 0x271
 800906e:	4638      	mov	r0, r7
 8009070:	f7ff ff12 	bl	8008e98 <__i2b>
 8009074:	2300      	movs	r3, #0
 8009076:	f8c8 0008 	str.w	r0, [r8, #8]
 800907a:	4604      	mov	r4, r0
 800907c:	6003      	str	r3, [r0, #0]
 800907e:	f04f 0900 	mov.w	r9, #0
 8009082:	07eb      	lsls	r3, r5, #31
 8009084:	d50a      	bpl.n	800909c <__pow5mult+0x84>
 8009086:	4631      	mov	r1, r6
 8009088:	4622      	mov	r2, r4
 800908a:	4638      	mov	r0, r7
 800908c:	f7ff ff1a 	bl	8008ec4 <__multiply>
 8009090:	4631      	mov	r1, r6
 8009092:	4680      	mov	r8, r0
 8009094:	4638      	mov	r0, r7
 8009096:	f7ff fe4b 	bl	8008d30 <_Bfree>
 800909a:	4646      	mov	r6, r8
 800909c:	106d      	asrs	r5, r5, #1
 800909e:	d00b      	beq.n	80090b8 <__pow5mult+0xa0>
 80090a0:	6820      	ldr	r0, [r4, #0]
 80090a2:	b938      	cbnz	r0, 80090b4 <__pow5mult+0x9c>
 80090a4:	4622      	mov	r2, r4
 80090a6:	4621      	mov	r1, r4
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7ff ff0b 	bl	8008ec4 <__multiply>
 80090ae:	6020      	str	r0, [r4, #0]
 80090b0:	f8c0 9000 	str.w	r9, [r0]
 80090b4:	4604      	mov	r4, r0
 80090b6:	e7e4      	b.n	8009082 <__pow5mult+0x6a>
 80090b8:	4630      	mov	r0, r6
 80090ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090be:	bf00      	nop
 80090c0:	0800a4cc 	.word	0x0800a4cc
 80090c4:	0800a3f2 	.word	0x0800a3f2
 80090c8:	0800a472 	.word	0x0800a472

080090cc <__lshift>:
 80090cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	460c      	mov	r4, r1
 80090d2:	6849      	ldr	r1, [r1, #4]
 80090d4:	6923      	ldr	r3, [r4, #16]
 80090d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	4607      	mov	r7, r0
 80090de:	4691      	mov	r9, r2
 80090e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090e4:	f108 0601 	add.w	r6, r8, #1
 80090e8:	42b3      	cmp	r3, r6
 80090ea:	db0b      	blt.n	8009104 <__lshift+0x38>
 80090ec:	4638      	mov	r0, r7
 80090ee:	f7ff fddf 	bl	8008cb0 <_Balloc>
 80090f2:	4605      	mov	r5, r0
 80090f4:	b948      	cbnz	r0, 800910a <__lshift+0x3e>
 80090f6:	4602      	mov	r2, r0
 80090f8:	4b28      	ldr	r3, [pc, #160]	@ (800919c <__lshift+0xd0>)
 80090fa:	4829      	ldr	r0, [pc, #164]	@ (80091a0 <__lshift+0xd4>)
 80090fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009100:	f000 fb86 	bl	8009810 <__assert_func>
 8009104:	3101      	adds	r1, #1
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	e7ee      	b.n	80090e8 <__lshift+0x1c>
 800910a:	2300      	movs	r3, #0
 800910c:	f100 0114 	add.w	r1, r0, #20
 8009110:	f100 0210 	add.w	r2, r0, #16
 8009114:	4618      	mov	r0, r3
 8009116:	4553      	cmp	r3, sl
 8009118:	db33      	blt.n	8009182 <__lshift+0xb6>
 800911a:	6920      	ldr	r0, [r4, #16]
 800911c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009120:	f104 0314 	add.w	r3, r4, #20
 8009124:	f019 091f 	ands.w	r9, r9, #31
 8009128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800912c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009130:	d02b      	beq.n	800918a <__lshift+0xbe>
 8009132:	f1c9 0e20 	rsb	lr, r9, #32
 8009136:	468a      	mov	sl, r1
 8009138:	2200      	movs	r2, #0
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	fa00 f009 	lsl.w	r0, r0, r9
 8009140:	4310      	orrs	r0, r2
 8009142:	f84a 0b04 	str.w	r0, [sl], #4
 8009146:	f853 2b04 	ldr.w	r2, [r3], #4
 800914a:	459c      	cmp	ip, r3
 800914c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009150:	d8f3      	bhi.n	800913a <__lshift+0x6e>
 8009152:	ebac 0304 	sub.w	r3, ip, r4
 8009156:	3b15      	subs	r3, #21
 8009158:	f023 0303 	bic.w	r3, r3, #3
 800915c:	3304      	adds	r3, #4
 800915e:	f104 0015 	add.w	r0, r4, #21
 8009162:	4584      	cmp	ip, r0
 8009164:	bf38      	it	cc
 8009166:	2304      	movcc	r3, #4
 8009168:	50ca      	str	r2, [r1, r3]
 800916a:	b10a      	cbz	r2, 8009170 <__lshift+0xa4>
 800916c:	f108 0602 	add.w	r6, r8, #2
 8009170:	3e01      	subs	r6, #1
 8009172:	4638      	mov	r0, r7
 8009174:	612e      	str	r6, [r5, #16]
 8009176:	4621      	mov	r1, r4
 8009178:	f7ff fdda 	bl	8008d30 <_Bfree>
 800917c:	4628      	mov	r0, r5
 800917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009182:	f842 0f04 	str.w	r0, [r2, #4]!
 8009186:	3301      	adds	r3, #1
 8009188:	e7c5      	b.n	8009116 <__lshift+0x4a>
 800918a:	3904      	subs	r1, #4
 800918c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009190:	f841 2f04 	str.w	r2, [r1, #4]!
 8009194:	459c      	cmp	ip, r3
 8009196:	d8f9      	bhi.n	800918c <__lshift+0xc0>
 8009198:	e7ea      	b.n	8009170 <__lshift+0xa4>
 800919a:	bf00      	nop
 800919c:	0800a461 	.word	0x0800a461
 80091a0:	0800a472 	.word	0x0800a472

080091a4 <__mcmp>:
 80091a4:	690a      	ldr	r2, [r1, #16]
 80091a6:	4603      	mov	r3, r0
 80091a8:	6900      	ldr	r0, [r0, #16]
 80091aa:	1a80      	subs	r0, r0, r2
 80091ac:	b530      	push	{r4, r5, lr}
 80091ae:	d10e      	bne.n	80091ce <__mcmp+0x2a>
 80091b0:	3314      	adds	r3, #20
 80091b2:	3114      	adds	r1, #20
 80091b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80091b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091c4:	4295      	cmp	r5, r2
 80091c6:	d003      	beq.n	80091d0 <__mcmp+0x2c>
 80091c8:	d205      	bcs.n	80091d6 <__mcmp+0x32>
 80091ca:	f04f 30ff 	mov.w	r0, #4294967295
 80091ce:	bd30      	pop	{r4, r5, pc}
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	d3f3      	bcc.n	80091bc <__mcmp+0x18>
 80091d4:	e7fb      	b.n	80091ce <__mcmp+0x2a>
 80091d6:	2001      	movs	r0, #1
 80091d8:	e7f9      	b.n	80091ce <__mcmp+0x2a>
	...

080091dc <__mdiff>:
 80091dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	4689      	mov	r9, r1
 80091e2:	4606      	mov	r6, r0
 80091e4:	4611      	mov	r1, r2
 80091e6:	4648      	mov	r0, r9
 80091e8:	4614      	mov	r4, r2
 80091ea:	f7ff ffdb 	bl	80091a4 <__mcmp>
 80091ee:	1e05      	subs	r5, r0, #0
 80091f0:	d112      	bne.n	8009218 <__mdiff+0x3c>
 80091f2:	4629      	mov	r1, r5
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff fd5b 	bl	8008cb0 <_Balloc>
 80091fa:	4602      	mov	r2, r0
 80091fc:	b928      	cbnz	r0, 800920a <__mdiff+0x2e>
 80091fe:	4b3f      	ldr	r3, [pc, #252]	@ (80092fc <__mdiff+0x120>)
 8009200:	f240 2137 	movw	r1, #567	@ 0x237
 8009204:	483e      	ldr	r0, [pc, #248]	@ (8009300 <__mdiff+0x124>)
 8009206:	f000 fb03 	bl	8009810 <__assert_func>
 800920a:	2301      	movs	r3, #1
 800920c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009210:	4610      	mov	r0, r2
 8009212:	b003      	add	sp, #12
 8009214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009218:	bfbc      	itt	lt
 800921a:	464b      	movlt	r3, r9
 800921c:	46a1      	movlt	r9, r4
 800921e:	4630      	mov	r0, r6
 8009220:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009224:	bfba      	itte	lt
 8009226:	461c      	movlt	r4, r3
 8009228:	2501      	movlt	r5, #1
 800922a:	2500      	movge	r5, #0
 800922c:	f7ff fd40 	bl	8008cb0 <_Balloc>
 8009230:	4602      	mov	r2, r0
 8009232:	b918      	cbnz	r0, 800923c <__mdiff+0x60>
 8009234:	4b31      	ldr	r3, [pc, #196]	@ (80092fc <__mdiff+0x120>)
 8009236:	f240 2145 	movw	r1, #581	@ 0x245
 800923a:	e7e3      	b.n	8009204 <__mdiff+0x28>
 800923c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009240:	6926      	ldr	r6, [r4, #16]
 8009242:	60c5      	str	r5, [r0, #12]
 8009244:	f109 0310 	add.w	r3, r9, #16
 8009248:	f109 0514 	add.w	r5, r9, #20
 800924c:	f104 0e14 	add.w	lr, r4, #20
 8009250:	f100 0b14 	add.w	fp, r0, #20
 8009254:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009258:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	46d9      	mov	r9, fp
 8009260:	f04f 0c00 	mov.w	ip, #0
 8009264:	9b01      	ldr	r3, [sp, #4]
 8009266:	f85e 0b04 	ldr.w	r0, [lr], #4
 800926a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	fa1f f38a 	uxth.w	r3, sl
 8009274:	4619      	mov	r1, r3
 8009276:	b283      	uxth	r3, r0
 8009278:	1acb      	subs	r3, r1, r3
 800927a:	0c00      	lsrs	r0, r0, #16
 800927c:	4463      	add	r3, ip
 800927e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009282:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009286:	b29b      	uxth	r3, r3
 8009288:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800928c:	4576      	cmp	r6, lr
 800928e:	f849 3b04 	str.w	r3, [r9], #4
 8009292:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009296:	d8e5      	bhi.n	8009264 <__mdiff+0x88>
 8009298:	1b33      	subs	r3, r6, r4
 800929a:	3b15      	subs	r3, #21
 800929c:	f023 0303 	bic.w	r3, r3, #3
 80092a0:	3415      	adds	r4, #21
 80092a2:	3304      	adds	r3, #4
 80092a4:	42a6      	cmp	r6, r4
 80092a6:	bf38      	it	cc
 80092a8:	2304      	movcc	r3, #4
 80092aa:	441d      	add	r5, r3
 80092ac:	445b      	add	r3, fp
 80092ae:	461e      	mov	r6, r3
 80092b0:	462c      	mov	r4, r5
 80092b2:	4544      	cmp	r4, r8
 80092b4:	d30e      	bcc.n	80092d4 <__mdiff+0xf8>
 80092b6:	f108 0103 	add.w	r1, r8, #3
 80092ba:	1b49      	subs	r1, r1, r5
 80092bc:	f021 0103 	bic.w	r1, r1, #3
 80092c0:	3d03      	subs	r5, #3
 80092c2:	45a8      	cmp	r8, r5
 80092c4:	bf38      	it	cc
 80092c6:	2100      	movcc	r1, #0
 80092c8:	440b      	add	r3, r1
 80092ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092ce:	b191      	cbz	r1, 80092f6 <__mdiff+0x11a>
 80092d0:	6117      	str	r7, [r2, #16]
 80092d2:	e79d      	b.n	8009210 <__mdiff+0x34>
 80092d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80092d8:	46e6      	mov	lr, ip
 80092da:	0c08      	lsrs	r0, r1, #16
 80092dc:	fa1c fc81 	uxtah	ip, ip, r1
 80092e0:	4471      	add	r1, lr
 80092e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80092e6:	b289      	uxth	r1, r1
 80092e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092ec:	f846 1b04 	str.w	r1, [r6], #4
 80092f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092f4:	e7dd      	b.n	80092b2 <__mdiff+0xd6>
 80092f6:	3f01      	subs	r7, #1
 80092f8:	e7e7      	b.n	80092ca <__mdiff+0xee>
 80092fa:	bf00      	nop
 80092fc:	0800a461 	.word	0x0800a461
 8009300:	0800a472 	.word	0x0800a472

08009304 <__d2b>:
 8009304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009308:	460f      	mov	r7, r1
 800930a:	2101      	movs	r1, #1
 800930c:	ec59 8b10 	vmov	r8, r9, d0
 8009310:	4616      	mov	r6, r2
 8009312:	f7ff fccd 	bl	8008cb0 <_Balloc>
 8009316:	4604      	mov	r4, r0
 8009318:	b930      	cbnz	r0, 8009328 <__d2b+0x24>
 800931a:	4602      	mov	r2, r0
 800931c:	4b23      	ldr	r3, [pc, #140]	@ (80093ac <__d2b+0xa8>)
 800931e:	4824      	ldr	r0, [pc, #144]	@ (80093b0 <__d2b+0xac>)
 8009320:	f240 310f 	movw	r1, #783	@ 0x30f
 8009324:	f000 fa74 	bl	8009810 <__assert_func>
 8009328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800932c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009330:	b10d      	cbz	r5, 8009336 <__d2b+0x32>
 8009332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	f1b8 0300 	subs.w	r3, r8, #0
 800933c:	d023      	beq.n	8009386 <__d2b+0x82>
 800933e:	4668      	mov	r0, sp
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	f7ff fd7c 	bl	8008e3e <__lo0bits>
 8009346:	e9dd 1200 	ldrd	r1, r2, [sp]
 800934a:	b1d0      	cbz	r0, 8009382 <__d2b+0x7e>
 800934c:	f1c0 0320 	rsb	r3, r0, #32
 8009350:	fa02 f303 	lsl.w	r3, r2, r3
 8009354:	430b      	orrs	r3, r1
 8009356:	40c2      	lsrs	r2, r0
 8009358:	6163      	str	r3, [r4, #20]
 800935a:	9201      	str	r2, [sp, #4]
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	61a3      	str	r3, [r4, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	bf0c      	ite	eq
 8009364:	2201      	moveq	r2, #1
 8009366:	2202      	movne	r2, #2
 8009368:	6122      	str	r2, [r4, #16]
 800936a:	b1a5      	cbz	r5, 8009396 <__d2b+0x92>
 800936c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009370:	4405      	add	r5, r0
 8009372:	603d      	str	r5, [r7, #0]
 8009374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009378:	6030      	str	r0, [r6, #0]
 800937a:	4620      	mov	r0, r4
 800937c:	b003      	add	sp, #12
 800937e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009382:	6161      	str	r1, [r4, #20]
 8009384:	e7ea      	b.n	800935c <__d2b+0x58>
 8009386:	a801      	add	r0, sp, #4
 8009388:	f7ff fd59 	bl	8008e3e <__lo0bits>
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	6163      	str	r3, [r4, #20]
 8009390:	3020      	adds	r0, #32
 8009392:	2201      	movs	r2, #1
 8009394:	e7e8      	b.n	8009368 <__d2b+0x64>
 8009396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800939a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800939e:	6038      	str	r0, [r7, #0]
 80093a0:	6918      	ldr	r0, [r3, #16]
 80093a2:	f7ff fd2d 	bl	8008e00 <__hi0bits>
 80093a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093aa:	e7e5      	b.n	8009378 <__d2b+0x74>
 80093ac:	0800a461 	.word	0x0800a461
 80093b0:	0800a472 	.word	0x0800a472

080093b4 <__ssputs_r>:
 80093b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b8:	688e      	ldr	r6, [r1, #8]
 80093ba:	461f      	mov	r7, r3
 80093bc:	42be      	cmp	r6, r7
 80093be:	680b      	ldr	r3, [r1, #0]
 80093c0:	4682      	mov	sl, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	4690      	mov	r8, r2
 80093c6:	d82d      	bhi.n	8009424 <__ssputs_r+0x70>
 80093c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093d0:	d026      	beq.n	8009420 <__ssputs_r+0x6c>
 80093d2:	6965      	ldr	r5, [r4, #20]
 80093d4:	6909      	ldr	r1, [r1, #16]
 80093d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093da:	eba3 0901 	sub.w	r9, r3, r1
 80093de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093e2:	1c7b      	adds	r3, r7, #1
 80093e4:	444b      	add	r3, r9
 80093e6:	106d      	asrs	r5, r5, #1
 80093e8:	429d      	cmp	r5, r3
 80093ea:	bf38      	it	cc
 80093ec:	461d      	movcc	r5, r3
 80093ee:	0553      	lsls	r3, r2, #21
 80093f0:	d527      	bpl.n	8009442 <__ssputs_r+0x8e>
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7ff fbd0 	bl	8008b98 <_malloc_r>
 80093f8:	4606      	mov	r6, r0
 80093fa:	b360      	cbz	r0, 8009456 <__ssputs_r+0xa2>
 80093fc:	6921      	ldr	r1, [r4, #16]
 80093fe:	464a      	mov	r2, r9
 8009400:	f7fe fcfb 	bl	8007dfa <memcpy>
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800940a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	6126      	str	r6, [r4, #16]
 8009412:	6165      	str	r5, [r4, #20]
 8009414:	444e      	add	r6, r9
 8009416:	eba5 0509 	sub.w	r5, r5, r9
 800941a:	6026      	str	r6, [r4, #0]
 800941c:	60a5      	str	r5, [r4, #8]
 800941e:	463e      	mov	r6, r7
 8009420:	42be      	cmp	r6, r7
 8009422:	d900      	bls.n	8009426 <__ssputs_r+0x72>
 8009424:	463e      	mov	r6, r7
 8009426:	6820      	ldr	r0, [r4, #0]
 8009428:	4632      	mov	r2, r6
 800942a:	4641      	mov	r1, r8
 800942c:	f000 f9c6 	bl	80097bc <memmove>
 8009430:	68a3      	ldr	r3, [r4, #8]
 8009432:	1b9b      	subs	r3, r3, r6
 8009434:	60a3      	str	r3, [r4, #8]
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	4433      	add	r3, r6
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	2000      	movs	r0, #0
 800943e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009442:	462a      	mov	r2, r5
 8009444:	f000 fa28 	bl	8009898 <_realloc_r>
 8009448:	4606      	mov	r6, r0
 800944a:	2800      	cmp	r0, #0
 800944c:	d1e0      	bne.n	8009410 <__ssputs_r+0x5c>
 800944e:	6921      	ldr	r1, [r4, #16]
 8009450:	4650      	mov	r0, sl
 8009452:	f7ff fb2d 	bl	8008ab0 <_free_r>
 8009456:	230c      	movs	r3, #12
 8009458:	f8ca 3000 	str.w	r3, [sl]
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009462:	81a3      	strh	r3, [r4, #12]
 8009464:	f04f 30ff 	mov.w	r0, #4294967295
 8009468:	e7e9      	b.n	800943e <__ssputs_r+0x8a>
	...

0800946c <_svfiprintf_r>:
 800946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009470:	4698      	mov	r8, r3
 8009472:	898b      	ldrh	r3, [r1, #12]
 8009474:	061b      	lsls	r3, r3, #24
 8009476:	b09d      	sub	sp, #116	@ 0x74
 8009478:	4607      	mov	r7, r0
 800947a:	460d      	mov	r5, r1
 800947c:	4614      	mov	r4, r2
 800947e:	d510      	bpl.n	80094a2 <_svfiprintf_r+0x36>
 8009480:	690b      	ldr	r3, [r1, #16]
 8009482:	b973      	cbnz	r3, 80094a2 <_svfiprintf_r+0x36>
 8009484:	2140      	movs	r1, #64	@ 0x40
 8009486:	f7ff fb87 	bl	8008b98 <_malloc_r>
 800948a:	6028      	str	r0, [r5, #0]
 800948c:	6128      	str	r0, [r5, #16]
 800948e:	b930      	cbnz	r0, 800949e <_svfiprintf_r+0x32>
 8009490:	230c      	movs	r3, #12
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	f04f 30ff 	mov.w	r0, #4294967295
 8009498:	b01d      	add	sp, #116	@ 0x74
 800949a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949e:	2340      	movs	r3, #64	@ 0x40
 80094a0:	616b      	str	r3, [r5, #20]
 80094a2:	2300      	movs	r3, #0
 80094a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094a6:	2320      	movs	r3, #32
 80094a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80094b0:	2330      	movs	r3, #48	@ 0x30
 80094b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009650 <_svfiprintf_r+0x1e4>
 80094b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094ba:	f04f 0901 	mov.w	r9, #1
 80094be:	4623      	mov	r3, r4
 80094c0:	469a      	mov	sl, r3
 80094c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c6:	b10a      	cbz	r2, 80094cc <_svfiprintf_r+0x60>
 80094c8:	2a25      	cmp	r2, #37	@ 0x25
 80094ca:	d1f9      	bne.n	80094c0 <_svfiprintf_r+0x54>
 80094cc:	ebba 0b04 	subs.w	fp, sl, r4
 80094d0:	d00b      	beq.n	80094ea <_svfiprintf_r+0x7e>
 80094d2:	465b      	mov	r3, fp
 80094d4:	4622      	mov	r2, r4
 80094d6:	4629      	mov	r1, r5
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff ff6b 	bl	80093b4 <__ssputs_r>
 80094de:	3001      	adds	r0, #1
 80094e0:	f000 80a7 	beq.w	8009632 <_svfiprintf_r+0x1c6>
 80094e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094e6:	445a      	add	r2, fp
 80094e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80094ea:	f89a 3000 	ldrb.w	r3, [sl]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 809f 	beq.w	8009632 <_svfiprintf_r+0x1c6>
 80094f4:	2300      	movs	r3, #0
 80094f6:	f04f 32ff 	mov.w	r2, #4294967295
 80094fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094fe:	f10a 0a01 	add.w	sl, sl, #1
 8009502:	9304      	str	r3, [sp, #16]
 8009504:	9307      	str	r3, [sp, #28]
 8009506:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800950a:	931a      	str	r3, [sp, #104]	@ 0x68
 800950c:	4654      	mov	r4, sl
 800950e:	2205      	movs	r2, #5
 8009510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009514:	484e      	ldr	r0, [pc, #312]	@ (8009650 <_svfiprintf_r+0x1e4>)
 8009516:	f7f6 fe73 	bl	8000200 <memchr>
 800951a:	9a04      	ldr	r2, [sp, #16]
 800951c:	b9d8      	cbnz	r0, 8009556 <_svfiprintf_r+0xea>
 800951e:	06d0      	lsls	r0, r2, #27
 8009520:	bf44      	itt	mi
 8009522:	2320      	movmi	r3, #32
 8009524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009528:	0711      	lsls	r1, r2, #28
 800952a:	bf44      	itt	mi
 800952c:	232b      	movmi	r3, #43	@ 0x2b
 800952e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009532:	f89a 3000 	ldrb.w	r3, [sl]
 8009536:	2b2a      	cmp	r3, #42	@ 0x2a
 8009538:	d015      	beq.n	8009566 <_svfiprintf_r+0xfa>
 800953a:	9a07      	ldr	r2, [sp, #28]
 800953c:	4654      	mov	r4, sl
 800953e:	2000      	movs	r0, #0
 8009540:	f04f 0c0a 	mov.w	ip, #10
 8009544:	4621      	mov	r1, r4
 8009546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800954a:	3b30      	subs	r3, #48	@ 0x30
 800954c:	2b09      	cmp	r3, #9
 800954e:	d94b      	bls.n	80095e8 <_svfiprintf_r+0x17c>
 8009550:	b1b0      	cbz	r0, 8009580 <_svfiprintf_r+0x114>
 8009552:	9207      	str	r2, [sp, #28]
 8009554:	e014      	b.n	8009580 <_svfiprintf_r+0x114>
 8009556:	eba0 0308 	sub.w	r3, r0, r8
 800955a:	fa09 f303 	lsl.w	r3, r9, r3
 800955e:	4313      	orrs	r3, r2
 8009560:	9304      	str	r3, [sp, #16]
 8009562:	46a2      	mov	sl, r4
 8009564:	e7d2      	b.n	800950c <_svfiprintf_r+0xa0>
 8009566:	9b03      	ldr	r3, [sp, #12]
 8009568:	1d19      	adds	r1, r3, #4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	9103      	str	r1, [sp, #12]
 800956e:	2b00      	cmp	r3, #0
 8009570:	bfbb      	ittet	lt
 8009572:	425b      	neglt	r3, r3
 8009574:	f042 0202 	orrlt.w	r2, r2, #2
 8009578:	9307      	strge	r3, [sp, #28]
 800957a:	9307      	strlt	r3, [sp, #28]
 800957c:	bfb8      	it	lt
 800957e:	9204      	strlt	r2, [sp, #16]
 8009580:	7823      	ldrb	r3, [r4, #0]
 8009582:	2b2e      	cmp	r3, #46	@ 0x2e
 8009584:	d10a      	bne.n	800959c <_svfiprintf_r+0x130>
 8009586:	7863      	ldrb	r3, [r4, #1]
 8009588:	2b2a      	cmp	r3, #42	@ 0x2a
 800958a:	d132      	bne.n	80095f2 <_svfiprintf_r+0x186>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	9203      	str	r2, [sp, #12]
 8009594:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009598:	3402      	adds	r4, #2
 800959a:	9305      	str	r3, [sp, #20]
 800959c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009660 <_svfiprintf_r+0x1f4>
 80095a0:	7821      	ldrb	r1, [r4, #0]
 80095a2:	2203      	movs	r2, #3
 80095a4:	4650      	mov	r0, sl
 80095a6:	f7f6 fe2b 	bl	8000200 <memchr>
 80095aa:	b138      	cbz	r0, 80095bc <_svfiprintf_r+0x150>
 80095ac:	9b04      	ldr	r3, [sp, #16]
 80095ae:	eba0 000a 	sub.w	r0, r0, sl
 80095b2:	2240      	movs	r2, #64	@ 0x40
 80095b4:	4082      	lsls	r2, r0
 80095b6:	4313      	orrs	r3, r2
 80095b8:	3401      	adds	r4, #1
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c0:	4824      	ldr	r0, [pc, #144]	@ (8009654 <_svfiprintf_r+0x1e8>)
 80095c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095c6:	2206      	movs	r2, #6
 80095c8:	f7f6 fe1a 	bl	8000200 <memchr>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d036      	beq.n	800963e <_svfiprintf_r+0x1d2>
 80095d0:	4b21      	ldr	r3, [pc, #132]	@ (8009658 <_svfiprintf_r+0x1ec>)
 80095d2:	bb1b      	cbnz	r3, 800961c <_svfiprintf_r+0x1b0>
 80095d4:	9b03      	ldr	r3, [sp, #12]
 80095d6:	3307      	adds	r3, #7
 80095d8:	f023 0307 	bic.w	r3, r3, #7
 80095dc:	3308      	adds	r3, #8
 80095de:	9303      	str	r3, [sp, #12]
 80095e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e2:	4433      	add	r3, r6
 80095e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e6:	e76a      	b.n	80094be <_svfiprintf_r+0x52>
 80095e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095ec:	460c      	mov	r4, r1
 80095ee:	2001      	movs	r0, #1
 80095f0:	e7a8      	b.n	8009544 <_svfiprintf_r+0xd8>
 80095f2:	2300      	movs	r3, #0
 80095f4:	3401      	adds	r4, #1
 80095f6:	9305      	str	r3, [sp, #20]
 80095f8:	4619      	mov	r1, r3
 80095fa:	f04f 0c0a 	mov.w	ip, #10
 80095fe:	4620      	mov	r0, r4
 8009600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009604:	3a30      	subs	r2, #48	@ 0x30
 8009606:	2a09      	cmp	r2, #9
 8009608:	d903      	bls.n	8009612 <_svfiprintf_r+0x1a6>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d0c6      	beq.n	800959c <_svfiprintf_r+0x130>
 800960e:	9105      	str	r1, [sp, #20]
 8009610:	e7c4      	b.n	800959c <_svfiprintf_r+0x130>
 8009612:	fb0c 2101 	mla	r1, ip, r1, r2
 8009616:	4604      	mov	r4, r0
 8009618:	2301      	movs	r3, #1
 800961a:	e7f0      	b.n	80095fe <_svfiprintf_r+0x192>
 800961c:	ab03      	add	r3, sp, #12
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	462a      	mov	r2, r5
 8009622:	4b0e      	ldr	r3, [pc, #56]	@ (800965c <_svfiprintf_r+0x1f0>)
 8009624:	a904      	add	r1, sp, #16
 8009626:	4638      	mov	r0, r7
 8009628:	f7fd fe34 	bl	8007294 <_printf_float>
 800962c:	1c42      	adds	r2, r0, #1
 800962e:	4606      	mov	r6, r0
 8009630:	d1d6      	bne.n	80095e0 <_svfiprintf_r+0x174>
 8009632:	89ab      	ldrh	r3, [r5, #12]
 8009634:	065b      	lsls	r3, r3, #25
 8009636:	f53f af2d 	bmi.w	8009494 <_svfiprintf_r+0x28>
 800963a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800963c:	e72c      	b.n	8009498 <_svfiprintf_r+0x2c>
 800963e:	ab03      	add	r3, sp, #12
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	462a      	mov	r2, r5
 8009644:	4b05      	ldr	r3, [pc, #20]	@ (800965c <_svfiprintf_r+0x1f0>)
 8009646:	a904      	add	r1, sp, #16
 8009648:	4638      	mov	r0, r7
 800964a:	f7fe f8bb 	bl	80077c4 <_printf_i>
 800964e:	e7ed      	b.n	800962c <_svfiprintf_r+0x1c0>
 8009650:	0800a5c8 	.word	0x0800a5c8
 8009654:	0800a5d2 	.word	0x0800a5d2
 8009658:	08007295 	.word	0x08007295
 800965c:	080093b5 	.word	0x080093b5
 8009660:	0800a5ce 	.word	0x0800a5ce

08009664 <__sflush_r>:
 8009664:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800966c:	0716      	lsls	r6, r2, #28
 800966e:	4605      	mov	r5, r0
 8009670:	460c      	mov	r4, r1
 8009672:	d454      	bmi.n	800971e <__sflush_r+0xba>
 8009674:	684b      	ldr	r3, [r1, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	dc02      	bgt.n	8009680 <__sflush_r+0x1c>
 800967a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800967c:	2b00      	cmp	r3, #0
 800967e:	dd48      	ble.n	8009712 <__sflush_r+0xae>
 8009680:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009682:	2e00      	cmp	r6, #0
 8009684:	d045      	beq.n	8009712 <__sflush_r+0xae>
 8009686:	2300      	movs	r3, #0
 8009688:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800968c:	682f      	ldr	r7, [r5, #0]
 800968e:	6a21      	ldr	r1, [r4, #32]
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	d030      	beq.n	80096f6 <__sflush_r+0x92>
 8009694:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	0759      	lsls	r1, r3, #29
 800969a:	d505      	bpl.n	80096a8 <__sflush_r+0x44>
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096a2:	b10b      	cbz	r3, 80096a8 <__sflush_r+0x44>
 80096a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096a6:	1ad2      	subs	r2, r2, r3
 80096a8:	2300      	movs	r3, #0
 80096aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096ac:	6a21      	ldr	r1, [r4, #32]
 80096ae:	4628      	mov	r0, r5
 80096b0:	47b0      	blx	r6
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	d106      	bne.n	80096c6 <__sflush_r+0x62>
 80096b8:	6829      	ldr	r1, [r5, #0]
 80096ba:	291d      	cmp	r1, #29
 80096bc:	d82b      	bhi.n	8009716 <__sflush_r+0xb2>
 80096be:	4a2a      	ldr	r2, [pc, #168]	@ (8009768 <__sflush_r+0x104>)
 80096c0:	410a      	asrs	r2, r1
 80096c2:	07d6      	lsls	r6, r2, #31
 80096c4:	d427      	bmi.n	8009716 <__sflush_r+0xb2>
 80096c6:	2200      	movs	r2, #0
 80096c8:	6062      	str	r2, [r4, #4]
 80096ca:	04d9      	lsls	r1, r3, #19
 80096cc:	6922      	ldr	r2, [r4, #16]
 80096ce:	6022      	str	r2, [r4, #0]
 80096d0:	d504      	bpl.n	80096dc <__sflush_r+0x78>
 80096d2:	1c42      	adds	r2, r0, #1
 80096d4:	d101      	bne.n	80096da <__sflush_r+0x76>
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	b903      	cbnz	r3, 80096dc <__sflush_r+0x78>
 80096da:	6560      	str	r0, [r4, #84]	@ 0x54
 80096dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096de:	602f      	str	r7, [r5, #0]
 80096e0:	b1b9      	cbz	r1, 8009712 <__sflush_r+0xae>
 80096e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096e6:	4299      	cmp	r1, r3
 80096e8:	d002      	beq.n	80096f0 <__sflush_r+0x8c>
 80096ea:	4628      	mov	r0, r5
 80096ec:	f7ff f9e0 	bl	8008ab0 <_free_r>
 80096f0:	2300      	movs	r3, #0
 80096f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80096f4:	e00d      	b.n	8009712 <__sflush_r+0xae>
 80096f6:	2301      	movs	r3, #1
 80096f8:	4628      	mov	r0, r5
 80096fa:	47b0      	blx	r6
 80096fc:	4602      	mov	r2, r0
 80096fe:	1c50      	adds	r0, r2, #1
 8009700:	d1c9      	bne.n	8009696 <__sflush_r+0x32>
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0c6      	beq.n	8009696 <__sflush_r+0x32>
 8009708:	2b1d      	cmp	r3, #29
 800970a:	d001      	beq.n	8009710 <__sflush_r+0xac>
 800970c:	2b16      	cmp	r3, #22
 800970e:	d11e      	bne.n	800974e <__sflush_r+0xea>
 8009710:	602f      	str	r7, [r5, #0]
 8009712:	2000      	movs	r0, #0
 8009714:	e022      	b.n	800975c <__sflush_r+0xf8>
 8009716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800971a:	b21b      	sxth	r3, r3
 800971c:	e01b      	b.n	8009756 <__sflush_r+0xf2>
 800971e:	690f      	ldr	r7, [r1, #16]
 8009720:	2f00      	cmp	r7, #0
 8009722:	d0f6      	beq.n	8009712 <__sflush_r+0xae>
 8009724:	0793      	lsls	r3, r2, #30
 8009726:	680e      	ldr	r6, [r1, #0]
 8009728:	bf08      	it	eq
 800972a:	694b      	ldreq	r3, [r1, #20]
 800972c:	600f      	str	r7, [r1, #0]
 800972e:	bf18      	it	ne
 8009730:	2300      	movne	r3, #0
 8009732:	eba6 0807 	sub.w	r8, r6, r7
 8009736:	608b      	str	r3, [r1, #8]
 8009738:	f1b8 0f00 	cmp.w	r8, #0
 800973c:	dde9      	ble.n	8009712 <__sflush_r+0xae>
 800973e:	6a21      	ldr	r1, [r4, #32]
 8009740:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009742:	4643      	mov	r3, r8
 8009744:	463a      	mov	r2, r7
 8009746:	4628      	mov	r0, r5
 8009748:	47b0      	blx	r6
 800974a:	2800      	cmp	r0, #0
 800974c:	dc08      	bgt.n	8009760 <__sflush_r+0xfc>
 800974e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009760:	4407      	add	r7, r0
 8009762:	eba8 0800 	sub.w	r8, r8, r0
 8009766:	e7e7      	b.n	8009738 <__sflush_r+0xd4>
 8009768:	dfbffffe 	.word	0xdfbffffe

0800976c <_fflush_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	690b      	ldr	r3, [r1, #16]
 8009770:	4605      	mov	r5, r0
 8009772:	460c      	mov	r4, r1
 8009774:	b913      	cbnz	r3, 800977c <_fflush_r+0x10>
 8009776:	2500      	movs	r5, #0
 8009778:	4628      	mov	r0, r5
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	b118      	cbz	r0, 8009786 <_fflush_r+0x1a>
 800977e:	6a03      	ldr	r3, [r0, #32]
 8009780:	b90b      	cbnz	r3, 8009786 <_fflush_r+0x1a>
 8009782:	f7fe f9cb 	bl	8007b1c <__sinit>
 8009786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f3      	beq.n	8009776 <_fflush_r+0xa>
 800978e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009790:	07d0      	lsls	r0, r2, #31
 8009792:	d404      	bmi.n	800979e <_fflush_r+0x32>
 8009794:	0599      	lsls	r1, r3, #22
 8009796:	d402      	bmi.n	800979e <_fflush_r+0x32>
 8009798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800979a:	f7fe fb2c 	bl	8007df6 <__retarget_lock_acquire_recursive>
 800979e:	4628      	mov	r0, r5
 80097a0:	4621      	mov	r1, r4
 80097a2:	f7ff ff5f 	bl	8009664 <__sflush_r>
 80097a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097a8:	07da      	lsls	r2, r3, #31
 80097aa:	4605      	mov	r5, r0
 80097ac:	d4e4      	bmi.n	8009778 <_fflush_r+0xc>
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	059b      	lsls	r3, r3, #22
 80097b2:	d4e1      	bmi.n	8009778 <_fflush_r+0xc>
 80097b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097b6:	f7fe fb1f 	bl	8007df8 <__retarget_lock_release_recursive>
 80097ba:	e7dd      	b.n	8009778 <_fflush_r+0xc>

080097bc <memmove>:
 80097bc:	4288      	cmp	r0, r1
 80097be:	b510      	push	{r4, lr}
 80097c0:	eb01 0402 	add.w	r4, r1, r2
 80097c4:	d902      	bls.n	80097cc <memmove+0x10>
 80097c6:	4284      	cmp	r4, r0
 80097c8:	4623      	mov	r3, r4
 80097ca:	d807      	bhi.n	80097dc <memmove+0x20>
 80097cc:	1e43      	subs	r3, r0, #1
 80097ce:	42a1      	cmp	r1, r4
 80097d0:	d008      	beq.n	80097e4 <memmove+0x28>
 80097d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097da:	e7f8      	b.n	80097ce <memmove+0x12>
 80097dc:	4402      	add	r2, r0
 80097de:	4601      	mov	r1, r0
 80097e0:	428a      	cmp	r2, r1
 80097e2:	d100      	bne.n	80097e6 <memmove+0x2a>
 80097e4:	bd10      	pop	{r4, pc}
 80097e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097ee:	e7f7      	b.n	80097e0 <memmove+0x24>

080097f0 <_sbrk_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d06      	ldr	r5, [pc, #24]	@ (800980c <_sbrk_r+0x1c>)
 80097f4:	2300      	movs	r3, #0
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	602b      	str	r3, [r5, #0]
 80097fc:	f7f8 fe3c 	bl	8002478 <_sbrk>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d102      	bne.n	800980a <_sbrk_r+0x1a>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	b103      	cbz	r3, 800980a <_sbrk_r+0x1a>
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	20004604 	.word	0x20004604

08009810 <__assert_func>:
 8009810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009812:	4614      	mov	r4, r2
 8009814:	461a      	mov	r2, r3
 8009816:	4b09      	ldr	r3, [pc, #36]	@ (800983c <__assert_func+0x2c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4605      	mov	r5, r0
 800981c:	68d8      	ldr	r0, [r3, #12]
 800981e:	b954      	cbnz	r4, 8009836 <__assert_func+0x26>
 8009820:	4b07      	ldr	r3, [pc, #28]	@ (8009840 <__assert_func+0x30>)
 8009822:	461c      	mov	r4, r3
 8009824:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009828:	9100      	str	r1, [sp, #0]
 800982a:	462b      	mov	r3, r5
 800982c:	4905      	ldr	r1, [pc, #20]	@ (8009844 <__assert_func+0x34>)
 800982e:	f000 f86f 	bl	8009910 <fiprintf>
 8009832:	f000 f87f 	bl	8009934 <abort>
 8009836:	4b04      	ldr	r3, [pc, #16]	@ (8009848 <__assert_func+0x38>)
 8009838:	e7f4      	b.n	8009824 <__assert_func+0x14>
 800983a:	bf00      	nop
 800983c:	20000078 	.word	0x20000078
 8009840:	0800a61e 	.word	0x0800a61e
 8009844:	0800a5f0 	.word	0x0800a5f0
 8009848:	0800a5e3 	.word	0x0800a5e3

0800984c <_calloc_r>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	fba1 5402 	umull	r5, r4, r1, r2
 8009852:	b93c      	cbnz	r4, 8009864 <_calloc_r+0x18>
 8009854:	4629      	mov	r1, r5
 8009856:	f7ff f99f 	bl	8008b98 <_malloc_r>
 800985a:	4606      	mov	r6, r0
 800985c:	b928      	cbnz	r0, 800986a <_calloc_r+0x1e>
 800985e:	2600      	movs	r6, #0
 8009860:	4630      	mov	r0, r6
 8009862:	bd70      	pop	{r4, r5, r6, pc}
 8009864:	220c      	movs	r2, #12
 8009866:	6002      	str	r2, [r0, #0]
 8009868:	e7f9      	b.n	800985e <_calloc_r+0x12>
 800986a:	462a      	mov	r2, r5
 800986c:	4621      	mov	r1, r4
 800986e:	f7fe f9ee 	bl	8007c4e <memset>
 8009872:	e7f5      	b.n	8009860 <_calloc_r+0x14>

08009874 <__ascii_mbtowc>:
 8009874:	b082      	sub	sp, #8
 8009876:	b901      	cbnz	r1, 800987a <__ascii_mbtowc+0x6>
 8009878:	a901      	add	r1, sp, #4
 800987a:	b142      	cbz	r2, 800988e <__ascii_mbtowc+0x1a>
 800987c:	b14b      	cbz	r3, 8009892 <__ascii_mbtowc+0x1e>
 800987e:	7813      	ldrb	r3, [r2, #0]
 8009880:	600b      	str	r3, [r1, #0]
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	1e10      	subs	r0, r2, #0
 8009886:	bf18      	it	ne
 8009888:	2001      	movne	r0, #1
 800988a:	b002      	add	sp, #8
 800988c:	4770      	bx	lr
 800988e:	4610      	mov	r0, r2
 8009890:	e7fb      	b.n	800988a <__ascii_mbtowc+0x16>
 8009892:	f06f 0001 	mvn.w	r0, #1
 8009896:	e7f8      	b.n	800988a <__ascii_mbtowc+0x16>

08009898 <_realloc_r>:
 8009898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989c:	4680      	mov	r8, r0
 800989e:	4615      	mov	r5, r2
 80098a0:	460c      	mov	r4, r1
 80098a2:	b921      	cbnz	r1, 80098ae <_realloc_r+0x16>
 80098a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098a8:	4611      	mov	r1, r2
 80098aa:	f7ff b975 	b.w	8008b98 <_malloc_r>
 80098ae:	b92a      	cbnz	r2, 80098bc <_realloc_r+0x24>
 80098b0:	f7ff f8fe 	bl	8008ab0 <_free_r>
 80098b4:	2400      	movs	r4, #0
 80098b6:	4620      	mov	r0, r4
 80098b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098bc:	f000 f841 	bl	8009942 <_malloc_usable_size_r>
 80098c0:	4285      	cmp	r5, r0
 80098c2:	4606      	mov	r6, r0
 80098c4:	d802      	bhi.n	80098cc <_realloc_r+0x34>
 80098c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80098ca:	d8f4      	bhi.n	80098b6 <_realloc_r+0x1e>
 80098cc:	4629      	mov	r1, r5
 80098ce:	4640      	mov	r0, r8
 80098d0:	f7ff f962 	bl	8008b98 <_malloc_r>
 80098d4:	4607      	mov	r7, r0
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d0ec      	beq.n	80098b4 <_realloc_r+0x1c>
 80098da:	42b5      	cmp	r5, r6
 80098dc:	462a      	mov	r2, r5
 80098de:	4621      	mov	r1, r4
 80098e0:	bf28      	it	cs
 80098e2:	4632      	movcs	r2, r6
 80098e4:	f7fe fa89 	bl	8007dfa <memcpy>
 80098e8:	4621      	mov	r1, r4
 80098ea:	4640      	mov	r0, r8
 80098ec:	f7ff f8e0 	bl	8008ab0 <_free_r>
 80098f0:	463c      	mov	r4, r7
 80098f2:	e7e0      	b.n	80098b6 <_realloc_r+0x1e>

080098f4 <__ascii_wctomb>:
 80098f4:	4603      	mov	r3, r0
 80098f6:	4608      	mov	r0, r1
 80098f8:	b141      	cbz	r1, 800990c <__ascii_wctomb+0x18>
 80098fa:	2aff      	cmp	r2, #255	@ 0xff
 80098fc:	d904      	bls.n	8009908 <__ascii_wctomb+0x14>
 80098fe:	228a      	movs	r2, #138	@ 0x8a
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
 8009906:	4770      	bx	lr
 8009908:	700a      	strb	r2, [r1, #0]
 800990a:	2001      	movs	r0, #1
 800990c:	4770      	bx	lr
	...

08009910 <fiprintf>:
 8009910:	b40e      	push	{r1, r2, r3}
 8009912:	b503      	push	{r0, r1, lr}
 8009914:	4601      	mov	r1, r0
 8009916:	ab03      	add	r3, sp, #12
 8009918:	4805      	ldr	r0, [pc, #20]	@ (8009930 <fiprintf+0x20>)
 800991a:	f853 2b04 	ldr.w	r2, [r3], #4
 800991e:	6800      	ldr	r0, [r0, #0]
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	f000 f83f 	bl	80099a4 <_vfiprintf_r>
 8009926:	b002      	add	sp, #8
 8009928:	f85d eb04 	ldr.w	lr, [sp], #4
 800992c:	b003      	add	sp, #12
 800992e:	4770      	bx	lr
 8009930:	20000078 	.word	0x20000078

08009934 <abort>:
 8009934:	b508      	push	{r3, lr}
 8009936:	2006      	movs	r0, #6
 8009938:	f000 fa08 	bl	8009d4c <raise>
 800993c:	2001      	movs	r0, #1
 800993e:	f7f8 fd23 	bl	8002388 <_exit>

08009942 <_malloc_usable_size_r>:
 8009942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009946:	1f18      	subs	r0, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	bfbc      	itt	lt
 800994c:	580b      	ldrlt	r3, [r1, r0]
 800994e:	18c0      	addlt	r0, r0, r3
 8009950:	4770      	bx	lr

08009952 <__sfputc_r>:
 8009952:	6893      	ldr	r3, [r2, #8]
 8009954:	3b01      	subs	r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	b410      	push	{r4}
 800995a:	6093      	str	r3, [r2, #8]
 800995c:	da08      	bge.n	8009970 <__sfputc_r+0x1e>
 800995e:	6994      	ldr	r4, [r2, #24]
 8009960:	42a3      	cmp	r3, r4
 8009962:	db01      	blt.n	8009968 <__sfputc_r+0x16>
 8009964:	290a      	cmp	r1, #10
 8009966:	d103      	bne.n	8009970 <__sfputc_r+0x1e>
 8009968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800996c:	f000 b932 	b.w	8009bd4 <__swbuf_r>
 8009970:	6813      	ldr	r3, [r2, #0]
 8009972:	1c58      	adds	r0, r3, #1
 8009974:	6010      	str	r0, [r2, #0]
 8009976:	7019      	strb	r1, [r3, #0]
 8009978:	4608      	mov	r0, r1
 800997a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800997e:	4770      	bx	lr

08009980 <__sfputs_r>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	4606      	mov	r6, r0
 8009984:	460f      	mov	r7, r1
 8009986:	4614      	mov	r4, r2
 8009988:	18d5      	adds	r5, r2, r3
 800998a:	42ac      	cmp	r4, r5
 800998c:	d101      	bne.n	8009992 <__sfputs_r+0x12>
 800998e:	2000      	movs	r0, #0
 8009990:	e007      	b.n	80099a2 <__sfputs_r+0x22>
 8009992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009996:	463a      	mov	r2, r7
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff ffda 	bl	8009952 <__sfputc_r>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	d1f3      	bne.n	800998a <__sfputs_r+0xa>
 80099a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099a4 <_vfiprintf_r>:
 80099a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a8:	460d      	mov	r5, r1
 80099aa:	b09d      	sub	sp, #116	@ 0x74
 80099ac:	4614      	mov	r4, r2
 80099ae:	4698      	mov	r8, r3
 80099b0:	4606      	mov	r6, r0
 80099b2:	b118      	cbz	r0, 80099bc <_vfiprintf_r+0x18>
 80099b4:	6a03      	ldr	r3, [r0, #32]
 80099b6:	b90b      	cbnz	r3, 80099bc <_vfiprintf_r+0x18>
 80099b8:	f7fe f8b0 	bl	8007b1c <__sinit>
 80099bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099be:	07d9      	lsls	r1, r3, #31
 80099c0:	d405      	bmi.n	80099ce <_vfiprintf_r+0x2a>
 80099c2:	89ab      	ldrh	r3, [r5, #12]
 80099c4:	059a      	lsls	r2, r3, #22
 80099c6:	d402      	bmi.n	80099ce <_vfiprintf_r+0x2a>
 80099c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099ca:	f7fe fa14 	bl	8007df6 <__retarget_lock_acquire_recursive>
 80099ce:	89ab      	ldrh	r3, [r5, #12]
 80099d0:	071b      	lsls	r3, r3, #28
 80099d2:	d501      	bpl.n	80099d8 <_vfiprintf_r+0x34>
 80099d4:	692b      	ldr	r3, [r5, #16]
 80099d6:	b99b      	cbnz	r3, 8009a00 <_vfiprintf_r+0x5c>
 80099d8:	4629      	mov	r1, r5
 80099da:	4630      	mov	r0, r6
 80099dc:	f000 f938 	bl	8009c50 <__swsetup_r>
 80099e0:	b170      	cbz	r0, 8009a00 <_vfiprintf_r+0x5c>
 80099e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099e4:	07dc      	lsls	r4, r3, #31
 80099e6:	d504      	bpl.n	80099f2 <_vfiprintf_r+0x4e>
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ec:	b01d      	add	sp, #116	@ 0x74
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f2:	89ab      	ldrh	r3, [r5, #12]
 80099f4:	0598      	lsls	r0, r3, #22
 80099f6:	d4f7      	bmi.n	80099e8 <_vfiprintf_r+0x44>
 80099f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099fa:	f7fe f9fd 	bl	8007df8 <__retarget_lock_release_recursive>
 80099fe:	e7f3      	b.n	80099e8 <_vfiprintf_r+0x44>
 8009a00:	2300      	movs	r3, #0
 8009a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a04:	2320      	movs	r3, #32
 8009a06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a0e:	2330      	movs	r3, #48	@ 0x30
 8009a10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009bc0 <_vfiprintf_r+0x21c>
 8009a14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a18:	f04f 0901 	mov.w	r9, #1
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	469a      	mov	sl, r3
 8009a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a24:	b10a      	cbz	r2, 8009a2a <_vfiprintf_r+0x86>
 8009a26:	2a25      	cmp	r2, #37	@ 0x25
 8009a28:	d1f9      	bne.n	8009a1e <_vfiprintf_r+0x7a>
 8009a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8009a2e:	d00b      	beq.n	8009a48 <_vfiprintf_r+0xa4>
 8009a30:	465b      	mov	r3, fp
 8009a32:	4622      	mov	r2, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7ff ffa2 	bl	8009980 <__sfputs_r>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	f000 80a7 	beq.w	8009b90 <_vfiprintf_r+0x1ec>
 8009a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a44:	445a      	add	r2, fp
 8009a46:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a48:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 809f 	beq.w	8009b90 <_vfiprintf_r+0x1ec>
 8009a52:	2300      	movs	r3, #0
 8009a54:	f04f 32ff 	mov.w	r2, #4294967295
 8009a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a5c:	f10a 0a01 	add.w	sl, sl, #1
 8009a60:	9304      	str	r3, [sp, #16]
 8009a62:	9307      	str	r3, [sp, #28]
 8009a64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a68:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a6a:	4654      	mov	r4, sl
 8009a6c:	2205      	movs	r2, #5
 8009a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a72:	4853      	ldr	r0, [pc, #332]	@ (8009bc0 <_vfiprintf_r+0x21c>)
 8009a74:	f7f6 fbc4 	bl	8000200 <memchr>
 8009a78:	9a04      	ldr	r2, [sp, #16]
 8009a7a:	b9d8      	cbnz	r0, 8009ab4 <_vfiprintf_r+0x110>
 8009a7c:	06d1      	lsls	r1, r2, #27
 8009a7e:	bf44      	itt	mi
 8009a80:	2320      	movmi	r3, #32
 8009a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a86:	0713      	lsls	r3, r2, #28
 8009a88:	bf44      	itt	mi
 8009a8a:	232b      	movmi	r3, #43	@ 0x2b
 8009a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a90:	f89a 3000 	ldrb.w	r3, [sl]
 8009a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a96:	d015      	beq.n	8009ac4 <_vfiprintf_r+0x120>
 8009a98:	9a07      	ldr	r2, [sp, #28]
 8009a9a:	4654      	mov	r4, sl
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f04f 0c0a 	mov.w	ip, #10
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa8:	3b30      	subs	r3, #48	@ 0x30
 8009aaa:	2b09      	cmp	r3, #9
 8009aac:	d94b      	bls.n	8009b46 <_vfiprintf_r+0x1a2>
 8009aae:	b1b0      	cbz	r0, 8009ade <_vfiprintf_r+0x13a>
 8009ab0:	9207      	str	r2, [sp, #28]
 8009ab2:	e014      	b.n	8009ade <_vfiprintf_r+0x13a>
 8009ab4:	eba0 0308 	sub.w	r3, r0, r8
 8009ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8009abc:	4313      	orrs	r3, r2
 8009abe:	9304      	str	r3, [sp, #16]
 8009ac0:	46a2      	mov	sl, r4
 8009ac2:	e7d2      	b.n	8009a6a <_vfiprintf_r+0xc6>
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	1d19      	adds	r1, r3, #4
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	9103      	str	r1, [sp, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	bfbb      	ittet	lt
 8009ad0:	425b      	neglt	r3, r3
 8009ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ad6:	9307      	strge	r3, [sp, #28]
 8009ad8:	9307      	strlt	r3, [sp, #28]
 8009ada:	bfb8      	it	lt
 8009adc:	9204      	strlt	r2, [sp, #16]
 8009ade:	7823      	ldrb	r3, [r4, #0]
 8009ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ae2:	d10a      	bne.n	8009afa <_vfiprintf_r+0x156>
 8009ae4:	7863      	ldrb	r3, [r4, #1]
 8009ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ae8:	d132      	bne.n	8009b50 <_vfiprintf_r+0x1ac>
 8009aea:	9b03      	ldr	r3, [sp, #12]
 8009aec:	1d1a      	adds	r2, r3, #4
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	9203      	str	r2, [sp, #12]
 8009af2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009af6:	3402      	adds	r4, #2
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009bd0 <_vfiprintf_r+0x22c>
 8009afe:	7821      	ldrb	r1, [r4, #0]
 8009b00:	2203      	movs	r2, #3
 8009b02:	4650      	mov	r0, sl
 8009b04:	f7f6 fb7c 	bl	8000200 <memchr>
 8009b08:	b138      	cbz	r0, 8009b1a <_vfiprintf_r+0x176>
 8009b0a:	9b04      	ldr	r3, [sp, #16]
 8009b0c:	eba0 000a 	sub.w	r0, r0, sl
 8009b10:	2240      	movs	r2, #64	@ 0x40
 8009b12:	4082      	lsls	r2, r0
 8009b14:	4313      	orrs	r3, r2
 8009b16:	3401      	adds	r4, #1
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1e:	4829      	ldr	r0, [pc, #164]	@ (8009bc4 <_vfiprintf_r+0x220>)
 8009b20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b24:	2206      	movs	r2, #6
 8009b26:	f7f6 fb6b 	bl	8000200 <memchr>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d03f      	beq.n	8009bae <_vfiprintf_r+0x20a>
 8009b2e:	4b26      	ldr	r3, [pc, #152]	@ (8009bc8 <_vfiprintf_r+0x224>)
 8009b30:	bb1b      	cbnz	r3, 8009b7a <_vfiprintf_r+0x1d6>
 8009b32:	9b03      	ldr	r3, [sp, #12]
 8009b34:	3307      	adds	r3, #7
 8009b36:	f023 0307 	bic.w	r3, r3, #7
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	9303      	str	r3, [sp, #12]
 8009b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b40:	443b      	add	r3, r7
 8009b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b44:	e76a      	b.n	8009a1c <_vfiprintf_r+0x78>
 8009b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	e7a8      	b.n	8009aa2 <_vfiprintf_r+0xfe>
 8009b50:	2300      	movs	r3, #0
 8009b52:	3401      	adds	r4, #1
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	4619      	mov	r1, r3
 8009b58:	f04f 0c0a 	mov.w	ip, #10
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b62:	3a30      	subs	r2, #48	@ 0x30
 8009b64:	2a09      	cmp	r2, #9
 8009b66:	d903      	bls.n	8009b70 <_vfiprintf_r+0x1cc>
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0c6      	beq.n	8009afa <_vfiprintf_r+0x156>
 8009b6c:	9105      	str	r1, [sp, #20]
 8009b6e:	e7c4      	b.n	8009afa <_vfiprintf_r+0x156>
 8009b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b74:	4604      	mov	r4, r0
 8009b76:	2301      	movs	r3, #1
 8009b78:	e7f0      	b.n	8009b5c <_vfiprintf_r+0x1b8>
 8009b7a:	ab03      	add	r3, sp, #12
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	462a      	mov	r2, r5
 8009b80:	4b12      	ldr	r3, [pc, #72]	@ (8009bcc <_vfiprintf_r+0x228>)
 8009b82:	a904      	add	r1, sp, #16
 8009b84:	4630      	mov	r0, r6
 8009b86:	f7fd fb85 	bl	8007294 <_printf_float>
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	1c78      	adds	r0, r7, #1
 8009b8e:	d1d6      	bne.n	8009b3e <_vfiprintf_r+0x19a>
 8009b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b92:	07d9      	lsls	r1, r3, #31
 8009b94:	d405      	bmi.n	8009ba2 <_vfiprintf_r+0x1fe>
 8009b96:	89ab      	ldrh	r3, [r5, #12]
 8009b98:	059a      	lsls	r2, r3, #22
 8009b9a:	d402      	bmi.n	8009ba2 <_vfiprintf_r+0x1fe>
 8009b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b9e:	f7fe f92b 	bl	8007df8 <__retarget_lock_release_recursive>
 8009ba2:	89ab      	ldrh	r3, [r5, #12]
 8009ba4:	065b      	lsls	r3, r3, #25
 8009ba6:	f53f af1f 	bmi.w	80099e8 <_vfiprintf_r+0x44>
 8009baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bac:	e71e      	b.n	80099ec <_vfiprintf_r+0x48>
 8009bae:	ab03      	add	r3, sp, #12
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	462a      	mov	r2, r5
 8009bb4:	4b05      	ldr	r3, [pc, #20]	@ (8009bcc <_vfiprintf_r+0x228>)
 8009bb6:	a904      	add	r1, sp, #16
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7fd fe03 	bl	80077c4 <_printf_i>
 8009bbe:	e7e4      	b.n	8009b8a <_vfiprintf_r+0x1e6>
 8009bc0:	0800a5c8 	.word	0x0800a5c8
 8009bc4:	0800a5d2 	.word	0x0800a5d2
 8009bc8:	08007295 	.word	0x08007295
 8009bcc:	08009981 	.word	0x08009981
 8009bd0:	0800a5ce 	.word	0x0800a5ce

08009bd4 <__swbuf_r>:
 8009bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd6:	460e      	mov	r6, r1
 8009bd8:	4614      	mov	r4, r2
 8009bda:	4605      	mov	r5, r0
 8009bdc:	b118      	cbz	r0, 8009be6 <__swbuf_r+0x12>
 8009bde:	6a03      	ldr	r3, [r0, #32]
 8009be0:	b90b      	cbnz	r3, 8009be6 <__swbuf_r+0x12>
 8009be2:	f7fd ff9b 	bl	8007b1c <__sinit>
 8009be6:	69a3      	ldr	r3, [r4, #24]
 8009be8:	60a3      	str	r3, [r4, #8]
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	071a      	lsls	r2, r3, #28
 8009bee:	d501      	bpl.n	8009bf4 <__swbuf_r+0x20>
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	b943      	cbnz	r3, 8009c06 <__swbuf_r+0x32>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f000 f82a 	bl	8009c50 <__swsetup_r>
 8009bfc:	b118      	cbz	r0, 8009c06 <__swbuf_r+0x32>
 8009bfe:	f04f 37ff 	mov.w	r7, #4294967295
 8009c02:	4638      	mov	r0, r7
 8009c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	6922      	ldr	r2, [r4, #16]
 8009c0a:	1a98      	subs	r0, r3, r2
 8009c0c:	6963      	ldr	r3, [r4, #20]
 8009c0e:	b2f6      	uxtb	r6, r6
 8009c10:	4283      	cmp	r3, r0
 8009c12:	4637      	mov	r7, r6
 8009c14:	dc05      	bgt.n	8009c22 <__swbuf_r+0x4e>
 8009c16:	4621      	mov	r1, r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f7ff fda7 	bl	800976c <_fflush_r>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d1ed      	bne.n	8009bfe <__swbuf_r+0x2a>
 8009c22:	68a3      	ldr	r3, [r4, #8]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	60a3      	str	r3, [r4, #8]
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	6022      	str	r2, [r4, #0]
 8009c2e:	701e      	strb	r6, [r3, #0]
 8009c30:	6962      	ldr	r2, [r4, #20]
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d004      	beq.n	8009c42 <__swbuf_r+0x6e>
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	07db      	lsls	r3, r3, #31
 8009c3c:	d5e1      	bpl.n	8009c02 <__swbuf_r+0x2e>
 8009c3e:	2e0a      	cmp	r6, #10
 8009c40:	d1df      	bne.n	8009c02 <__swbuf_r+0x2e>
 8009c42:	4621      	mov	r1, r4
 8009c44:	4628      	mov	r0, r5
 8009c46:	f7ff fd91 	bl	800976c <_fflush_r>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d0d9      	beq.n	8009c02 <__swbuf_r+0x2e>
 8009c4e:	e7d6      	b.n	8009bfe <__swbuf_r+0x2a>

08009c50 <__swsetup_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4b29      	ldr	r3, [pc, #164]	@ (8009cf8 <__swsetup_r+0xa8>)
 8009c54:	4605      	mov	r5, r0
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	460c      	mov	r4, r1
 8009c5a:	b118      	cbz	r0, 8009c64 <__swsetup_r+0x14>
 8009c5c:	6a03      	ldr	r3, [r0, #32]
 8009c5e:	b90b      	cbnz	r3, 8009c64 <__swsetup_r+0x14>
 8009c60:	f7fd ff5c 	bl	8007b1c <__sinit>
 8009c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c68:	0719      	lsls	r1, r3, #28
 8009c6a:	d422      	bmi.n	8009cb2 <__swsetup_r+0x62>
 8009c6c:	06da      	lsls	r2, r3, #27
 8009c6e:	d407      	bmi.n	8009c80 <__swsetup_r+0x30>
 8009c70:	2209      	movs	r2, #9
 8009c72:	602a      	str	r2, [r5, #0]
 8009c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7e:	e033      	b.n	8009ce8 <__swsetup_r+0x98>
 8009c80:	0758      	lsls	r0, r3, #29
 8009c82:	d512      	bpl.n	8009caa <__swsetup_r+0x5a>
 8009c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c86:	b141      	cbz	r1, 8009c9a <__swsetup_r+0x4a>
 8009c88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	d002      	beq.n	8009c96 <__swsetup_r+0x46>
 8009c90:	4628      	mov	r0, r5
 8009c92:	f7fe ff0d 	bl	8008ab0 <_free_r>
 8009c96:	2300      	movs	r3, #0
 8009c98:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6063      	str	r3, [r4, #4]
 8009ca6:	6923      	ldr	r3, [r4, #16]
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	f043 0308 	orr.w	r3, r3, #8
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	b94b      	cbnz	r3, 8009cca <__swsetup_r+0x7a>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cc0:	d003      	beq.n	8009cca <__swsetup_r+0x7a>
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f000 f883 	bl	8009dd0 <__smakebuf_r>
 8009cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cce:	f013 0201 	ands.w	r2, r3, #1
 8009cd2:	d00a      	beq.n	8009cea <__swsetup_r+0x9a>
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	60a2      	str	r2, [r4, #8]
 8009cd8:	6962      	ldr	r2, [r4, #20]
 8009cda:	4252      	negs	r2, r2
 8009cdc:	61a2      	str	r2, [r4, #24]
 8009cde:	6922      	ldr	r2, [r4, #16]
 8009ce0:	b942      	cbnz	r2, 8009cf4 <__swsetup_r+0xa4>
 8009ce2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ce6:	d1c5      	bne.n	8009c74 <__swsetup_r+0x24>
 8009ce8:	bd38      	pop	{r3, r4, r5, pc}
 8009cea:	0799      	lsls	r1, r3, #30
 8009cec:	bf58      	it	pl
 8009cee:	6962      	ldrpl	r2, [r4, #20]
 8009cf0:	60a2      	str	r2, [r4, #8]
 8009cf2:	e7f4      	b.n	8009cde <__swsetup_r+0x8e>
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	e7f7      	b.n	8009ce8 <__swsetup_r+0x98>
 8009cf8:	20000078 	.word	0x20000078

08009cfc <_raise_r>:
 8009cfc:	291f      	cmp	r1, #31
 8009cfe:	b538      	push	{r3, r4, r5, lr}
 8009d00:	4605      	mov	r5, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	d904      	bls.n	8009d10 <_raise_r+0x14>
 8009d06:	2316      	movs	r3, #22
 8009d08:	6003      	str	r3, [r0, #0]
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d12:	b112      	cbz	r2, 8009d1a <_raise_r+0x1e>
 8009d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d18:	b94b      	cbnz	r3, 8009d2e <_raise_r+0x32>
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f000 f830 	bl	8009d80 <_getpid_r>
 8009d20:	4622      	mov	r2, r4
 8009d22:	4601      	mov	r1, r0
 8009d24:	4628      	mov	r0, r5
 8009d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d2a:	f000 b817 	b.w	8009d5c <_kill_r>
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d00a      	beq.n	8009d48 <_raise_r+0x4c>
 8009d32:	1c59      	adds	r1, r3, #1
 8009d34:	d103      	bne.n	8009d3e <_raise_r+0x42>
 8009d36:	2316      	movs	r3, #22
 8009d38:	6003      	str	r3, [r0, #0]
 8009d3a:	2001      	movs	r0, #1
 8009d3c:	e7e7      	b.n	8009d0e <_raise_r+0x12>
 8009d3e:	2100      	movs	r1, #0
 8009d40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d44:	4620      	mov	r0, r4
 8009d46:	4798      	blx	r3
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e7e0      	b.n	8009d0e <_raise_r+0x12>

08009d4c <raise>:
 8009d4c:	4b02      	ldr	r3, [pc, #8]	@ (8009d58 <raise+0xc>)
 8009d4e:	4601      	mov	r1, r0
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	f7ff bfd3 	b.w	8009cfc <_raise_r>
 8009d56:	bf00      	nop
 8009d58:	20000078 	.word	0x20000078

08009d5c <_kill_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d07      	ldr	r5, [pc, #28]	@ (8009d7c <_kill_r+0x20>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	4611      	mov	r1, r2
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	f7f8 fafd 	bl	8002368 <_kill>
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	d102      	bne.n	8009d78 <_kill_r+0x1c>
 8009d72:	682b      	ldr	r3, [r5, #0]
 8009d74:	b103      	cbz	r3, 8009d78 <_kill_r+0x1c>
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	bd38      	pop	{r3, r4, r5, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20004604 	.word	0x20004604

08009d80 <_getpid_r>:
 8009d80:	f7f8 baea 	b.w	8002358 <_getpid>

08009d84 <__swhatbuf_r>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	460c      	mov	r4, r1
 8009d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8c:	2900      	cmp	r1, #0
 8009d8e:	b096      	sub	sp, #88	@ 0x58
 8009d90:	4615      	mov	r5, r2
 8009d92:	461e      	mov	r6, r3
 8009d94:	da0d      	bge.n	8009db2 <__swhatbuf_r+0x2e>
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d9c:	f04f 0100 	mov.w	r1, #0
 8009da0:	bf14      	ite	ne
 8009da2:	2340      	movne	r3, #64	@ 0x40
 8009da4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009da8:	2000      	movs	r0, #0
 8009daa:	6031      	str	r1, [r6, #0]
 8009dac:	602b      	str	r3, [r5, #0]
 8009dae:	b016      	add	sp, #88	@ 0x58
 8009db0:	bd70      	pop	{r4, r5, r6, pc}
 8009db2:	466a      	mov	r2, sp
 8009db4:	f000 f848 	bl	8009e48 <_fstat_r>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	dbec      	blt.n	8009d96 <__swhatbuf_r+0x12>
 8009dbc:	9901      	ldr	r1, [sp, #4]
 8009dbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009dc6:	4259      	negs	r1, r3
 8009dc8:	4159      	adcs	r1, r3
 8009dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dce:	e7eb      	b.n	8009da8 <__swhatbuf_r+0x24>

08009dd0 <__smakebuf_r>:
 8009dd0:	898b      	ldrh	r3, [r1, #12]
 8009dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dd4:	079d      	lsls	r5, r3, #30
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	460c      	mov	r4, r1
 8009dda:	d507      	bpl.n	8009dec <__smakebuf_r+0x1c>
 8009ddc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	6123      	str	r3, [r4, #16]
 8009de4:	2301      	movs	r3, #1
 8009de6:	6163      	str	r3, [r4, #20]
 8009de8:	b003      	add	sp, #12
 8009dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dec:	ab01      	add	r3, sp, #4
 8009dee:	466a      	mov	r2, sp
 8009df0:	f7ff ffc8 	bl	8009d84 <__swhatbuf_r>
 8009df4:	9f00      	ldr	r7, [sp, #0]
 8009df6:	4605      	mov	r5, r0
 8009df8:	4639      	mov	r1, r7
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7fe fecc 	bl	8008b98 <_malloc_r>
 8009e00:	b948      	cbnz	r0, 8009e16 <__smakebuf_r+0x46>
 8009e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e06:	059a      	lsls	r2, r3, #22
 8009e08:	d4ee      	bmi.n	8009de8 <__smakebuf_r+0x18>
 8009e0a:	f023 0303 	bic.w	r3, r3, #3
 8009e0e:	f043 0302 	orr.w	r3, r3, #2
 8009e12:	81a3      	strh	r3, [r4, #12]
 8009e14:	e7e2      	b.n	8009ddc <__smakebuf_r+0xc>
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	6020      	str	r0, [r4, #0]
 8009e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	9b01      	ldr	r3, [sp, #4]
 8009e22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e26:	b15b      	cbz	r3, 8009e40 <__smakebuf_r+0x70>
 8009e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f000 f81d 	bl	8009e6c <_isatty_r>
 8009e32:	b128      	cbz	r0, 8009e40 <__smakebuf_r+0x70>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	f023 0303 	bic.w	r3, r3, #3
 8009e3a:	f043 0301 	orr.w	r3, r3, #1
 8009e3e:	81a3      	strh	r3, [r4, #12]
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	431d      	orrs	r5, r3
 8009e44:	81a5      	strh	r5, [r4, #12]
 8009e46:	e7cf      	b.n	8009de8 <__smakebuf_r+0x18>

08009e48 <_fstat_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d07      	ldr	r5, [pc, #28]	@ (8009e68 <_fstat_r+0x20>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	4611      	mov	r1, r2
 8009e54:	602b      	str	r3, [r5, #0]
 8009e56:	f7f8 fae7 	bl	8002428 <_fstat>
 8009e5a:	1c43      	adds	r3, r0, #1
 8009e5c:	d102      	bne.n	8009e64 <_fstat_r+0x1c>
 8009e5e:	682b      	ldr	r3, [r5, #0]
 8009e60:	b103      	cbz	r3, 8009e64 <_fstat_r+0x1c>
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	bd38      	pop	{r3, r4, r5, pc}
 8009e66:	bf00      	nop
 8009e68:	20004604 	.word	0x20004604

08009e6c <_isatty_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d06      	ldr	r5, [pc, #24]	@ (8009e88 <_isatty_r+0x1c>)
 8009e70:	2300      	movs	r3, #0
 8009e72:	4604      	mov	r4, r0
 8009e74:	4608      	mov	r0, r1
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	f7f8 fae6 	bl	8002448 <_isatty>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_isatty_r+0x1a>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_isatty_r+0x1a>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20004604 	.word	0x20004604

08009e8c <logf>:
 8009e8c:	b508      	push	{r3, lr}
 8009e8e:	ed2d 8b02 	vpush	{d8}
 8009e92:	eeb0 8a40 	vmov.f32	s16, s0
 8009e96:	f000 f82d 	bl	8009ef4 <__ieee754_logf>
 8009e9a:	eeb4 8a48 	vcmp.f32	s16, s16
 8009e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea2:	d60f      	bvs.n	8009ec4 <logf+0x38>
 8009ea4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eac:	dc0a      	bgt.n	8009ec4 <logf+0x38>
 8009eae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb6:	d108      	bne.n	8009eca <logf+0x3e>
 8009eb8:	f7fd ff72 	bl	8007da0 <__errno>
 8009ebc:	2322      	movs	r3, #34	@ 0x22
 8009ebe:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009ee0 <logf+0x54>
 8009ec2:	6003      	str	r3, [r0, #0]
 8009ec4:	ecbd 8b02 	vpop	{d8}
 8009ec8:	bd08      	pop	{r3, pc}
 8009eca:	f7fd ff69 	bl	8007da0 <__errno>
 8009ece:	ecbd 8b02 	vpop	{d8}
 8009ed2:	2321      	movs	r3, #33	@ 0x21
 8009ed4:	6003      	str	r3, [r0, #0]
 8009ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009eda:	4802      	ldr	r0, [pc, #8]	@ (8009ee4 <logf+0x58>)
 8009edc:	f000 b804 	b.w	8009ee8 <nanf>
 8009ee0:	ff800000 	.word	0xff800000
 8009ee4:	0800a61e 	.word	0x0800a61e

08009ee8 <nanf>:
 8009ee8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ef0 <nanf+0x8>
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	7fc00000 	.word	0x7fc00000

08009ef4 <__ieee754_logf>:
 8009ef4:	ee10 3a10 	vmov	r3, s0
 8009ef8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009efc:	d106      	bne.n	8009f0c <__ieee754_logf+0x18>
 8009efe:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800a098 <__ieee754_logf+0x1a4>
 8009f02:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800a09c <__ieee754_logf+0x1a8>
 8009f06:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009f0a:	4770      	bx	lr
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	461a      	mov	r2, r3
 8009f10:	da02      	bge.n	8009f18 <__ieee754_logf+0x24>
 8009f12:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009f16:	e7f4      	b.n	8009f02 <__ieee754_logf+0xe>
 8009f18:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009f1c:	db02      	blt.n	8009f24 <__ieee754_logf+0x30>
 8009f1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009f22:	4770      	bx	lr
 8009f24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f28:	bfb8      	it	lt
 8009f2a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800a0a0 <__ieee754_logf+0x1ac>
 8009f2e:	485d      	ldr	r0, [pc, #372]	@ (800a0a4 <__ieee754_logf+0x1b0>)
 8009f30:	bfbe      	ittt	lt
 8009f32:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009f36:	f06f 0118 	mvnlt.w	r1, #24
 8009f3a:	ee17 2a90 	vmovlt	r2, s15
 8009f3e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8009f42:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009f46:	4410      	add	r0, r2
 8009f48:	bfa8      	it	ge
 8009f4a:	2100      	movge	r1, #0
 8009f4c:	3b7f      	subs	r3, #127	@ 0x7f
 8009f4e:	440b      	add	r3, r1
 8009f50:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8009f54:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8009f58:	4311      	orrs	r1, r2
 8009f5a:	ee00 1a10 	vmov	s0, r1
 8009f5e:	4952      	ldr	r1, [pc, #328]	@ (800a0a8 <__ieee754_logf+0x1b4>)
 8009f60:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8009f64:	f102 000f 	add.w	r0, r2, #15
 8009f68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009f6c:	4001      	ands	r1, r0
 8009f6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009f72:	bb89      	cbnz	r1, 8009fd8 <__ieee754_logf+0xe4>
 8009f74:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7c:	d10f      	bne.n	8009f9e <__ieee754_logf+0xaa>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f000 8087 	beq.w	800a092 <__ieee754_logf+0x19e>
 8009f84:	ee07 3a90 	vmov	s15, r3
 8009f88:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800a0ac <__ieee754_logf+0x1b8>
 8009f8c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800a0b0 <__ieee754_logf+0x1bc>
 8009f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f94:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009f98:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009f9c:	4770      	bx	lr
 8009f9e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800a0b4 <__ieee754_logf+0x1c0>
 8009fa2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009fa6:	eee0 7a66 	vfms.f32	s15, s0, s13
 8009faa:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009fae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fb2:	b913      	cbnz	r3, 8009fba <__ieee754_logf+0xc6>
 8009fb4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009fb8:	4770      	bx	lr
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a0ac <__ieee754_logf+0x1b8>
 8009fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fc6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009fca:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009fce:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800a0b0 <__ieee754_logf+0x1bc>
 8009fd2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009fd6:	4770      	bx	lr
 8009fd8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009fdc:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009fe0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800a0b8 <__ieee754_logf+0x1c4>
 8009fe4:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800a0bc <__ieee754_logf+0x1c8>
 8009fe8:	4935      	ldr	r1, [pc, #212]	@ (800a0c0 <__ieee754_logf+0x1cc>)
 8009fea:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009fee:	4411      	add	r1, r2
 8009ff0:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8009ff4:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	2a00      	cmp	r2, #0
 8009ffc:	ee07 3a90 	vmov	s15, r3
 800a000:	ee26 5a06 	vmul.f32	s10, s12, s12
 800a004:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a008:	ee25 7a05 	vmul.f32	s14, s10, s10
 800a00c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800a0c4 <__ieee754_logf+0x1d0>
 800a010:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a014:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a0c8 <__ieee754_logf+0x1d4>
 800a018:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a01c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800a0cc <__ieee754_logf+0x1d8>
 800a020:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a024:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800a0d0 <__ieee754_logf+0x1dc>
 800a028:	eee7 4a87 	vfma.f32	s9, s15, s14
 800a02c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800a0d4 <__ieee754_logf+0x1e0>
 800a030:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a034:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a038:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a03c:	dd1a      	ble.n	800a074 <__ieee754_logf+0x180>
 800a03e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a042:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a046:	ee27 7a00 	vmul.f32	s14, s14, s0
 800a04a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a04e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a052:	b913      	cbnz	r3, 800a05a <__ieee754_logf+0x166>
 800a054:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a058:	e7ac      	b.n	8009fb4 <__ieee754_logf+0xc0>
 800a05a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800a0ac <__ieee754_logf+0x1b8>
 800a05e:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a062:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a066:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a06a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800a0b0 <__ieee754_logf+0x1bc>
 800a06e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800a072:	4770      	bx	lr
 800a074:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a078:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a07c:	b913      	cbnz	r3, 800a084 <__ieee754_logf+0x190>
 800a07e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a082:	4770      	bx	lr
 800a084:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800a0ac <__ieee754_logf+0x1b8>
 800a088:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a08c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a090:	e7eb      	b.n	800a06a <__ieee754_logf+0x176>
 800a092:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800a09c <__ieee754_logf+0x1a8>
 800a096:	4770      	bx	lr
 800a098:	cc000000 	.word	0xcc000000
 800a09c:	00000000 	.word	0x00000000
 800a0a0:	4c000000 	.word	0x4c000000
 800a0a4:	004afb20 	.word	0x004afb20
 800a0a8:	007ffff0 	.word	0x007ffff0
 800a0ac:	3717f7d1 	.word	0x3717f7d1
 800a0b0:	3f317180 	.word	0x3f317180
 800a0b4:	3eaaaaab 	.word	0x3eaaaaab
 800a0b8:	3e1cd04f 	.word	0x3e1cd04f
 800a0bc:	3e178897 	.word	0x3e178897
 800a0c0:	ffcf5c30 	.word	0xffcf5c30
 800a0c4:	3e638e29 	.word	0x3e638e29
 800a0c8:	3ecccccd 	.word	0x3ecccccd
 800a0cc:	3e3a3325 	.word	0x3e3a3325
 800a0d0:	3e924925 	.word	0x3e924925
 800a0d4:	3f2aaaab 	.word	0x3f2aaaab

0800a0d8 <_init>:
 800a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0da:	bf00      	nop
 800a0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0de:	bc08      	pop	{r3}
 800a0e0:	469e      	mov	lr, r3
 800a0e2:	4770      	bx	lr

0800a0e4 <_fini>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	bf00      	nop
 800a0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ea:	bc08      	pop	{r3}
 800a0ec:	469e      	mov	lr, r3
 800a0ee:	4770      	bx	lr
