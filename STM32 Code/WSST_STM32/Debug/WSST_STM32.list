
WSST_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000953c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080096e0  080096e0  000196e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b3c  08009b3c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b44  08009b44  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b44  08009b44  00019b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004318  200001d8  08009d24  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200044f0  08009d24  000244f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001860f  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003581  00000000  00000000  0003885a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  0003bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001124  00000000  00000000  0003d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abe5  00000000  00000000  0003e4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019dd0  00000000  00000000  000590c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6637  00000000  00000000  00072e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e18  00000000  00000000  001194d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001202e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080096c4 	.word	0x080096c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080096c4 	.word	0x080096c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <vApplicationGetIdleTaskMemory+0x30>)
 8000f0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200001f4 	.word	0x200001f4
 8000f24:	200002a4 	.word	0x200002a4

08000f28 <set_setpoint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_setpoint(uint32_t new_setpoint)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	temp_setpoint = new_setpoint;
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <set_setpoint+0x1c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200005e4 	.word	0x200005e4

08000f48 <reset_setpoint>:

void reset_setpoint(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
	temp_setpoint = 0;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <reset_setpoint+0x14>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200005e4 	.word	0x200005e4

08000f60 <cycle_heater_state>:

void cycle_heater_state(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  switch(heater_state)
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <cycle_heater_state+0x4c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d016      	beq.n	8000f9a <cycle_heater_state+0x3a>
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	dc1a      	bgt.n	8000fa6 <cycle_heater_state+0x46>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <cycle_heater_state+0x1a>
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d008      	beq.n	8000f8a <cycle_heater_state+0x2a>
	case FULL_HEAT:
		heater_state = OFF;
		reset_setpoint();
		break;
  }
}
 8000f78:	e015      	b.n	8000fa6 <cycle_heater_state+0x46>
		heater_state = PRE_HEAT;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <cycle_heater_state+0x4c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
		set_setpoint(PRE_HEAT_SETPOINT);
 8000f80:	f640 401c 	movw	r0, #3100	; 0xc1c
 8000f84:	f7ff ffd0 	bl	8000f28 <set_setpoint>
		break;
 8000f88:	e00d      	b.n	8000fa6 <cycle_heater_state+0x46>
		heater_state = FULL_HEAT;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <cycle_heater_state+0x4c>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	701a      	strb	r2, [r3, #0]
		set_setpoint(FULL_HEAT_STOPPOINT);
 8000f90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f94:	f7ff ffc8 	bl	8000f28 <set_setpoint>
		break;
 8000f98:	e005      	b.n	8000fa6 <cycle_heater_state+0x46>
		heater_state = OFF;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <cycle_heater_state+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
		reset_setpoint();
 8000fa0:	f7ff ffd2 	bl	8000f48 <reset_setpoint>
		break;
 8000fa4:	bf00      	nop
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200005ec 	.word	0x200005ec

08000fb0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc0:	d102      	bne.n	8000fc8 <HAL_GPIO_EXTI_Callback+0x18>
  {
	  cycle_heater_state();
 8000fc2:	f7ff ffcd 	bl	8000f60 <cycle_heater_state>
  }
  else if(GPIO_Pin == GPIO_PIN_7)
  {
	  IR_RPM_interrupt_count++;
  }
}
 8000fc6:	e007      	b.n	8000fd8 <HAL_GPIO_EXTI_Callback+0x28>
  else if(GPIO_Pin == GPIO_PIN_7)
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	2b80      	cmp	r3, #128	; 0x80
 8000fcc:	d104      	bne.n	8000fd8 <HAL_GPIO_EXTI_Callback+0x28>
	  IR_RPM_interrupt_count++;
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a02      	ldr	r2, [pc, #8]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200005f4 	.word	0x200005f4

08000fe4 <read_adc_channel>:
			break;
	}
}

uint32_t read_adc_channel()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	uint32_t return_value = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000fee:	4808      	ldr	r0, [pc, #32]	; (8001010 <read_adc_channel+0x2c>)
 8000ff0:	f000 ff5a 	bl	8001ea8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <read_adc_channel+0x2c>)
 8000ffa:	f001 f809 	bl	8002010 <HAL_ADC_PollForConversion>
	return_value = HAL_ADC_GetValue(&hadc1);
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <read_adc_channel+0x2c>)
 8001000:	f001 f891 	bl	8002126 <HAL_ADC_GetValue>
 8001004:	6078      	str	r0, [r7, #4]

	return return_value;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200004a4 	.word	0x200004a4

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b09c      	sub	sp, #112	; 0x70
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101a:	f000 febf 	bl	8001d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101e:	f000 f86d 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f000 f9d9 	bl	80013d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001026:	f000 f8d3 	bl	80011d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800102a:	f000 f925 	bl	8001278 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800102e:	f000 f9a9 	bl	8001384 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001032:	f000 f94f 	bl	80012d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001036:	4828      	ldr	r0, [pc, #160]	; (80010d8 <main+0xc4>)
 8001038:	f000 ff36 	bl	8001ea8 <HAL_ADC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <main+0xc8>)
 800103e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001042:	461d      	mov	r5, r3
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800104c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001050:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f004 f9ff 	bl	800545a <osThreadCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <main+0xcc>)
 8001060:	6013      	str	r3, [r2, #0]

  /* definition and creation of readSensors */
  osThreadDef(readSensors, startReadSensors, osPriorityNormal, 0, 128);
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <main+0xd0>)
 8001064:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001068:	461d      	mov	r5, r3
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001072:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorsHandle = osThreadCreate(osThread(readSensors), NULL);
 8001076:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f004 f9ec 	bl	800545a <osThreadCreate>
 8001082:	4603      	mov	r3, r0
 8001084:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <main+0xd4>)
 8001086:	6013      	str	r3, [r2, #0]

  /* definition and creation of bangBangControl */
  osThreadDef(bangBangControl, StartBangBangControl, osPriorityRealtime, 0, 128);
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <main+0xd8>)
 800108a:	f107 041c 	add.w	r4, r7, #28
 800108e:	461d      	mov	r5, r3
 8001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001094:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bangBangControlHandle = osThreadCreate(osThread(bangBangControl), NULL);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f004 f9d9 	bl	800545a <osThreadCreate>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <main+0xdc>)
 80010ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of communicationTa */
  osThreadDef(communicationTa, StartComTask, osPriorityNormal, 0, 128);
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <main+0xe0>)
 80010b0:	463c      	mov	r4, r7
 80010b2:	461d      	mov	r5, r3
 80010b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  communicationTaHandle = osThreadCreate(osThread(communicationTa), NULL);
 80010c0:	463b      	mov	r3, r7
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 f9c8 	bl	800545a <osThreadCreate>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <main+0xe4>)
 80010ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010d0:	f004 f9bc 	bl	800544c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <main+0xc0>
 80010d6:	bf00      	nop
 80010d8:	200004a4 	.word	0x200004a4
 80010dc:	080096ec 	.word	0x080096ec
 80010e0:	200005d0 	.word	0x200005d0
 80010e4:	08009714 	.word	0x08009714
 80010e8:	200005d4 	.word	0x200005d4
 80010ec:	08009740 	.word	0x08009740
 80010f0:	200005d8 	.word	0x200005d8
 80010f4:	0800976c 	.word	0x0800976c
 80010f8:	200005dc 	.word	0x200005dc

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f989 	bl	8007422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <SystemClock_Config+0xcc>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <SystemClock_Config+0xcc>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <SystemClock_Config+0xcc>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <SystemClock_Config+0xd0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001148:	4a20      	ldr	r2, [pc, #128]	; (80011cc <SystemClock_Config+0xd0>)
 800114a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <SystemClock_Config+0xd0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001170:	2308      	movs	r3, #8
 8001172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001174:	2348      	movs	r3, #72	; 0x48
 8001176:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117c:	2304      	movs	r3, #4
 800117e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	4618      	mov	r0, r3
 8001186:	f001 fe67 	bl	8002e58 <HAL_RCC_OscConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001190:	f000 fada 	bl	8001748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001194:	230f      	movs	r3, #15
 8001196:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001198:	2302      	movs	r3, #2
 800119a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	2102      	movs	r1, #2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 f8c9 	bl	8003348 <HAL_RCC_ClockConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011bc:	f000 fac4 	bl	8001748 <Error_Handler>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3750      	adds	r7, #80	; 0x50
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <MX_ADC1_Init+0x9c>)
 80011e4:	4a22      	ldr	r2, [pc, #136]	; (8001270 <MX_ADC1_Init+0xa0>)
 80011e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <MX_ADC1_Init+0x9c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_ADC1_Init+0x9c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_ADC1_Init+0x9c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_ADC1_Init+0x9c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_ADC1_Init+0x9c>)
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_ADC1_Init+0x9c>)
 800120a:	2201      	movs	r2, #1
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_ADC1_Init+0x9c>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_ADC1_Init+0x9c>)
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <MX_ADC1_Init+0xa4>)
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_ADC1_Init+0x9c>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_ADC1_Init+0x9c>)
 8001222:	2201      	movs	r2, #1
 8001224:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_ADC1_Init+0x9c>)
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_ADC1_Init+0x9c>)
 8001230:	2201      	movs	r2, #1
 8001232:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_ADC1_Init+0x9c>)
 8001236:	f000 fdf3 	bl	8001e20 <HAL_ADC_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001240:	f000 fa82 	bl	8001748 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001248:	2301      	movs	r3, #1
 800124a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_ADC1_Init+0x9c>)
 8001256:	f000 ff73 	bl	8002140 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001260:	f000 fa72 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200004a4 	.word	0x200004a4
 8001270:	40012000 	.word	0x40012000
 8001274:	0f000001 	.word	0x0f000001

08001278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <MX_I2C1_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_I2C1_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b6:	f001 fc8b 	bl	8002bd0 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fa42 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200004ec 	.word	0x200004ec
 80012cc:	40005400 	.word	0x40005400
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	615a      	str	r2, [r3, #20]
 80012f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <MX_TIM2_Init+0xac>)
 80012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <MX_TIM2_Init+0xac>)
 8001300:	2247      	movs	r2, #71	; 0x47
 8001302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <MX_TIM2_Init+0xac>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_TIM2_Init+0xac>)
 800130c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_TIM2_Init+0xac>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <MX_TIM2_Init+0xac>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <MX_TIM2_Init+0xac>)
 8001320:	f002 fae0 	bl	80038e4 <HAL_TIM_PWM_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800132a:	f000 fa0d 	bl	8001748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	4619      	mov	r1, r3
 800133c:	4810      	ldr	r0, [pc, #64]	; (8001380 <MX_TIM2_Init+0xac>)
 800133e:	f002 ffe9 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001348:	f000 f9fe 	bl	8001748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134c:	2360      	movs	r3, #96	; 0x60
 800134e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM2_Init+0xac>)
 8001364:	f002 fcae 	bl	8003cc4 <HAL_TIM_PWM_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800136e:	f000 f9eb 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM2_Init+0xac>)
 8001374:	f000 fadc 	bl	8001930 <HAL_TIM_MspPostInit>

}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	; 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000540 	.word	0x20000540

08001384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <MX_USART2_UART_Init+0x50>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013bc:	f003 f82c 	bl	8004418 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c6:	f000 f9bf 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000588 	.word	0x20000588
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <MX_GPIO_Init+0xf4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a35      	ldr	r2, [pc, #212]	; (80014cc <MX_GPIO_Init+0xf4>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <MX_GPIO_Init+0xf4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <MX_GPIO_Init+0xf4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a2e      	ldr	r2, [pc, #184]	; (80014cc <MX_GPIO_Init+0xf4>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <MX_GPIO_Init+0xf4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_GPIO_Init+0xf4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a27      	ldr	r2, [pc, #156]	; (80014cc <MX_GPIO_Init+0xf4>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <MX_GPIO_Init+0xf4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001448:	4821      	ldr	r0, [pc, #132]	; (80014d0 <MX_GPIO_Init+0xf8>)
 800144a:	f001 fb8f 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Interrupt_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Interrupt_Pin;
 800144e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001454:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	481b      	ldr	r0, [pc, #108]	; (80014d4 <MX_GPIO_Init+0xfc>)
 8001466:	f001 f9fd 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 800146a:	f44f 73b0 	mov.w	r3, #352	; 0x160
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4813      	ldr	r0, [pc, #76]	; (80014d0 <MX_GPIO_Init+0xf8>)
 8001484:	f001 f9ee 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Input_Interrupt_Pin */
  GPIO_InitStruct.Pin = IR_Input_Interrupt_Pin;
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_Input_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	4619      	mov	r1, r3
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <MX_GPIO_Init+0xf8>)
 800149e:	f001 f9e1 	bl	8002864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2105      	movs	r1, #5
 80014a6:	2017      	movs	r0, #23
 80014a8:	f001 f920 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014ac:	2017      	movs	r0, #23
 80014ae:	f001 f939 	bl	8002724 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2105      	movs	r1, #5
 80014b6:	2028      	movs	r0, #40	; 0x28
 80014b8:	f001 f918 	bl	80026ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014bc:	2028      	movs	r0, #40	; 0x28
 80014be:	f001 f931 	bl	8002724 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020800 	.word	0x40020800

080014d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  reset_setpoint();
 80014e0:	f7ff fd32 	bl	8000f48 <reset_setpoint>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 80014e4:	200a      	movs	r0, #10
 80014e6:	f004 f804 	bl	80054f2 <osDelay>
 80014ea:	e7fb      	b.n	80014e4 <StartDefaultTask+0xc>

080014ec <startReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadSensors */
void startReadSensors(void const * argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b09a      	sub	sp, #104	; 0x68
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadSensors */
  int accumulator_temp = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	667b      	str	r3, [r7, #100]	; 0x64
  int accumulator_pot = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	663b      	str	r3, [r7, #96]	; 0x60
  int oversample_count_max = 10;
 80014fc:	230a      	movs	r3, #10
 80014fe:	65bb      	str	r3, [r7, #88]	; 0x58
  int oversample_count = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	65fb      	str	r3, [r7, #92]	; 0x5c

  uint32_t rpm_time = HAL_GetTick();
 8001504:	f000 fc80 	bl	8001e08 <HAL_GetTick>
 8001508:	6578      	str	r0, [r7, #84]	; 0x54
  uint32_t prev_rpm_time = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	653b      	str	r3, [r7, #80]	; 0x50
  for(;;)
  {
//	HAL_ADC_Start(&hadc1);
//	select_adc_channel(0);
//	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	accumulator_temp += read_adc_channel();
 800150e:	f7ff fd69 	bl	8000fe4 <read_adc_channel>
 8001512:	4602      	mov	r2, r0
 8001514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001516:	4413      	add	r3, r2
 8001518:	667b      	str	r3, [r7, #100]	; 0x64
	accumulator_pot += read_adc_channel();
 800151a:	f7ff fd63 	bl	8000fe4 <read_adc_channel>
 800151e:	4602      	mov	r2, r0
 8001520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001522:	4413      	add	r3, r2
 8001524:	663b      	str	r3, [r7, #96]	; 0x60

	oversample_count++;
 8001526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001528:	3301      	adds	r3, #1
 800152a:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(oversample_count == oversample_count_max)
 800152c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800152e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001530:	429a      	cmp	r2, r3
 8001532:	d113      	bne.n	800155c <startReadSensors+0x70>
	{
		oversample_count = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	65fb      	str	r3, [r7, #92]	; 0x5c
		thermistor_sensor_adc = accumulator_temp/oversample_count_max;
 8001538:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800153a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800153c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001540:	461a      	mov	r2, r3
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <startReadSensors+0x120>)
 8001544:	601a      	str	r2, [r3, #0]
		potentiometer_val_adc = accumulator_pot/oversample_count_max;
 8001546:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800154a:	fb92 f3f3 	sdiv	r3, r2, r3
 800154e:	461a      	mov	r2, r3
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <startReadSensors+0x124>)
 8001552:	601a      	str	r2, [r3, #0]
		accumulator_temp = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	667b      	str	r3, [r7, #100]	; 0x64
		accumulator_pot = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	663b      	str	r3, [r7, #96]	; 0x60
//		char buf2[64];
//		sprintf(buf2, "Value of PWM: %ld\r\n", Motor_PWM_Val);
//		HAL_UART_Transmit(&huart2, buf2, strlen(buf2), HAL_MAX_DELAY);
	}

	IR_RPM_accumulator += IR_RPM_interrupt_count;
 800155c:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <startReadSensors+0x128>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <startReadSensors+0x12c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	4a2b      	ldr	r2, [pc, #172]	; (8001614 <startReadSensors+0x128>)
 8001568:	6013      	str	r3, [r2, #0]

	if(IR_RPM_accumulator >= oversample_count_max)
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <startReadSensors+0x128>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001570:	429a      	cmp	r2, r3
 8001572:	d346      	bcc.n	8001602 <startReadSensors+0x116>
	{
		rpm_time = HAL_GetTick();
 8001574:	f000 fc48 	bl	8001e08 <HAL_GetTick>
 8001578:	6578      	str	r0, [r7, #84]	; 0x54
		double time_delta = (rpm_time - prev_rpm_time)/1000;
 800157a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800157c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	4a26      	ldr	r2, [pc, #152]	; (800161c <startReadSensors+0x130>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	099b      	lsrs	r3, r3, #6
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffc3 	bl	8000514 <__aeabi_ui2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		centrifuge_RPM = (IR_RPM_accumulator/time_delta)*60;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <startReadSensors+0x128>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffba 	bl	8000514 <__aeabi_ui2d>
 80015a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80015a4:	f7ff f95a 	bl	800085c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <startReadSensors+0x134>)
 80015b6:	f7ff f827 	bl	8000608 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4919      	ldr	r1, [pc, #100]	; (8001624 <startReadSensors+0x138>)
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
		IR_RPM_accumulator = 0;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <startReadSensors+0x128>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
		char buf[64];
		sprintf(buf, "Value of sensor: %ld\r\n", (uint32_t) centrifuge_RPM);
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <startReadSensors+0x138>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff faf0 	bl	8000bb8 <__aeabi_d2uiz>
 80015d8:	4602      	mov	r2, r0
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	4912      	ldr	r1, [pc, #72]	; (8001628 <startReadSensors+0x13c>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 febb 	bl	800735c <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe fe48 	bl	8000280 <strlen>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	f107 0108 	add.w	r1, r7, #8
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <startReadSensors+0x140>)
 80015fe:	f002 ff5b 	bl	80044b8 <HAL_UART_Transmit>
	}

    osDelay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f003 ff75 	bl	80054f2 <osDelay>
	accumulator_temp += read_adc_channel();
 8001608:	e781      	b.n	800150e <startReadSensors+0x22>
 800160a:	bf00      	nop
 800160c:	200005e8 	.word	0x200005e8
 8001610:	200005e0 	.word	0x200005e0
 8001614:	200005f0 	.word	0x200005f0
 8001618:	200005f4 	.word	0x200005f4
 800161c:	10624dd3 	.word	0x10624dd3
 8001620:	404e0000 	.word	0x404e0000
 8001624:	200005f8 	.word	0x200005f8
 8001628:	08009788 	.word	0x08009788
 800162c:	20000588 	.word	0x20000588

08001630 <StartBangBangControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBangBangControl */
void StartBangBangControl(void const * argument)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBangBangControl */
  TIM2->CCR1 = 500; // Divide by 1000 to get PWM Duty Cycle
 8001638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001640:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001642:	2100      	movs	r1, #0
 8001644:	482d      	ldr	r0, [pc, #180]	; (80016fc <StartBangBangControl+0xcc>)
 8001646:	f002 f99d 	bl	8003984 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001650:	482b      	ldr	r0, [pc, #172]	; (8001700 <StartBangBangControl+0xd0>)
 8001652:	f001 fa8b 	bl	8002b6c <HAL_GPIO_WritePin>
  for(;;)
  {
//	HAL_ADC_Start(&hadc1);
//	select_adc_channel(1);
//	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	if(heater_state == PRE_HEAT)
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <StartBangBangControl+0xd4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d11d      	bne.n	800169a <StartBangBangControl+0x6a>
	{
		if(thermistor_sensor_adc < temp_setpoint - PRE_HEAT_DEADBAND)
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <StartBangBangControl+0xd8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <StartBangBangControl+0xdc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d90a      	bls.n	8001684 <StartBangBangControl+0x54>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2120      	movs	r1, #32
 8001672:	4823      	ldr	r0, [pc, #140]	; (8001700 <StartBangBangControl+0xd0>)
 8001674:	f001 fa7a 	bl	8002b6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // D12 on board
 8001678:	2201      	movs	r2, #1
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	4820      	ldr	r0, [pc, #128]	; (8001700 <StartBangBangControl+0xd0>)
 800167e:	f001 fa75 	bl	8002b6c <HAL_GPIO_WritePin>
 8001682:	e037      	b.n	80016f4 <StartBangBangControl+0xc4>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2120      	movs	r1, #32
 8001688:	481d      	ldr	r0, [pc, #116]	; (8001700 <StartBangBangControl+0xd0>)
 800168a:	f001 fa6f 	bl	8002b6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2140      	movs	r1, #64	; 0x40
 8001692:	481b      	ldr	r0, [pc, #108]	; (8001700 <StartBangBangControl+0xd0>)
 8001694:	f001 fa6a 	bl	8002b6c <HAL_GPIO_WritePin>
 8001698:	e02c      	b.n	80016f4 <StartBangBangControl+0xc4>
		}
	}
	else if(heater_state == FULL_HEAT)
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <StartBangBangControl+0xd4>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d11e      	bne.n	80016e0 <StartBangBangControl+0xb0>
	{
		if(thermistor_sensor_adc < FULL_HEAT_STOPPOINT)
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <StartBangBangControl+0xdc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d80a      	bhi.n	80016c4 <StartBangBangControl+0x94>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	2120      	movs	r1, #32
 80016b2:	4813      	ldr	r0, [pc, #76]	; (8001700 <StartBangBangControl+0xd0>)
 80016b4:	f001 fa5a 	bl	8002b6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // D12 on board
 80016b8:	2201      	movs	r2, #1
 80016ba:	2140      	movs	r1, #64	; 0x40
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <StartBangBangControl+0xd0>)
 80016be:	f001 fa55 	bl	8002b6c <HAL_GPIO_WritePin>
 80016c2:	e017      	b.n	80016f4 <StartBangBangControl+0xc4>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2120      	movs	r1, #32
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <StartBangBangControl+0xd0>)
 80016ca:	f001 fa4f 	bl	8002b6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2140      	movs	r1, #64	; 0x40
 80016d2:	480b      	ldr	r0, [pc, #44]	; (8001700 <StartBangBangControl+0xd0>)
 80016d4:	f001 fa4a 	bl	8002b6c <HAL_GPIO_WritePin>
			heater_state = OFF;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <StartBangBangControl+0xd4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	e009      	b.n	80016f4 <StartBangBangControl+0xc4>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2120      	movs	r1, #32
 80016e4:	4806      	ldr	r0, [pc, #24]	; (8001700 <StartBangBangControl+0xd0>)
 80016e6:	f001 fa41 	bl	8002b6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2140      	movs	r1, #64	; 0x40
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <StartBangBangControl+0xd0>)
 80016f0:	f001 fa3c 	bl	8002b6c <HAL_GPIO_WritePin>
	}
	osDelay(100);
 80016f4:	2064      	movs	r0, #100	; 0x64
 80016f6:	f003 fefc 	bl	80054f2 <osDelay>
	if(heater_state == PRE_HEAT)
 80016fa:	e7ac      	b.n	8001656 <StartBangBangControl+0x26>
 80016fc:	20000540 	.word	0x20000540
 8001700:	40020000 	.word	0x40020000
 8001704:	200005ec 	.word	0x200005ec
 8001708:	200005e4 	.word	0x200005e4
 800170c:	200005e8 	.word	0x200005e8

08001710 <StartComTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartComTask */
void StartComTask(void const * argument)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartComTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800171c:	f003 fee9 	bl	80054f2 <osDelay>
 8001720:	e7fa      	b.n	8001718 <StartComTask+0x8>
	...

08001724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001736:	f000 fb53 	bl	8001de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40010000 	.word	0x40010000

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b090      	sub	sp, #64	; 0x40
 800174c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174e:	b672      	cpsid	i
}
 8001750:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char buf[64];
  sprintf(buf, "BRUH MOMENT");
 8001752:	463b      	mov	r3, r7
 8001754:	4908      	ldr	r1, [pc, #32]	; (8001778 <Error_Handler+0x30>)
 8001756:	4618      	mov	r0, r3
 8001758:	f005 fe00 	bl	800735c <siprintf>

  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 800175c:	463b      	mov	r3, r7
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd8e 	bl	8000280 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	4639      	mov	r1, r7
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <Error_Handler+0x34>)
 8001770:	f002 fea2 	bl	80044b8 <HAL_UART_Transmit>
  while (1)
 8001774:	e7fe      	b.n	8001774 <Error_Handler+0x2c>
 8001776:	bf00      	nop
 8001778:	080097a0 	.word	0x080097a0
 800177c:	20000588 	.word	0x20000588

08001780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_MspInit+0x54>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <HAL_MspInit+0x54>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x54>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_MspInit+0x54>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_MspInit+0x54>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_MspInit+0x54>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	210f      	movs	r1, #15
 80017c2:	f06f 0001 	mvn.w	r0, #1
 80017c6:	f000 ff91 	bl	80026ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a17      	ldr	r2, [pc, #92]	; (8001854 <HAL_ADC_MspInit+0x7c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d127      	bne.n	800184a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_ADC_MspInit+0x80>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_ADC_MspInit+0x80>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6453      	str	r3, [r2, #68]	; 0x44
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_ADC_MspInit+0x80>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_ADC_MspInit+0x80>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_ADC_MspInit+0x80>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_ADC_MspInit+0x80>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001832:	2301      	movs	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001836:	2303      	movs	r3, #3
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_ADC_MspInit+0x84>)
 8001846:	f001 f80d 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40012000 	.word	0x40012000
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_I2C_MspInit+0x84>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d12b      	bne.n	80018da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_I2C_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_I2C_MspInit+0x88>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_I2C_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189e:	23c0      	movs	r3, #192	; 0xc0
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a2:	2312      	movs	r3, #18
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ae:	2304      	movs	r3, #4
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <HAL_I2C_MspInit+0x8c>)
 80018ba:	f000 ffd3 	bl	8002864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_I2C_MspInit+0x88>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_I2C_MspInit+0x88>)
 80018c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_I2C_MspInit+0x88>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40005400 	.word	0x40005400
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020400 	.word	0x40020400

080018f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001900:	d10d      	bne.n	800191e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_TIM_PWM_MspInit+0x3c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_TIM_PWM_MspInit+0x3c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_TIM_PWM_MspInit+0x3c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d11e      	bne.n	8001990 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_TIM_MspPostInit+0x68>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_TIM_MspPostInit+0x68>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_TIM_MspPostInit+0x68>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800196e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001972:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001980:	2301      	movs	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <HAL_TIM_MspPostInit+0x6c>)
 800198c:	f000 ff6a 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_UART_MspInit+0x94>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d133      	bne.n	8001a2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_UART_MspInit+0x98>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fa:	230c      	movs	r3, #12
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <HAL_UART_MspInit+0x9c>)
 8001a16:	f000 ff25 	bl	8002864 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	2026      	movs	r0, #38	; 0x26
 8001a20:	f000 fe64 	bl	80026ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a24:	2026      	movs	r0, #38	; 0x26
 8001a26:	f000 fe7d 	bl	8002724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40004400 	.word	0x40004400
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000

08001a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_InitTick+0xd0>)
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	4a2d      	ldr	r2, [pc, #180]	; (8001b10 <HAL_InitTick+0xd0>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_InitTick+0xd0>)
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6c:	f107 020c 	add.w	r2, r7, #12
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fe46 	bl	8003708 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a7c:	f001 fe30 	bl	80036e0 <HAL_RCC_GetPCLK2Freq>
 8001a80:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <HAL_InitTick+0xd4>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0c9b      	lsrs	r3, r3, #18
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_InitTick+0xd8>)
 8001a92:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <HAL_InitTick+0xdc>)
 8001a94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_InitTick+0xd8>)
 8001a98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_InitTick+0xd8>)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_InitTick+0xd8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_InitTick+0xd8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_InitTick+0xd8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ab6:	4818      	ldr	r0, [pc, #96]	; (8001b18 <HAL_InitTick+0xd8>)
 8001ab8:	f001 fe58 	bl	800376c <HAL_TIM_Base_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11b      	bne.n	8001b02 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001aca:	4813      	ldr	r0, [pc, #76]	; (8001b18 <HAL_InitTick+0xd8>)
 8001acc:	f001 fea8 	bl	8003820 <HAL_TIM_Base_Start_IT>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d111      	bne.n	8001b02 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ade:	2019      	movs	r0, #25
 8001ae0:	f000 fe20 	bl	8002724 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	d808      	bhi.n	8001afc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001aea:	2200      	movs	r2, #0
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	2019      	movs	r0, #25
 8001af0:	f000 fdfc 	bl	80026ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_InitTick+0xe0>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e002      	b.n	8001b02 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3730      	adds	r7, #48	; 0x30
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	20000600 	.word	0x20000600
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	20000004 	.word	0x20000004

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b28:	e7fe      	b.n	8001b28 <NMI_Handler+0x4>

08001b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <MemManage_Handler+0x4>

08001b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Input_Interrupt_Pin);
 8001b54:	2080      	movs	r0, #128	; 0x80
 8001b56:	f001 f823 	bl	8002ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b66:	f001 ffbd 	bl	8003ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000600 	.word	0x20000600

08001b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <USART2_IRQHandler+0x10>)
 8001b7a:	f002 fd29 	bl	80045d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000588 	.word	0x20000588

08001b88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Interrupt_Pin);
 8001b8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b90:	f001 f806 	bl	8002ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return 1;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_kill>:

int _kill(int pid, int sig)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bb2:	f005 fcdf 	bl	8007574 <__errno>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2216      	movs	r2, #22
 8001bba:	601a      	str	r2, [r3, #0]
  return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_exit>:

void _exit (int status)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ffe7 	bl	8001ba8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bda:	e7fe      	b.n	8001bda <_exit+0x12>

08001bdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e00a      	b.n	8001c04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bee:	f3af 8000 	nop.w
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	b2ca      	uxtb	r2, r1
 8001bfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dbf0      	blt.n	8001bee <_read+0x12>
  }

  return len;
 8001c0c:	687b      	ldr	r3, [r7, #4]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e009      	b.n	8001c3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	60ba      	str	r2, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf1      	blt.n	8001c28 <_write+0x12>
  }
  return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_close>:

int _close(int file)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c76:	605a      	str	r2, [r3, #4]
  return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_isatty>:

int _isatty(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce8:	f005 fc44 	bl	8007574 <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	220c      	movs	r2, #12
 8001cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <_sbrk+0x64>)
 8001d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20018000 	.word	0x20018000
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	20000648 	.word	0x20000648
 8001d20:	200044f0 	.word	0x200044f0

08001d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <SystemInit+0x20>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <SystemInit+0x20>)
 8001d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d4c:	f7ff ffea 	bl	8001d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d52:	490d      	ldr	r1, [pc, #52]	; (8001d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d68:	4c0a      	ldr	r4, [pc, #40]	; (8001d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d76:	f005 fc03 	bl	8007580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7a:	f7ff f94b 	bl	8001014 <main>
  bx  lr    
 8001d7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d88:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d8c:	08009b4c 	.word	0x08009b4c
  ldr r2, =_sbss
 8001d90:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d94:	200044f0 	.word	0x200044f0

08001d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC_IRQHandler>
	...

08001d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <HAL_Init+0x40>)
 8001da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_Init+0x40>)
 8001db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <HAL_Init+0x40>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f000 fc86 	bl	80026d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dca:	200f      	movs	r0, #15
 8001dcc:	f7ff fe38 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd0:	f7ff fcd6 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000008 	.word	0x20000008
 8001e04:	2000064c 	.word	0x2000064c

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	2000064c 	.word	0x2000064c

08001e20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e033      	b.n	8001e9e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fcca 	bl	80017d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d118      	bne.n	8001e90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e66:	f023 0302 	bic.w	r3, r3, #2
 8001e6a:	f043 0202 	orr.w	r2, r3, #2
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa86 	bl	8002384 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e8e:	e001      	b.n	8001e94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_Start+0x1a>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e097      	b.n	8001ff2 <HAL_ADC_Start+0x14a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d018      	beq.n	8001f0a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee8:	4b45      	ldr	r3, [pc, #276]	; (8002000 <HAL_ADC_Start+0x158>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a45      	ldr	r2, [pc, #276]	; (8002004 <HAL_ADC_Start+0x15c>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	0c9a      	lsrs	r2, r3, #18
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001efc:	e002      	b.n	8001f04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f9      	bne.n	8001efe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d15f      	bne.n	8001fd8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f56:	d106      	bne.n	8001f66 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f023 0206 	bic.w	r2, r3, #6
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
 8001f64:	e002      	b.n	8001f6c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_ADC_Start+0x160>)
 8001f76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f80:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d129      	bne.n	8001ff0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	e020      	b.n	8001ff0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a16      	ldr	r2, [pc, #88]	; (800200c <HAL_ADC_Start+0x164>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_ADC_Start+0x148>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d114      	bne.n	8001ff0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	e00b      	b.n	8001ff0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f043 0210 	orr.w	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000000 	.word	0x20000000
 8002004:	431bde83 	.word	0x431bde83
 8002008:	40012300 	.word	0x40012300
 800200c:	40012000 	.word	0x40012000

08002010 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202c:	d113      	bne.n	8002056 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203c:	d10b      	bne.n	8002056 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e063      	b.n	800211e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002056:	f7ff fed7 	bl	8001e08 <HAL_GetTick>
 800205a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800205c:	e021      	b.n	80020a2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d01d      	beq.n	80020a2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <HAL_ADC_PollForConversion+0x6c>
 800206c:	f7ff fecc 	bl	8001e08 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d212      	bcs.n	80020a2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b02      	cmp	r3, #2
 8002088:	d00b      	beq.n	80020a2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f043 0204 	orr.w	r2, r3, #4
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e03d      	b.n	800211e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d1d6      	bne.n	800205e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0212 	mvn.w	r2, #18
 80020b8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d123      	bne.n	800211c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d11f      	bne.n	800211c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d111      	bne.n	800211c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1c>
 8002158:	2302      	movs	r3, #2
 800215a:	e105      	b.n	8002368 <HAL_ADC_ConfigChannel+0x228>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b09      	cmp	r3, #9
 800216a:	d925      	bls.n	80021b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68d9      	ldr	r1, [r3, #12]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	3b1e      	subs	r3, #30
 8002182:	2207      	movs	r2, #7
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43da      	mvns	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	400a      	ands	r2, r1
 8002190:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68d9      	ldr	r1, [r3, #12]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	4603      	mov	r3, r0
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4403      	add	r3, r0
 80021aa:	3b1e      	subs	r3, #30
 80021ac:	409a      	lsls	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	e022      	b.n	80021fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6919      	ldr	r1, [r3, #16]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	2207      	movs	r2, #7
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	400a      	ands	r2, r1
 80021da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6919      	ldr	r1, [r3, #16]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4403      	add	r3, r0
 80021f4:	409a      	lsls	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b06      	cmp	r3, #6
 8002204:	d824      	bhi.n	8002250 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3b05      	subs	r3, #5
 8002218:	221f      	movs	r2, #31
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	400a      	ands	r2, r1
 8002226:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	3b05      	subs	r3, #5
 8002242:	fa00 f203 	lsl.w	r2, r0, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
 800224e:	e04c      	b.n	80022ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d824      	bhi.n	80022a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	3b23      	subs	r3, #35	; 0x23
 800226a:	221f      	movs	r2, #31
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43da      	mvns	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	400a      	ands	r2, r1
 8002278:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	4618      	mov	r0, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	3b23      	subs	r3, #35	; 0x23
 8002294:	fa00 f203 	lsl.w	r2, r0, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
 80022a0:	e023      	b.n	80022ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	3b41      	subs	r3, #65	; 0x41
 80022b4:	221f      	movs	r2, #31
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	3b41      	subs	r3, #65	; 0x41
 80022de:	fa00 f203 	lsl.w	r2, r0, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_ADC_ConfigChannel+0x234>)
 80022ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a21      	ldr	r2, [pc, #132]	; (8002378 <HAL_ADC_ConfigChannel+0x238>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d109      	bne.n	800230c <HAL_ADC_ConfigChannel+0x1cc>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b12      	cmp	r3, #18
 80022fe:	d105      	bne.n	800230c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_ADC_ConfigChannel+0x238>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d123      	bne.n	800235e <HAL_ADC_ConfigChannel+0x21e>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d003      	beq.n	8002326 <HAL_ADC_ConfigChannel+0x1e6>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b11      	cmp	r3, #17
 8002324:	d11b      	bne.n	800235e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b10      	cmp	r3, #16
 8002338:	d111      	bne.n	800235e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_ADC_ConfigChannel+0x23c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a10      	ldr	r2, [pc, #64]	; (8002380 <HAL_ADC_ConfigChannel+0x240>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	0c9a      	lsrs	r2, r3, #18
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002350:	e002      	b.n	8002358 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40012300 	.word	0x40012300
 8002378:	40012000 	.word	0x40012000
 800237c:	20000000 	.word	0x20000000
 8002380:	431bde83 	.word	0x431bde83

08002384 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800238c:	4b79      	ldr	r3, [pc, #484]	; (8002574 <ADC_Init+0x1f0>)
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	021a      	lsls	r2, r3, #8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	4a58      	ldr	r2, [pc, #352]	; (8002578 <ADC_Init+0x1f4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d022      	beq.n	8002462 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800242a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6899      	ldr	r1, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800244c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6899      	ldr	r1, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	e00f      	b.n	8002482 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002480:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0202 	bic.w	r2, r2, #2
 8002490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6899      	ldr	r1, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7e1b      	ldrb	r3, [r3, #24]
 800249c:	005a      	lsls	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01b      	beq.n	80024e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	3b01      	subs	r3, #1
 80024dc:	035a      	lsls	r2, r3, #13
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	e007      	b.n	80024f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	3b01      	subs	r3, #1
 8002514:	051a      	lsls	r2, r3, #20
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800252c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6899      	ldr	r1, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800253a:	025a      	lsls	r2, r3, #9
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	029a      	lsls	r2, r3, #10
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40012300 	.word	0x40012300
 8002578:	0f000001 	.word	0x0f000001

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	; (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	; (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff4c 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fe:	f7ff ff61 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002702:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	6978      	ldr	r0, [r7, #20]
 800270a:	f7ff ffb1 	bl	8002670 <NVIC_EncodePriority>
 800270e:	4602      	mov	r2, r0
 8002710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff80 	bl	800261c <__NVIC_SetPriority>
}
 800271c:	bf00      	nop
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff54 	bl	80025e0 <__NVIC_EnableIRQ>
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800274e:	f7ff fb5b 	bl	8001e08 <HAL_GetTick>
 8002752:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e052      	b.n	8002818 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0216 	bic.w	r2, r2, #22
 8002780:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002790:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <HAL_DMA_Abort+0x62>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0208 	bic.w	r2, r2, #8
 80027b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c2:	e013      	b.n	80027ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c4:	f7ff fb20 	bl	8001e08 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	d90c      	bls.n	80027ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2203      	movs	r2, #3
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e015      	b.n	8002818 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1e4      	bne.n	80027c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	223f      	movs	r2, #63	; 0x3f
 8002800:	409a      	lsls	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d004      	beq.n	800283e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e00c      	b.n	8002858 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2205      	movs	r2, #5
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e159      	b.n	8002b34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002880:	2201      	movs	r2, #1
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 8148 	bne.w	8002b2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d005      	beq.n	80028b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d130      	bne.n	8002918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 0201 	and.w	r2, r3, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b03      	cmp	r3, #3
 8002922:	d017      	beq.n	8002954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d123      	bne.n	80029a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0203 	and.w	r2, r3, #3
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a2 	beq.w	8002b2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a56      	ldr	r2, [pc, #344]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a06:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_GPIO_Init+0x2ec>)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a49      	ldr	r2, [pc, #292]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d019      	beq.n	8002a66 <HAL_GPIO_Init+0x202>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a48      	ldr	r2, [pc, #288]	; (8002b58 <HAL_GPIO_Init+0x2f4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0x1fe>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a47      	ldr	r2, [pc, #284]	; (8002b5c <HAL_GPIO_Init+0x2f8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00d      	beq.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a46      	ldr	r2, [pc, #280]	; (8002b60 <HAL_GPIO_Init+0x2fc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x1f6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a45      	ldr	r2, [pc, #276]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_GPIO_Init+0x1f2>
 8002a52:	2304      	movs	r3, #4
 8002a54:	e008      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e004      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a66:	2300      	movs	r3, #0
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f002 0203 	and.w	r2, r2, #3
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	4093      	lsls	r3, r2
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a78:	4935      	ldr	r1, [pc, #212]	; (8002b50 <HAL_GPIO_Init+0x2ec>)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aaa:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad4:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afe:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b28:	4a0f      	ldr	r2, [pc, #60]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	f67f aea2 	bls.w	8002880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020c00 	.word	0x40020c00
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40013c00 	.word	0x40013c00

08002b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b7c:	787b      	ldrb	r3, [r7, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	619a      	str	r2, [r3, #24]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe f9f6 	bl	8000fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e12b      	b.n	8002e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fe32 	bl	8001860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	; 0x24
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c34:	f000 fd40 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8002c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a81      	ldr	r2, [pc, #516]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d807      	bhi.n	8002c54 <HAL_I2C_Init+0x84>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a80      	ldr	r2, [pc, #512]	; (8002e48 <HAL_I2C_Init+0x278>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	bf94      	ite	ls
 8002c4c:	2301      	movls	r3, #1
 8002c4e:	2300      	movhi	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e006      	b.n	8002c62 <HAL_I2C_Init+0x92>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a7d      	ldr	r2, [pc, #500]	; (8002e4c <HAL_I2C_Init+0x27c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	bf94      	ite	ls
 8002c5c:	2301      	movls	r3, #1
 8002c5e:	2300      	movhi	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0e7      	b.n	8002e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a78      	ldr	r2, [pc, #480]	; (8002e50 <HAL_I2C_Init+0x280>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0c9b      	lsrs	r3, r3, #18
 8002c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a6a      	ldr	r2, [pc, #424]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d802      	bhi.n	8002ca4 <HAL_I2C_Init+0xd4>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	e009      	b.n	8002cb8 <HAL_I2C_Init+0xe8>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	4a69      	ldr	r2, [pc, #420]	; (8002e54 <HAL_I2C_Init+0x284>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	495c      	ldr	r1, [pc, #368]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	d819      	bhi.n	8002d0c <HAL_I2C_Init+0x13c>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e59      	subs	r1, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cec:	400b      	ands	r3, r1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_I2C_Init+0x138>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e59      	subs	r1, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d06:	e051      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	e04f      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d111      	bne.n	8002d38 <HAL_I2C_Init+0x168>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e58      	subs	r0, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	440b      	add	r3, r1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e012      	b.n	8002d5e <HAL_I2C_Init+0x18e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Init+0x196>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e022      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10e      	bne.n	8002d8c <HAL_I2C_Init+0x1bc>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1e58      	subs	r0, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	440b      	add	r3, r1
 8002d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8a:	e00f      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1e58      	subs	r0, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	0099      	lsls	r1, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	6809      	ldr	r1, [r1, #0]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6911      	ldr	r1, [r2, #16]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	000186a0 	.word	0x000186a0
 8002e48:	001e847f 	.word	0x001e847f
 8002e4c:	003d08ff 	.word	0x003d08ff
 8002e50:	431bde83 	.word	0x431bde83
 8002e54:	10624dd3 	.word	0x10624dd3

08002e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e267      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d075      	beq.n	8002f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e76:	4b88      	ldr	r3, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d00c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b85      	ldr	r3, [pc, #532]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d112      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8e:	4b82      	ldr	r3, [pc, #520]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	4b7e      	ldr	r3, [pc, #504]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05b      	beq.n	8002f60 <HAL_RCC_OscConfig+0x108>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d157      	bne.n	8002f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e242      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_OscConfig+0x74>
 8002ebe:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e01d      	b.n	8002f08 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x98>
 8002ed6:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6f      	ldr	r2, [pc, #444]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0xb0>
 8002ef0:	4b69      	ldr	r3, [pc, #420]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a68      	ldr	r2, [pc, #416]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a65      	ldr	r2, [pc, #404]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe ff7a 	bl	8001e08 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe ff76 	bl	8001e08 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e207      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0xc0>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe ff66 	bl	8001e08 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe ff62 	bl	8001e08 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1f3      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	4b51      	ldr	r3, [pc, #324]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0xe8>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d063      	beq.n	8003036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x152>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1c7      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4937      	ldr	r1, [pc, #220]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	e03a      	b.n	8003036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc8:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCC_OscConfig+0x244>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7fe ff1b 	bl	8001e08 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7fe ff17 	bl	8001e08 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1a8      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4925      	ldr	r1, [pc, #148]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300a:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_RCC_OscConfig+0x244>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe fefa 	bl	8001e08 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003018:	f7fe fef6 	bl	8001e08 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e187      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d036      	beq.n	80030b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_RCC_OscConfig+0x248>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe feda 	bl	8001e08 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe fed6 	bl	8001e08 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e167      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x240>)
 800306c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x200>
 8003076:	e01b      	b.n	80030b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_OscConfig+0x248>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7fe fec3 	bl	8001e08 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003084:	e00e      	b.n	80030a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003086:	f7fe febf 	bl	8001e08 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d907      	bls.n	80030a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e150      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
 8003098:	40023800 	.word	0x40023800
 800309c:	42470000 	.word	0x42470000
 80030a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ea      	bne.n	8003086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8097 	beq.w	80031ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c2:	4b81      	ldr	r3, [pc, #516]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	4b7d      	ldr	r3, [pc, #500]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a7c      	ldr	r2, [pc, #496]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b7a      	ldr	r3, [pc, #488]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	4b77      	ldr	r3, [pc, #476]	; (80032cc <HAL_RCC_OscConfig+0x474>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fa:	4b74      	ldr	r3, [pc, #464]	; (80032cc <HAL_RCC_OscConfig+0x474>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a73      	ldr	r2, [pc, #460]	; (80032cc <HAL_RCC_OscConfig+0x474>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003106:	f7fe fe7f 	bl	8001e08 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7fe fe7b 	bl	8001e08 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e10c      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <HAL_RCC_OscConfig+0x474>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x2ea>
 8003134:	4b64      	ldr	r3, [pc, #400]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a63      	ldr	r2, [pc, #396]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	e01c      	b.n	800317c <HAL_RCC_OscConfig+0x324>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x30c>
 800314a:	4b5f      	ldr	r3, [pc, #380]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a5e      	ldr	r2, [pc, #376]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	4b5c      	ldr	r3, [pc, #368]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a5b      	ldr	r2, [pc, #364]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x324>
 8003164:	4b58      	ldr	r3, [pc, #352]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a57      	ldr	r2, [pc, #348]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	4b55      	ldr	r3, [pc, #340]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a54      	ldr	r2, [pc, #336]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fe40 	bl	8001e08 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fe3c 	bl	8001e08 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0cb      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCC_OscConfig+0x334>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b0:	f7fe fe2a 	bl	8001e08 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe fe26 	bl	8001e08 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0b5      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	4b3e      	ldr	r3, [pc, #248]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e0:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a1 	beq.w	8003338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f6:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d05c      	beq.n	80032bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d141      	bne.n	800328e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_RCC_OscConfig+0x478>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fdfa 	bl	8001e08 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003218:	f7fe fdf6 	bl	8001e08 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e087      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	019b      	lsls	r3, r3, #6
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	491b      	ldr	r1, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x478>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe fdcf 	bl	8001e08 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326e:	f7fe fdcb 	bl	8001e08 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e05c      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x416>
 800328c:	e054      	b.n	8003338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_OscConfig+0x478>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fdb8 	bl	8001e08 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe fdb4 	bl	8001e08 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e045      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_OscConfig+0x470>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x444>
 80032ba:	e03d      	b.n	8003338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e038      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40007000 	.word	0x40007000
 80032d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_RCC_OscConfig+0x4ec>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d028      	beq.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d121      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d11a      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800330a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800330c:	4293      	cmp	r3, r2
 800330e:	d111      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0cc      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800335c:	4b68      	ldr	r3, [pc, #416]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d90c      	bls.n	8003384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b65      	ldr	r3, [pc, #404]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0b8      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800339c:	4b59      	ldr	r3, [pc, #356]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a58      	ldr	r2, [pc, #352]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b4:	4b53      	ldr	r3, [pc, #332]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a52      	ldr	r2, [pc, #328]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b50      	ldr	r3, [pc, #320]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	494d      	ldr	r1, [pc, #308]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d044      	beq.n	8003468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d119      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e07f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003402:	2b03      	cmp	r3, #3
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003406:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e067      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003426:	4b37      	ldr	r3, [pc, #220]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4934      	ldr	r1, [pc, #208]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003438:	f7fe fce6 	bl	8001e08 <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	e00a      	b.n	8003456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003440:	f7fe fce2 	bl	8001e08 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e04f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 020c 	and.w	r2, r3, #12
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	429a      	cmp	r2, r3
 8003466:	d1eb      	bne.n	8003440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d20c      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e032      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4916      	ldr	r1, [pc, #88]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	490e      	ldr	r1, [pc, #56]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ce:	f000 f821 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490a      	ldr	r1, [pc, #40]	; (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	4a09      	ldr	r2, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x1c8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe faa6 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023c00 	.word	0x40023c00
 8003504:	40023800 	.word	0x40023800
 8003508:	080097b4 	.word	0x080097b4
 800350c:	20000000 	.word	0x20000000
 8003510:	20000004 	.word	0x20000004

08003514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003518:	b090      	sub	sp, #64	; 0x40
 800351a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
 8003520:	2300      	movs	r3, #0
 8003522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003524:	2300      	movs	r3, #0
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d00d      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x40>
 8003538:	2b08      	cmp	r3, #8
 800353a:	f200 80a1 	bhi.w	8003680 <HAL_RCC_GetSysClockFreq+0x16c>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x34>
 8003542:	2b04      	cmp	r3, #4
 8003544:	d003      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x3a>
 8003546:	e09b      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_GetSysClockFreq+0x184>)
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800354c:	e09b      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354e:	4b53      	ldr	r3, [pc, #332]	; (800369c <HAL_RCC_GetSysClockFreq+0x188>)
 8003550:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003552:	e098      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003554:	4b4f      	ldr	r3, [pc, #316]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355e:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d028      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	099b      	lsrs	r3, r3, #6
 8003570:	2200      	movs	r2, #0
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	627a      	str	r2, [r7, #36]	; 0x24
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800357c:	2100      	movs	r1, #0
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <HAL_RCC_GetSysClockFreq+0x188>)
 8003580:	fb03 f201 	mul.w	r2, r3, r1
 8003584:	2300      	movs	r3, #0
 8003586:	fb00 f303 	mul.w	r3, r0, r3
 800358a:	4413      	add	r3, r2
 800358c:	4a43      	ldr	r2, [pc, #268]	; (800369c <HAL_RCC_GetSysClockFreq+0x188>)
 800358e:	fba0 1202 	umull	r1, r2, r0, r2
 8003592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003594:	460a      	mov	r2, r1
 8003596:	62ba      	str	r2, [r7, #40]	; 0x28
 8003598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359a:	4413      	add	r3, r2
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	2200      	movs	r2, #0
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	61fa      	str	r2, [r7, #28]
 80035a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035ae:	f7fd fb23 	bl	8000bf8 <__aeabi_uldivmod>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4613      	mov	r3, r2
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ba:	e053      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035bc:	4b35      	ldr	r3, [pc, #212]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	2200      	movs	r2, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	617a      	str	r2, [r7, #20]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ce:	f04f 0b00 	mov.w	fp, #0
 80035d2:	4652      	mov	r2, sl
 80035d4:	465b      	mov	r3, fp
 80035d6:	f04f 0000 	mov.w	r0, #0
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	0159      	lsls	r1, r3, #5
 80035e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e4:	0150      	lsls	r0, r2, #5
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	ebb2 080a 	subs.w	r8, r2, sl
 80035ee:	eb63 090b 	sbc.w	r9, r3, fp
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003602:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003606:	ebb2 0408 	subs.w	r4, r2, r8
 800360a:	eb63 0509 	sbc.w	r5, r3, r9
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	00eb      	lsls	r3, r5, #3
 8003618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800361c:	00e2      	lsls	r2, r4, #3
 800361e:	4614      	mov	r4, r2
 8003620:	461d      	mov	r5, r3
 8003622:	eb14 030a 	adds.w	r3, r4, sl
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	eb45 030b 	adc.w	r3, r5, fp
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363a:	4629      	mov	r1, r5
 800363c:	028b      	lsls	r3, r1, #10
 800363e:	4621      	mov	r1, r4
 8003640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003644:	4621      	mov	r1, r4
 8003646:	028a      	lsls	r2, r1, #10
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	2200      	movs	r2, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	60fa      	str	r2, [r7, #12]
 8003654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003658:	f7fd face 	bl	8000bf8 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_GetSysClockFreq+0x180>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	0c1b      	lsrs	r3, r3, #16
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	3301      	adds	r3, #1
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800367e:	e002      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_GetSysClockFreq+0x184>)
 8003682:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003688:	4618      	mov	r0, r3
 800368a:	3740      	adds	r7, #64	; 0x40
 800368c:	46bd      	mov	sp, r7
 800368e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	00f42400 	.word	0x00f42400
 800369c:	017d7840 	.word	0x017d7840

080036a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000000 	.word	0x20000000

080036b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036bc:	f7ff fff0 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0a9b      	lsrs	r3, r3, #10
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	080097c4 	.word	0x080097c4

080036e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036e4:	f7ff ffdc 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0b5b      	lsrs	r3, r3, #13
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	; (8003704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	080097c4 	.word	0x080097c4

08003708 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	220f      	movs	r2, #15
 8003716:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_GetClockConfig+0x5c>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <HAL_RCC_GetClockConfig+0x5c>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_RCC_GetClockConfig+0x5c>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_GetClockConfig+0x5c>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_RCC_GetClockConfig+0x60>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0207 	and.w	r2, r3, #7
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	601a      	str	r2, [r3, #0]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	40023c00 	.word	0x40023c00

0800376c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e041      	b.n	8003802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f839 	bl	800380a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 fb74 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d001      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e044      	b.n	80038c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d018      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x6c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d013      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x6c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00e      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x6c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d009      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x6c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_TIM_Base_Start_IT+0xbc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x6c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d111      	bne.n	80038b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b06      	cmp	r3, #6
 800389c:	d010      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ae:	e007      	b.n	80038c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40014000 	.word	0x40014000

080038e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e041      	b.n	800397a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd fff0 	bl	80018f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f000 fab8 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_TIM_PWM_Start+0x24>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e022      	b.n	80039ee <HAL_TIM_PWM_Start+0x6a>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d109      	bne.n	80039c2 <HAL_TIM_PWM_Start+0x3e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	e015      	b.n	80039ee <HAL_TIM_PWM_Start+0x6a>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d109      	bne.n	80039dc <HAL_TIM_PWM_Start+0x58>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e008      	b.n	80039ee <HAL_TIM_PWM_Start+0x6a>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e068      	b.n	8003ac8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <HAL_TIM_PWM_Start+0x82>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a04:	e013      	b.n	8003a2e <HAL_TIM_PWM_Start+0xaa>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d104      	bne.n	8003a16 <HAL_TIM_PWM_Start+0x92>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a14:	e00b      	b.n	8003a2e <HAL_TIM_PWM_Start+0xaa>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d104      	bne.n	8003a26 <HAL_TIM_PWM_Start+0xa2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a24:	e003      	b.n	8003a2e <HAL_TIM_PWM_Start+0xaa>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2201      	movs	r2, #1
 8003a34:	6839      	ldr	r1, [r7, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fc46 	bl	80042c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <HAL_TIM_PWM_Start+0x14c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d107      	bne.n	8003a56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <HAL_TIM_PWM_Start+0x14c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <HAL_TIM_PWM_Start+0x10e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d013      	beq.n	8003a92 <HAL_TIM_PWM_Start+0x10e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <HAL_TIM_PWM_Start+0x150>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_TIM_PWM_Start+0x10e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <HAL_TIM_PWM_Start+0x154>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <HAL_TIM_PWM_Start+0x10e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a16      	ldr	r2, [pc, #88]	; (8003adc <HAL_TIM_PWM_Start+0x158>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_TIM_PWM_Start+0x10e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <HAL_TIM_PWM_Start+0x15c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d111      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d010      	beq.n	8003ac6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	e007      	b.n	8003ac6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40014000 	.word	0x40014000

08003ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d020      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01b      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0202 	mvn.w	r2, #2
 8003b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f994 	bl	8003e5c <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f986 	bl	8003e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f997 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d020      	beq.n	8003b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01b      	beq.n	8003b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0204 	mvn.w	r2, #4
 8003b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f96e 	bl	8003e5c <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f960 	bl	8003e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f971 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d020      	beq.n	8003be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01b      	beq.n	8003be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0208 	mvn.w	r2, #8
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f948 	bl	8003e5c <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f93a 	bl	8003e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f94b 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d020      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2208      	movs	r2, #8
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f922 	bl	8003e5c <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f914 	bl	8003e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f925 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00c      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0201 	mvn.w	r2, #1
 8003c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fd6a 	bl	8001724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00c      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fbc8 	bl	8004404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00c      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f8f6 	bl	8003e84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00c      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0220 	mvn.w	r2, #32
 8003cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fb9a 	bl	80043f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e0ae      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	f200 809f 	bhi.w	8003e30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cf2:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003d2d 	.word	0x08003d2d
 8003cfc:	08003e31 	.word	0x08003e31
 8003d00:	08003e31 	.word	0x08003e31
 8003d04:	08003e31 	.word	0x08003e31
 8003d08:	08003d6d 	.word	0x08003d6d
 8003d0c:	08003e31 	.word	0x08003e31
 8003d10:	08003e31 	.word	0x08003e31
 8003d14:	08003e31 	.word	0x08003e31
 8003d18:	08003daf 	.word	0x08003daf
 8003d1c:	08003e31 	.word	0x08003e31
 8003d20:	08003e31 	.word	0x08003e31
 8003d24:	08003e31 	.word	0x08003e31
 8003d28:	08003def 	.word	0x08003def
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f93c 	bl	8003fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0204 	bic.w	r2, r2, #4
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	619a      	str	r2, [r3, #24]
      break;
 8003d6a:	e064      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f982 	bl	800407c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6999      	ldr	r1, [r3, #24]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	619a      	str	r2, [r3, #24]
      break;
 8003dac:	e043      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f9cd 	bl	8004154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0208 	orr.w	r2, r2, #8
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0204 	bic.w	r2, r2, #4
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	61da      	str	r2, [r3, #28]
      break;
 8003dec:	e023      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fa17 	bl	8004228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69d9      	ldr	r1, [r3, #28]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	021a      	lsls	r2, r3, #8
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	61da      	str	r2, [r3, #28]
      break;
 8003e2e:	e002      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	75fb      	strb	r3, [r7, #23]
      break;
 8003e34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3a      	ldr	r2, [pc, #232]	; (8003f94 <TIM_Base_SetConfig+0xfc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00f      	beq.n	8003ed0 <TIM_Base_SetConfig+0x38>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d00b      	beq.n	8003ed0 <TIM_Base_SetConfig+0x38>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a37      	ldr	r2, [pc, #220]	; (8003f98 <TIM_Base_SetConfig+0x100>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_Base_SetConfig+0x38>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a36      	ldr	r2, [pc, #216]	; (8003f9c <TIM_Base_SetConfig+0x104>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_Base_SetConfig+0x38>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a35      	ldr	r2, [pc, #212]	; (8003fa0 <TIM_Base_SetConfig+0x108>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d108      	bne.n	8003ee2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <TIM_Base_SetConfig+0xfc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01b      	beq.n	8003f22 <TIM_Base_SetConfig+0x8a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef0:	d017      	beq.n	8003f22 <TIM_Base_SetConfig+0x8a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <TIM_Base_SetConfig+0x100>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <TIM_Base_SetConfig+0x8a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <TIM_Base_SetConfig+0x104>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00f      	beq.n	8003f22 <TIM_Base_SetConfig+0x8a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <TIM_Base_SetConfig+0x108>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <TIM_Base_SetConfig+0x8a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <TIM_Base_SetConfig+0x10c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_Base_SetConfig+0x8a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <TIM_Base_SetConfig+0x110>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_Base_SetConfig+0x8a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	; (8003fac <TIM_Base_SetConfig+0x114>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d108      	bne.n	8003f34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0e      	ldr	r2, [pc, #56]	; (8003f94 <TIM_Base_SetConfig+0xfc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d103      	bne.n	8003f68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d105      	bne.n	8003f86 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	611a      	str	r2, [r3, #16]
  }
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800

08003fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 0201 	bic.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 0302 	bic.w	r3, r3, #2
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <TIM_OC1_SetConfig+0xc8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10c      	bne.n	8004026 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0308 	bic.w	r3, r3, #8
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <TIM_OC1_SetConfig+0xc8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40010000 	.word	0x40010000

0800407c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f023 0210 	bic.w	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0320 	bic.w	r3, r3, #32
 80040c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <TIM_OC2_SetConfig+0xd4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d10d      	bne.n	80040f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a15      	ldr	r2, [pc, #84]	; (8004150 <TIM_OC2_SetConfig+0xd4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d113      	bne.n	8004128 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000

08004154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800419c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <TIM_OC3_SetConfig+0xd0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d10d      	bne.n	80041ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a14      	ldr	r2, [pc, #80]	; (8004224 <TIM_OC3_SetConfig+0xd0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d113      	bne.n	80041fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40010000 	.word	0x40010000

08004228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	031b      	lsls	r3, r3, #12
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <TIM_OC4_SetConfig+0x9c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d109      	bne.n	800429c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800428e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	019b      	lsls	r3, r3, #6
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010000 	.word	0x40010000

080042c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2201      	movs	r2, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e050      	b.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d013      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10c      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40014000 	.word	0x40014000

080043f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e042      	b.n	80044b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd faae 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fd69 	bl	8004f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d175      	bne.n	80045c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_UART_Transmit+0x2c>
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e06e      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2221      	movs	r2, #33	; 0x21
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f6:	f7fd fc87 	bl	8001e08 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004510:	d108      	bne.n	8004524 <HAL_UART_Transmit+0x6c>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e003      	b.n	800452c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800452c:	e02e      	b.n	800458c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2200      	movs	r2, #0
 8004536:	2180      	movs	r1, #128	; 0x80
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fb05 	bl	8004b48 <UART_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e03a      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10b      	bne.n	800456e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	3302      	adds	r3, #2
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e007      	b.n	800457e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	3301      	adds	r3, #1
 800457c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1cb      	bne.n	800452e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	2140      	movs	r1, #64	; 0x40
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fad1 	bl	8004b48 <UART_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e006      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b0ba      	sub	sp, #232	; 0xe8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800460e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_UART_IRQHandler+0x66>
 8004622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fbc2 	bl	8004db8 <UART_Receive_IT>
      return;
 8004634:	e25b      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 80de 	beq.w	80047fc <HAL_UART_IRQHandler+0x22c>
 8004640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004650:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80d1 	beq.w	80047fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_UART_IRQHandler+0xae>
 8004666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <HAL_UART_IRQHandler+0xd2>
 800468a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	f043 0202 	orr.w	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <HAL_UART_IRQHandler+0xf6>
 80046ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	f043 0204 	orr.w	r2, r3, #4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d011      	beq.n	80046f6 <HAL_UART_IRQHandler+0x126>
 80046d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d105      	bne.n	80046ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f043 0208 	orr.w	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 81f2 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_UART_IRQHandler+0x14e>
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fb4d 	bl	8004db8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <HAL_UART_IRQHandler+0x17a>
 8004742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d04f      	beq.n	80047ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fa55 	bl	8004bfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	d141      	bne.n	80047e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3314      	adds	r3, #20
 8004786:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800478a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800478e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1d9      	bne.n	800475e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d013      	beq.n	80047da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	4a7e      	ldr	r2, [pc, #504]	; (80049b0 <HAL_UART_IRQHandler+0x3e0>)
 80047b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe f82e 	bl	8002820 <HAL_DMA_Abort_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	e00e      	b.n	80047f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f99e 	bl	8004b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	e00a      	b.n	80047f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f99a 	bl	8004b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	e006      	b.n	80047f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f996 	bl	8004b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80047f6:	e175      	b.n	8004ae4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	bf00      	nop
    return;
 80047fa:	e173      	b.n	8004ae4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	2b01      	cmp	r3, #1
 8004802:	f040 814f 	bne.w	8004aa4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8148 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8141 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	f040 80b6 	bne.w	80049b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8145 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004866:	429a      	cmp	r2, r3
 8004868:	f080 813e 	bcs.w	8004ae8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004872:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487e:	f000 8088 	beq.w	8004992 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80048ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1d9      	bne.n	8004882 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3314      	adds	r3, #20
 80048d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e1      	bne.n	80048ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3314      	adds	r3, #20
 8004910:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800491a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800492e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004930:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800493c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e3      	bne.n	800490a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004962:	f023 0310 	bic.w	r3, r3, #16
 8004966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004974:	65ba      	str	r2, [r7, #88]	; 0x58
 8004976:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800497a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e3      	bne.n	8004950 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498c:	4618      	mov	r0, r3
 800498e:	f7fd fed7 	bl	8002740 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f8c1 	bl	8004b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ae:	e09b      	b.n	8004ae8 <HAL_UART_IRQHandler+0x518>
 80049b0:	08004cc1 	.word	0x08004cc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 808e 	beq.w	8004aec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8089 	beq.w	8004aec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004a00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e3      	bne.n	80049da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3314      	adds	r3, #20
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	623b      	str	r3, [r7, #32]
   return(result);
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3314      	adds	r3, #20
 8004a32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a36:	633a      	str	r2, [r7, #48]	; 0x30
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e3      	bne.n	8004a12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0310 	bic.w	r3, r3, #16
 8004a6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a7c:	61fa      	str	r2, [r7, #28]
 8004a7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	69b9      	ldr	r1, [r7, #24]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	617b      	str	r3, [r7, #20]
   return(result);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e3      	bne.n	8004a58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f847 	bl	8004b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aa2:	e023      	b.n	8004aec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x4f4>
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f913 	bl	8004ce8 <UART_Transmit_IT>
    return;
 8004ac2:	e014      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00e      	beq.n	8004aee <HAL_UART_IRQHandler+0x51e>
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f953 	bl	8004d88 <UART_EndTransmit_IT>
    return;
 8004ae2:	e004      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
    return;
 8004ae4:	bf00      	nop
 8004ae6:	e002      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
      return;
 8004ae8:	bf00      	nop
 8004aea:	e000      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
      return;
 8004aec:	bf00      	nop
  }
}
 8004aee:	37e8      	adds	r7, #232	; 0xe8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b58:	e03b      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d037      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b62:	f7fd f951 	bl	8001e08 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e03a      	b.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d023      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d020      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d01d      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d116      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f81d 	bl	8004bfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e00f      	b.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	bf0c      	ite	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	2300      	movne	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d0b4      	beq.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b095      	sub	sp, #84	; 0x54
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c22:	643a      	str	r2, [r7, #64]	; 0x40
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e5      	bne.n	8004c02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3314      	adds	r3, #20
 8004c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e5      	bne.n	8004c36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d119      	bne.n	8004ca6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f023 0310 	bic.w	r3, r3, #16
 8004c88:	647b      	str	r3, [r7, #68]	; 0x44
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c92:	61ba      	str	r2, [r7, #24]
 8004c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6979      	ldr	r1, [r7, #20]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e5      	bne.n	8004c72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cb4:	bf00      	nop
 8004cb6:	3754      	adds	r7, #84	; 0x54
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff ff1e 	bl	8004b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b21      	cmp	r3, #33	; 0x21
 8004cfa:	d13e      	bne.n	8004d7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d04:	d114      	bne.n	8004d30 <UART_Transmit_IT+0x48>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d110      	bne.n	8004d30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	621a      	str	r2, [r3, #32]
 8004d2e:	e008      	b.n	8004d42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	1c59      	adds	r1, r3, #1
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6211      	str	r1, [r2, #32]
 8004d3a:	781a      	ldrb	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e000      	b.n	8004d7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff fea3 	bl	8004af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b22      	cmp	r3, #34	; 0x22
 8004dca:	f040 80ae 	bne.w	8004f2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	d117      	bne.n	8004e08 <UART_Receive_IT+0x50>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d113      	bne.n	8004e08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	629a      	str	r2, [r3, #40]	; 0x28
 8004e06:	e026      	b.n	8004e56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	d007      	beq.n	8004e2c <UART_Receive_IT+0x74>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <UART_Receive_IT+0x82>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	701a      	strb	r2, [r3, #0]
 8004e38:	e008      	b.n	8004e4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4619      	mov	r1, r3
 8004e64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d15d      	bne.n	8004f26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0220 	bic.w	r2, r2, #32
 8004e78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0201 	bic.w	r2, r2, #1
 8004e98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d135      	bne.n	8004f1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f023 0310 	bic.w	r3, r3, #16
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed6:	623a      	str	r2, [r7, #32]
 8004ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	69f9      	ldr	r1, [r7, #28]
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	d10a      	bne.n	8004f0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff fe0b 	bl	8004b30 <HAL_UARTEx_RxEventCallback>
 8004f1a:	e002      	b.n	8004f22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff fdf3 	bl	8004b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e002      	b.n	8004f2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e000      	b.n	8004f2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
  }
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3730      	adds	r7, #48	; 0x30
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f38:	b0c0      	sub	sp, #256	; 0x100
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f50:	68d9      	ldr	r1, [r3, #12]
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	ea40 0301 	orr.w	r3, r0, r1
 8004f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f8c:	f021 010c 	bic.w	r1, r1, #12
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	6999      	ldr	r1, [r3, #24]
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	ea40 0301 	orr.w	r3, r0, r1
 8004fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b8f      	ldr	r3, [pc, #572]	; (8005200 <UART_SetConfig+0x2cc>)
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d005      	beq.n	8004fd4 <UART_SetConfig+0xa0>
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b8d      	ldr	r3, [pc, #564]	; (8005204 <UART_SetConfig+0x2d0>)
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d104      	bne.n	8004fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fd4:	f7fe fb84 	bl	80036e0 <HAL_RCC_GetPCLK2Freq>
 8004fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fdc:	e003      	b.n	8004fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fde:	f7fe fb6b 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8004fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff0:	f040 810c 	bne.w	800520c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005006:	4622      	mov	r2, r4
 8005008:	462b      	mov	r3, r5
 800500a:	1891      	adds	r1, r2, r2
 800500c:	65b9      	str	r1, [r7, #88]	; 0x58
 800500e:	415b      	adcs	r3, r3
 8005010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005016:	4621      	mov	r1, r4
 8005018:	eb12 0801 	adds.w	r8, r2, r1
 800501c:	4629      	mov	r1, r5
 800501e:	eb43 0901 	adc.w	r9, r3, r1
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800502e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005036:	4690      	mov	r8, r2
 8005038:	4699      	mov	r9, r3
 800503a:	4623      	mov	r3, r4
 800503c:	eb18 0303 	adds.w	r3, r8, r3
 8005040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005044:	462b      	mov	r3, r5
 8005046:	eb49 0303 	adc.w	r3, r9, r3
 800504a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800505a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800505e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005062:	460b      	mov	r3, r1
 8005064:	18db      	adds	r3, r3, r3
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
 8005068:	4613      	mov	r3, r2
 800506a:	eb42 0303 	adc.w	r3, r2, r3
 800506e:	657b      	str	r3, [r7, #84]	; 0x54
 8005070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005078:	f7fb fdbe 	bl	8000bf8 <__aeabi_uldivmod>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4b61      	ldr	r3, [pc, #388]	; (8005208 <UART_SetConfig+0x2d4>)
 8005082:	fba3 2302 	umull	r2, r3, r3, r2
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	011c      	lsls	r4, r3, #4
 800508a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005094:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	1891      	adds	r1, r2, r2
 80050a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80050a4:	415b      	adcs	r3, r3
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050ac:	4641      	mov	r1, r8
 80050ae:	eb12 0a01 	adds.w	sl, r2, r1
 80050b2:	4649      	mov	r1, r9
 80050b4:	eb43 0b01 	adc.w	fp, r3, r1
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050cc:	4692      	mov	sl, r2
 80050ce:	469b      	mov	fp, r3
 80050d0:	4643      	mov	r3, r8
 80050d2:	eb1a 0303 	adds.w	r3, sl, r3
 80050d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050da:	464b      	mov	r3, r9
 80050dc:	eb4b 0303 	adc.w	r3, fp, r3
 80050e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050f8:	460b      	mov	r3, r1
 80050fa:	18db      	adds	r3, r3, r3
 80050fc:	643b      	str	r3, [r7, #64]	; 0x40
 80050fe:	4613      	mov	r3, r2
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	647b      	str	r3, [r7, #68]	; 0x44
 8005106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800510a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800510e:	f7fb fd73 	bl	8000bf8 <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4611      	mov	r1, r2
 8005118:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <UART_SetConfig+0x2d4>)
 800511a:	fba3 2301 	umull	r2, r3, r3, r1
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	2264      	movs	r2, #100	; 0x64
 8005122:	fb02 f303 	mul.w	r3, r2, r3
 8005126:	1acb      	subs	r3, r1, r3
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800512e:	4b36      	ldr	r3, [pc, #216]	; (8005208 <UART_SetConfig+0x2d4>)
 8005130:	fba3 2302 	umull	r2, r3, r3, r2
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800513c:	441c      	add	r4, r3
 800513e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005142:	2200      	movs	r2, #0
 8005144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005148:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800514c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	1891      	adds	r1, r2, r2
 8005156:	63b9      	str	r1, [r7, #56]	; 0x38
 8005158:	415b      	adcs	r3, r3
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800515c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005160:	4641      	mov	r1, r8
 8005162:	1851      	adds	r1, r2, r1
 8005164:	6339      	str	r1, [r7, #48]	; 0x30
 8005166:	4649      	mov	r1, r9
 8005168:	414b      	adcs	r3, r1
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005178:	4659      	mov	r1, fp
 800517a:	00cb      	lsls	r3, r1, #3
 800517c:	4651      	mov	r1, sl
 800517e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005182:	4651      	mov	r1, sl
 8005184:	00ca      	lsls	r2, r1, #3
 8005186:	4610      	mov	r0, r2
 8005188:	4619      	mov	r1, r3
 800518a:	4603      	mov	r3, r0
 800518c:	4642      	mov	r2, r8
 800518e:	189b      	adds	r3, r3, r2
 8005190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005194:	464b      	mov	r3, r9
 8005196:	460a      	mov	r2, r1
 8005198:	eb42 0303 	adc.w	r3, r2, r3
 800519c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051b4:	460b      	mov	r3, r1
 80051b6:	18db      	adds	r3, r3, r3
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ba:	4613      	mov	r3, r2
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051ca:	f7fb fd15 	bl	8000bf8 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <UART_SetConfig+0x2d4>)
 80051d4:	fba3 1302 	umull	r1, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	2164      	movs	r1, #100	; 0x64
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	3332      	adds	r3, #50	; 0x32
 80051e6:	4a08      	ldr	r2, [pc, #32]	; (8005208 <UART_SetConfig+0x2d4>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 0207 	and.w	r2, r3, #7
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4422      	add	r2, r4
 80051fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051fc:	e106      	b.n	800540c <UART_SetConfig+0x4d8>
 80051fe:	bf00      	nop
 8005200:	40011000 	.word	0x40011000
 8005204:	40011400 	.word	0x40011400
 8005208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800520c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005210:	2200      	movs	r2, #0
 8005212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005216:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800521a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800521e:	4642      	mov	r2, r8
 8005220:	464b      	mov	r3, r9
 8005222:	1891      	adds	r1, r2, r2
 8005224:	6239      	str	r1, [r7, #32]
 8005226:	415b      	adcs	r3, r3
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800522e:	4641      	mov	r1, r8
 8005230:	1854      	adds	r4, r2, r1
 8005232:	4649      	mov	r1, r9
 8005234:	eb43 0501 	adc.w	r5, r3, r1
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	00eb      	lsls	r3, r5, #3
 8005242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005246:	00e2      	lsls	r2, r4, #3
 8005248:	4614      	mov	r4, r2
 800524a:	461d      	mov	r5, r3
 800524c:	4643      	mov	r3, r8
 800524e:	18e3      	adds	r3, r4, r3
 8005250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005254:	464b      	mov	r3, r9
 8005256:	eb45 0303 	adc.w	r3, r5, r3
 800525a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800526a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800527a:	4629      	mov	r1, r5
 800527c:	008b      	lsls	r3, r1, #2
 800527e:	4621      	mov	r1, r4
 8005280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005284:	4621      	mov	r1, r4
 8005286:	008a      	lsls	r2, r1, #2
 8005288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800528c:	f7fb fcb4 	bl	8000bf8 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4b60      	ldr	r3, [pc, #384]	; (8005418 <UART_SetConfig+0x4e4>)
 8005296:	fba3 2302 	umull	r2, r3, r3, r2
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	011c      	lsls	r4, r3, #4
 800529e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	1891      	adds	r1, r2, r2
 80052b6:	61b9      	str	r1, [r7, #24]
 80052b8:	415b      	adcs	r3, r3
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c0:	4641      	mov	r1, r8
 80052c2:	1851      	adds	r1, r2, r1
 80052c4:	6139      	str	r1, [r7, #16]
 80052c6:	4649      	mov	r1, r9
 80052c8:	414b      	adcs	r3, r1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052d8:	4659      	mov	r1, fp
 80052da:	00cb      	lsls	r3, r1, #3
 80052dc:	4651      	mov	r1, sl
 80052de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e2:	4651      	mov	r1, sl
 80052e4:	00ca      	lsls	r2, r1, #3
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	4642      	mov	r2, r8
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052f4:	464b      	mov	r3, r9
 80052f6:	460a      	mov	r2, r1
 80052f8:	eb42 0303 	adc.w	r3, r2, r3
 80052fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	67bb      	str	r3, [r7, #120]	; 0x78
 800530a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005318:	4649      	mov	r1, r9
 800531a:	008b      	lsls	r3, r1, #2
 800531c:	4641      	mov	r1, r8
 800531e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005322:	4641      	mov	r1, r8
 8005324:	008a      	lsls	r2, r1, #2
 8005326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800532a:	f7fb fc65 	bl	8000bf8 <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4611      	mov	r1, r2
 8005334:	4b38      	ldr	r3, [pc, #224]	; (8005418 <UART_SetConfig+0x4e4>)
 8005336:	fba3 2301 	umull	r2, r3, r3, r1
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	2264      	movs	r2, #100	; 0x64
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	1acb      	subs	r3, r1, r3
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	3332      	adds	r3, #50	; 0x32
 8005348:	4a33      	ldr	r2, [pc, #204]	; (8005418 <UART_SetConfig+0x4e4>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005354:	441c      	add	r4, r3
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	2200      	movs	r2, #0
 800535c:	673b      	str	r3, [r7, #112]	; 0x70
 800535e:	677a      	str	r2, [r7, #116]	; 0x74
 8005360:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005364:	4642      	mov	r2, r8
 8005366:	464b      	mov	r3, r9
 8005368:	1891      	adds	r1, r2, r2
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	415b      	adcs	r3, r3
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005374:	4641      	mov	r1, r8
 8005376:	1851      	adds	r1, r2, r1
 8005378:	6039      	str	r1, [r7, #0]
 800537a:	4649      	mov	r1, r9
 800537c:	414b      	adcs	r3, r1
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800538c:	4659      	mov	r1, fp
 800538e:	00cb      	lsls	r3, r1, #3
 8005390:	4651      	mov	r1, sl
 8005392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005396:	4651      	mov	r1, sl
 8005398:	00ca      	lsls	r2, r1, #3
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	4642      	mov	r2, r8
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053a6:	464b      	mov	r3, r9
 80053a8:	460a      	mov	r2, r1
 80053aa:	eb42 0303 	adc.w	r3, r2, r3
 80053ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ba:	667a      	str	r2, [r7, #100]	; 0x64
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053c8:	4649      	mov	r1, r9
 80053ca:	008b      	lsls	r3, r1, #2
 80053cc:	4641      	mov	r1, r8
 80053ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d2:	4641      	mov	r1, r8
 80053d4:	008a      	lsls	r2, r1, #2
 80053d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053da:	f7fb fc0d 	bl	8000bf8 <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <UART_SetConfig+0x4e4>)
 80053e4:	fba3 1302 	umull	r1, r3, r3, r2
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	2164      	movs	r1, #100	; 0x64
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	3332      	adds	r3, #50	; 0x32
 80053f6:	4a08      	ldr	r2, [pc, #32]	; (8005418 <UART_SetConfig+0x4e4>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4422      	add	r2, r4
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005412:	46bd      	mov	sp, r7
 8005414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005418:	51eb851f 	.word	0x51eb851f

0800541c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800542a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800542e:	2b84      	cmp	r3, #132	; 0x84
 8005430:	d005      	beq.n	800543e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005432:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	3303      	adds	r3, #3
 800543c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005450:	f000 faf6 	bl	8005a40 <vTaskStartScheduler>
  
  return osOK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	bd80      	pop	{r7, pc}

0800545a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800545a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545c:	b089      	sub	sp, #36	; 0x24
 800545e:	af04      	add	r7, sp, #16
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d020      	beq.n	80054ae <osThreadCreate+0x54>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01c      	beq.n	80054ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685c      	ldr	r4, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691e      	ldr	r6, [r3, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff ffc8 	bl	800541c <makeFreeRtosPriority>
 800548c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005496:	9202      	str	r2, [sp, #8]
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	9100      	str	r1, [sp, #0]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	4632      	mov	r2, r6
 80054a0:	4629      	mov	r1, r5
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 f8ed 	bl	8005682 <xTaskCreateStatic>
 80054a8:	4603      	mov	r3, r0
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e01c      	b.n	80054e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685c      	ldr	r4, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054ba:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ffaa 	bl	800541c <makeFreeRtosPriority>
 80054c8:	4602      	mov	r2, r0
 80054ca:	f107 030c 	add.w	r3, r7, #12
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	9200      	str	r2, [sp, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	4632      	mov	r2, r6
 80054d6:	4629      	mov	r1, r5
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 f92f 	bl	800573c <xTaskCreate>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d001      	beq.n	80054e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80054e8:	68fb      	ldr	r3, [r7, #12]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <osDelay+0x16>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	e000      	b.n	800550a <osDelay+0x18>
 8005508:	2301      	movs	r3, #1
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fa64 	bl	80059d8 <vTaskDelay>
  
  return osOK;
 8005510:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f103 0208 	add.w	r2, r3, #8
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f04f 32ff 	mov.w	r2, #4294967295
 8005532:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f103 0208 	add.w	r2, r3, #8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f103 0208 	add.w	r2, r3, #8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	601a      	str	r2, [r3, #0]
}
 80055b0:	bf00      	nop
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d103      	bne.n	80055dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e00c      	b.n	80055f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3308      	adds	r3, #8
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e002      	b.n	80055ea <vListInsert+0x2e>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d2f6      	bcs.n	80055e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	601a      	str	r2, [r3, #0]
}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6892      	ldr	r2, [r2, #8]
 8005644:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6852      	ldr	r2, [r2, #4]
 800564e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d103      	bne.n	8005662 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	1e5a      	subs	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005682:	b580      	push	{r7, lr}
 8005684:	b08e      	sub	sp, #56	; 0x38
 8005686:	af04      	add	r7, sp, #16
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056a8:	bf00      	nop
 80056aa:	e7fe      	b.n	80056aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <xTaskCreateStatic+0x46>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	61fb      	str	r3, [r7, #28]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056c8:	23b0      	movs	r3, #176	; 0xb0
 80056ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2bb0      	cmp	r3, #176	; 0xb0
 80056d0:	d00a      	beq.n	80056e8 <xTaskCreateStatic+0x66>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	61bb      	str	r3, [r7, #24]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01e      	beq.n	800572e <xTaskCreateStatic+0xac>
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01b      	beq.n	800572e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	2202      	movs	r2, #2
 8005704:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005708:	2300      	movs	r3, #0
 800570a:	9303      	str	r3, [sp, #12]
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	9302      	str	r3, [sp, #8]
 8005710:	f107 0314 	add.w	r3, r7, #20
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f851 	bl	80057c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005726:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005728:	f000 f8ec 	bl	8005904 <prvAddNewTaskToReadyList>
 800572c:	e001      	b.n	8005732 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005732:	697b      	ldr	r3, [r7, #20]
	}
 8005734:	4618      	mov	r0, r3
 8005736:	3728      	adds	r7, #40	; 0x28
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08c      	sub	sp, #48	; 0x30
 8005740:	af04      	add	r7, sp, #16
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800574c:	88fb      	ldrh	r3, [r7, #6]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fef1 	bl	8006538 <pvPortMalloc>
 8005756:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800575e:	20b0      	movs	r0, #176	; 0xb0
 8005760:	f000 feea 	bl	8006538 <pvPortMalloc>
 8005764:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
 8005772:	e005      	b.n	8005780 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005774:	6978      	ldr	r0, [r7, #20]
 8005776:	f000 ffab 	bl	80066d0 <vPortFree>
 800577a:	e001      	b.n	8005780 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d017      	beq.n	80057b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800578e:	88fa      	ldrh	r2, [r7, #6]
 8005790:	2300      	movs	r3, #0
 8005792:	9303      	str	r3, [sp, #12]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	9302      	str	r3, [sp, #8]
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f80f 	bl	80057c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057aa:	69f8      	ldr	r0, [r7, #28]
 80057ac:	f000 f8aa 	bl	8005904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057b0:	2301      	movs	r3, #1
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e002      	b.n	80057bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057b6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057bc:	69bb      	ldr	r3, [r7, #24]
	}
 80057be:	4618      	mov	r0, r3
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057e0:	3b01      	subs	r3, #1
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <prvInitialiseNewTask+0x48>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	617b      	str	r3, [r7, #20]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01f      	beq.n	8005856 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	e012      	b.n	8005842 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	7819      	ldrb	r1, [r3, #0]
 8005824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	3334      	adds	r3, #52	; 0x34
 800582c:	460a      	mov	r2, r1
 800582e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	4413      	add	r3, r2
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	3301      	adds	r3, #1
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b1f      	cmp	r3, #31
 8005846:	d9e9      	bls.n	800581c <prvInitialiseNewTask+0x54>
 8005848:	e000      	b.n	800584c <prvInitialiseNewTask+0x84>
			{
				break;
 800584a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005854:	e003      	b.n	800585e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	2b06      	cmp	r3, #6
 8005862:	d901      	bls.n	8005868 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005864:	2306      	movs	r3, #6
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005872:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	2200      	movs	r2, #0
 8005878:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	3304      	adds	r3, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fe6b 	bl	800555a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	3318      	adds	r3, #24
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fe66 	bl	800555a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005892:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	f1c3 0207 	rsb	r2, r3, #7
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	335c      	adds	r3, #92	; 0x5c
 80058b8:	224c      	movs	r2, #76	; 0x4c
 80058ba:	2100      	movs	r1, #0
 80058bc:	4618      	mov	r0, r3
 80058be:	f001 fdb0 	bl	8007422 <memset>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <prvInitialiseNewTask+0x130>)
 80058c6:	661a      	str	r2, [r3, #96]	; 0x60
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <prvInitialiseNewTask+0x134>)
 80058cc:	665a      	str	r2, [r3, #100]	; 0x64
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	4a0b      	ldr	r2, [pc, #44]	; (8005900 <prvInitialiseNewTask+0x138>)
 80058d2:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	69b8      	ldr	r0, [r7, #24]
 80058da:	f000 fc1f 	bl	800611c <pxPortInitialiseStack>
 80058de:	4602      	mov	r2, r0
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058f0:	bf00      	nop
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200043a4 	.word	0x200043a4
 80058fc:	2000440c 	.word	0x2000440c
 8005900:	20004474 	.word	0x20004474

08005904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800590c:	f000 fd32 	bl	8006374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <prvAddNewTaskToReadyList+0xb8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	4a29      	ldr	r2, [pc, #164]	; (80059bc <prvAddNewTaskToReadyList+0xb8>)
 8005918:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <prvAddNewTaskToReadyList+0xbc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005922:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <prvAddNewTaskToReadyList+0xbc>)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005928:	4b24      	ldr	r3, [pc, #144]	; (80059bc <prvAddNewTaskToReadyList+0xb8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d110      	bne.n	8005952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005930:	f000 facc 	bl	8005ecc <prvInitialiseTaskLists>
 8005934:	e00d      	b.n	8005952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005936:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <prvAddNewTaskToReadyList+0xc0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800593e:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <prvAddNewTaskToReadyList+0xbc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	429a      	cmp	r2, r3
 800594a:	d802      	bhi.n	8005952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <prvAddNewTaskToReadyList+0xbc>)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <prvAddNewTaskToReadyList+0xc4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <prvAddNewTaskToReadyList+0xc4>)
 800595a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	2201      	movs	r2, #1
 8005962:	409a      	lsls	r2, r3
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <prvAddNewTaskToReadyList+0xc8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4313      	orrs	r3, r2
 800596a:	4a18      	ldr	r2, [pc, #96]	; (80059cc <prvAddNewTaskToReadyList+0xc8>)
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <prvAddNewTaskToReadyList+0xcc>)
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7ff fdf5 	bl	8005574 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800598a:	f000 fd23 	bl	80063d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <prvAddNewTaskToReadyList+0xc0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00e      	beq.n	80059b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvAddNewTaskToReadyList+0xbc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d207      	bcs.n	80059b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <prvAddNewTaskToReadyList+0xd0>)
 80059a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000750 	.word	0x20000750
 80059c0:	20000650 	.word	0x20000650
 80059c4:	2000075c 	.word	0x2000075c
 80059c8:	2000076c 	.word	0x2000076c
 80059cc:	20000758 	.word	0x20000758
 80059d0:	20000654 	.word	0x20000654
 80059d4:	e000ed04 	.word	0xe000ed04

080059d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d017      	beq.n	8005a1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059ea:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <vTaskDelay+0x60>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <vTaskDelay+0x30>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	60bb      	str	r3, [r7, #8]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a08:	f000 f884 	bl	8005b14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fb1e 	bl	8006050 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a14:	f000 f88c 	bl	8005b30 <xTaskResumeAll>
 8005a18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <vTaskDelay+0x64>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20000778 	.word	0x20000778
 8005a3c:	e000ed04 	.word	0xe000ed04

08005a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	; 0x28
 8005a44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a4e:	463a      	mov	r2, r7
 8005a50:	1d39      	adds	r1, r7, #4
 8005a52:	f107 0308 	add.w	r3, r7, #8
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fb fa4c 	bl	8000ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	9202      	str	r2, [sp, #8]
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	2300      	movs	r3, #0
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	460a      	mov	r2, r1
 8005a6e:	4921      	ldr	r1, [pc, #132]	; (8005af4 <vTaskStartScheduler+0xb4>)
 8005a70:	4821      	ldr	r0, [pc, #132]	; (8005af8 <vTaskStartScheduler+0xb8>)
 8005a72:	f7ff fe06 	bl	8005682 <xTaskCreateStatic>
 8005a76:	4603      	mov	r3, r0
 8005a78:	4a20      	ldr	r2, [pc, #128]	; (8005afc <vTaskStartScheduler+0xbc>)
 8005a7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a7c:	4b1f      	ldr	r3, [pc, #124]	; (8005afc <vTaskStartScheduler+0xbc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e001      	b.n	8005a8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d11b      	bne.n	8005acc <vTaskStartScheduler+0x8c>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	613b      	str	r3, [r7, #16]
}
 8005aa6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <vTaskStartScheduler+0xc0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	335c      	adds	r3, #92	; 0x5c
 8005aae:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <vTaskStartScheduler+0xc4>)
 8005ab0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <vTaskStartScheduler+0xc8>)
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <vTaskStartScheduler+0xcc>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <vTaskStartScheduler+0xd0>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ac6:	f000 fbb3 	bl	8006230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aca:	e00e      	b.n	8005aea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d10a      	bne.n	8005aea <vTaskStartScheduler+0xaa>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60fb      	str	r3, [r7, #12]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <vTaskStartScheduler+0xa8>
}
 8005aea:	bf00      	nop
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	080097ac 	.word	0x080097ac
 8005af8:	08005e9d 	.word	0x08005e9d
 8005afc:	20000774 	.word	0x20000774
 8005b00:	20000650 	.word	0x20000650
 8005b04:	20000068 	.word	0x20000068
 8005b08:	20000770 	.word	0x20000770
 8005b0c:	2000075c 	.word	0x2000075c
 8005b10:	20000754 	.word	0x20000754

08005b14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b18:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <vTaskSuspendAll+0x18>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4a03      	ldr	r2, [pc, #12]	; (8005b2c <vTaskSuspendAll+0x18>)
 8005b20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b22:	bf00      	nop
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000778 	.word	0x20000778

08005b30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b3e:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <xTaskResumeAll+0x114>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10a      	bne.n	8005b5c <xTaskResumeAll+0x2c>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	603b      	str	r3, [r7, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b5c:	f000 fc0a 	bl	8006374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b60:	4b38      	ldr	r3, [pc, #224]	; (8005c44 <xTaskResumeAll+0x114>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	4a37      	ldr	r2, [pc, #220]	; (8005c44 <xTaskResumeAll+0x114>)
 8005b68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b6a:	4b36      	ldr	r3, [pc, #216]	; (8005c44 <xTaskResumeAll+0x114>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d161      	bne.n	8005c36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b72:	4b35      	ldr	r3, [pc, #212]	; (8005c48 <xTaskResumeAll+0x118>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d05d      	beq.n	8005c36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b7a:	e02e      	b.n	8005bda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7c:	4b33      	ldr	r3, [pc, #204]	; (8005c4c <xTaskResumeAll+0x11c>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3318      	adds	r3, #24
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fd50 	bl	800562e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fd4b 	bl	800562e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <xTaskResumeAll+0x120>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	4a2a      	ldr	r2, [pc, #168]	; (8005c50 <xTaskResumeAll+0x120>)
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4a27      	ldr	r2, [pc, #156]	; (8005c54 <xTaskResumeAll+0x124>)
 8005bb8:	441a      	add	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f7ff fcd7 	bl	8005574 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bca:	4b23      	ldr	r3, [pc, #140]	; (8005c58 <xTaskResumeAll+0x128>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d302      	bcc.n	8005bda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005bd4:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <xTaskResumeAll+0x12c>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bda:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <xTaskResumeAll+0x11c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1cc      	bne.n	8005b7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005be8:	f000 fa12 	bl	8006010 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bec:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <xTaskResumeAll+0x130>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d010      	beq.n	8005c1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bf8:	f000 f836 	bl	8005c68 <xTaskIncrementTick>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c02:	4b16      	ldr	r3, [pc, #88]	; (8005c5c <xTaskResumeAll+0x12c>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f1      	bne.n	8005bf8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <xTaskResumeAll+0x130>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <xTaskResumeAll+0x12c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c22:	2301      	movs	r3, #1
 8005c24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <xTaskResumeAll+0x134>)
 8005c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c36:	f000 fbcd 	bl	80063d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000778 	.word	0x20000778
 8005c48:	20000750 	.word	0x20000750
 8005c4c:	20000710 	.word	0x20000710
 8005c50:	20000758 	.word	0x20000758
 8005c54:	20000654 	.word	0x20000654
 8005c58:	20000650 	.word	0x20000650
 8005c5c:	20000764 	.word	0x20000764
 8005c60:	20000760 	.word	0x20000760
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c72:	4b4e      	ldr	r3, [pc, #312]	; (8005dac <xTaskIncrementTick+0x144>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 808e 	bne.w	8005d98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c7c:	4b4c      	ldr	r3, [pc, #304]	; (8005db0 <xTaskIncrementTick+0x148>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c84:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <xTaskIncrementTick+0x148>)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d120      	bne.n	8005cd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c90:	4b48      	ldr	r3, [pc, #288]	; (8005db4 <xTaskIncrementTick+0x14c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	603b      	str	r3, [r7, #0]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <xTaskIncrementTick+0x46>
 8005cb0:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <xTaskIncrementTick+0x14c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	4b40      	ldr	r3, [pc, #256]	; (8005db8 <xTaskIncrementTick+0x150>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a3e      	ldr	r2, [pc, #248]	; (8005db4 <xTaskIncrementTick+0x14c>)
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4a3e      	ldr	r2, [pc, #248]	; (8005db8 <xTaskIncrementTick+0x150>)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	4b3d      	ldr	r3, [pc, #244]	; (8005dbc <xTaskIncrementTick+0x154>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	4a3c      	ldr	r2, [pc, #240]	; (8005dbc <xTaskIncrementTick+0x154>)
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	f000 f99f 	bl	8006010 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cd2:	4b3b      	ldr	r3, [pc, #236]	; (8005dc0 <xTaskIncrementTick+0x158>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d348      	bcc.n	8005d6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cdc:	4b35      	ldr	r3, [pc, #212]	; (8005db4 <xTaskIncrementTick+0x14c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d104      	bne.n	8005cf0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce6:	4b36      	ldr	r3, [pc, #216]	; (8005dc0 <xTaskIncrementTick+0x158>)
 8005ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cec:	601a      	str	r2, [r3, #0]
					break;
 8005cee:	e03e      	b.n	8005d6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf0:	4b30      	ldr	r3, [pc, #192]	; (8005db4 <xTaskIncrementTick+0x14c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d203      	bcs.n	8005d10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d08:	4a2d      	ldr	r2, [pc, #180]	; (8005dc0 <xTaskIncrementTick+0x158>)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d0e:	e02e      	b.n	8005d6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fc8a 	bl	800562e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	3318      	adds	r3, #24
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff fc81 	bl	800562e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	2201      	movs	r2, #1
 8005d32:	409a      	lsls	r2, r3
 8005d34:	4b23      	ldr	r3, [pc, #140]	; (8005dc4 <xTaskIncrementTick+0x15c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <xTaskIncrementTick+0x15c>)
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <xTaskIncrementTick+0x160>)
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f7ff fc0d 	bl	8005574 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5e:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <xTaskIncrementTick+0x164>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d3b9      	bcc.n	8005cdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6c:	e7b6      	b.n	8005cdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d6e:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <xTaskIncrementTick+0x164>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d74:	4914      	ldr	r1, [pc, #80]	; (8005dc8 <xTaskIncrementTick+0x160>)
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d901      	bls.n	8005d8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005d86:	2301      	movs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d8a:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <xTaskIncrementTick+0x168>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d92:	2301      	movs	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	e004      	b.n	8005da2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d98:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <xTaskIncrementTick+0x16c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	4a0d      	ldr	r2, [pc, #52]	; (8005dd4 <xTaskIncrementTick+0x16c>)
 8005da0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005da2:	697b      	ldr	r3, [r7, #20]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20000778 	.word	0x20000778
 8005db0:	20000754 	.word	0x20000754
 8005db4:	20000708 	.word	0x20000708
 8005db8:	2000070c 	.word	0x2000070c
 8005dbc:	20000768 	.word	0x20000768
 8005dc0:	20000770 	.word	0x20000770
 8005dc4:	20000758 	.word	0x20000758
 8005dc8:	20000654 	.word	0x20000654
 8005dcc:	20000650 	.word	0x20000650
 8005dd0:	20000764 	.word	0x20000764
 8005dd4:	20000760 	.word	0x20000760

08005dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dde:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <vTaskSwitchContext+0xac>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005de6:	4b28      	ldr	r3, [pc, #160]	; (8005e88 <vTaskSwitchContext+0xb0>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dec:	e044      	b.n	8005e78 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005dee:	4b26      	ldr	r3, [pc, #152]	; (8005e88 <vTaskSwitchContext+0xb0>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df4:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <vTaskSwitchContext+0xb4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	fab3 f383 	clz	r3, r3
 8005e00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	f1c3 031f 	rsb	r3, r3, #31
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	4921      	ldr	r1, [pc, #132]	; (8005e90 <vTaskSwitchContext+0xb8>)
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	607b      	str	r3, [r7, #4]
}
 8005e30:	bf00      	nop
 8005e32:	e7fe      	b.n	8005e32 <vTaskSwitchContext+0x5a>
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4a14      	ldr	r2, [pc, #80]	; (8005e90 <vTaskSwitchContext+0xb8>)
 8005e40:	4413      	add	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	3308      	adds	r3, #8
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d104      	bne.n	8005e64 <vTaskSwitchContext+0x8c>
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	605a      	str	r2, [r3, #4]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <vTaskSwitchContext+0xbc>)
 8005e6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e6e:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <vTaskSwitchContext+0xbc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	335c      	adds	r3, #92	; 0x5c
 8005e74:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <vTaskSwitchContext+0xc0>)
 8005e76:	6013      	str	r3, [r2, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	20000778 	.word	0x20000778
 8005e88:	20000764 	.word	0x20000764
 8005e8c:	20000758 	.word	0x20000758
 8005e90:	20000654 	.word	0x20000654
 8005e94:	20000650 	.word	0x20000650
 8005e98:	20000068 	.word	0x20000068

08005e9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ea4:	f000 f852 	bl	8005f4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <prvIdleTask+0x28>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d9f9      	bls.n	8005ea4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <prvIdleTask+0x2c>)
 8005eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ec0:	e7f0      	b.n	8005ea4 <prvIdleTask+0x8>
 8005ec2:	bf00      	nop
 8005ec4:	20000654 	.word	0x20000654
 8005ec8:	e000ed04 	.word	0xe000ed04

08005ecc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	607b      	str	r3, [r7, #4]
 8005ed6:	e00c      	b.n	8005ef2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4a12      	ldr	r2, [pc, #72]	; (8005f2c <prvInitialiseTaskLists+0x60>)
 8005ee4:	4413      	add	r3, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff fb17 	bl	800551a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	607b      	str	r3, [r7, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b06      	cmp	r3, #6
 8005ef6:	d9ef      	bls.n	8005ed8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ef8:	480d      	ldr	r0, [pc, #52]	; (8005f30 <prvInitialiseTaskLists+0x64>)
 8005efa:	f7ff fb0e 	bl	800551a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005efe:	480d      	ldr	r0, [pc, #52]	; (8005f34 <prvInitialiseTaskLists+0x68>)
 8005f00:	f7ff fb0b 	bl	800551a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f04:	480c      	ldr	r0, [pc, #48]	; (8005f38 <prvInitialiseTaskLists+0x6c>)
 8005f06:	f7ff fb08 	bl	800551a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f0a:	480c      	ldr	r0, [pc, #48]	; (8005f3c <prvInitialiseTaskLists+0x70>)
 8005f0c:	f7ff fb05 	bl	800551a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f10:	480b      	ldr	r0, [pc, #44]	; (8005f40 <prvInitialiseTaskLists+0x74>)
 8005f12:	f7ff fb02 	bl	800551a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <prvInitialiseTaskLists+0x78>)
 8005f18:	4a05      	ldr	r2, [pc, #20]	; (8005f30 <prvInitialiseTaskLists+0x64>)
 8005f1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <prvInitialiseTaskLists+0x7c>)
 8005f1e:	4a05      	ldr	r2, [pc, #20]	; (8005f34 <prvInitialiseTaskLists+0x68>)
 8005f20:	601a      	str	r2, [r3, #0]
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000654 	.word	0x20000654
 8005f30:	200006e0 	.word	0x200006e0
 8005f34:	200006f4 	.word	0x200006f4
 8005f38:	20000710 	.word	0x20000710
 8005f3c:	20000724 	.word	0x20000724
 8005f40:	2000073c 	.word	0x2000073c
 8005f44:	20000708 	.word	0x20000708
 8005f48:	2000070c 	.word	0x2000070c

08005f4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f52:	e019      	b.n	8005f88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f54:	f000 fa0e 	bl	8006374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f58:	4b10      	ldr	r3, [pc, #64]	; (8005f9c <prvCheckTasksWaitingTermination+0x50>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fb62 	bl	800562e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f6a:	4b0d      	ldr	r3, [pc, #52]	; (8005fa0 <prvCheckTasksWaitingTermination+0x54>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	4a0b      	ldr	r2, [pc, #44]	; (8005fa0 <prvCheckTasksWaitingTermination+0x54>)
 8005f72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f74:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <prvCheckTasksWaitingTermination+0x58>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <prvCheckTasksWaitingTermination+0x58>)
 8005f7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f7e:	f000 fa29 	bl	80063d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f810 	bl	8005fa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <prvCheckTasksWaitingTermination+0x58>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e1      	bne.n	8005f54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000724 	.word	0x20000724
 8005fa0:	20000750 	.word	0x20000750
 8005fa4:	20000738 	.word	0x20000738

08005fa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	335c      	adds	r3, #92	; 0x5c
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 fa51 	bl	800745c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d108      	bne.n	8005fd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fb81 	bl	80066d0 <vPortFree>
				vPortFree( pxTCB );
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fb7e 	bl	80066d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fd4:	e018      	b.n	8006008 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d103      	bne.n	8005fe8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fb75 	bl	80066d0 <vPortFree>
	}
 8005fe6:	e00f      	b.n	8006008 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d00a      	beq.n	8006008 <prvDeleteTCB+0x60>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	60fb      	str	r3, [r7, #12]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <prvDeleteTCB+0x5e>
	}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <prvResetNextTaskUnblockTime+0x38>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <prvResetNextTaskUnblockTime+0x3c>)
 8006022:	f04f 32ff 	mov.w	r2, #4294967295
 8006026:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006028:	e008      	b.n	800603c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <prvResetNextTaskUnblockTime+0x38>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <prvResetNextTaskUnblockTime+0x3c>)
 800603a:	6013      	str	r3, [r2, #0]
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	20000708 	.word	0x20000708
 800604c:	20000770 	.word	0x20000770

08006050 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800605a:	4b29      	ldr	r3, [pc, #164]	; (8006100 <prvAddCurrentTaskToDelayedList+0xb0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3304      	adds	r3, #4
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fae1 	bl	800562e <uxListRemove>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006072:	4b24      	ldr	r3, [pc, #144]	; (8006104 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	2201      	movs	r2, #1
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	43da      	mvns	r2, r3
 8006080:	4b21      	ldr	r3, [pc, #132]	; (8006108 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4013      	ands	r3, r2
 8006086:	4a20      	ldr	r2, [pc, #128]	; (8006108 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006088:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d10a      	bne.n	80060a8 <prvAddCurrentTaskToDelayedList+0x58>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006098:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <prvAddCurrentTaskToDelayedList+0xb4>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3304      	adds	r3, #4
 800609e:	4619      	mov	r1, r3
 80060a0:	481a      	ldr	r0, [pc, #104]	; (800610c <prvAddCurrentTaskToDelayedList+0xbc>)
 80060a2:	f7ff fa67 	bl	8005574 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060a6:	e026      	b.n	80060f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4413      	add	r3, r2
 80060ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060b0:	4b14      	ldr	r3, [pc, #80]	; (8006104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d209      	bcs.n	80060d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060c0:	4b13      	ldr	r3, [pc, #76]	; (8006110 <prvAddCurrentTaskToDelayedList+0xc0>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3304      	adds	r3, #4
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f7ff fa75 	bl	80055bc <vListInsert>
}
 80060d2:	e010      	b.n	80060f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d4:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3304      	adds	r3, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f7ff fa6b 	bl	80055bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060e6:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d202      	bcs.n	80060f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060f0:	4a09      	ldr	r2, [pc, #36]	; (8006118 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6013      	str	r3, [r2, #0]
}
 80060f6:	bf00      	nop
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000754 	.word	0x20000754
 8006104:	20000650 	.word	0x20000650
 8006108:	20000758 	.word	0x20000758
 800610c:	2000073c 	.word	0x2000073c
 8006110:	2000070c 	.word	0x2000070c
 8006114:	20000708 	.word	0x20000708
 8006118:	20000770 	.word	0x20000770

0800611c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3b04      	subs	r3, #4
 800612c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3b04      	subs	r3, #4
 800613a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3b04      	subs	r3, #4
 800614a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800614c:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <pxPortInitialiseStack+0x64>)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3b14      	subs	r3, #20
 8006156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3b04      	subs	r3, #4
 8006162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f06f 0202 	mvn.w	r2, #2
 800616a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3b20      	subs	r3, #32
 8006170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	08006185 	.word	0x08006185

08006184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800618e:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <prvTaskExitError+0x54>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d00a      	beq.n	80061ae <prvTaskExitError+0x2a>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	60fb      	str	r3, [r7, #12]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <prvTaskExitError+0x28>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60bb      	str	r3, [r7, #8]
}
 80061c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061c2:	bf00      	nop
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0fc      	beq.n	80061c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061ca:	bf00      	nop
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	2000000c 	.word	0x2000000c
 80061dc:	00000000 	.word	0x00000000

080061e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <pxCurrentTCBConst2>)
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	6808      	ldr	r0, [r1, #0]
 80061e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ea:	f380 8809 	msr	PSP, r0
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8811 	msr	BASEPRI, r0
 80061fa:	4770      	bx	lr
 80061fc:	f3af 8000 	nop.w

08006200 <pxCurrentTCBConst2>:
 8006200:	20000650 	.word	0x20000650
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006208:	4808      	ldr	r0, [pc, #32]	; (800622c <prvPortStartFirstTask+0x24>)
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	6800      	ldr	r0, [r0, #0]
 800620e:	f380 8808 	msr	MSP, r0
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8814 	msr	CONTROL, r0
 800621a:	b662      	cpsie	i
 800621c:	b661      	cpsie	f
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	df00      	svc	0
 8006228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800622a:	bf00      	nop
 800622c:	e000ed08 	.word	0xe000ed08

08006230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006236:	4b46      	ldr	r3, [pc, #280]	; (8006350 <xPortStartScheduler+0x120>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a46      	ldr	r2, [pc, #280]	; (8006354 <xPortStartScheduler+0x124>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10a      	bne.n	8006256 <xPortStartScheduler+0x26>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	613b      	str	r3, [r7, #16]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006256:	4b3e      	ldr	r3, [pc, #248]	; (8006350 <xPortStartScheduler+0x120>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a3f      	ldr	r2, [pc, #252]	; (8006358 <xPortStartScheduler+0x128>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d10a      	bne.n	8006276 <xPortStartScheduler+0x46>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	60fb      	str	r3, [r7, #12]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006276:	4b39      	ldr	r3, [pc, #228]	; (800635c <xPortStartScheduler+0x12c>)
 8006278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	22ff      	movs	r2, #255	; 0xff
 8006286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006298:	b2da      	uxtb	r2, r3
 800629a:	4b31      	ldr	r3, [pc, #196]	; (8006360 <xPortStartScheduler+0x130>)
 800629c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800629e:	4b31      	ldr	r3, [pc, #196]	; (8006364 <xPortStartScheduler+0x134>)
 80062a0:	2207      	movs	r2, #7
 80062a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062a4:	e009      	b.n	80062ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80062a6:	4b2f      	ldr	r3, [pc, #188]	; (8006364 <xPortStartScheduler+0x134>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	4a2d      	ldr	r2, [pc, #180]	; (8006364 <xPortStartScheduler+0x134>)
 80062ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d0ef      	beq.n	80062a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062c6:	4b27      	ldr	r3, [pc, #156]	; (8006364 <xPortStartScheduler+0x134>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f1c3 0307 	rsb	r3, r3, #7
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d00a      	beq.n	80062e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	60bb      	str	r3, [r7, #8]
}
 80062e4:	bf00      	nop
 80062e6:	e7fe      	b.n	80062e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062e8:	4b1e      	ldr	r3, [pc, #120]	; (8006364 <xPortStartScheduler+0x134>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	021b      	lsls	r3, r3, #8
 80062ee:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <xPortStartScheduler+0x134>)
 80062f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062f2:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <xPortStartScheduler+0x134>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062fa:	4a1a      	ldr	r2, [pc, #104]	; (8006364 <xPortStartScheduler+0x134>)
 80062fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006306:	4b18      	ldr	r3, [pc, #96]	; (8006368 <xPortStartScheduler+0x138>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <xPortStartScheduler+0x138>)
 800630c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006312:	4b15      	ldr	r3, [pc, #84]	; (8006368 <xPortStartScheduler+0x138>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a14      	ldr	r2, [pc, #80]	; (8006368 <xPortStartScheduler+0x138>)
 8006318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800631c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800631e:	f000 f8dd 	bl	80064dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006322:	4b12      	ldr	r3, [pc, #72]	; (800636c <xPortStartScheduler+0x13c>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006328:	f000 f8fc 	bl	8006524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800632c:	4b10      	ldr	r3, [pc, #64]	; (8006370 <xPortStartScheduler+0x140>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0f      	ldr	r2, [pc, #60]	; (8006370 <xPortStartScheduler+0x140>)
 8006332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006338:	f7ff ff66 	bl	8006208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800633c:	f7ff fd4c 	bl	8005dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8006340:	f7ff ff20 	bl	8006184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	e000ed00 	.word	0xe000ed00
 8006354:	410fc271 	.word	0x410fc271
 8006358:	410fc270 	.word	0x410fc270
 800635c:	e000e400 	.word	0xe000e400
 8006360:	2000077c 	.word	0x2000077c
 8006364:	20000780 	.word	0x20000780
 8006368:	e000ed20 	.word	0xe000ed20
 800636c:	2000000c 	.word	0x2000000c
 8006370:	e000ef34 	.word	0xe000ef34

08006374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	607b      	str	r3, [r7, #4]
}
 800638c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800638e:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <vPortEnterCritical+0x58>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	4a0d      	ldr	r2, [pc, #52]	; (80063cc <vPortEnterCritical+0x58>)
 8006396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <vPortEnterCritical+0x58>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d10f      	bne.n	80063c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <vPortEnterCritical+0x5c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	603b      	str	r3, [r7, #0]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <vPortEnterCritical+0x4a>
	}
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	2000000c 	.word	0x2000000c
 80063d0:	e000ed04 	.word	0xe000ed04

080063d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063da:	4b12      	ldr	r3, [pc, #72]	; (8006424 <vPortExitCritical+0x50>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <vPortExitCritical+0x24>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	607b      	str	r3, [r7, #4]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063f8:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <vPortExitCritical+0x50>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	4a09      	ldr	r2, [pc, #36]	; (8006424 <vPortExitCritical+0x50>)
 8006400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <vPortExitCritical+0x50>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <vPortExitCritical+0x42>
 800640a:	2300      	movs	r3, #0
 800640c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	2000000c 	.word	0x2000000c
	...

08006430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006430:	f3ef 8009 	mrs	r0, PSP
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	4b15      	ldr	r3, [pc, #84]	; (8006490 <pxCurrentTCBConst>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	f01e 0f10 	tst.w	lr, #16
 8006440:	bf08      	it	eq
 8006442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644a:	6010      	str	r0, [r2, #0]
 800644c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006454:	f380 8811 	msr	BASEPRI, r0
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f7ff fcba 	bl	8005dd8 <vTaskSwitchContext>
 8006464:	f04f 0000 	mov.w	r0, #0
 8006468:	f380 8811 	msr	BASEPRI, r0
 800646c:	bc09      	pop	{r0, r3}
 800646e:	6819      	ldr	r1, [r3, #0]
 8006470:	6808      	ldr	r0, [r1, #0]
 8006472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006476:	f01e 0f10 	tst.w	lr, #16
 800647a:	bf08      	it	eq
 800647c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006480:	f380 8809 	msr	PSP, r0
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	f3af 8000 	nop.w

08006490 <pxCurrentTCBConst>:
 8006490:	20000650 	.word	0x20000650
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop

08006498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	607b      	str	r3, [r7, #4]
}
 80064b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064b2:	f7ff fbd9 	bl	8005c68 <xTaskIncrementTick>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <SysTick_Handler+0x40>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	2300      	movs	r3, #0
 80064c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f383 8811 	msr	BASEPRI, r3
}
 80064ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	e000ed04 	.word	0xe000ed04

080064dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064e0:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <vPortSetupTimerInterrupt+0x34>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064e6:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <vPortSetupTimerInterrupt+0x38>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <vPortSetupTimerInterrupt+0x3c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a0a      	ldr	r2, [pc, #40]	; (800651c <vPortSetupTimerInterrupt+0x40>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	099b      	lsrs	r3, r3, #6
 80064f8:	4a09      	ldr	r2, [pc, #36]	; (8006520 <vPortSetupTimerInterrupt+0x44>)
 80064fa:	3b01      	subs	r3, #1
 80064fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064fe:	4b04      	ldr	r3, [pc, #16]	; (8006510 <vPortSetupTimerInterrupt+0x34>)
 8006500:	2207      	movs	r2, #7
 8006502:	601a      	str	r2, [r3, #0]
}
 8006504:	bf00      	nop
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	e000e010 	.word	0xe000e010
 8006514:	e000e018 	.word	0xe000e018
 8006518:	20000000 	.word	0x20000000
 800651c:	10624dd3 	.word	0x10624dd3
 8006520:	e000e014 	.word	0xe000e014

08006524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006534 <vPortEnableVFP+0x10>
 8006528:	6801      	ldr	r1, [r0, #0]
 800652a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800652e:	6001      	str	r1, [r0, #0]
 8006530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006532:	bf00      	nop
 8006534:	e000ed88 	.word	0xe000ed88

08006538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	; 0x28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006544:	f7ff fae6 	bl	8005b14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006548:	4b5b      	ldr	r3, [pc, #364]	; (80066b8 <pvPortMalloc+0x180>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006550:	f000 f920 	bl	8006794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006554:	4b59      	ldr	r3, [pc, #356]	; (80066bc <pvPortMalloc+0x184>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	f040 8093 	bne.w	8006688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01d      	beq.n	80065a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006568:	2208      	movs	r2, #8
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4413      	add	r3, r2
 800656e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	2b00      	cmp	r3, #0
 8006578:	d014      	beq.n	80065a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f023 0307 	bic.w	r3, r3, #7
 8006580:	3308      	adds	r3, #8
 8006582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <pvPortMalloc+0x6c>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	617b      	str	r3, [r7, #20]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d06e      	beq.n	8006688 <pvPortMalloc+0x150>
 80065aa:	4b45      	ldr	r3, [pc, #276]	; (80066c0 <pvPortMalloc+0x188>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d869      	bhi.n	8006688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065b4:	4b43      	ldr	r3, [pc, #268]	; (80066c4 <pvPortMalloc+0x18c>)
 80065b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065b8:	4b42      	ldr	r3, [pc, #264]	; (80066c4 <pvPortMalloc+0x18c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065be:	e004      	b.n	80065ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d903      	bls.n	80065dc <pvPortMalloc+0xa4>
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1f1      	bne.n	80065c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065dc:	4b36      	ldr	r3, [pc, #216]	; (80066b8 <pvPortMalloc+0x180>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d050      	beq.n	8006688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2208      	movs	r2, #8
 80065ec:	4413      	add	r3, r2
 80065ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	2308      	movs	r3, #8
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	429a      	cmp	r2, r3
 8006606:	d91f      	bls.n	8006648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <pvPortMalloc+0xf8>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	613b      	str	r3, [r7, #16]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	1ad2      	subs	r2, r2, r3
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006642:	69b8      	ldr	r0, [r7, #24]
 8006644:	f000 f908 	bl	8006858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006648:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <pvPortMalloc+0x188>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	4a1b      	ldr	r2, [pc, #108]	; (80066c0 <pvPortMalloc+0x188>)
 8006654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006656:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <pvPortMalloc+0x188>)
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <pvPortMalloc+0x190>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d203      	bcs.n	800666a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006662:	4b17      	ldr	r3, [pc, #92]	; (80066c0 <pvPortMalloc+0x188>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <pvPortMalloc+0x190>)
 8006668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	4b13      	ldr	r3, [pc, #76]	; (80066bc <pvPortMalloc+0x184>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	431a      	orrs	r2, r3
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800667e:	4b13      	ldr	r3, [pc, #76]	; (80066cc <pvPortMalloc+0x194>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	4a11      	ldr	r2, [pc, #68]	; (80066cc <pvPortMalloc+0x194>)
 8006686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006688:	f7ff fa52 	bl	8005b30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <pvPortMalloc+0x174>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60fb      	str	r3, [r7, #12]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <pvPortMalloc+0x172>
	return pvReturn;
 80066ac:	69fb      	ldr	r3, [r7, #28]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3728      	adds	r7, #40	; 0x28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	2000438c 	.word	0x2000438c
 80066bc:	200043a0 	.word	0x200043a0
 80066c0:	20004390 	.word	0x20004390
 80066c4:	20004384 	.word	0x20004384
 80066c8:	20004394 	.word	0x20004394
 80066cc:	20004398 	.word	0x20004398

080066d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d04d      	beq.n	800677e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066e2:	2308      	movs	r3, #8
 80066e4:	425b      	negs	r3, r3
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4413      	add	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	4b24      	ldr	r3, [pc, #144]	; (8006788 <vPortFree+0xb8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4013      	ands	r3, r2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <vPortFree+0x44>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60fb      	str	r3, [r7, #12]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <vPortFree+0x62>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	60bb      	str	r3, [r7, #8]
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <vPortFree+0xb8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01e      	beq.n	800677e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d11a      	bne.n	800677e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <vPortFree+0xb8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	43db      	mvns	r3, r3
 8006752:	401a      	ands	r2, r3
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006758:	f7ff f9dc 	bl	8005b14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	4b0a      	ldr	r3, [pc, #40]	; (800678c <vPortFree+0xbc>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4413      	add	r3, r2
 8006766:	4a09      	ldr	r2, [pc, #36]	; (800678c <vPortFree+0xbc>)
 8006768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800676a:	6938      	ldr	r0, [r7, #16]
 800676c:	f000 f874 	bl	8006858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <vPortFree+0xc0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	4a06      	ldr	r2, [pc, #24]	; (8006790 <vPortFree+0xc0>)
 8006778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800677a:	f7ff f9d9 	bl	8005b30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800677e:	bf00      	nop
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200043a0 	.word	0x200043a0
 800678c:	20004390 	.word	0x20004390
 8006790:	2000439c 	.word	0x2000439c

08006794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800679a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800679e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067a0:	4b27      	ldr	r3, [pc, #156]	; (8006840 <prvHeapInit+0xac>)
 80067a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00c      	beq.n	80067c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3307      	adds	r3, #7
 80067b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	4a1f      	ldr	r2, [pc, #124]	; (8006840 <prvHeapInit+0xac>)
 80067c4:	4413      	add	r3, r2
 80067c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067cc:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <prvHeapInit+0xb0>)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067d2:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <prvHeapInit+0xb0>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	4413      	add	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067e0:	2208      	movs	r2, #8
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0307 	bic.w	r3, r3, #7
 80067ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a15      	ldr	r2, [pc, #84]	; (8006848 <prvHeapInit+0xb4>)
 80067f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067f6:	4b14      	ldr	r3, [pc, #80]	; (8006848 <prvHeapInit+0xb4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2200      	movs	r2, #0
 80067fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067fe:	4b12      	ldr	r3, [pc, #72]	; (8006848 <prvHeapInit+0xb4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	1ad2      	subs	r2, r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006814:	4b0c      	ldr	r3, [pc, #48]	; (8006848 <prvHeapInit+0xb4>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	4a0a      	ldr	r2, [pc, #40]	; (800684c <prvHeapInit+0xb8>)
 8006822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	4a09      	ldr	r2, [pc, #36]	; (8006850 <prvHeapInit+0xbc>)
 800682a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <prvHeapInit+0xc0>)
 800682e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006832:	601a      	str	r2, [r3, #0]
}
 8006834:	bf00      	nop
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	20000784 	.word	0x20000784
 8006844:	20004384 	.word	0x20004384
 8006848:	2000438c 	.word	0x2000438c
 800684c:	20004394 	.word	0x20004394
 8006850:	20004390 	.word	0x20004390
 8006854:	200043a0 	.word	0x200043a0

08006858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006860:	4b28      	ldr	r3, [pc, #160]	; (8006904 <prvInsertBlockIntoFreeList+0xac>)
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e002      	b.n	800686c <prvInsertBlockIntoFreeList+0x14>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	429a      	cmp	r2, r3
 8006874:	d8f7      	bhi.n	8006866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4413      	add	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d108      	bne.n	800689a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	441a      	add	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	441a      	add	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d118      	bne.n	80068e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <prvInsertBlockIntoFreeList+0xb0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d00d      	beq.n	80068d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	441a      	add	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	e008      	b.n	80068e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <prvInsertBlockIntoFreeList+0xb0>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	e003      	b.n	80068e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d002      	beq.n	80068f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20004384 	.word	0x20004384
 8006908:	2000438c 	.word	0x2000438c

0800690c <__cvt>:
 800690c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	ec55 4b10 	vmov	r4, r5, d0
 8006914:	2d00      	cmp	r5, #0
 8006916:	460e      	mov	r6, r1
 8006918:	4619      	mov	r1, r3
 800691a:	462b      	mov	r3, r5
 800691c:	bfbb      	ittet	lt
 800691e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006922:	461d      	movlt	r5, r3
 8006924:	2300      	movge	r3, #0
 8006926:	232d      	movlt	r3, #45	; 0x2d
 8006928:	700b      	strb	r3, [r1, #0]
 800692a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800692c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006930:	4691      	mov	r9, r2
 8006932:	f023 0820 	bic.w	r8, r3, #32
 8006936:	bfbc      	itt	lt
 8006938:	4622      	movlt	r2, r4
 800693a:	4614      	movlt	r4, r2
 800693c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006940:	d005      	beq.n	800694e <__cvt+0x42>
 8006942:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006946:	d100      	bne.n	800694a <__cvt+0x3e>
 8006948:	3601      	adds	r6, #1
 800694a:	2102      	movs	r1, #2
 800694c:	e000      	b.n	8006950 <__cvt+0x44>
 800694e:	2103      	movs	r1, #3
 8006950:	ab03      	add	r3, sp, #12
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	ab02      	add	r3, sp, #8
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	ec45 4b10 	vmov	d0, r4, r5
 800695c:	4653      	mov	r3, sl
 800695e:	4632      	mov	r2, r6
 8006960:	f000 fece 	bl	8007700 <_dtoa_r>
 8006964:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006968:	4607      	mov	r7, r0
 800696a:	d102      	bne.n	8006972 <__cvt+0x66>
 800696c:	f019 0f01 	tst.w	r9, #1
 8006970:	d022      	beq.n	80069b8 <__cvt+0xac>
 8006972:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006976:	eb07 0906 	add.w	r9, r7, r6
 800697a:	d110      	bne.n	800699e <__cvt+0x92>
 800697c:	783b      	ldrb	r3, [r7, #0]
 800697e:	2b30      	cmp	r3, #48	; 0x30
 8006980:	d10a      	bne.n	8006998 <__cvt+0x8c>
 8006982:	2200      	movs	r2, #0
 8006984:	2300      	movs	r3, #0
 8006986:	4620      	mov	r0, r4
 8006988:	4629      	mov	r1, r5
 800698a:	f7fa f8a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800698e:	b918      	cbnz	r0, 8006998 <__cvt+0x8c>
 8006990:	f1c6 0601 	rsb	r6, r6, #1
 8006994:	f8ca 6000 	str.w	r6, [sl]
 8006998:	f8da 3000 	ldr.w	r3, [sl]
 800699c:	4499      	add	r9, r3
 800699e:	2200      	movs	r2, #0
 80069a0:	2300      	movs	r3, #0
 80069a2:	4620      	mov	r0, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	f7fa f897 	bl	8000ad8 <__aeabi_dcmpeq>
 80069aa:	b108      	cbz	r0, 80069b0 <__cvt+0xa4>
 80069ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80069b0:	2230      	movs	r2, #48	; 0x30
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	454b      	cmp	r3, r9
 80069b6:	d307      	bcc.n	80069c8 <__cvt+0xbc>
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069bc:	1bdb      	subs	r3, r3, r7
 80069be:	4638      	mov	r0, r7
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	b004      	add	sp, #16
 80069c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c8:	1c59      	adds	r1, r3, #1
 80069ca:	9103      	str	r1, [sp, #12]
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e7f0      	b.n	80069b2 <__cvt+0xa6>

080069d0 <__exponent>:
 80069d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069d2:	4603      	mov	r3, r0
 80069d4:	2900      	cmp	r1, #0
 80069d6:	bfb8      	it	lt
 80069d8:	4249      	neglt	r1, r1
 80069da:	f803 2b02 	strb.w	r2, [r3], #2
 80069de:	bfb4      	ite	lt
 80069e0:	222d      	movlt	r2, #45	; 0x2d
 80069e2:	222b      	movge	r2, #43	; 0x2b
 80069e4:	2909      	cmp	r1, #9
 80069e6:	7042      	strb	r2, [r0, #1]
 80069e8:	dd2a      	ble.n	8006a40 <__exponent+0x70>
 80069ea:	f10d 0207 	add.w	r2, sp, #7
 80069ee:	4617      	mov	r7, r2
 80069f0:	260a      	movs	r6, #10
 80069f2:	4694      	mov	ip, r2
 80069f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80069f8:	fb06 1415 	mls	r4, r6, r5, r1
 80069fc:	3430      	adds	r4, #48	; 0x30
 80069fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a02:	460c      	mov	r4, r1
 8006a04:	2c63      	cmp	r4, #99	; 0x63
 8006a06:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	dcf1      	bgt.n	80069f2 <__exponent+0x22>
 8006a0e:	3130      	adds	r1, #48	; 0x30
 8006a10:	f1ac 0402 	sub.w	r4, ip, #2
 8006a14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a18:	1c41      	adds	r1, r0, #1
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	42ba      	cmp	r2, r7
 8006a1e:	d30a      	bcc.n	8006a36 <__exponent+0x66>
 8006a20:	f10d 0209 	add.w	r2, sp, #9
 8006a24:	eba2 020c 	sub.w	r2, r2, ip
 8006a28:	42bc      	cmp	r4, r7
 8006a2a:	bf88      	it	hi
 8006a2c:	2200      	movhi	r2, #0
 8006a2e:	4413      	add	r3, r2
 8006a30:	1a18      	subs	r0, r3, r0
 8006a32:	b003      	add	sp, #12
 8006a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a36:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006a3a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006a3e:	e7ed      	b.n	8006a1c <__exponent+0x4c>
 8006a40:	2330      	movs	r3, #48	; 0x30
 8006a42:	3130      	adds	r1, #48	; 0x30
 8006a44:	7083      	strb	r3, [r0, #2]
 8006a46:	70c1      	strb	r1, [r0, #3]
 8006a48:	1d03      	adds	r3, r0, #4
 8006a4a:	e7f1      	b.n	8006a30 <__exponent+0x60>

08006a4c <_printf_float>:
 8006a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a50:	ed2d 8b02 	vpush	{d8}
 8006a54:	b08d      	sub	sp, #52	; 0x34
 8006a56:	460c      	mov	r4, r1
 8006a58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	461f      	mov	r7, r3
 8006a60:	4605      	mov	r5, r0
 8006a62:	f000 fce7 	bl	8007434 <_localeconv_r>
 8006a66:	f8d0 a000 	ldr.w	sl, [r0]
 8006a6a:	4650      	mov	r0, sl
 8006a6c:	f7f9 fc08 	bl	8000280 <strlen>
 8006a70:	2300      	movs	r3, #0
 8006a72:	930a      	str	r3, [sp, #40]	; 0x28
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	9305      	str	r3, [sp, #20]
 8006a78:	f8d8 3000 	ldr.w	r3, [r8]
 8006a7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a80:	3307      	adds	r3, #7
 8006a82:	f023 0307 	bic.w	r3, r3, #7
 8006a86:	f103 0208 	add.w	r2, r3, #8
 8006a8a:	f8c8 2000 	str.w	r2, [r8]
 8006a8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a96:	9307      	str	r3, [sp, #28]
 8006a98:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a9c:	ee08 0a10 	vmov	s16, r0
 8006aa0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006aa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aa8:	4b9e      	ldr	r3, [pc, #632]	; (8006d24 <_printf_float+0x2d8>)
 8006aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006aae:	f7fa f845 	bl	8000b3c <__aeabi_dcmpun>
 8006ab2:	bb88      	cbnz	r0, 8006b18 <_printf_float+0xcc>
 8006ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ab8:	4b9a      	ldr	r3, [pc, #616]	; (8006d24 <_printf_float+0x2d8>)
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295
 8006abe:	f7fa f81f 	bl	8000b00 <__aeabi_dcmple>
 8006ac2:	bb48      	cbnz	r0, 8006b18 <_printf_float+0xcc>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7fa f80e 	bl	8000aec <__aeabi_dcmplt>
 8006ad0:	b110      	cbz	r0, 8006ad8 <_printf_float+0x8c>
 8006ad2:	232d      	movs	r3, #45	; 0x2d
 8006ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ad8:	4a93      	ldr	r2, [pc, #588]	; (8006d28 <_printf_float+0x2dc>)
 8006ada:	4b94      	ldr	r3, [pc, #592]	; (8006d2c <_printf_float+0x2e0>)
 8006adc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ae0:	bf94      	ite	ls
 8006ae2:	4690      	movls	r8, r2
 8006ae4:	4698      	movhi	r8, r3
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	6123      	str	r3, [r4, #16]
 8006aea:	9b05      	ldr	r3, [sp, #20]
 8006aec:	f023 0304 	bic.w	r3, r3, #4
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	f04f 0900 	mov.w	r9, #0
 8006af6:	9700      	str	r7, [sp, #0]
 8006af8:	4633      	mov	r3, r6
 8006afa:	aa0b      	add	r2, sp, #44	; 0x2c
 8006afc:	4621      	mov	r1, r4
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 f9da 	bl	8006eb8 <_printf_common>
 8006b04:	3001      	adds	r0, #1
 8006b06:	f040 8090 	bne.w	8006c2a <_printf_float+0x1de>
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0e:	b00d      	add	sp, #52	; 0x34
 8006b10:	ecbd 8b02 	vpop	{d8}
 8006b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	4649      	mov	r1, r9
 8006b20:	f7fa f80c 	bl	8000b3c <__aeabi_dcmpun>
 8006b24:	b140      	cbz	r0, 8006b38 <_printf_float+0xec>
 8006b26:	464b      	mov	r3, r9
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bfbc      	itt	lt
 8006b2c:	232d      	movlt	r3, #45	; 0x2d
 8006b2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b32:	4a7f      	ldr	r2, [pc, #508]	; (8006d30 <_printf_float+0x2e4>)
 8006b34:	4b7f      	ldr	r3, [pc, #508]	; (8006d34 <_printf_float+0x2e8>)
 8006b36:	e7d1      	b.n	8006adc <_printf_float+0x90>
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b3e:	9206      	str	r2, [sp, #24]
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	d13f      	bne.n	8006bc4 <_printf_float+0x178>
 8006b44:	2306      	movs	r3, #6
 8006b46:	6063      	str	r3, [r4, #4]
 8006b48:	9b05      	ldr	r3, [sp, #20]
 8006b4a:	6861      	ldr	r1, [r4, #4]
 8006b4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b50:	2300      	movs	r3, #0
 8006b52:	9303      	str	r3, [sp, #12]
 8006b54:	ab0a      	add	r3, sp, #40	; 0x28
 8006b56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b5a:	ab09      	add	r3, sp, #36	; 0x24
 8006b5c:	ec49 8b10 	vmov	d0, r8, r9
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	6022      	str	r2, [r4, #0]
 8006b64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f7ff fecf 	bl	800690c <__cvt>
 8006b6e:	9b06      	ldr	r3, [sp, #24]
 8006b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b72:	2b47      	cmp	r3, #71	; 0x47
 8006b74:	4680      	mov	r8, r0
 8006b76:	d108      	bne.n	8006b8a <_printf_float+0x13e>
 8006b78:	1cc8      	adds	r0, r1, #3
 8006b7a:	db02      	blt.n	8006b82 <_printf_float+0x136>
 8006b7c:	6863      	ldr	r3, [r4, #4]
 8006b7e:	4299      	cmp	r1, r3
 8006b80:	dd41      	ble.n	8006c06 <_printf_float+0x1ba>
 8006b82:	f1ab 0302 	sub.w	r3, fp, #2
 8006b86:	fa5f fb83 	uxtb.w	fp, r3
 8006b8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b8e:	d820      	bhi.n	8006bd2 <_printf_float+0x186>
 8006b90:	3901      	subs	r1, #1
 8006b92:	465a      	mov	r2, fp
 8006b94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b98:	9109      	str	r1, [sp, #36]	; 0x24
 8006b9a:	f7ff ff19 	bl	80069d0 <__exponent>
 8006b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ba0:	1813      	adds	r3, r2, r0
 8006ba2:	2a01      	cmp	r2, #1
 8006ba4:	4681      	mov	r9, r0
 8006ba6:	6123      	str	r3, [r4, #16]
 8006ba8:	dc02      	bgt.n	8006bb0 <_printf_float+0x164>
 8006baa:	6822      	ldr	r2, [r4, #0]
 8006bac:	07d2      	lsls	r2, r2, #31
 8006bae:	d501      	bpl.n	8006bb4 <_printf_float+0x168>
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d09c      	beq.n	8006af6 <_printf_float+0xaa>
 8006bbc:	232d      	movs	r3, #45	; 0x2d
 8006bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc2:	e798      	b.n	8006af6 <_printf_float+0xaa>
 8006bc4:	9a06      	ldr	r2, [sp, #24]
 8006bc6:	2a47      	cmp	r2, #71	; 0x47
 8006bc8:	d1be      	bne.n	8006b48 <_printf_float+0xfc>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1bc      	bne.n	8006b48 <_printf_float+0xfc>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e7b9      	b.n	8006b46 <_printf_float+0xfa>
 8006bd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bd6:	d118      	bne.n	8006c0a <_printf_float+0x1be>
 8006bd8:	2900      	cmp	r1, #0
 8006bda:	6863      	ldr	r3, [r4, #4]
 8006bdc:	dd0b      	ble.n	8006bf6 <_printf_float+0x1aa>
 8006bde:	6121      	str	r1, [r4, #16]
 8006be0:	b913      	cbnz	r3, 8006be8 <_printf_float+0x19c>
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	07d0      	lsls	r0, r2, #31
 8006be6:	d502      	bpl.n	8006bee <_printf_float+0x1a2>
 8006be8:	3301      	adds	r3, #1
 8006bea:	440b      	add	r3, r1
 8006bec:	6123      	str	r3, [r4, #16]
 8006bee:	65a1      	str	r1, [r4, #88]	; 0x58
 8006bf0:	f04f 0900 	mov.w	r9, #0
 8006bf4:	e7de      	b.n	8006bb4 <_printf_float+0x168>
 8006bf6:	b913      	cbnz	r3, 8006bfe <_printf_float+0x1b2>
 8006bf8:	6822      	ldr	r2, [r4, #0]
 8006bfa:	07d2      	lsls	r2, r2, #31
 8006bfc:	d501      	bpl.n	8006c02 <_printf_float+0x1b6>
 8006bfe:	3302      	adds	r3, #2
 8006c00:	e7f4      	b.n	8006bec <_printf_float+0x1a0>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e7f2      	b.n	8006bec <_printf_float+0x1a0>
 8006c06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0c:	4299      	cmp	r1, r3
 8006c0e:	db05      	blt.n	8006c1c <_printf_float+0x1d0>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	6121      	str	r1, [r4, #16]
 8006c14:	07d8      	lsls	r0, r3, #31
 8006c16:	d5ea      	bpl.n	8006bee <_printf_float+0x1a2>
 8006c18:	1c4b      	adds	r3, r1, #1
 8006c1a:	e7e7      	b.n	8006bec <_printf_float+0x1a0>
 8006c1c:	2900      	cmp	r1, #0
 8006c1e:	bfd4      	ite	le
 8006c20:	f1c1 0202 	rsble	r2, r1, #2
 8006c24:	2201      	movgt	r2, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	e7e0      	b.n	8006bec <_printf_float+0x1a0>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	055a      	lsls	r2, r3, #21
 8006c2e:	d407      	bmi.n	8006c40 <_printf_float+0x1f4>
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	4642      	mov	r2, r8
 8006c34:	4631      	mov	r1, r6
 8006c36:	4628      	mov	r0, r5
 8006c38:	47b8      	blx	r7
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d12c      	bne.n	8006c98 <_printf_float+0x24c>
 8006c3e:	e764      	b.n	8006b0a <_printf_float+0xbe>
 8006c40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c44:	f240 80e0 	bls.w	8006e08 <_printf_float+0x3bc>
 8006c48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f7f9 ff42 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d034      	beq.n	8006cc2 <_printf_float+0x276>
 8006c58:	4a37      	ldr	r2, [pc, #220]	; (8006d38 <_printf_float+0x2ec>)
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	47b8      	blx	r7
 8006c62:	3001      	adds	r0, #1
 8006c64:	f43f af51 	beq.w	8006b0a <_printf_float+0xbe>
 8006c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	db02      	blt.n	8006c76 <_printf_float+0x22a>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	07d8      	lsls	r0, r3, #31
 8006c74:	d510      	bpl.n	8006c98 <_printf_float+0x24c>
 8006c76:	ee18 3a10 	vmov	r3, s16
 8006c7a:	4652      	mov	r2, sl
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b8      	blx	r7
 8006c82:	3001      	adds	r0, #1
 8006c84:	f43f af41 	beq.w	8006b0a <_printf_float+0xbe>
 8006c88:	f04f 0800 	mov.w	r8, #0
 8006c8c:	f104 091a 	add.w	r9, r4, #26
 8006c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c92:	3b01      	subs	r3, #1
 8006c94:	4543      	cmp	r3, r8
 8006c96:	dc09      	bgt.n	8006cac <_printf_float+0x260>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	079b      	lsls	r3, r3, #30
 8006c9c:	f100 8107 	bmi.w	8006eae <_printf_float+0x462>
 8006ca0:	68e0      	ldr	r0, [r4, #12]
 8006ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ca4:	4298      	cmp	r0, r3
 8006ca6:	bfb8      	it	lt
 8006ca8:	4618      	movlt	r0, r3
 8006caa:	e730      	b.n	8006b0e <_printf_float+0xc2>
 8006cac:	2301      	movs	r3, #1
 8006cae:	464a      	mov	r2, r9
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b8      	blx	r7
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	f43f af27 	beq.w	8006b0a <_printf_float+0xbe>
 8006cbc:	f108 0801 	add.w	r8, r8, #1
 8006cc0:	e7e6      	b.n	8006c90 <_printf_float+0x244>
 8006cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dc39      	bgt.n	8006d3c <_printf_float+0x2f0>
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <_printf_float+0x2ec>)
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4628      	mov	r0, r5
 8006cd0:	47b8      	blx	r7
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	f43f af19 	beq.w	8006b0a <_printf_float+0xbe>
 8006cd8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	d102      	bne.n	8006ce6 <_printf_float+0x29a>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	07d9      	lsls	r1, r3, #31
 8006ce4:	d5d8      	bpl.n	8006c98 <_printf_float+0x24c>
 8006ce6:	ee18 3a10 	vmov	r3, s16
 8006cea:	4652      	mov	r2, sl
 8006cec:	4631      	mov	r1, r6
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b8      	blx	r7
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	f43f af09 	beq.w	8006b0a <_printf_float+0xbe>
 8006cf8:	f04f 0900 	mov.w	r9, #0
 8006cfc:	f104 0a1a 	add.w	sl, r4, #26
 8006d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d02:	425b      	negs	r3, r3
 8006d04:	454b      	cmp	r3, r9
 8006d06:	dc01      	bgt.n	8006d0c <_printf_float+0x2c0>
 8006d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d0a:	e792      	b.n	8006c32 <_printf_float+0x1e6>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4652      	mov	r2, sl
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f aef7 	beq.w	8006b0a <_printf_float+0xbe>
 8006d1c:	f109 0901 	add.w	r9, r9, #1
 8006d20:	e7ee      	b.n	8006d00 <_printf_float+0x2b4>
 8006d22:	bf00      	nop
 8006d24:	7fefffff 	.word	0x7fefffff
 8006d28:	080097cc 	.word	0x080097cc
 8006d2c:	080097d0 	.word	0x080097d0
 8006d30:	080097d4 	.word	0x080097d4
 8006d34:	080097d8 	.word	0x080097d8
 8006d38:	080097dc 	.word	0x080097dc
 8006d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d40:	429a      	cmp	r2, r3
 8006d42:	bfa8      	it	ge
 8006d44:	461a      	movge	r2, r3
 8006d46:	2a00      	cmp	r2, #0
 8006d48:	4691      	mov	r9, r2
 8006d4a:	dc37      	bgt.n	8006dbc <_printf_float+0x370>
 8006d4c:	f04f 0b00 	mov.w	fp, #0
 8006d50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d54:	f104 021a 	add.w	r2, r4, #26
 8006d58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	eba3 0309 	sub.w	r3, r3, r9
 8006d60:	455b      	cmp	r3, fp
 8006d62:	dc33      	bgt.n	8006dcc <_printf_float+0x380>
 8006d64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	db3b      	blt.n	8006de4 <_printf_float+0x398>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	07da      	lsls	r2, r3, #31
 8006d70:	d438      	bmi.n	8006de4 <_printf_float+0x398>
 8006d72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d76:	eba2 0903 	sub.w	r9, r2, r3
 8006d7a:	9b05      	ldr	r3, [sp, #20]
 8006d7c:	1ad2      	subs	r2, r2, r3
 8006d7e:	4591      	cmp	r9, r2
 8006d80:	bfa8      	it	ge
 8006d82:	4691      	movge	r9, r2
 8006d84:	f1b9 0f00 	cmp.w	r9, #0
 8006d88:	dc35      	bgt.n	8006df6 <_printf_float+0x3aa>
 8006d8a:	f04f 0800 	mov.w	r8, #0
 8006d8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d92:	f104 0a1a 	add.w	sl, r4, #26
 8006d96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	eba3 0309 	sub.w	r3, r3, r9
 8006da0:	4543      	cmp	r3, r8
 8006da2:	f77f af79 	ble.w	8006c98 <_printf_float+0x24c>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4652      	mov	r2, sl
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f aeaa 	beq.w	8006b0a <_printf_float+0xbe>
 8006db6:	f108 0801 	add.w	r8, r8, #1
 8006dba:	e7ec      	b.n	8006d96 <_printf_float+0x34a>
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	47b8      	blx	r7
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d1c0      	bne.n	8006d4c <_printf_float+0x300>
 8006dca:	e69e      	b.n	8006b0a <_printf_float+0xbe>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	9205      	str	r2, [sp, #20]
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	f43f ae97 	beq.w	8006b0a <_printf_float+0xbe>
 8006ddc:	9a05      	ldr	r2, [sp, #20]
 8006dde:	f10b 0b01 	add.w	fp, fp, #1
 8006de2:	e7b9      	b.n	8006d58 <_printf_float+0x30c>
 8006de4:	ee18 3a10 	vmov	r3, s16
 8006de8:	4652      	mov	r2, sl
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	d1be      	bne.n	8006d72 <_printf_float+0x326>
 8006df4:	e689      	b.n	8006b0a <_printf_float+0xbe>
 8006df6:	9a05      	ldr	r2, [sp, #20]
 8006df8:	464b      	mov	r3, r9
 8006dfa:	4442      	add	r2, r8
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	d1c1      	bne.n	8006d8a <_printf_float+0x33e>
 8006e06:	e680      	b.n	8006b0a <_printf_float+0xbe>
 8006e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e0a:	2a01      	cmp	r2, #1
 8006e0c:	dc01      	bgt.n	8006e12 <_printf_float+0x3c6>
 8006e0e:	07db      	lsls	r3, r3, #31
 8006e10:	d53a      	bpl.n	8006e88 <_printf_float+0x43c>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4642      	mov	r2, r8
 8006e16:	4631      	mov	r1, r6
 8006e18:	4628      	mov	r0, r5
 8006e1a:	47b8      	blx	r7
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	f43f ae74 	beq.w	8006b0a <_printf_float+0xbe>
 8006e22:	ee18 3a10 	vmov	r3, s16
 8006e26:	4652      	mov	r2, sl
 8006e28:	4631      	mov	r1, r6
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	47b8      	blx	r7
 8006e2e:	3001      	adds	r0, #1
 8006e30:	f43f ae6b 	beq.w	8006b0a <_printf_float+0xbe>
 8006e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006e40:	f7f9 fe4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e44:	b9d8      	cbnz	r0, 8006e7e <_printf_float+0x432>
 8006e46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006e4a:	f108 0201 	add.w	r2, r8, #1
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d10e      	bne.n	8006e76 <_printf_float+0x42a>
 8006e58:	e657      	b.n	8006b0a <_printf_float+0xbe>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4652      	mov	r2, sl
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	f43f ae50 	beq.w	8006b0a <_printf_float+0xbe>
 8006e6a:	f108 0801 	add.w	r8, r8, #1
 8006e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e70:	3b01      	subs	r3, #1
 8006e72:	4543      	cmp	r3, r8
 8006e74:	dcf1      	bgt.n	8006e5a <_printf_float+0x40e>
 8006e76:	464b      	mov	r3, r9
 8006e78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e7c:	e6da      	b.n	8006c34 <_printf_float+0x1e8>
 8006e7e:	f04f 0800 	mov.w	r8, #0
 8006e82:	f104 0a1a 	add.w	sl, r4, #26
 8006e86:	e7f2      	b.n	8006e6e <_printf_float+0x422>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	e7df      	b.n	8006e4e <_printf_float+0x402>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	464a      	mov	r2, r9
 8006e92:	4631      	mov	r1, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b8      	blx	r7
 8006e98:	3001      	adds	r0, #1
 8006e9a:	f43f ae36 	beq.w	8006b0a <_printf_float+0xbe>
 8006e9e:	f108 0801 	add.w	r8, r8, #1
 8006ea2:	68e3      	ldr	r3, [r4, #12]
 8006ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ea6:	1a5b      	subs	r3, r3, r1
 8006ea8:	4543      	cmp	r3, r8
 8006eaa:	dcf0      	bgt.n	8006e8e <_printf_float+0x442>
 8006eac:	e6f8      	b.n	8006ca0 <_printf_float+0x254>
 8006eae:	f04f 0800 	mov.w	r8, #0
 8006eb2:	f104 0919 	add.w	r9, r4, #25
 8006eb6:	e7f4      	b.n	8006ea2 <_printf_float+0x456>

08006eb8 <_printf_common>:
 8006eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	4699      	mov	r9, r3
 8006ec0:	688a      	ldr	r2, [r1, #8]
 8006ec2:	690b      	ldr	r3, [r1, #16]
 8006ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	bfb8      	it	lt
 8006ecc:	4613      	movlt	r3, r2
 8006ece:	6033      	str	r3, [r6, #0]
 8006ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	b10a      	cbz	r2, 8006ede <_printf_common+0x26>
 8006eda:	3301      	adds	r3, #1
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	0699      	lsls	r1, r3, #26
 8006ee2:	bf42      	ittt	mi
 8006ee4:	6833      	ldrmi	r3, [r6, #0]
 8006ee6:	3302      	addmi	r3, #2
 8006ee8:	6033      	strmi	r3, [r6, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	f015 0506 	ands.w	r5, r5, #6
 8006ef0:	d106      	bne.n	8006f00 <_printf_common+0x48>
 8006ef2:	f104 0a19 	add.w	sl, r4, #25
 8006ef6:	68e3      	ldr	r3, [r4, #12]
 8006ef8:	6832      	ldr	r2, [r6, #0]
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	dc26      	bgt.n	8006f4e <_printf_common+0x96>
 8006f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f04:	1e13      	subs	r3, r2, #0
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	bf18      	it	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	0692      	lsls	r2, r2, #26
 8006f0e:	d42b      	bmi.n	8006f68 <_printf_common+0xb0>
 8006f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f14:	4649      	mov	r1, r9
 8006f16:	4638      	mov	r0, r7
 8006f18:	47c0      	blx	r8
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d01e      	beq.n	8006f5c <_printf_common+0xa4>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	6922      	ldr	r2, [r4, #16]
 8006f22:	f003 0306 	and.w	r3, r3, #6
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	bf02      	ittt	eq
 8006f2a:	68e5      	ldreq	r5, [r4, #12]
 8006f2c:	6833      	ldreq	r3, [r6, #0]
 8006f2e:	1aed      	subeq	r5, r5, r3
 8006f30:	68a3      	ldr	r3, [r4, #8]
 8006f32:	bf0c      	ite	eq
 8006f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f38:	2500      	movne	r5, #0
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	bfc4      	itt	gt
 8006f3e:	1a9b      	subgt	r3, r3, r2
 8006f40:	18ed      	addgt	r5, r5, r3
 8006f42:	2600      	movs	r6, #0
 8006f44:	341a      	adds	r4, #26
 8006f46:	42b5      	cmp	r5, r6
 8006f48:	d11a      	bne.n	8006f80 <_printf_common+0xc8>
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	e008      	b.n	8006f60 <_printf_common+0xa8>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4652      	mov	r2, sl
 8006f52:	4649      	mov	r1, r9
 8006f54:	4638      	mov	r0, r7
 8006f56:	47c0      	blx	r8
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d103      	bne.n	8006f64 <_printf_common+0xac>
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f64:	3501      	adds	r5, #1
 8006f66:	e7c6      	b.n	8006ef6 <_printf_common+0x3e>
 8006f68:	18e1      	adds	r1, r4, r3
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	2030      	movs	r0, #48	; 0x30
 8006f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f72:	4422      	add	r2, r4
 8006f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	e7c7      	b.n	8006f10 <_printf_common+0x58>
 8006f80:	2301      	movs	r3, #1
 8006f82:	4622      	mov	r2, r4
 8006f84:	4649      	mov	r1, r9
 8006f86:	4638      	mov	r0, r7
 8006f88:	47c0      	blx	r8
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d0e6      	beq.n	8006f5c <_printf_common+0xa4>
 8006f8e:	3601      	adds	r6, #1
 8006f90:	e7d9      	b.n	8006f46 <_printf_common+0x8e>
	...

08006f94 <_printf_i>:
 8006f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f98:	7e0f      	ldrb	r7, [r1, #24]
 8006f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f9c:	2f78      	cmp	r7, #120	; 0x78
 8006f9e:	4691      	mov	r9, r2
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	469a      	mov	sl, r3
 8006fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006faa:	d807      	bhi.n	8006fbc <_printf_i+0x28>
 8006fac:	2f62      	cmp	r7, #98	; 0x62
 8006fae:	d80a      	bhi.n	8006fc6 <_printf_i+0x32>
 8006fb0:	2f00      	cmp	r7, #0
 8006fb2:	f000 80d4 	beq.w	800715e <_printf_i+0x1ca>
 8006fb6:	2f58      	cmp	r7, #88	; 0x58
 8006fb8:	f000 80c0 	beq.w	800713c <_printf_i+0x1a8>
 8006fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fc4:	e03a      	b.n	800703c <_printf_i+0xa8>
 8006fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fca:	2b15      	cmp	r3, #21
 8006fcc:	d8f6      	bhi.n	8006fbc <_printf_i+0x28>
 8006fce:	a101      	add	r1, pc, #4	; (adr r1, 8006fd4 <_printf_i+0x40>)
 8006fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd4:	0800702d 	.word	0x0800702d
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08006fbd 	.word	0x08006fbd
 8006fe0:	08006fbd 	.word	0x08006fbd
 8006fe4:	08006fbd 	.word	0x08006fbd
 8006fe8:	08006fbd 	.word	0x08006fbd
 8006fec:	08007041 	.word	0x08007041
 8006ff0:	08006fbd 	.word	0x08006fbd
 8006ff4:	08006fbd 	.word	0x08006fbd
 8006ff8:	08006fbd 	.word	0x08006fbd
 8006ffc:	08006fbd 	.word	0x08006fbd
 8007000:	08007145 	.word	0x08007145
 8007004:	0800706d 	.word	0x0800706d
 8007008:	080070ff 	.word	0x080070ff
 800700c:	08006fbd 	.word	0x08006fbd
 8007010:	08006fbd 	.word	0x08006fbd
 8007014:	08007167 	.word	0x08007167
 8007018:	08006fbd 	.word	0x08006fbd
 800701c:	0800706d 	.word	0x0800706d
 8007020:	08006fbd 	.word	0x08006fbd
 8007024:	08006fbd 	.word	0x08006fbd
 8007028:	08007107 	.word	0x08007107
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	1d1a      	adds	r2, r3, #4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	602a      	str	r2, [r5, #0]
 8007034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800703c:	2301      	movs	r3, #1
 800703e:	e09f      	b.n	8007180 <_printf_i+0x1ec>
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	682b      	ldr	r3, [r5, #0]
 8007044:	0607      	lsls	r7, r0, #24
 8007046:	f103 0104 	add.w	r1, r3, #4
 800704a:	6029      	str	r1, [r5, #0]
 800704c:	d501      	bpl.n	8007052 <_printf_i+0xbe>
 800704e:	681e      	ldr	r6, [r3, #0]
 8007050:	e003      	b.n	800705a <_printf_i+0xc6>
 8007052:	0646      	lsls	r6, r0, #25
 8007054:	d5fb      	bpl.n	800704e <_printf_i+0xba>
 8007056:	f9b3 6000 	ldrsh.w	r6, [r3]
 800705a:	2e00      	cmp	r6, #0
 800705c:	da03      	bge.n	8007066 <_printf_i+0xd2>
 800705e:	232d      	movs	r3, #45	; 0x2d
 8007060:	4276      	negs	r6, r6
 8007062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007066:	485a      	ldr	r0, [pc, #360]	; (80071d0 <_printf_i+0x23c>)
 8007068:	230a      	movs	r3, #10
 800706a:	e012      	b.n	8007092 <_printf_i+0xfe>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	6820      	ldr	r0, [r4, #0]
 8007070:	1d19      	adds	r1, r3, #4
 8007072:	6029      	str	r1, [r5, #0]
 8007074:	0605      	lsls	r5, r0, #24
 8007076:	d501      	bpl.n	800707c <_printf_i+0xe8>
 8007078:	681e      	ldr	r6, [r3, #0]
 800707a:	e002      	b.n	8007082 <_printf_i+0xee>
 800707c:	0641      	lsls	r1, r0, #25
 800707e:	d5fb      	bpl.n	8007078 <_printf_i+0xe4>
 8007080:	881e      	ldrh	r6, [r3, #0]
 8007082:	4853      	ldr	r0, [pc, #332]	; (80071d0 <_printf_i+0x23c>)
 8007084:	2f6f      	cmp	r7, #111	; 0x6f
 8007086:	bf0c      	ite	eq
 8007088:	2308      	moveq	r3, #8
 800708a:	230a      	movne	r3, #10
 800708c:	2100      	movs	r1, #0
 800708e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007092:	6865      	ldr	r5, [r4, #4]
 8007094:	60a5      	str	r5, [r4, #8]
 8007096:	2d00      	cmp	r5, #0
 8007098:	bfa2      	ittt	ge
 800709a:	6821      	ldrge	r1, [r4, #0]
 800709c:	f021 0104 	bicge.w	r1, r1, #4
 80070a0:	6021      	strge	r1, [r4, #0]
 80070a2:	b90e      	cbnz	r6, 80070a8 <_printf_i+0x114>
 80070a4:	2d00      	cmp	r5, #0
 80070a6:	d04b      	beq.n	8007140 <_printf_i+0x1ac>
 80070a8:	4615      	mov	r5, r2
 80070aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80070ae:	fb03 6711 	mls	r7, r3, r1, r6
 80070b2:	5dc7      	ldrb	r7, [r0, r7]
 80070b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070b8:	4637      	mov	r7, r6
 80070ba:	42bb      	cmp	r3, r7
 80070bc:	460e      	mov	r6, r1
 80070be:	d9f4      	bls.n	80070aa <_printf_i+0x116>
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d10b      	bne.n	80070dc <_printf_i+0x148>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	07de      	lsls	r6, r3, #31
 80070c8:	d508      	bpl.n	80070dc <_printf_i+0x148>
 80070ca:	6923      	ldr	r3, [r4, #16]
 80070cc:	6861      	ldr	r1, [r4, #4]
 80070ce:	4299      	cmp	r1, r3
 80070d0:	bfde      	ittt	le
 80070d2:	2330      	movle	r3, #48	; 0x30
 80070d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070dc:	1b52      	subs	r2, r2, r5
 80070de:	6122      	str	r2, [r4, #16]
 80070e0:	f8cd a000 	str.w	sl, [sp]
 80070e4:	464b      	mov	r3, r9
 80070e6:	aa03      	add	r2, sp, #12
 80070e8:	4621      	mov	r1, r4
 80070ea:	4640      	mov	r0, r8
 80070ec:	f7ff fee4 	bl	8006eb8 <_printf_common>
 80070f0:	3001      	adds	r0, #1
 80070f2:	d14a      	bne.n	800718a <_printf_i+0x1f6>
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	b004      	add	sp, #16
 80070fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	f043 0320 	orr.w	r3, r3, #32
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	4833      	ldr	r0, [pc, #204]	; (80071d4 <_printf_i+0x240>)
 8007108:	2778      	movs	r7, #120	; 0x78
 800710a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	6829      	ldr	r1, [r5, #0]
 8007112:	061f      	lsls	r7, r3, #24
 8007114:	f851 6b04 	ldr.w	r6, [r1], #4
 8007118:	d402      	bmi.n	8007120 <_printf_i+0x18c>
 800711a:	065f      	lsls	r7, r3, #25
 800711c:	bf48      	it	mi
 800711e:	b2b6      	uxthmi	r6, r6
 8007120:	07df      	lsls	r7, r3, #31
 8007122:	bf48      	it	mi
 8007124:	f043 0320 	orrmi.w	r3, r3, #32
 8007128:	6029      	str	r1, [r5, #0]
 800712a:	bf48      	it	mi
 800712c:	6023      	strmi	r3, [r4, #0]
 800712e:	b91e      	cbnz	r6, 8007138 <_printf_i+0x1a4>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	f023 0320 	bic.w	r3, r3, #32
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	2310      	movs	r3, #16
 800713a:	e7a7      	b.n	800708c <_printf_i+0xf8>
 800713c:	4824      	ldr	r0, [pc, #144]	; (80071d0 <_printf_i+0x23c>)
 800713e:	e7e4      	b.n	800710a <_printf_i+0x176>
 8007140:	4615      	mov	r5, r2
 8007142:	e7bd      	b.n	80070c0 <_printf_i+0x12c>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	6826      	ldr	r6, [r4, #0]
 8007148:	6961      	ldr	r1, [r4, #20]
 800714a:	1d18      	adds	r0, r3, #4
 800714c:	6028      	str	r0, [r5, #0]
 800714e:	0635      	lsls	r5, r6, #24
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	d501      	bpl.n	8007158 <_printf_i+0x1c4>
 8007154:	6019      	str	r1, [r3, #0]
 8007156:	e002      	b.n	800715e <_printf_i+0x1ca>
 8007158:	0670      	lsls	r0, r6, #25
 800715a:	d5fb      	bpl.n	8007154 <_printf_i+0x1c0>
 800715c:	8019      	strh	r1, [r3, #0]
 800715e:	2300      	movs	r3, #0
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	4615      	mov	r5, r2
 8007164:	e7bc      	b.n	80070e0 <_printf_i+0x14c>
 8007166:	682b      	ldr	r3, [r5, #0]
 8007168:	1d1a      	adds	r2, r3, #4
 800716a:	602a      	str	r2, [r5, #0]
 800716c:	681d      	ldr	r5, [r3, #0]
 800716e:	6862      	ldr	r2, [r4, #4]
 8007170:	2100      	movs	r1, #0
 8007172:	4628      	mov	r0, r5
 8007174:	f7f9 f834 	bl	80001e0 <memchr>
 8007178:	b108      	cbz	r0, 800717e <_printf_i+0x1ea>
 800717a:	1b40      	subs	r0, r0, r5
 800717c:	6060      	str	r0, [r4, #4]
 800717e:	6863      	ldr	r3, [r4, #4]
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	2300      	movs	r3, #0
 8007184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007188:	e7aa      	b.n	80070e0 <_printf_i+0x14c>
 800718a:	6923      	ldr	r3, [r4, #16]
 800718c:	462a      	mov	r2, r5
 800718e:	4649      	mov	r1, r9
 8007190:	4640      	mov	r0, r8
 8007192:	47d0      	blx	sl
 8007194:	3001      	adds	r0, #1
 8007196:	d0ad      	beq.n	80070f4 <_printf_i+0x160>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	079b      	lsls	r3, r3, #30
 800719c:	d413      	bmi.n	80071c6 <_printf_i+0x232>
 800719e:	68e0      	ldr	r0, [r4, #12]
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	4298      	cmp	r0, r3
 80071a4:	bfb8      	it	lt
 80071a6:	4618      	movlt	r0, r3
 80071a8:	e7a6      	b.n	80070f8 <_printf_i+0x164>
 80071aa:	2301      	movs	r3, #1
 80071ac:	4632      	mov	r2, r6
 80071ae:	4649      	mov	r1, r9
 80071b0:	4640      	mov	r0, r8
 80071b2:	47d0      	blx	sl
 80071b4:	3001      	adds	r0, #1
 80071b6:	d09d      	beq.n	80070f4 <_printf_i+0x160>
 80071b8:	3501      	adds	r5, #1
 80071ba:	68e3      	ldr	r3, [r4, #12]
 80071bc:	9903      	ldr	r1, [sp, #12]
 80071be:	1a5b      	subs	r3, r3, r1
 80071c0:	42ab      	cmp	r3, r5
 80071c2:	dcf2      	bgt.n	80071aa <_printf_i+0x216>
 80071c4:	e7eb      	b.n	800719e <_printf_i+0x20a>
 80071c6:	2500      	movs	r5, #0
 80071c8:	f104 0619 	add.w	r6, r4, #25
 80071cc:	e7f5      	b.n	80071ba <_printf_i+0x226>
 80071ce:	bf00      	nop
 80071d0:	080097de 	.word	0x080097de
 80071d4:	080097ef 	.word	0x080097ef

080071d8 <std>:
 80071d8:	2300      	movs	r3, #0
 80071da:	b510      	push	{r4, lr}
 80071dc:	4604      	mov	r4, r0
 80071de:	e9c0 3300 	strd	r3, r3, [r0]
 80071e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071e6:	6083      	str	r3, [r0, #8]
 80071e8:	8181      	strh	r1, [r0, #12]
 80071ea:	6643      	str	r3, [r0, #100]	; 0x64
 80071ec:	81c2      	strh	r2, [r0, #14]
 80071ee:	6183      	str	r3, [r0, #24]
 80071f0:	4619      	mov	r1, r3
 80071f2:	2208      	movs	r2, #8
 80071f4:	305c      	adds	r0, #92	; 0x5c
 80071f6:	f000 f914 	bl	8007422 <memset>
 80071fa:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <std+0x58>)
 80071fc:	6263      	str	r3, [r4, #36]	; 0x24
 80071fe:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <std+0x5c>)
 8007200:	62a3      	str	r3, [r4, #40]	; 0x28
 8007202:	4b0d      	ldr	r3, [pc, #52]	; (8007238 <std+0x60>)
 8007204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <std+0x64>)
 8007208:	6323      	str	r3, [r4, #48]	; 0x30
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <std+0x68>)
 800720c:	6224      	str	r4, [r4, #32]
 800720e:	429c      	cmp	r4, r3
 8007210:	d006      	beq.n	8007220 <std+0x48>
 8007212:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007216:	4294      	cmp	r4, r2
 8007218:	d002      	beq.n	8007220 <std+0x48>
 800721a:	33d0      	adds	r3, #208	; 0xd0
 800721c:	429c      	cmp	r4, r3
 800721e:	d105      	bne.n	800722c <std+0x54>
 8007220:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007228:	f000 b9ce 	b.w	80075c8 <__retarget_lock_init_recursive>
 800722c:	bd10      	pop	{r4, pc}
 800722e:	bf00      	nop
 8007230:	0800739d 	.word	0x0800739d
 8007234:	080073bf 	.word	0x080073bf
 8007238:	080073f7 	.word	0x080073f7
 800723c:	0800741b 	.word	0x0800741b
 8007240:	200043a4 	.word	0x200043a4

08007244 <stdio_exit_handler>:
 8007244:	4a02      	ldr	r2, [pc, #8]	; (8007250 <stdio_exit_handler+0xc>)
 8007246:	4903      	ldr	r1, [pc, #12]	; (8007254 <stdio_exit_handler+0x10>)
 8007248:	4803      	ldr	r0, [pc, #12]	; (8007258 <stdio_exit_handler+0x14>)
 800724a:	f000 b869 	b.w	8007320 <_fwalk_sglue>
 800724e:	bf00      	nop
 8007250:	20000010 	.word	0x20000010
 8007254:	08008f99 	.word	0x08008f99
 8007258:	2000001c 	.word	0x2000001c

0800725c <cleanup_stdio>:
 800725c:	6841      	ldr	r1, [r0, #4]
 800725e:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <cleanup_stdio+0x34>)
 8007260:	4299      	cmp	r1, r3
 8007262:	b510      	push	{r4, lr}
 8007264:	4604      	mov	r4, r0
 8007266:	d001      	beq.n	800726c <cleanup_stdio+0x10>
 8007268:	f001 fe96 	bl	8008f98 <_fflush_r>
 800726c:	68a1      	ldr	r1, [r4, #8]
 800726e:	4b09      	ldr	r3, [pc, #36]	; (8007294 <cleanup_stdio+0x38>)
 8007270:	4299      	cmp	r1, r3
 8007272:	d002      	beq.n	800727a <cleanup_stdio+0x1e>
 8007274:	4620      	mov	r0, r4
 8007276:	f001 fe8f 	bl	8008f98 <_fflush_r>
 800727a:	68e1      	ldr	r1, [r4, #12]
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <cleanup_stdio+0x3c>)
 800727e:	4299      	cmp	r1, r3
 8007280:	d004      	beq.n	800728c <cleanup_stdio+0x30>
 8007282:	4620      	mov	r0, r4
 8007284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007288:	f001 be86 	b.w	8008f98 <_fflush_r>
 800728c:	bd10      	pop	{r4, pc}
 800728e:	bf00      	nop
 8007290:	200043a4 	.word	0x200043a4
 8007294:	2000440c 	.word	0x2000440c
 8007298:	20004474 	.word	0x20004474

0800729c <global_stdio_init.part.0>:
 800729c:	b510      	push	{r4, lr}
 800729e:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <global_stdio_init.part.0+0x30>)
 80072a0:	4c0b      	ldr	r4, [pc, #44]	; (80072d0 <global_stdio_init.part.0+0x34>)
 80072a2:	4a0c      	ldr	r2, [pc, #48]	; (80072d4 <global_stdio_init.part.0+0x38>)
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	4620      	mov	r0, r4
 80072a8:	2200      	movs	r2, #0
 80072aa:	2104      	movs	r1, #4
 80072ac:	f7ff ff94 	bl	80071d8 <std>
 80072b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072b4:	2201      	movs	r2, #1
 80072b6:	2109      	movs	r1, #9
 80072b8:	f7ff ff8e 	bl	80071d8 <std>
 80072bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072c0:	2202      	movs	r2, #2
 80072c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c6:	2112      	movs	r1, #18
 80072c8:	f7ff bf86 	b.w	80071d8 <std>
 80072cc:	200044dc 	.word	0x200044dc
 80072d0:	200043a4 	.word	0x200043a4
 80072d4:	08007245 	.word	0x08007245

080072d8 <__sfp_lock_acquire>:
 80072d8:	4801      	ldr	r0, [pc, #4]	; (80072e0 <__sfp_lock_acquire+0x8>)
 80072da:	f000 b976 	b.w	80075ca <__retarget_lock_acquire_recursive>
 80072de:	bf00      	nop
 80072e0:	200044e5 	.word	0x200044e5

080072e4 <__sfp_lock_release>:
 80072e4:	4801      	ldr	r0, [pc, #4]	; (80072ec <__sfp_lock_release+0x8>)
 80072e6:	f000 b971 	b.w	80075cc <__retarget_lock_release_recursive>
 80072ea:	bf00      	nop
 80072ec:	200044e5 	.word	0x200044e5

080072f0 <__sinit>:
 80072f0:	b510      	push	{r4, lr}
 80072f2:	4604      	mov	r4, r0
 80072f4:	f7ff fff0 	bl	80072d8 <__sfp_lock_acquire>
 80072f8:	6a23      	ldr	r3, [r4, #32]
 80072fa:	b11b      	cbz	r3, 8007304 <__sinit+0x14>
 80072fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007300:	f7ff bff0 	b.w	80072e4 <__sfp_lock_release>
 8007304:	4b04      	ldr	r3, [pc, #16]	; (8007318 <__sinit+0x28>)
 8007306:	6223      	str	r3, [r4, #32]
 8007308:	4b04      	ldr	r3, [pc, #16]	; (800731c <__sinit+0x2c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1f5      	bne.n	80072fc <__sinit+0xc>
 8007310:	f7ff ffc4 	bl	800729c <global_stdio_init.part.0>
 8007314:	e7f2      	b.n	80072fc <__sinit+0xc>
 8007316:	bf00      	nop
 8007318:	0800725d 	.word	0x0800725d
 800731c:	200044dc 	.word	0x200044dc

08007320 <_fwalk_sglue>:
 8007320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007324:	4607      	mov	r7, r0
 8007326:	4688      	mov	r8, r1
 8007328:	4614      	mov	r4, r2
 800732a:	2600      	movs	r6, #0
 800732c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007330:	f1b9 0901 	subs.w	r9, r9, #1
 8007334:	d505      	bpl.n	8007342 <_fwalk_sglue+0x22>
 8007336:	6824      	ldr	r4, [r4, #0]
 8007338:	2c00      	cmp	r4, #0
 800733a:	d1f7      	bne.n	800732c <_fwalk_sglue+0xc>
 800733c:	4630      	mov	r0, r6
 800733e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007342:	89ab      	ldrh	r3, [r5, #12]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d907      	bls.n	8007358 <_fwalk_sglue+0x38>
 8007348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800734c:	3301      	adds	r3, #1
 800734e:	d003      	beq.n	8007358 <_fwalk_sglue+0x38>
 8007350:	4629      	mov	r1, r5
 8007352:	4638      	mov	r0, r7
 8007354:	47c0      	blx	r8
 8007356:	4306      	orrs	r6, r0
 8007358:	3568      	adds	r5, #104	; 0x68
 800735a:	e7e9      	b.n	8007330 <_fwalk_sglue+0x10>

0800735c <siprintf>:
 800735c:	b40e      	push	{r1, r2, r3}
 800735e:	b500      	push	{lr}
 8007360:	b09c      	sub	sp, #112	; 0x70
 8007362:	ab1d      	add	r3, sp, #116	; 0x74
 8007364:	9002      	str	r0, [sp, #8]
 8007366:	9006      	str	r0, [sp, #24]
 8007368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800736c:	4809      	ldr	r0, [pc, #36]	; (8007394 <siprintf+0x38>)
 800736e:	9107      	str	r1, [sp, #28]
 8007370:	9104      	str	r1, [sp, #16]
 8007372:	4909      	ldr	r1, [pc, #36]	; (8007398 <siprintf+0x3c>)
 8007374:	f853 2b04 	ldr.w	r2, [r3], #4
 8007378:	9105      	str	r1, [sp, #20]
 800737a:	6800      	ldr	r0, [r0, #0]
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	a902      	add	r1, sp, #8
 8007380:	f001 fc86 	bl	8008c90 <_svfiprintf_r>
 8007384:	9b02      	ldr	r3, [sp, #8]
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	b01c      	add	sp, #112	; 0x70
 800738c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007390:	b003      	add	sp, #12
 8007392:	4770      	bx	lr
 8007394:	20000068 	.word	0x20000068
 8007398:	ffff0208 	.word	0xffff0208

0800739c <__sread>:
 800739c:	b510      	push	{r4, lr}
 800739e:	460c      	mov	r4, r1
 80073a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a4:	f000 f8c2 	bl	800752c <_read_r>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	bfab      	itete	ge
 80073ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ae:	89a3      	ldrhlt	r3, [r4, #12]
 80073b0:	181b      	addge	r3, r3, r0
 80073b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073b6:	bfac      	ite	ge
 80073b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ba:	81a3      	strhlt	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__swrite>:
 80073be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c2:	461f      	mov	r7, r3
 80073c4:	898b      	ldrh	r3, [r1, #12]
 80073c6:	05db      	lsls	r3, r3, #23
 80073c8:	4605      	mov	r5, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	4616      	mov	r6, r2
 80073ce:	d505      	bpl.n	80073dc <__swrite+0x1e>
 80073d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d4:	2302      	movs	r3, #2
 80073d6:	2200      	movs	r2, #0
 80073d8:	f000 f896 	bl	8007508 <_lseek_r>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	4632      	mov	r2, r6
 80073ea:	463b      	mov	r3, r7
 80073ec:	4628      	mov	r0, r5
 80073ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	f000 b8ad 	b.w	8007550 <_write_r>

080073f6 <__sseek>:
 80073f6:	b510      	push	{r4, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073fe:	f000 f883 	bl	8007508 <_lseek_r>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	bf15      	itete	ne
 8007408:	6560      	strne	r0, [r4, #84]	; 0x54
 800740a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800740e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007412:	81a3      	strheq	r3, [r4, #12]
 8007414:	bf18      	it	ne
 8007416:	81a3      	strhne	r3, [r4, #12]
 8007418:	bd10      	pop	{r4, pc}

0800741a <__sclose>:
 800741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741e:	f000 b80d 	b.w	800743c <_close_r>

08007422 <memset>:
 8007422:	4402      	add	r2, r0
 8007424:	4603      	mov	r3, r0
 8007426:	4293      	cmp	r3, r2
 8007428:	d100      	bne.n	800742c <memset+0xa>
 800742a:	4770      	bx	lr
 800742c:	f803 1b01 	strb.w	r1, [r3], #1
 8007430:	e7f9      	b.n	8007426 <memset+0x4>
	...

08007434 <_localeconv_r>:
 8007434:	4800      	ldr	r0, [pc, #0]	; (8007438 <_localeconv_r+0x4>)
 8007436:	4770      	bx	lr
 8007438:	2000015c 	.word	0x2000015c

0800743c <_close_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	; (8007458 <_close_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7fa fc01 	bl	8001c4e <_close>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_close_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_close_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	200044e0 	.word	0x200044e0

0800745c <_reclaim_reent>:
 800745c:	4b29      	ldr	r3, [pc, #164]	; (8007504 <_reclaim_reent+0xa8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4283      	cmp	r3, r0
 8007462:	b570      	push	{r4, r5, r6, lr}
 8007464:	4604      	mov	r4, r0
 8007466:	d04b      	beq.n	8007500 <_reclaim_reent+0xa4>
 8007468:	69c3      	ldr	r3, [r0, #28]
 800746a:	b143      	cbz	r3, 800747e <_reclaim_reent+0x22>
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d144      	bne.n	80074fc <_reclaim_reent+0xa0>
 8007472:	69e3      	ldr	r3, [r4, #28]
 8007474:	6819      	ldr	r1, [r3, #0]
 8007476:	b111      	cbz	r1, 800747e <_reclaim_reent+0x22>
 8007478:	4620      	mov	r0, r4
 800747a:	f000 ff33 	bl	80082e4 <_free_r>
 800747e:	6961      	ldr	r1, [r4, #20]
 8007480:	b111      	cbz	r1, 8007488 <_reclaim_reent+0x2c>
 8007482:	4620      	mov	r0, r4
 8007484:	f000 ff2e 	bl	80082e4 <_free_r>
 8007488:	69e1      	ldr	r1, [r4, #28]
 800748a:	b111      	cbz	r1, 8007492 <_reclaim_reent+0x36>
 800748c:	4620      	mov	r0, r4
 800748e:	f000 ff29 	bl	80082e4 <_free_r>
 8007492:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007494:	b111      	cbz	r1, 800749c <_reclaim_reent+0x40>
 8007496:	4620      	mov	r0, r4
 8007498:	f000 ff24 	bl	80082e4 <_free_r>
 800749c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800749e:	b111      	cbz	r1, 80074a6 <_reclaim_reent+0x4a>
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 ff1f 	bl	80082e4 <_free_r>
 80074a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80074a8:	b111      	cbz	r1, 80074b0 <_reclaim_reent+0x54>
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 ff1a 	bl	80082e4 <_free_r>
 80074b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80074b2:	b111      	cbz	r1, 80074ba <_reclaim_reent+0x5e>
 80074b4:	4620      	mov	r0, r4
 80074b6:	f000 ff15 	bl	80082e4 <_free_r>
 80074ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80074bc:	b111      	cbz	r1, 80074c4 <_reclaim_reent+0x68>
 80074be:	4620      	mov	r0, r4
 80074c0:	f000 ff10 	bl	80082e4 <_free_r>
 80074c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80074c6:	b111      	cbz	r1, 80074ce <_reclaim_reent+0x72>
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 ff0b 	bl	80082e4 <_free_r>
 80074ce:	6a23      	ldr	r3, [r4, #32]
 80074d0:	b1b3      	cbz	r3, 8007500 <_reclaim_reent+0xa4>
 80074d2:	4620      	mov	r0, r4
 80074d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80074d8:	4718      	bx	r3
 80074da:	5949      	ldr	r1, [r1, r5]
 80074dc:	b941      	cbnz	r1, 80074f0 <_reclaim_reent+0x94>
 80074de:	3504      	adds	r5, #4
 80074e0:	69e3      	ldr	r3, [r4, #28]
 80074e2:	2d80      	cmp	r5, #128	; 0x80
 80074e4:	68d9      	ldr	r1, [r3, #12]
 80074e6:	d1f8      	bne.n	80074da <_reclaim_reent+0x7e>
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fefb 	bl	80082e4 <_free_r>
 80074ee:	e7c0      	b.n	8007472 <_reclaim_reent+0x16>
 80074f0:	680e      	ldr	r6, [r1, #0]
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 fef6 	bl	80082e4 <_free_r>
 80074f8:	4631      	mov	r1, r6
 80074fa:	e7ef      	b.n	80074dc <_reclaim_reent+0x80>
 80074fc:	2500      	movs	r5, #0
 80074fe:	e7ef      	b.n	80074e0 <_reclaim_reent+0x84>
 8007500:	bd70      	pop	{r4, r5, r6, pc}
 8007502:	bf00      	nop
 8007504:	20000068 	.word	0x20000068

08007508 <_lseek_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d07      	ldr	r5, [pc, #28]	; (8007528 <_lseek_r+0x20>)
 800750c:	4604      	mov	r4, r0
 800750e:	4608      	mov	r0, r1
 8007510:	4611      	mov	r1, r2
 8007512:	2200      	movs	r2, #0
 8007514:	602a      	str	r2, [r5, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	f7fa fbc0 	bl	8001c9c <_lseek>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_lseek_r+0x1e>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	b103      	cbz	r3, 8007526 <_lseek_r+0x1e>
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	200044e0 	.word	0x200044e0

0800752c <_read_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d07      	ldr	r5, [pc, #28]	; (800754c <_read_r+0x20>)
 8007530:	4604      	mov	r4, r0
 8007532:	4608      	mov	r0, r1
 8007534:	4611      	mov	r1, r2
 8007536:	2200      	movs	r2, #0
 8007538:	602a      	str	r2, [r5, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	f7fa fb4e 	bl	8001bdc <_read>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_read_r+0x1e>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_read_r+0x1e>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	200044e0 	.word	0x200044e0

08007550 <_write_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d07      	ldr	r5, [pc, #28]	; (8007570 <_write_r+0x20>)
 8007554:	4604      	mov	r4, r0
 8007556:	4608      	mov	r0, r1
 8007558:	4611      	mov	r1, r2
 800755a:	2200      	movs	r2, #0
 800755c:	602a      	str	r2, [r5, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f7fa fb59 	bl	8001c16 <_write>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_write_r+0x1e>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_write_r+0x1e>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	200044e0 	.word	0x200044e0

08007574 <__errno>:
 8007574:	4b01      	ldr	r3, [pc, #4]	; (800757c <__errno+0x8>)
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	20000068 	.word	0x20000068

08007580 <__libc_init_array>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	4d0d      	ldr	r5, [pc, #52]	; (80075b8 <__libc_init_array+0x38>)
 8007584:	4c0d      	ldr	r4, [pc, #52]	; (80075bc <__libc_init_array+0x3c>)
 8007586:	1b64      	subs	r4, r4, r5
 8007588:	10a4      	asrs	r4, r4, #2
 800758a:	2600      	movs	r6, #0
 800758c:	42a6      	cmp	r6, r4
 800758e:	d109      	bne.n	80075a4 <__libc_init_array+0x24>
 8007590:	4d0b      	ldr	r5, [pc, #44]	; (80075c0 <__libc_init_array+0x40>)
 8007592:	4c0c      	ldr	r4, [pc, #48]	; (80075c4 <__libc_init_array+0x44>)
 8007594:	f002 f896 	bl	80096c4 <_init>
 8007598:	1b64      	subs	r4, r4, r5
 800759a:	10a4      	asrs	r4, r4, #2
 800759c:	2600      	movs	r6, #0
 800759e:	42a6      	cmp	r6, r4
 80075a0:	d105      	bne.n	80075ae <__libc_init_array+0x2e>
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a8:	4798      	blx	r3
 80075aa:	3601      	adds	r6, #1
 80075ac:	e7ee      	b.n	800758c <__libc_init_array+0xc>
 80075ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b2:	4798      	blx	r3
 80075b4:	3601      	adds	r6, #1
 80075b6:	e7f2      	b.n	800759e <__libc_init_array+0x1e>
 80075b8:	08009b44 	.word	0x08009b44
 80075bc:	08009b44 	.word	0x08009b44
 80075c0:	08009b44 	.word	0x08009b44
 80075c4:	08009b48 	.word	0x08009b48

080075c8 <__retarget_lock_init_recursive>:
 80075c8:	4770      	bx	lr

080075ca <__retarget_lock_acquire_recursive>:
 80075ca:	4770      	bx	lr

080075cc <__retarget_lock_release_recursive>:
 80075cc:	4770      	bx	lr

080075ce <memcpy>:
 80075ce:	440a      	add	r2, r1
 80075d0:	4291      	cmp	r1, r2
 80075d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80075d6:	d100      	bne.n	80075da <memcpy+0xc>
 80075d8:	4770      	bx	lr
 80075da:	b510      	push	{r4, lr}
 80075dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e4:	4291      	cmp	r1, r2
 80075e6:	d1f9      	bne.n	80075dc <memcpy+0xe>
 80075e8:	bd10      	pop	{r4, pc}

080075ea <quorem>:
 80075ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ee:	6903      	ldr	r3, [r0, #16]
 80075f0:	690c      	ldr	r4, [r1, #16]
 80075f2:	42a3      	cmp	r3, r4
 80075f4:	4607      	mov	r7, r0
 80075f6:	db7e      	blt.n	80076f6 <quorem+0x10c>
 80075f8:	3c01      	subs	r4, #1
 80075fa:	f101 0814 	add.w	r8, r1, #20
 80075fe:	f100 0514 	add.w	r5, r0, #20
 8007602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800760c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007610:	3301      	adds	r3, #1
 8007612:	429a      	cmp	r2, r3
 8007614:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800761c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007620:	d331      	bcc.n	8007686 <quorem+0x9c>
 8007622:	f04f 0e00 	mov.w	lr, #0
 8007626:	4640      	mov	r0, r8
 8007628:	46ac      	mov	ip, r5
 800762a:	46f2      	mov	sl, lr
 800762c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007630:	b293      	uxth	r3, r2
 8007632:	fb06 e303 	mla	r3, r6, r3, lr
 8007636:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800763a:	0c1a      	lsrs	r2, r3, #16
 800763c:	b29b      	uxth	r3, r3
 800763e:	ebaa 0303 	sub.w	r3, sl, r3
 8007642:	f8dc a000 	ldr.w	sl, [ip]
 8007646:	fa13 f38a 	uxtah	r3, r3, sl
 800764a:	fb06 220e 	mla	r2, r6, lr, r2
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	9b00      	ldr	r3, [sp, #0]
 8007652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007656:	b292      	uxth	r2, r2
 8007658:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800765c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007660:	f8bd 3000 	ldrh.w	r3, [sp]
 8007664:	4581      	cmp	r9, r0
 8007666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800766a:	f84c 3b04 	str.w	r3, [ip], #4
 800766e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007672:	d2db      	bcs.n	800762c <quorem+0x42>
 8007674:	f855 300b 	ldr.w	r3, [r5, fp]
 8007678:	b92b      	cbnz	r3, 8007686 <quorem+0x9c>
 800767a:	9b01      	ldr	r3, [sp, #4]
 800767c:	3b04      	subs	r3, #4
 800767e:	429d      	cmp	r5, r3
 8007680:	461a      	mov	r2, r3
 8007682:	d32c      	bcc.n	80076de <quorem+0xf4>
 8007684:	613c      	str	r4, [r7, #16]
 8007686:	4638      	mov	r0, r7
 8007688:	f001 f9a8 	bl	80089dc <__mcmp>
 800768c:	2800      	cmp	r0, #0
 800768e:	db22      	blt.n	80076d6 <quorem+0xec>
 8007690:	3601      	adds	r6, #1
 8007692:	4629      	mov	r1, r5
 8007694:	2000      	movs	r0, #0
 8007696:	f858 2b04 	ldr.w	r2, [r8], #4
 800769a:	f8d1 c000 	ldr.w	ip, [r1]
 800769e:	b293      	uxth	r3, r2
 80076a0:	1ac3      	subs	r3, r0, r3
 80076a2:	0c12      	lsrs	r2, r2, #16
 80076a4:	fa13 f38c 	uxtah	r3, r3, ip
 80076a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80076ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b6:	45c1      	cmp	r9, r8
 80076b8:	f841 3b04 	str.w	r3, [r1], #4
 80076bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076c0:	d2e9      	bcs.n	8007696 <quorem+0xac>
 80076c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ca:	b922      	cbnz	r2, 80076d6 <quorem+0xec>
 80076cc:	3b04      	subs	r3, #4
 80076ce:	429d      	cmp	r5, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	d30a      	bcc.n	80076ea <quorem+0x100>
 80076d4:	613c      	str	r4, [r7, #16]
 80076d6:	4630      	mov	r0, r6
 80076d8:	b003      	add	sp, #12
 80076da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076de:	6812      	ldr	r2, [r2, #0]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	2a00      	cmp	r2, #0
 80076e4:	d1ce      	bne.n	8007684 <quorem+0x9a>
 80076e6:	3c01      	subs	r4, #1
 80076e8:	e7c9      	b.n	800767e <quorem+0x94>
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	d1f0      	bne.n	80076d4 <quorem+0xea>
 80076f2:	3c01      	subs	r4, #1
 80076f4:	e7eb      	b.n	80076ce <quorem+0xe4>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e7ee      	b.n	80076d8 <quorem+0xee>
 80076fa:	0000      	movs	r0, r0
 80076fc:	0000      	movs	r0, r0
	...

08007700 <_dtoa_r>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	ed2d 8b04 	vpush	{d8-d9}
 8007708:	69c5      	ldr	r5, [r0, #28]
 800770a:	b093      	sub	sp, #76	; 0x4c
 800770c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007710:	ec57 6b10 	vmov	r6, r7, d0
 8007714:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007718:	9107      	str	r1, [sp, #28]
 800771a:	4604      	mov	r4, r0
 800771c:	920a      	str	r2, [sp, #40]	; 0x28
 800771e:	930d      	str	r3, [sp, #52]	; 0x34
 8007720:	b975      	cbnz	r5, 8007740 <_dtoa_r+0x40>
 8007722:	2010      	movs	r0, #16
 8007724:	f000 fe2a 	bl	800837c <malloc>
 8007728:	4602      	mov	r2, r0
 800772a:	61e0      	str	r0, [r4, #28]
 800772c:	b920      	cbnz	r0, 8007738 <_dtoa_r+0x38>
 800772e:	4bae      	ldr	r3, [pc, #696]	; (80079e8 <_dtoa_r+0x2e8>)
 8007730:	21ef      	movs	r1, #239	; 0xef
 8007732:	48ae      	ldr	r0, [pc, #696]	; (80079ec <_dtoa_r+0x2ec>)
 8007734:	f001 fc82 	bl	800903c <__assert_func>
 8007738:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800773c:	6005      	str	r5, [r0, #0]
 800773e:	60c5      	str	r5, [r0, #12]
 8007740:	69e3      	ldr	r3, [r4, #28]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	b151      	cbz	r1, 800775c <_dtoa_r+0x5c>
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	604a      	str	r2, [r1, #4]
 800774a:	2301      	movs	r3, #1
 800774c:	4093      	lsls	r3, r2
 800774e:	608b      	str	r3, [r1, #8]
 8007750:	4620      	mov	r0, r4
 8007752:	f000 ff07 	bl	8008564 <_Bfree>
 8007756:	69e3      	ldr	r3, [r4, #28]
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	1e3b      	subs	r3, r7, #0
 800775e:	bfbb      	ittet	lt
 8007760:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007764:	9303      	strlt	r3, [sp, #12]
 8007766:	2300      	movge	r3, #0
 8007768:	2201      	movlt	r2, #1
 800776a:	bfac      	ite	ge
 800776c:	f8c8 3000 	strge.w	r3, [r8]
 8007770:	f8c8 2000 	strlt.w	r2, [r8]
 8007774:	4b9e      	ldr	r3, [pc, #632]	; (80079f0 <_dtoa_r+0x2f0>)
 8007776:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800777a:	ea33 0308 	bics.w	r3, r3, r8
 800777e:	d11b      	bne.n	80077b8 <_dtoa_r+0xb8>
 8007780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007782:	f242 730f 	movw	r3, #9999	; 0x270f
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800778c:	4333      	orrs	r3, r6
 800778e:	f000 8593 	beq.w	80082b8 <_dtoa_r+0xbb8>
 8007792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007794:	b963      	cbnz	r3, 80077b0 <_dtoa_r+0xb0>
 8007796:	4b97      	ldr	r3, [pc, #604]	; (80079f4 <_dtoa_r+0x2f4>)
 8007798:	e027      	b.n	80077ea <_dtoa_r+0xea>
 800779a:	4b97      	ldr	r3, [pc, #604]	; (80079f8 <_dtoa_r+0x2f8>)
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	9800      	ldr	r0, [sp, #0]
 80077a6:	b013      	add	sp, #76	; 0x4c
 80077a8:	ecbd 8b04 	vpop	{d8-d9}
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	4b90      	ldr	r3, [pc, #576]	; (80079f4 <_dtoa_r+0x2f4>)
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	3303      	adds	r3, #3
 80077b6:	e7f3      	b.n	80077a0 <_dtoa_r+0xa0>
 80077b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077bc:	2200      	movs	r2, #0
 80077be:	ec51 0b17 	vmov	r0, r1, d7
 80077c2:	eeb0 8a47 	vmov.f32	s16, s14
 80077c6:	eef0 8a67 	vmov.f32	s17, s15
 80077ca:	2300      	movs	r3, #0
 80077cc:	f7f9 f984 	bl	8000ad8 <__aeabi_dcmpeq>
 80077d0:	4681      	mov	r9, r0
 80077d2:	b160      	cbz	r0, 80077ee <_dtoa_r+0xee>
 80077d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077d6:	2301      	movs	r3, #1
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8568 	beq.w	80082b2 <_dtoa_r+0xbb2>
 80077e2:	4b86      	ldr	r3, [pc, #536]	; (80079fc <_dtoa_r+0x2fc>)
 80077e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	e7da      	b.n	80077a4 <_dtoa_r+0xa4>
 80077ee:	aa10      	add	r2, sp, #64	; 0x40
 80077f0:	a911      	add	r1, sp, #68	; 0x44
 80077f2:	4620      	mov	r0, r4
 80077f4:	eeb0 0a48 	vmov.f32	s0, s16
 80077f8:	eef0 0a68 	vmov.f32	s1, s17
 80077fc:	f001 f994 	bl	8008b28 <__d2b>
 8007800:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007804:	4682      	mov	sl, r0
 8007806:	2d00      	cmp	r5, #0
 8007808:	d07f      	beq.n	800790a <_dtoa_r+0x20a>
 800780a:	ee18 3a90 	vmov	r3, s17
 800780e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007812:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007816:	ec51 0b18 	vmov	r0, r1, d8
 800781a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800781e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007822:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007826:	4619      	mov	r1, r3
 8007828:	2200      	movs	r2, #0
 800782a:	4b75      	ldr	r3, [pc, #468]	; (8007a00 <_dtoa_r+0x300>)
 800782c:	f7f8 fd34 	bl	8000298 <__aeabi_dsub>
 8007830:	a367      	add	r3, pc, #412	; (adr r3, 80079d0 <_dtoa_r+0x2d0>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fee7 	bl	8000608 <__aeabi_dmul>
 800783a:	a367      	add	r3, pc, #412	; (adr r3, 80079d8 <_dtoa_r+0x2d8>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fd2c 	bl	800029c <__adddf3>
 8007844:	4606      	mov	r6, r0
 8007846:	4628      	mov	r0, r5
 8007848:	460f      	mov	r7, r1
 800784a:	f7f8 fe73 	bl	8000534 <__aeabi_i2d>
 800784e:	a364      	add	r3, pc, #400	; (adr r3, 80079e0 <_dtoa_r+0x2e0>)
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	f7f8 fed8 	bl	8000608 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f8 fd1c 	bl	800029c <__adddf3>
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	f7f9 f97e 	bl	8000b68 <__aeabi_d2iz>
 800786c:	2200      	movs	r2, #0
 800786e:	4683      	mov	fp, r0
 8007870:	2300      	movs	r3, #0
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f9 f939 	bl	8000aec <__aeabi_dcmplt>
 800787a:	b148      	cbz	r0, 8007890 <_dtoa_r+0x190>
 800787c:	4658      	mov	r0, fp
 800787e:	f7f8 fe59 	bl	8000534 <__aeabi_i2d>
 8007882:	4632      	mov	r2, r6
 8007884:	463b      	mov	r3, r7
 8007886:	f7f9 f927 	bl	8000ad8 <__aeabi_dcmpeq>
 800788a:	b908      	cbnz	r0, 8007890 <_dtoa_r+0x190>
 800788c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007890:	f1bb 0f16 	cmp.w	fp, #22
 8007894:	d857      	bhi.n	8007946 <_dtoa_r+0x246>
 8007896:	4b5b      	ldr	r3, [pc, #364]	; (8007a04 <_dtoa_r+0x304>)
 8007898:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	ec51 0b18 	vmov	r0, r1, d8
 80078a4:	f7f9 f922 	bl	8000aec <__aeabi_dcmplt>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d04e      	beq.n	800794a <_dtoa_r+0x24a>
 80078ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078b0:	2300      	movs	r3, #0
 80078b2:	930c      	str	r3, [sp, #48]	; 0x30
 80078b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078b6:	1b5b      	subs	r3, r3, r5
 80078b8:	1e5a      	subs	r2, r3, #1
 80078ba:	bf45      	ittet	mi
 80078bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80078c0:	9305      	strmi	r3, [sp, #20]
 80078c2:	2300      	movpl	r3, #0
 80078c4:	2300      	movmi	r3, #0
 80078c6:	9206      	str	r2, [sp, #24]
 80078c8:	bf54      	ite	pl
 80078ca:	9305      	strpl	r3, [sp, #20]
 80078cc:	9306      	strmi	r3, [sp, #24]
 80078ce:	f1bb 0f00 	cmp.w	fp, #0
 80078d2:	db3c      	blt.n	800794e <_dtoa_r+0x24e>
 80078d4:	9b06      	ldr	r3, [sp, #24]
 80078d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80078da:	445b      	add	r3, fp
 80078dc:	9306      	str	r3, [sp, #24]
 80078de:	2300      	movs	r3, #0
 80078e0:	9308      	str	r3, [sp, #32]
 80078e2:	9b07      	ldr	r3, [sp, #28]
 80078e4:	2b09      	cmp	r3, #9
 80078e6:	d868      	bhi.n	80079ba <_dtoa_r+0x2ba>
 80078e8:	2b05      	cmp	r3, #5
 80078ea:	bfc4      	itt	gt
 80078ec:	3b04      	subgt	r3, #4
 80078ee:	9307      	strgt	r3, [sp, #28]
 80078f0:	9b07      	ldr	r3, [sp, #28]
 80078f2:	f1a3 0302 	sub.w	r3, r3, #2
 80078f6:	bfcc      	ite	gt
 80078f8:	2500      	movgt	r5, #0
 80078fa:	2501      	movle	r5, #1
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	f200 8085 	bhi.w	8007a0c <_dtoa_r+0x30c>
 8007902:	e8df f003 	tbb	[pc, r3]
 8007906:	3b2e      	.short	0x3b2e
 8007908:	5839      	.short	0x5839
 800790a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800790e:	441d      	add	r5, r3
 8007910:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007914:	2b20      	cmp	r3, #32
 8007916:	bfc1      	itttt	gt
 8007918:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800791c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007920:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007924:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007928:	bfd6      	itet	le
 800792a:	f1c3 0320 	rsble	r3, r3, #32
 800792e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007932:	fa06 f003 	lslle.w	r0, r6, r3
 8007936:	f7f8 fded 	bl	8000514 <__aeabi_ui2d>
 800793a:	2201      	movs	r2, #1
 800793c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007940:	3d01      	subs	r5, #1
 8007942:	920e      	str	r2, [sp, #56]	; 0x38
 8007944:	e76f      	b.n	8007826 <_dtoa_r+0x126>
 8007946:	2301      	movs	r3, #1
 8007948:	e7b3      	b.n	80078b2 <_dtoa_r+0x1b2>
 800794a:	900c      	str	r0, [sp, #48]	; 0x30
 800794c:	e7b2      	b.n	80078b4 <_dtoa_r+0x1b4>
 800794e:	9b05      	ldr	r3, [sp, #20]
 8007950:	eba3 030b 	sub.w	r3, r3, fp
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	f1cb 0300 	rsb	r3, fp, #0
 800795a:	9308      	str	r3, [sp, #32]
 800795c:	2300      	movs	r3, #0
 800795e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007960:	e7bf      	b.n	80078e2 <_dtoa_r+0x1e2>
 8007962:	2300      	movs	r3, #0
 8007964:	9309      	str	r3, [sp, #36]	; 0x24
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007968:	2b00      	cmp	r3, #0
 800796a:	dc52      	bgt.n	8007a12 <_dtoa_r+0x312>
 800796c:	2301      	movs	r3, #1
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	461a      	mov	r2, r3
 8007974:	920a      	str	r2, [sp, #40]	; 0x28
 8007976:	e00b      	b.n	8007990 <_dtoa_r+0x290>
 8007978:	2301      	movs	r3, #1
 800797a:	e7f3      	b.n	8007964 <_dtoa_r+0x264>
 800797c:	2300      	movs	r3, #0
 800797e:	9309      	str	r3, [sp, #36]	; 0x24
 8007980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007982:	445b      	add	r3, fp
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	3301      	adds	r3, #1
 8007988:	2b01      	cmp	r3, #1
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	bfb8      	it	lt
 800798e:	2301      	movlt	r3, #1
 8007990:	69e0      	ldr	r0, [r4, #28]
 8007992:	2100      	movs	r1, #0
 8007994:	2204      	movs	r2, #4
 8007996:	f102 0614 	add.w	r6, r2, #20
 800799a:	429e      	cmp	r6, r3
 800799c:	d93d      	bls.n	8007a1a <_dtoa_r+0x31a>
 800799e:	6041      	str	r1, [r0, #4]
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fd9f 	bl	80084e4 <_Balloc>
 80079a6:	9000      	str	r0, [sp, #0]
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d139      	bne.n	8007a20 <_dtoa_r+0x320>
 80079ac:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <_dtoa_r+0x308>)
 80079ae:	4602      	mov	r2, r0
 80079b0:	f240 11af 	movw	r1, #431	; 0x1af
 80079b4:	e6bd      	b.n	8007732 <_dtoa_r+0x32>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7e1      	b.n	800797e <_dtoa_r+0x27e>
 80079ba:	2501      	movs	r5, #1
 80079bc:	2300      	movs	r3, #0
 80079be:	9307      	str	r3, [sp, #28]
 80079c0:	9509      	str	r5, [sp, #36]	; 0x24
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	2200      	movs	r2, #0
 80079cc:	2312      	movs	r3, #18
 80079ce:	e7d1      	b.n	8007974 <_dtoa_r+0x274>
 80079d0:	636f4361 	.word	0x636f4361
 80079d4:	3fd287a7 	.word	0x3fd287a7
 80079d8:	8b60c8b3 	.word	0x8b60c8b3
 80079dc:	3fc68a28 	.word	0x3fc68a28
 80079e0:	509f79fb 	.word	0x509f79fb
 80079e4:	3fd34413 	.word	0x3fd34413
 80079e8:	0800980d 	.word	0x0800980d
 80079ec:	08009824 	.word	0x08009824
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	08009809 	.word	0x08009809
 80079f8:	08009800 	.word	0x08009800
 80079fc:	080097dd 	.word	0x080097dd
 8007a00:	3ff80000 	.word	0x3ff80000
 8007a04:	08009910 	.word	0x08009910
 8007a08:	0800987c 	.word	0x0800987c
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a10:	e7d7      	b.n	80079c2 <_dtoa_r+0x2c2>
 8007a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	e7ba      	b.n	8007990 <_dtoa_r+0x290>
 8007a1a:	3101      	adds	r1, #1
 8007a1c:	0052      	lsls	r2, r2, #1
 8007a1e:	e7ba      	b.n	8007996 <_dtoa_r+0x296>
 8007a20:	69e3      	ldr	r3, [r4, #28]
 8007a22:	9a00      	ldr	r2, [sp, #0]
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	2b0e      	cmp	r3, #14
 8007a2a:	f200 80a8 	bhi.w	8007b7e <_dtoa_r+0x47e>
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	f000 80a5 	beq.w	8007b7e <_dtoa_r+0x47e>
 8007a34:	f1bb 0f00 	cmp.w	fp, #0
 8007a38:	dd38      	ble.n	8007aac <_dtoa_r+0x3ac>
 8007a3a:	4bc0      	ldr	r3, [pc, #768]	; (8007d3c <_dtoa_r+0x63c>)
 8007a3c:	f00b 020f 	and.w	r2, fp, #15
 8007a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a48:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007a4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007a50:	d019      	beq.n	8007a86 <_dtoa_r+0x386>
 8007a52:	4bbb      	ldr	r3, [pc, #748]	; (8007d40 <_dtoa_r+0x640>)
 8007a54:	ec51 0b18 	vmov	r0, r1, d8
 8007a58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a5c:	f7f8 fefe 	bl	800085c <__aeabi_ddiv>
 8007a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a64:	f008 080f 	and.w	r8, r8, #15
 8007a68:	2503      	movs	r5, #3
 8007a6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007d40 <_dtoa_r+0x640>
 8007a6e:	f1b8 0f00 	cmp.w	r8, #0
 8007a72:	d10a      	bne.n	8007a8a <_dtoa_r+0x38a>
 8007a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a78:	4632      	mov	r2, r6
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	f7f8 feee 	bl	800085c <__aeabi_ddiv>
 8007a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a84:	e02b      	b.n	8007ade <_dtoa_r+0x3de>
 8007a86:	2502      	movs	r5, #2
 8007a88:	e7ef      	b.n	8007a6a <_dtoa_r+0x36a>
 8007a8a:	f018 0f01 	tst.w	r8, #1
 8007a8e:	d008      	beq.n	8007aa2 <_dtoa_r+0x3a2>
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a98:	f7f8 fdb6 	bl	8000608 <__aeabi_dmul>
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460f      	mov	r7, r1
 8007aa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007aa6:	f109 0908 	add.w	r9, r9, #8
 8007aaa:	e7e0      	b.n	8007a6e <_dtoa_r+0x36e>
 8007aac:	f000 809f 	beq.w	8007bee <_dtoa_r+0x4ee>
 8007ab0:	f1cb 0600 	rsb	r6, fp, #0
 8007ab4:	4ba1      	ldr	r3, [pc, #644]	; (8007d3c <_dtoa_r+0x63c>)
 8007ab6:	4fa2      	ldr	r7, [pc, #648]	; (8007d40 <_dtoa_r+0x640>)
 8007ab8:	f006 020f 	and.w	r2, r6, #15
 8007abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	ec51 0b18 	vmov	r0, r1, d8
 8007ac8:	f7f8 fd9e 	bl	8000608 <__aeabi_dmul>
 8007acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad0:	1136      	asrs	r6, r6, #4
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2502      	movs	r5, #2
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	d17e      	bne.n	8007bd8 <_dtoa_r+0x4d8>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1d0      	bne.n	8007a80 <_dtoa_r+0x380>
 8007ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ae0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8084 	beq.w	8007bf2 <_dtoa_r+0x4f2>
 8007aea:	4b96      	ldr	r3, [pc, #600]	; (8007d44 <_dtoa_r+0x644>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f8 fffb 	bl	8000aec <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d07b      	beq.n	8007bf2 <_dtoa_r+0x4f2>
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d078      	beq.n	8007bf2 <_dtoa_r+0x4f2>
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dd39      	ble.n	8007b7a <_dtoa_r+0x47a>
 8007b06:	4b90      	ldr	r3, [pc, #576]	; (8007d48 <_dtoa_r+0x648>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	f7f8 fd7b 	bl	8000608 <__aeabi_dmul>
 8007b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b16:	9e01      	ldr	r6, [sp, #4]
 8007b18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b1c:	3501      	adds	r5, #1
 8007b1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7f8 fd06 	bl	8000534 <__aeabi_i2d>
 8007b28:	4642      	mov	r2, r8
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	f7f8 fd6c 	bl	8000608 <__aeabi_dmul>
 8007b30:	4b86      	ldr	r3, [pc, #536]	; (8007d4c <_dtoa_r+0x64c>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7f8 fbb2 	bl	800029c <__adddf3>
 8007b38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	2e00      	cmp	r6, #0
 8007b44:	d158      	bne.n	8007bf8 <_dtoa_r+0x4f8>
 8007b46:	4b82      	ldr	r3, [pc, #520]	; (8007d50 <_dtoa_r+0x650>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	f7f8 fba3 	bl	8000298 <__aeabi_dsub>
 8007b52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b56:	4680      	mov	r8, r0
 8007b58:	4689      	mov	r9, r1
 8007b5a:	f7f8 ffe5 	bl	8000b28 <__aeabi_dcmpgt>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f040 8296 	bne.w	8008090 <_dtoa_r+0x990>
 8007b64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b68:	4640      	mov	r0, r8
 8007b6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b6e:	4649      	mov	r1, r9
 8007b70:	f7f8 ffbc 	bl	8000aec <__aeabi_dcmplt>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	f040 8289 	bne.w	800808c <_dtoa_r+0x98c>
 8007b7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007b7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f2c0 814e 	blt.w	8007e22 <_dtoa_r+0x722>
 8007b86:	f1bb 0f0e 	cmp.w	fp, #14
 8007b8a:	f300 814a 	bgt.w	8007e22 <_dtoa_r+0x722>
 8007b8e:	4b6b      	ldr	r3, [pc, #428]	; (8007d3c <_dtoa_r+0x63c>)
 8007b90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f280 80dc 	bge.w	8007d58 <_dtoa_r+0x658>
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f300 80d8 	bgt.w	8007d58 <_dtoa_r+0x658>
 8007ba8:	f040 826f 	bne.w	800808a <_dtoa_r+0x98a>
 8007bac:	4b68      	ldr	r3, [pc, #416]	; (8007d50 <_dtoa_r+0x650>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	f7f8 fd28 	bl	8000608 <__aeabi_dmul>
 8007bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bbc:	f7f8 ffaa 	bl	8000b14 <__aeabi_dcmpge>
 8007bc0:	9e04      	ldr	r6, [sp, #16]
 8007bc2:	4637      	mov	r7, r6
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 8245 	bne.w	8008054 <_dtoa_r+0x954>
 8007bca:	9d00      	ldr	r5, [sp, #0]
 8007bcc:	2331      	movs	r3, #49	; 0x31
 8007bce:	f805 3b01 	strb.w	r3, [r5], #1
 8007bd2:	f10b 0b01 	add.w	fp, fp, #1
 8007bd6:	e241      	b.n	800805c <_dtoa_r+0x95c>
 8007bd8:	07f2      	lsls	r2, r6, #31
 8007bda:	d505      	bpl.n	8007be8 <_dtoa_r+0x4e8>
 8007bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be0:	f7f8 fd12 	bl	8000608 <__aeabi_dmul>
 8007be4:	3501      	adds	r5, #1
 8007be6:	2301      	movs	r3, #1
 8007be8:	1076      	asrs	r6, r6, #1
 8007bea:	3708      	adds	r7, #8
 8007bec:	e773      	b.n	8007ad6 <_dtoa_r+0x3d6>
 8007bee:	2502      	movs	r5, #2
 8007bf0:	e775      	b.n	8007ade <_dtoa_r+0x3de>
 8007bf2:	9e04      	ldr	r6, [sp, #16]
 8007bf4:	465f      	mov	r7, fp
 8007bf6:	e792      	b.n	8007b1e <_dtoa_r+0x41e>
 8007bf8:	9900      	ldr	r1, [sp, #0]
 8007bfa:	4b50      	ldr	r3, [pc, #320]	; (8007d3c <_dtoa_r+0x63c>)
 8007bfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c00:	4431      	add	r1, r6
 8007c02:	9102      	str	r1, [sp, #8]
 8007c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c06:	eeb0 9a47 	vmov.f32	s18, s14
 8007c0a:	eef0 9a67 	vmov.f32	s19, s15
 8007c0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c16:	2900      	cmp	r1, #0
 8007c18:	d044      	beq.n	8007ca4 <_dtoa_r+0x5a4>
 8007c1a:	494e      	ldr	r1, [pc, #312]	; (8007d54 <_dtoa_r+0x654>)
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f7f8 fe1d 	bl	800085c <__aeabi_ddiv>
 8007c22:	ec53 2b19 	vmov	r2, r3, d9
 8007c26:	f7f8 fb37 	bl	8000298 <__aeabi_dsub>
 8007c2a:	9d00      	ldr	r5, [sp, #0]
 8007c2c:	ec41 0b19 	vmov	d9, r0, r1
 8007c30:	4649      	mov	r1, r9
 8007c32:	4640      	mov	r0, r8
 8007c34:	f7f8 ff98 	bl	8000b68 <__aeabi_d2iz>
 8007c38:	4606      	mov	r6, r0
 8007c3a:	f7f8 fc7b 	bl	8000534 <__aeabi_i2d>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4640      	mov	r0, r8
 8007c44:	4649      	mov	r1, r9
 8007c46:	f7f8 fb27 	bl	8000298 <__aeabi_dsub>
 8007c4a:	3630      	adds	r6, #48	; 0x30
 8007c4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007c50:	ec53 2b19 	vmov	r2, r3, d9
 8007c54:	4680      	mov	r8, r0
 8007c56:	4689      	mov	r9, r1
 8007c58:	f7f8 ff48 	bl	8000aec <__aeabi_dcmplt>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d164      	bne.n	8007d2a <_dtoa_r+0x62a>
 8007c60:	4642      	mov	r2, r8
 8007c62:	464b      	mov	r3, r9
 8007c64:	4937      	ldr	r1, [pc, #220]	; (8007d44 <_dtoa_r+0x644>)
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7f8 fb16 	bl	8000298 <__aeabi_dsub>
 8007c6c:	ec53 2b19 	vmov	r2, r3, d9
 8007c70:	f7f8 ff3c 	bl	8000aec <__aeabi_dcmplt>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	f040 80b6 	bne.w	8007de6 <_dtoa_r+0x6e6>
 8007c7a:	9b02      	ldr	r3, [sp, #8]
 8007c7c:	429d      	cmp	r5, r3
 8007c7e:	f43f af7c 	beq.w	8007b7a <_dtoa_r+0x47a>
 8007c82:	4b31      	ldr	r3, [pc, #196]	; (8007d48 <_dtoa_r+0x648>)
 8007c84:	ec51 0b19 	vmov	r0, r1, d9
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f7f8 fcbd 	bl	8000608 <__aeabi_dmul>
 8007c8e:	4b2e      	ldr	r3, [pc, #184]	; (8007d48 <_dtoa_r+0x648>)
 8007c90:	ec41 0b19 	vmov	d9, r0, r1
 8007c94:	2200      	movs	r2, #0
 8007c96:	4640      	mov	r0, r8
 8007c98:	4649      	mov	r1, r9
 8007c9a:	f7f8 fcb5 	bl	8000608 <__aeabi_dmul>
 8007c9e:	4680      	mov	r8, r0
 8007ca0:	4689      	mov	r9, r1
 8007ca2:	e7c5      	b.n	8007c30 <_dtoa_r+0x530>
 8007ca4:	ec51 0b17 	vmov	r0, r1, d7
 8007ca8:	f7f8 fcae 	bl	8000608 <__aeabi_dmul>
 8007cac:	9b02      	ldr	r3, [sp, #8]
 8007cae:	9d00      	ldr	r5, [sp, #0]
 8007cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cb2:	ec41 0b19 	vmov	d9, r0, r1
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4640      	mov	r0, r8
 8007cba:	f7f8 ff55 	bl	8000b68 <__aeabi_d2iz>
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	f7f8 fc38 	bl	8000534 <__aeabi_i2d>
 8007cc4:	3630      	adds	r6, #48	; 0x30
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4640      	mov	r0, r8
 8007ccc:	4649      	mov	r1, r9
 8007cce:	f7f8 fae3 	bl	8000298 <__aeabi_dsub>
 8007cd2:	f805 6b01 	strb.w	r6, [r5], #1
 8007cd6:	9b02      	ldr	r3, [sp, #8]
 8007cd8:	429d      	cmp	r5, r3
 8007cda:	4680      	mov	r8, r0
 8007cdc:	4689      	mov	r9, r1
 8007cde:	f04f 0200 	mov.w	r2, #0
 8007ce2:	d124      	bne.n	8007d2e <_dtoa_r+0x62e>
 8007ce4:	4b1b      	ldr	r3, [pc, #108]	; (8007d54 <_dtoa_r+0x654>)
 8007ce6:	ec51 0b19 	vmov	r0, r1, d9
 8007cea:	f7f8 fad7 	bl	800029c <__adddf3>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 ff17 	bl	8000b28 <__aeabi_dcmpgt>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d173      	bne.n	8007de6 <_dtoa_r+0x6e6>
 8007cfe:	ec53 2b19 	vmov	r2, r3, d9
 8007d02:	4914      	ldr	r1, [pc, #80]	; (8007d54 <_dtoa_r+0x654>)
 8007d04:	2000      	movs	r0, #0
 8007d06:	f7f8 fac7 	bl	8000298 <__aeabi_dsub>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4640      	mov	r0, r8
 8007d10:	4649      	mov	r1, r9
 8007d12:	f7f8 feeb 	bl	8000aec <__aeabi_dcmplt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f43f af2f 	beq.w	8007b7a <_dtoa_r+0x47a>
 8007d1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d1e:	1e6b      	subs	r3, r5, #1
 8007d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d26:	2b30      	cmp	r3, #48	; 0x30
 8007d28:	d0f8      	beq.n	8007d1c <_dtoa_r+0x61c>
 8007d2a:	46bb      	mov	fp, r7
 8007d2c:	e04a      	b.n	8007dc4 <_dtoa_r+0x6c4>
 8007d2e:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <_dtoa_r+0x648>)
 8007d30:	f7f8 fc6a 	bl	8000608 <__aeabi_dmul>
 8007d34:	4680      	mov	r8, r0
 8007d36:	4689      	mov	r9, r1
 8007d38:	e7bd      	b.n	8007cb6 <_dtoa_r+0x5b6>
 8007d3a:	bf00      	nop
 8007d3c:	08009910 	.word	0x08009910
 8007d40:	080098e8 	.word	0x080098e8
 8007d44:	3ff00000 	.word	0x3ff00000
 8007d48:	40240000 	.word	0x40240000
 8007d4c:	401c0000 	.word	0x401c0000
 8007d50:	40140000 	.word	0x40140000
 8007d54:	3fe00000 	.word	0x3fe00000
 8007d58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d5c:	9d00      	ldr	r5, [sp, #0]
 8007d5e:	4642      	mov	r2, r8
 8007d60:	464b      	mov	r3, r9
 8007d62:	4630      	mov	r0, r6
 8007d64:	4639      	mov	r1, r7
 8007d66:	f7f8 fd79 	bl	800085c <__aeabi_ddiv>
 8007d6a:	f7f8 fefd 	bl	8000b68 <__aeabi_d2iz>
 8007d6e:	9001      	str	r0, [sp, #4]
 8007d70:	f7f8 fbe0 	bl	8000534 <__aeabi_i2d>
 8007d74:	4642      	mov	r2, r8
 8007d76:	464b      	mov	r3, r9
 8007d78:	f7f8 fc46 	bl	8000608 <__aeabi_dmul>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4630      	mov	r0, r6
 8007d82:	4639      	mov	r1, r7
 8007d84:	f7f8 fa88 	bl	8000298 <__aeabi_dsub>
 8007d88:	9e01      	ldr	r6, [sp, #4]
 8007d8a:	9f04      	ldr	r7, [sp, #16]
 8007d8c:	3630      	adds	r6, #48	; 0x30
 8007d8e:	f805 6b01 	strb.w	r6, [r5], #1
 8007d92:	9e00      	ldr	r6, [sp, #0]
 8007d94:	1bae      	subs	r6, r5, r6
 8007d96:	42b7      	cmp	r7, r6
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	d134      	bne.n	8007e08 <_dtoa_r+0x708>
 8007d9e:	f7f8 fa7d 	bl	800029c <__adddf3>
 8007da2:	4642      	mov	r2, r8
 8007da4:	464b      	mov	r3, r9
 8007da6:	4606      	mov	r6, r0
 8007da8:	460f      	mov	r7, r1
 8007daa:	f7f8 febd 	bl	8000b28 <__aeabi_dcmpgt>
 8007dae:	b9c8      	cbnz	r0, 8007de4 <_dtoa_r+0x6e4>
 8007db0:	4642      	mov	r2, r8
 8007db2:	464b      	mov	r3, r9
 8007db4:	4630      	mov	r0, r6
 8007db6:	4639      	mov	r1, r7
 8007db8:	f7f8 fe8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dbc:	b110      	cbz	r0, 8007dc4 <_dtoa_r+0x6c4>
 8007dbe:	9b01      	ldr	r3, [sp, #4]
 8007dc0:	07db      	lsls	r3, r3, #31
 8007dc2:	d40f      	bmi.n	8007de4 <_dtoa_r+0x6e4>
 8007dc4:	4651      	mov	r1, sl
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fbcc 	bl	8008564 <_Bfree>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dd0:	702b      	strb	r3, [r5, #0]
 8007dd2:	f10b 0301 	add.w	r3, fp, #1
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f43f ace2 	beq.w	80077a4 <_dtoa_r+0xa4>
 8007de0:	601d      	str	r5, [r3, #0]
 8007de2:	e4df      	b.n	80077a4 <_dtoa_r+0xa4>
 8007de4:	465f      	mov	r7, fp
 8007de6:	462b      	mov	r3, r5
 8007de8:	461d      	mov	r5, r3
 8007dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dee:	2a39      	cmp	r2, #57	; 0x39
 8007df0:	d106      	bne.n	8007e00 <_dtoa_r+0x700>
 8007df2:	9a00      	ldr	r2, [sp, #0]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d1f7      	bne.n	8007de8 <_dtoa_r+0x6e8>
 8007df8:	9900      	ldr	r1, [sp, #0]
 8007dfa:	2230      	movs	r2, #48	; 0x30
 8007dfc:	3701      	adds	r7, #1
 8007dfe:	700a      	strb	r2, [r1, #0]
 8007e00:	781a      	ldrb	r2, [r3, #0]
 8007e02:	3201      	adds	r2, #1
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e790      	b.n	8007d2a <_dtoa_r+0x62a>
 8007e08:	4ba3      	ldr	r3, [pc, #652]	; (8008098 <_dtoa_r+0x998>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f7f8 fbfc 	bl	8000608 <__aeabi_dmul>
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	4606      	mov	r6, r0
 8007e16:	460f      	mov	r7, r1
 8007e18:	f7f8 fe5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d09e      	beq.n	8007d5e <_dtoa_r+0x65e>
 8007e20:	e7d0      	b.n	8007dc4 <_dtoa_r+0x6c4>
 8007e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	f000 80ca 	beq.w	8007fbe <_dtoa_r+0x8be>
 8007e2a:	9a07      	ldr	r2, [sp, #28]
 8007e2c:	2a01      	cmp	r2, #1
 8007e2e:	f300 80ad 	bgt.w	8007f8c <_dtoa_r+0x88c>
 8007e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	f000 80a5 	beq.w	8007f84 <_dtoa_r+0x884>
 8007e3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e3e:	9e08      	ldr	r6, [sp, #32]
 8007e40:	9d05      	ldr	r5, [sp, #20]
 8007e42:	9a05      	ldr	r2, [sp, #20]
 8007e44:	441a      	add	r2, r3
 8007e46:	9205      	str	r2, [sp, #20]
 8007e48:	9a06      	ldr	r2, [sp, #24]
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	441a      	add	r2, r3
 8007e4e:	4620      	mov	r0, r4
 8007e50:	9206      	str	r2, [sp, #24]
 8007e52:	f000 fc3d 	bl	80086d0 <__i2b>
 8007e56:	4607      	mov	r7, r0
 8007e58:	b165      	cbz	r5, 8007e74 <_dtoa_r+0x774>
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dd09      	ble.n	8007e74 <_dtoa_r+0x774>
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	9a05      	ldr	r2, [sp, #20]
 8007e64:	bfa8      	it	ge
 8007e66:	462b      	movge	r3, r5
 8007e68:	1ad2      	subs	r2, r2, r3
 8007e6a:	9205      	str	r2, [sp, #20]
 8007e6c:	9a06      	ldr	r2, [sp, #24]
 8007e6e:	1aed      	subs	r5, r5, r3
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	9306      	str	r3, [sp, #24]
 8007e74:	9b08      	ldr	r3, [sp, #32]
 8007e76:	b1f3      	cbz	r3, 8007eb6 <_dtoa_r+0x7b6>
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 80a3 	beq.w	8007fc6 <_dtoa_r+0x8c6>
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	dd10      	ble.n	8007ea6 <_dtoa_r+0x7a6>
 8007e84:	4639      	mov	r1, r7
 8007e86:	4632      	mov	r2, r6
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 fce1 	bl	8008850 <__pow5mult>
 8007e8e:	4652      	mov	r2, sl
 8007e90:	4601      	mov	r1, r0
 8007e92:	4607      	mov	r7, r0
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fc31 	bl	80086fc <__multiply>
 8007e9a:	4651      	mov	r1, sl
 8007e9c:	4680      	mov	r8, r0
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 fb60 	bl	8008564 <_Bfree>
 8007ea4:	46c2      	mov	sl, r8
 8007ea6:	9b08      	ldr	r3, [sp, #32]
 8007ea8:	1b9a      	subs	r2, r3, r6
 8007eaa:	d004      	beq.n	8007eb6 <_dtoa_r+0x7b6>
 8007eac:	4651      	mov	r1, sl
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 fcce 	bl	8008850 <__pow5mult>
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 fc09 	bl	80086d0 <__i2b>
 8007ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	f340 8081 	ble.w	8007fca <_dtoa_r+0x8ca>
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4601      	mov	r1, r0
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fcbf 	bl	8008850 <__pow5mult>
 8007ed2:	9b07      	ldr	r3, [sp, #28]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	dd7a      	ble.n	8007fd0 <_dtoa_r+0x8d0>
 8007eda:	f04f 0800 	mov.w	r8, #0
 8007ede:	6933      	ldr	r3, [r6, #16]
 8007ee0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ee4:	6918      	ldr	r0, [r3, #16]
 8007ee6:	f000 fba5 	bl	8008634 <__hi0bits>
 8007eea:	f1c0 0020 	rsb	r0, r0, #32
 8007eee:	9b06      	ldr	r3, [sp, #24]
 8007ef0:	4418      	add	r0, r3
 8007ef2:	f010 001f 	ands.w	r0, r0, #31
 8007ef6:	f000 8094 	beq.w	8008022 <_dtoa_r+0x922>
 8007efa:	f1c0 0320 	rsb	r3, r0, #32
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	f340 8085 	ble.w	800800e <_dtoa_r+0x90e>
 8007f04:	9b05      	ldr	r3, [sp, #20]
 8007f06:	f1c0 001c 	rsb	r0, r0, #28
 8007f0a:	4403      	add	r3, r0
 8007f0c:	9305      	str	r3, [sp, #20]
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	4403      	add	r3, r0
 8007f12:	4405      	add	r5, r0
 8007f14:	9306      	str	r3, [sp, #24]
 8007f16:	9b05      	ldr	r3, [sp, #20]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dd05      	ble.n	8007f28 <_dtoa_r+0x828>
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fcef 	bl	8008904 <__lshift>
 8007f26:	4682      	mov	sl, r0
 8007f28:	9b06      	ldr	r3, [sp, #24]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dd05      	ble.n	8007f3a <_dtoa_r+0x83a>
 8007f2e:	4631      	mov	r1, r6
 8007f30:	461a      	mov	r2, r3
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 fce6 	bl	8008904 <__lshift>
 8007f38:	4606      	mov	r6, r0
 8007f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d072      	beq.n	8008026 <_dtoa_r+0x926>
 8007f40:	4631      	mov	r1, r6
 8007f42:	4650      	mov	r0, sl
 8007f44:	f000 fd4a 	bl	80089dc <__mcmp>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	da6c      	bge.n	8008026 <_dtoa_r+0x926>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	4651      	mov	r1, sl
 8007f50:	220a      	movs	r2, #10
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 fb28 	bl	80085a8 <__multadd>
 8007f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f5e:	4682      	mov	sl, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 81b0 	beq.w	80082c6 <_dtoa_r+0xbc6>
 8007f66:	2300      	movs	r3, #0
 8007f68:	4639      	mov	r1, r7
 8007f6a:	220a      	movs	r2, #10
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 fb1b 	bl	80085a8 <__multadd>
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	4607      	mov	r7, r0
 8007f78:	f300 8096 	bgt.w	80080a8 <_dtoa_r+0x9a8>
 8007f7c:	9b07      	ldr	r3, [sp, #28]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	dc59      	bgt.n	8008036 <_dtoa_r+0x936>
 8007f82:	e091      	b.n	80080a8 <_dtoa_r+0x9a8>
 8007f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f8a:	e758      	b.n	8007e3e <_dtoa_r+0x73e>
 8007f8c:	9b04      	ldr	r3, [sp, #16]
 8007f8e:	1e5e      	subs	r6, r3, #1
 8007f90:	9b08      	ldr	r3, [sp, #32]
 8007f92:	42b3      	cmp	r3, r6
 8007f94:	bfbf      	itttt	lt
 8007f96:	9b08      	ldrlt	r3, [sp, #32]
 8007f98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007f9a:	9608      	strlt	r6, [sp, #32]
 8007f9c:	1af3      	sublt	r3, r6, r3
 8007f9e:	bfb4      	ite	lt
 8007fa0:	18d2      	addlt	r2, r2, r3
 8007fa2:	1b9e      	subge	r6, r3, r6
 8007fa4:	9b04      	ldr	r3, [sp, #16]
 8007fa6:	bfbc      	itt	lt
 8007fa8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007faa:	2600      	movlt	r6, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bfb7      	itett	lt
 8007fb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007fb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007fb8:	1a9d      	sublt	r5, r3, r2
 8007fba:	2300      	movlt	r3, #0
 8007fbc:	e741      	b.n	8007e42 <_dtoa_r+0x742>
 8007fbe:	9e08      	ldr	r6, [sp, #32]
 8007fc0:	9d05      	ldr	r5, [sp, #20]
 8007fc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007fc4:	e748      	b.n	8007e58 <_dtoa_r+0x758>
 8007fc6:	9a08      	ldr	r2, [sp, #32]
 8007fc8:	e770      	b.n	8007eac <_dtoa_r+0x7ac>
 8007fca:	9b07      	ldr	r3, [sp, #28]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	dc19      	bgt.n	8008004 <_dtoa_r+0x904>
 8007fd0:	9b02      	ldr	r3, [sp, #8]
 8007fd2:	b9bb      	cbnz	r3, 8008004 <_dtoa_r+0x904>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fda:	b99b      	cbnz	r3, 8008004 <_dtoa_r+0x904>
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fe2:	0d1b      	lsrs	r3, r3, #20
 8007fe4:	051b      	lsls	r3, r3, #20
 8007fe6:	b183      	cbz	r3, 800800a <_dtoa_r+0x90a>
 8007fe8:	9b05      	ldr	r3, [sp, #20]
 8007fea:	3301      	adds	r3, #1
 8007fec:	9305      	str	r3, [sp, #20]
 8007fee:	9b06      	ldr	r3, [sp, #24]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	9306      	str	r3, [sp, #24]
 8007ff4:	f04f 0801 	mov.w	r8, #1
 8007ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f47f af6f 	bne.w	8007ede <_dtoa_r+0x7de>
 8008000:	2001      	movs	r0, #1
 8008002:	e774      	b.n	8007eee <_dtoa_r+0x7ee>
 8008004:	f04f 0800 	mov.w	r8, #0
 8008008:	e7f6      	b.n	8007ff8 <_dtoa_r+0x8f8>
 800800a:	4698      	mov	r8, r3
 800800c:	e7f4      	b.n	8007ff8 <_dtoa_r+0x8f8>
 800800e:	d082      	beq.n	8007f16 <_dtoa_r+0x816>
 8008010:	9a05      	ldr	r2, [sp, #20]
 8008012:	331c      	adds	r3, #28
 8008014:	441a      	add	r2, r3
 8008016:	9205      	str	r2, [sp, #20]
 8008018:	9a06      	ldr	r2, [sp, #24]
 800801a:	441a      	add	r2, r3
 800801c:	441d      	add	r5, r3
 800801e:	9206      	str	r2, [sp, #24]
 8008020:	e779      	b.n	8007f16 <_dtoa_r+0x816>
 8008022:	4603      	mov	r3, r0
 8008024:	e7f4      	b.n	8008010 <_dtoa_r+0x910>
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	dc37      	bgt.n	800809c <_dtoa_r+0x99c>
 800802c:	9b07      	ldr	r3, [sp, #28]
 800802e:	2b02      	cmp	r3, #2
 8008030:	dd34      	ble.n	800809c <_dtoa_r+0x99c>
 8008032:	9b04      	ldr	r3, [sp, #16]
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	9b01      	ldr	r3, [sp, #4]
 8008038:	b963      	cbnz	r3, 8008054 <_dtoa_r+0x954>
 800803a:	4631      	mov	r1, r6
 800803c:	2205      	movs	r2, #5
 800803e:	4620      	mov	r0, r4
 8008040:	f000 fab2 	bl	80085a8 <__multadd>
 8008044:	4601      	mov	r1, r0
 8008046:	4606      	mov	r6, r0
 8008048:	4650      	mov	r0, sl
 800804a:	f000 fcc7 	bl	80089dc <__mcmp>
 800804e:	2800      	cmp	r0, #0
 8008050:	f73f adbb 	bgt.w	8007bca <_dtoa_r+0x4ca>
 8008054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008056:	9d00      	ldr	r5, [sp, #0]
 8008058:	ea6f 0b03 	mvn.w	fp, r3
 800805c:	f04f 0800 	mov.w	r8, #0
 8008060:	4631      	mov	r1, r6
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fa7e 	bl	8008564 <_Bfree>
 8008068:	2f00      	cmp	r7, #0
 800806a:	f43f aeab 	beq.w	8007dc4 <_dtoa_r+0x6c4>
 800806e:	f1b8 0f00 	cmp.w	r8, #0
 8008072:	d005      	beq.n	8008080 <_dtoa_r+0x980>
 8008074:	45b8      	cmp	r8, r7
 8008076:	d003      	beq.n	8008080 <_dtoa_r+0x980>
 8008078:	4641      	mov	r1, r8
 800807a:	4620      	mov	r0, r4
 800807c:	f000 fa72 	bl	8008564 <_Bfree>
 8008080:	4639      	mov	r1, r7
 8008082:	4620      	mov	r0, r4
 8008084:	f000 fa6e 	bl	8008564 <_Bfree>
 8008088:	e69c      	b.n	8007dc4 <_dtoa_r+0x6c4>
 800808a:	2600      	movs	r6, #0
 800808c:	4637      	mov	r7, r6
 800808e:	e7e1      	b.n	8008054 <_dtoa_r+0x954>
 8008090:	46bb      	mov	fp, r7
 8008092:	4637      	mov	r7, r6
 8008094:	e599      	b.n	8007bca <_dtoa_r+0x4ca>
 8008096:	bf00      	nop
 8008098:	40240000 	.word	0x40240000
 800809c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80c8 	beq.w	8008234 <_dtoa_r+0xb34>
 80080a4:	9b04      	ldr	r3, [sp, #16]
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	dd05      	ble.n	80080b8 <_dtoa_r+0x9b8>
 80080ac:	4639      	mov	r1, r7
 80080ae:	462a      	mov	r2, r5
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fc27 	bl	8008904 <__lshift>
 80080b6:	4607      	mov	r7, r0
 80080b8:	f1b8 0f00 	cmp.w	r8, #0
 80080bc:	d05b      	beq.n	8008176 <_dtoa_r+0xa76>
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 fa0f 	bl	80084e4 <_Balloc>
 80080c6:	4605      	mov	r5, r0
 80080c8:	b928      	cbnz	r0, 80080d6 <_dtoa_r+0x9d6>
 80080ca:	4b83      	ldr	r3, [pc, #524]	; (80082d8 <_dtoa_r+0xbd8>)
 80080cc:	4602      	mov	r2, r0
 80080ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80080d2:	f7ff bb2e 	b.w	8007732 <_dtoa_r+0x32>
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	3202      	adds	r2, #2
 80080da:	0092      	lsls	r2, r2, #2
 80080dc:	f107 010c 	add.w	r1, r7, #12
 80080e0:	300c      	adds	r0, #12
 80080e2:	f7ff fa74 	bl	80075ce <memcpy>
 80080e6:	2201      	movs	r2, #1
 80080e8:	4629      	mov	r1, r5
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 fc0a 	bl	8008904 <__lshift>
 80080f0:	9b00      	ldr	r3, [sp, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080fa:	4413      	add	r3, r2
 80080fc:	9308      	str	r3, [sp, #32]
 80080fe:	9b02      	ldr	r3, [sp, #8]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	46b8      	mov	r8, r7
 8008106:	9306      	str	r3, [sp, #24]
 8008108:	4607      	mov	r7, r0
 800810a:	9b04      	ldr	r3, [sp, #16]
 800810c:	4631      	mov	r1, r6
 800810e:	3b01      	subs	r3, #1
 8008110:	4650      	mov	r0, sl
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	f7ff fa69 	bl	80075ea <quorem>
 8008118:	4641      	mov	r1, r8
 800811a:	9002      	str	r0, [sp, #8]
 800811c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008120:	4650      	mov	r0, sl
 8008122:	f000 fc5b 	bl	80089dc <__mcmp>
 8008126:	463a      	mov	r2, r7
 8008128:	9005      	str	r0, [sp, #20]
 800812a:	4631      	mov	r1, r6
 800812c:	4620      	mov	r0, r4
 800812e:	f000 fc71 	bl	8008a14 <__mdiff>
 8008132:	68c2      	ldr	r2, [r0, #12]
 8008134:	4605      	mov	r5, r0
 8008136:	bb02      	cbnz	r2, 800817a <_dtoa_r+0xa7a>
 8008138:	4601      	mov	r1, r0
 800813a:	4650      	mov	r0, sl
 800813c:	f000 fc4e 	bl	80089dc <__mcmp>
 8008140:	4602      	mov	r2, r0
 8008142:	4629      	mov	r1, r5
 8008144:	4620      	mov	r0, r4
 8008146:	9209      	str	r2, [sp, #36]	; 0x24
 8008148:	f000 fa0c 	bl	8008564 <_Bfree>
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008150:	9d04      	ldr	r5, [sp, #16]
 8008152:	ea43 0102 	orr.w	r1, r3, r2
 8008156:	9b06      	ldr	r3, [sp, #24]
 8008158:	4319      	orrs	r1, r3
 800815a:	d110      	bne.n	800817e <_dtoa_r+0xa7e>
 800815c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008160:	d029      	beq.n	80081b6 <_dtoa_r+0xab6>
 8008162:	9b05      	ldr	r3, [sp, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	dd02      	ble.n	800816e <_dtoa_r+0xa6e>
 8008168:	9b02      	ldr	r3, [sp, #8]
 800816a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	f883 9000 	strb.w	r9, [r3]
 8008174:	e774      	b.n	8008060 <_dtoa_r+0x960>
 8008176:	4638      	mov	r0, r7
 8008178:	e7ba      	b.n	80080f0 <_dtoa_r+0x9f0>
 800817a:	2201      	movs	r2, #1
 800817c:	e7e1      	b.n	8008142 <_dtoa_r+0xa42>
 800817e:	9b05      	ldr	r3, [sp, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	db04      	blt.n	800818e <_dtoa_r+0xa8e>
 8008184:	9907      	ldr	r1, [sp, #28]
 8008186:	430b      	orrs	r3, r1
 8008188:	9906      	ldr	r1, [sp, #24]
 800818a:	430b      	orrs	r3, r1
 800818c:	d120      	bne.n	80081d0 <_dtoa_r+0xad0>
 800818e:	2a00      	cmp	r2, #0
 8008190:	dded      	ble.n	800816e <_dtoa_r+0xa6e>
 8008192:	4651      	mov	r1, sl
 8008194:	2201      	movs	r2, #1
 8008196:	4620      	mov	r0, r4
 8008198:	f000 fbb4 	bl	8008904 <__lshift>
 800819c:	4631      	mov	r1, r6
 800819e:	4682      	mov	sl, r0
 80081a0:	f000 fc1c 	bl	80089dc <__mcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	dc03      	bgt.n	80081b0 <_dtoa_r+0xab0>
 80081a8:	d1e1      	bne.n	800816e <_dtoa_r+0xa6e>
 80081aa:	f019 0f01 	tst.w	r9, #1
 80081ae:	d0de      	beq.n	800816e <_dtoa_r+0xa6e>
 80081b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081b4:	d1d8      	bne.n	8008168 <_dtoa_r+0xa68>
 80081b6:	9a01      	ldr	r2, [sp, #4]
 80081b8:	2339      	movs	r3, #57	; 0x39
 80081ba:	7013      	strb	r3, [r2, #0]
 80081bc:	462b      	mov	r3, r5
 80081be:	461d      	mov	r5, r3
 80081c0:	3b01      	subs	r3, #1
 80081c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081c6:	2a39      	cmp	r2, #57	; 0x39
 80081c8:	d06c      	beq.n	80082a4 <_dtoa_r+0xba4>
 80081ca:	3201      	adds	r2, #1
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	e747      	b.n	8008060 <_dtoa_r+0x960>
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	dd07      	ble.n	80081e4 <_dtoa_r+0xae4>
 80081d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081d8:	d0ed      	beq.n	80081b6 <_dtoa_r+0xab6>
 80081da:	9a01      	ldr	r2, [sp, #4]
 80081dc:	f109 0301 	add.w	r3, r9, #1
 80081e0:	7013      	strb	r3, [r2, #0]
 80081e2:	e73d      	b.n	8008060 <_dtoa_r+0x960>
 80081e4:	9b04      	ldr	r3, [sp, #16]
 80081e6:	9a08      	ldr	r2, [sp, #32]
 80081e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d043      	beq.n	8008278 <_dtoa_r+0xb78>
 80081f0:	4651      	mov	r1, sl
 80081f2:	2300      	movs	r3, #0
 80081f4:	220a      	movs	r2, #10
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 f9d6 	bl	80085a8 <__multadd>
 80081fc:	45b8      	cmp	r8, r7
 80081fe:	4682      	mov	sl, r0
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	f04f 020a 	mov.w	r2, #10
 8008208:	4641      	mov	r1, r8
 800820a:	4620      	mov	r0, r4
 800820c:	d107      	bne.n	800821e <_dtoa_r+0xb1e>
 800820e:	f000 f9cb 	bl	80085a8 <__multadd>
 8008212:	4680      	mov	r8, r0
 8008214:	4607      	mov	r7, r0
 8008216:	9b04      	ldr	r3, [sp, #16]
 8008218:	3301      	adds	r3, #1
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	e775      	b.n	800810a <_dtoa_r+0xa0a>
 800821e:	f000 f9c3 	bl	80085a8 <__multadd>
 8008222:	4639      	mov	r1, r7
 8008224:	4680      	mov	r8, r0
 8008226:	2300      	movs	r3, #0
 8008228:	220a      	movs	r2, #10
 800822a:	4620      	mov	r0, r4
 800822c:	f000 f9bc 	bl	80085a8 <__multadd>
 8008230:	4607      	mov	r7, r0
 8008232:	e7f0      	b.n	8008216 <_dtoa_r+0xb16>
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	9d00      	ldr	r5, [sp, #0]
 800823a:	4631      	mov	r1, r6
 800823c:	4650      	mov	r0, sl
 800823e:	f7ff f9d4 	bl	80075ea <quorem>
 8008242:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008246:	9b00      	ldr	r3, [sp, #0]
 8008248:	f805 9b01 	strb.w	r9, [r5], #1
 800824c:	1aea      	subs	r2, r5, r3
 800824e:	9b01      	ldr	r3, [sp, #4]
 8008250:	4293      	cmp	r3, r2
 8008252:	dd07      	ble.n	8008264 <_dtoa_r+0xb64>
 8008254:	4651      	mov	r1, sl
 8008256:	2300      	movs	r3, #0
 8008258:	220a      	movs	r2, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f000 f9a4 	bl	80085a8 <__multadd>
 8008260:	4682      	mov	sl, r0
 8008262:	e7ea      	b.n	800823a <_dtoa_r+0xb3a>
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	bfc8      	it	gt
 800826a:	461d      	movgt	r5, r3
 800826c:	9b00      	ldr	r3, [sp, #0]
 800826e:	bfd8      	it	le
 8008270:	2501      	movle	r5, #1
 8008272:	441d      	add	r5, r3
 8008274:	f04f 0800 	mov.w	r8, #0
 8008278:	4651      	mov	r1, sl
 800827a:	2201      	movs	r2, #1
 800827c:	4620      	mov	r0, r4
 800827e:	f000 fb41 	bl	8008904 <__lshift>
 8008282:	4631      	mov	r1, r6
 8008284:	4682      	mov	sl, r0
 8008286:	f000 fba9 	bl	80089dc <__mcmp>
 800828a:	2800      	cmp	r0, #0
 800828c:	dc96      	bgt.n	80081bc <_dtoa_r+0xabc>
 800828e:	d102      	bne.n	8008296 <_dtoa_r+0xb96>
 8008290:	f019 0f01 	tst.w	r9, #1
 8008294:	d192      	bne.n	80081bc <_dtoa_r+0xabc>
 8008296:	462b      	mov	r3, r5
 8008298:	461d      	mov	r5, r3
 800829a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800829e:	2a30      	cmp	r2, #48	; 0x30
 80082a0:	d0fa      	beq.n	8008298 <_dtoa_r+0xb98>
 80082a2:	e6dd      	b.n	8008060 <_dtoa_r+0x960>
 80082a4:	9a00      	ldr	r2, [sp, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d189      	bne.n	80081be <_dtoa_r+0xabe>
 80082aa:	f10b 0b01 	add.w	fp, fp, #1
 80082ae:	2331      	movs	r3, #49	; 0x31
 80082b0:	e796      	b.n	80081e0 <_dtoa_r+0xae0>
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <_dtoa_r+0xbdc>)
 80082b4:	f7ff ba99 	b.w	80077ea <_dtoa_r+0xea>
 80082b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f47f aa6d 	bne.w	800779a <_dtoa_r+0x9a>
 80082c0:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <_dtoa_r+0xbe0>)
 80082c2:	f7ff ba92 	b.w	80077ea <_dtoa_r+0xea>
 80082c6:	9b01      	ldr	r3, [sp, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	dcb5      	bgt.n	8008238 <_dtoa_r+0xb38>
 80082cc:	9b07      	ldr	r3, [sp, #28]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	f73f aeb1 	bgt.w	8008036 <_dtoa_r+0x936>
 80082d4:	e7b0      	b.n	8008238 <_dtoa_r+0xb38>
 80082d6:	bf00      	nop
 80082d8:	0800987c 	.word	0x0800987c
 80082dc:	080097dc 	.word	0x080097dc
 80082e0:	08009800 	.word	0x08009800

080082e4 <_free_r>:
 80082e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082e6:	2900      	cmp	r1, #0
 80082e8:	d044      	beq.n	8008374 <_free_r+0x90>
 80082ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ee:	9001      	str	r0, [sp, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f1a1 0404 	sub.w	r4, r1, #4
 80082f6:	bfb8      	it	lt
 80082f8:	18e4      	addlt	r4, r4, r3
 80082fa:	f000 f8e7 	bl	80084cc <__malloc_lock>
 80082fe:	4a1e      	ldr	r2, [pc, #120]	; (8008378 <_free_r+0x94>)
 8008300:	9801      	ldr	r0, [sp, #4]
 8008302:	6813      	ldr	r3, [r2, #0]
 8008304:	b933      	cbnz	r3, 8008314 <_free_r+0x30>
 8008306:	6063      	str	r3, [r4, #4]
 8008308:	6014      	str	r4, [r2, #0]
 800830a:	b003      	add	sp, #12
 800830c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008310:	f000 b8e2 	b.w	80084d8 <__malloc_unlock>
 8008314:	42a3      	cmp	r3, r4
 8008316:	d908      	bls.n	800832a <_free_r+0x46>
 8008318:	6825      	ldr	r5, [r4, #0]
 800831a:	1961      	adds	r1, r4, r5
 800831c:	428b      	cmp	r3, r1
 800831e:	bf01      	itttt	eq
 8008320:	6819      	ldreq	r1, [r3, #0]
 8008322:	685b      	ldreq	r3, [r3, #4]
 8008324:	1949      	addeq	r1, r1, r5
 8008326:	6021      	streq	r1, [r4, #0]
 8008328:	e7ed      	b.n	8008306 <_free_r+0x22>
 800832a:	461a      	mov	r2, r3
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	b10b      	cbz	r3, 8008334 <_free_r+0x50>
 8008330:	42a3      	cmp	r3, r4
 8008332:	d9fa      	bls.n	800832a <_free_r+0x46>
 8008334:	6811      	ldr	r1, [r2, #0]
 8008336:	1855      	adds	r5, r2, r1
 8008338:	42a5      	cmp	r5, r4
 800833a:	d10b      	bne.n	8008354 <_free_r+0x70>
 800833c:	6824      	ldr	r4, [r4, #0]
 800833e:	4421      	add	r1, r4
 8008340:	1854      	adds	r4, r2, r1
 8008342:	42a3      	cmp	r3, r4
 8008344:	6011      	str	r1, [r2, #0]
 8008346:	d1e0      	bne.n	800830a <_free_r+0x26>
 8008348:	681c      	ldr	r4, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	6053      	str	r3, [r2, #4]
 800834e:	440c      	add	r4, r1
 8008350:	6014      	str	r4, [r2, #0]
 8008352:	e7da      	b.n	800830a <_free_r+0x26>
 8008354:	d902      	bls.n	800835c <_free_r+0x78>
 8008356:	230c      	movs	r3, #12
 8008358:	6003      	str	r3, [r0, #0]
 800835a:	e7d6      	b.n	800830a <_free_r+0x26>
 800835c:	6825      	ldr	r5, [r4, #0]
 800835e:	1961      	adds	r1, r4, r5
 8008360:	428b      	cmp	r3, r1
 8008362:	bf04      	itt	eq
 8008364:	6819      	ldreq	r1, [r3, #0]
 8008366:	685b      	ldreq	r3, [r3, #4]
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	bf04      	itt	eq
 800836c:	1949      	addeq	r1, r1, r5
 800836e:	6021      	streq	r1, [r4, #0]
 8008370:	6054      	str	r4, [r2, #4]
 8008372:	e7ca      	b.n	800830a <_free_r+0x26>
 8008374:	b003      	add	sp, #12
 8008376:	bd30      	pop	{r4, r5, pc}
 8008378:	200044e8 	.word	0x200044e8

0800837c <malloc>:
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <malloc+0xc>)
 800837e:	4601      	mov	r1, r0
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f000 b823 	b.w	80083cc <_malloc_r>
 8008386:	bf00      	nop
 8008388:	20000068 	.word	0x20000068

0800838c <sbrk_aligned>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	4e0e      	ldr	r6, [pc, #56]	; (80083c8 <sbrk_aligned+0x3c>)
 8008390:	460c      	mov	r4, r1
 8008392:	6831      	ldr	r1, [r6, #0]
 8008394:	4605      	mov	r5, r0
 8008396:	b911      	cbnz	r1, 800839e <sbrk_aligned+0x12>
 8008398:	f000 fe40 	bl	800901c <_sbrk_r>
 800839c:	6030      	str	r0, [r6, #0]
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 fe3b 	bl	800901c <_sbrk_r>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d00a      	beq.n	80083c0 <sbrk_aligned+0x34>
 80083aa:	1cc4      	adds	r4, r0, #3
 80083ac:	f024 0403 	bic.w	r4, r4, #3
 80083b0:	42a0      	cmp	r0, r4
 80083b2:	d007      	beq.n	80083c4 <sbrk_aligned+0x38>
 80083b4:	1a21      	subs	r1, r4, r0
 80083b6:	4628      	mov	r0, r5
 80083b8:	f000 fe30 	bl	800901c <_sbrk_r>
 80083bc:	3001      	adds	r0, #1
 80083be:	d101      	bne.n	80083c4 <sbrk_aligned+0x38>
 80083c0:	f04f 34ff 	mov.w	r4, #4294967295
 80083c4:	4620      	mov	r0, r4
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	200044ec 	.word	0x200044ec

080083cc <_malloc_r>:
 80083cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d0:	1ccd      	adds	r5, r1, #3
 80083d2:	f025 0503 	bic.w	r5, r5, #3
 80083d6:	3508      	adds	r5, #8
 80083d8:	2d0c      	cmp	r5, #12
 80083da:	bf38      	it	cc
 80083dc:	250c      	movcc	r5, #12
 80083de:	2d00      	cmp	r5, #0
 80083e0:	4607      	mov	r7, r0
 80083e2:	db01      	blt.n	80083e8 <_malloc_r+0x1c>
 80083e4:	42a9      	cmp	r1, r5
 80083e6:	d905      	bls.n	80083f4 <_malloc_r+0x28>
 80083e8:	230c      	movs	r3, #12
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	2600      	movs	r6, #0
 80083ee:	4630      	mov	r0, r6
 80083f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084c8 <_malloc_r+0xfc>
 80083f8:	f000 f868 	bl	80084cc <__malloc_lock>
 80083fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008400:	461c      	mov	r4, r3
 8008402:	bb5c      	cbnz	r4, 800845c <_malloc_r+0x90>
 8008404:	4629      	mov	r1, r5
 8008406:	4638      	mov	r0, r7
 8008408:	f7ff ffc0 	bl	800838c <sbrk_aligned>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	4604      	mov	r4, r0
 8008410:	d155      	bne.n	80084be <_malloc_r+0xf2>
 8008412:	f8d8 4000 	ldr.w	r4, [r8]
 8008416:	4626      	mov	r6, r4
 8008418:	2e00      	cmp	r6, #0
 800841a:	d145      	bne.n	80084a8 <_malloc_r+0xdc>
 800841c:	2c00      	cmp	r4, #0
 800841e:	d048      	beq.n	80084b2 <_malloc_r+0xe6>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	4631      	mov	r1, r6
 8008424:	4638      	mov	r0, r7
 8008426:	eb04 0903 	add.w	r9, r4, r3
 800842a:	f000 fdf7 	bl	800901c <_sbrk_r>
 800842e:	4581      	cmp	r9, r0
 8008430:	d13f      	bne.n	80084b2 <_malloc_r+0xe6>
 8008432:	6821      	ldr	r1, [r4, #0]
 8008434:	1a6d      	subs	r5, r5, r1
 8008436:	4629      	mov	r1, r5
 8008438:	4638      	mov	r0, r7
 800843a:	f7ff ffa7 	bl	800838c <sbrk_aligned>
 800843e:	3001      	adds	r0, #1
 8008440:	d037      	beq.n	80084b2 <_malloc_r+0xe6>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	442b      	add	r3, r5
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	f8d8 3000 	ldr.w	r3, [r8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d038      	beq.n	80084c2 <_malloc_r+0xf6>
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	42a2      	cmp	r2, r4
 8008454:	d12b      	bne.n	80084ae <_malloc_r+0xe2>
 8008456:	2200      	movs	r2, #0
 8008458:	605a      	str	r2, [r3, #4]
 800845a:	e00f      	b.n	800847c <_malloc_r+0xb0>
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	1b52      	subs	r2, r2, r5
 8008460:	d41f      	bmi.n	80084a2 <_malloc_r+0xd6>
 8008462:	2a0b      	cmp	r2, #11
 8008464:	d917      	bls.n	8008496 <_malloc_r+0xca>
 8008466:	1961      	adds	r1, r4, r5
 8008468:	42a3      	cmp	r3, r4
 800846a:	6025      	str	r5, [r4, #0]
 800846c:	bf18      	it	ne
 800846e:	6059      	strne	r1, [r3, #4]
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	bf08      	it	eq
 8008474:	f8c8 1000 	streq.w	r1, [r8]
 8008478:	5162      	str	r2, [r4, r5]
 800847a:	604b      	str	r3, [r1, #4]
 800847c:	4638      	mov	r0, r7
 800847e:	f104 060b 	add.w	r6, r4, #11
 8008482:	f000 f829 	bl	80084d8 <__malloc_unlock>
 8008486:	f026 0607 	bic.w	r6, r6, #7
 800848a:	1d23      	adds	r3, r4, #4
 800848c:	1af2      	subs	r2, r6, r3
 800848e:	d0ae      	beq.n	80083ee <_malloc_r+0x22>
 8008490:	1b9b      	subs	r3, r3, r6
 8008492:	50a3      	str	r3, [r4, r2]
 8008494:	e7ab      	b.n	80083ee <_malloc_r+0x22>
 8008496:	42a3      	cmp	r3, r4
 8008498:	6862      	ldr	r2, [r4, #4]
 800849a:	d1dd      	bne.n	8008458 <_malloc_r+0x8c>
 800849c:	f8c8 2000 	str.w	r2, [r8]
 80084a0:	e7ec      	b.n	800847c <_malloc_r+0xb0>
 80084a2:	4623      	mov	r3, r4
 80084a4:	6864      	ldr	r4, [r4, #4]
 80084a6:	e7ac      	b.n	8008402 <_malloc_r+0x36>
 80084a8:	4634      	mov	r4, r6
 80084aa:	6876      	ldr	r6, [r6, #4]
 80084ac:	e7b4      	b.n	8008418 <_malloc_r+0x4c>
 80084ae:	4613      	mov	r3, r2
 80084b0:	e7cc      	b.n	800844c <_malloc_r+0x80>
 80084b2:	230c      	movs	r3, #12
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	4638      	mov	r0, r7
 80084b8:	f000 f80e 	bl	80084d8 <__malloc_unlock>
 80084bc:	e797      	b.n	80083ee <_malloc_r+0x22>
 80084be:	6025      	str	r5, [r4, #0]
 80084c0:	e7dc      	b.n	800847c <_malloc_r+0xb0>
 80084c2:	605b      	str	r3, [r3, #4]
 80084c4:	deff      	udf	#255	; 0xff
 80084c6:	bf00      	nop
 80084c8:	200044e8 	.word	0x200044e8

080084cc <__malloc_lock>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__malloc_lock+0x8>)
 80084ce:	f7ff b87c 	b.w	80075ca <__retarget_lock_acquire_recursive>
 80084d2:	bf00      	nop
 80084d4:	200044e4 	.word	0x200044e4

080084d8 <__malloc_unlock>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__malloc_unlock+0x8>)
 80084da:	f7ff b877 	b.w	80075cc <__retarget_lock_release_recursive>
 80084de:	bf00      	nop
 80084e0:	200044e4 	.word	0x200044e4

080084e4 <_Balloc>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	69c6      	ldr	r6, [r0, #28]
 80084e8:	4604      	mov	r4, r0
 80084ea:	460d      	mov	r5, r1
 80084ec:	b976      	cbnz	r6, 800850c <_Balloc+0x28>
 80084ee:	2010      	movs	r0, #16
 80084f0:	f7ff ff44 	bl	800837c <malloc>
 80084f4:	4602      	mov	r2, r0
 80084f6:	61e0      	str	r0, [r4, #28]
 80084f8:	b920      	cbnz	r0, 8008504 <_Balloc+0x20>
 80084fa:	4b18      	ldr	r3, [pc, #96]	; (800855c <_Balloc+0x78>)
 80084fc:	4818      	ldr	r0, [pc, #96]	; (8008560 <_Balloc+0x7c>)
 80084fe:	216b      	movs	r1, #107	; 0x6b
 8008500:	f000 fd9c 	bl	800903c <__assert_func>
 8008504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008508:	6006      	str	r6, [r0, #0]
 800850a:	60c6      	str	r6, [r0, #12]
 800850c:	69e6      	ldr	r6, [r4, #28]
 800850e:	68f3      	ldr	r3, [r6, #12]
 8008510:	b183      	cbz	r3, 8008534 <_Balloc+0x50>
 8008512:	69e3      	ldr	r3, [r4, #28]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800851a:	b9b8      	cbnz	r0, 800854c <_Balloc+0x68>
 800851c:	2101      	movs	r1, #1
 800851e:	fa01 f605 	lsl.w	r6, r1, r5
 8008522:	1d72      	adds	r2, r6, #5
 8008524:	0092      	lsls	r2, r2, #2
 8008526:	4620      	mov	r0, r4
 8008528:	f000 fda6 	bl	8009078 <_calloc_r>
 800852c:	b160      	cbz	r0, 8008548 <_Balloc+0x64>
 800852e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008532:	e00e      	b.n	8008552 <_Balloc+0x6e>
 8008534:	2221      	movs	r2, #33	; 0x21
 8008536:	2104      	movs	r1, #4
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fd9d 	bl	8009078 <_calloc_r>
 800853e:	69e3      	ldr	r3, [r4, #28]
 8008540:	60f0      	str	r0, [r6, #12]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e4      	bne.n	8008512 <_Balloc+0x2e>
 8008548:	2000      	movs	r0, #0
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	6802      	ldr	r2, [r0, #0]
 800854e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008552:	2300      	movs	r3, #0
 8008554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008558:	e7f7      	b.n	800854a <_Balloc+0x66>
 800855a:	bf00      	nop
 800855c:	0800980d 	.word	0x0800980d
 8008560:	0800988d 	.word	0x0800988d

08008564 <_Bfree>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	69c6      	ldr	r6, [r0, #28]
 8008568:	4605      	mov	r5, r0
 800856a:	460c      	mov	r4, r1
 800856c:	b976      	cbnz	r6, 800858c <_Bfree+0x28>
 800856e:	2010      	movs	r0, #16
 8008570:	f7ff ff04 	bl	800837c <malloc>
 8008574:	4602      	mov	r2, r0
 8008576:	61e8      	str	r0, [r5, #28]
 8008578:	b920      	cbnz	r0, 8008584 <_Bfree+0x20>
 800857a:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <_Bfree+0x3c>)
 800857c:	4809      	ldr	r0, [pc, #36]	; (80085a4 <_Bfree+0x40>)
 800857e:	218f      	movs	r1, #143	; 0x8f
 8008580:	f000 fd5c 	bl	800903c <__assert_func>
 8008584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008588:	6006      	str	r6, [r0, #0]
 800858a:	60c6      	str	r6, [r0, #12]
 800858c:	b13c      	cbz	r4, 800859e <_Bfree+0x3a>
 800858e:	69eb      	ldr	r3, [r5, #28]
 8008590:	6862      	ldr	r2, [r4, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008598:	6021      	str	r1, [r4, #0]
 800859a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	0800980d 	.word	0x0800980d
 80085a4:	0800988d 	.word	0x0800988d

080085a8 <__multadd>:
 80085a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ac:	690d      	ldr	r5, [r1, #16]
 80085ae:	4607      	mov	r7, r0
 80085b0:	460c      	mov	r4, r1
 80085b2:	461e      	mov	r6, r3
 80085b4:	f101 0c14 	add.w	ip, r1, #20
 80085b8:	2000      	movs	r0, #0
 80085ba:	f8dc 3000 	ldr.w	r3, [ip]
 80085be:	b299      	uxth	r1, r3
 80085c0:	fb02 6101 	mla	r1, r2, r1, r6
 80085c4:	0c1e      	lsrs	r6, r3, #16
 80085c6:	0c0b      	lsrs	r3, r1, #16
 80085c8:	fb02 3306 	mla	r3, r2, r6, r3
 80085cc:	b289      	uxth	r1, r1
 80085ce:	3001      	adds	r0, #1
 80085d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085d4:	4285      	cmp	r5, r0
 80085d6:	f84c 1b04 	str.w	r1, [ip], #4
 80085da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085de:	dcec      	bgt.n	80085ba <__multadd+0x12>
 80085e0:	b30e      	cbz	r6, 8008626 <__multadd+0x7e>
 80085e2:	68a3      	ldr	r3, [r4, #8]
 80085e4:	42ab      	cmp	r3, r5
 80085e6:	dc19      	bgt.n	800861c <__multadd+0x74>
 80085e8:	6861      	ldr	r1, [r4, #4]
 80085ea:	4638      	mov	r0, r7
 80085ec:	3101      	adds	r1, #1
 80085ee:	f7ff ff79 	bl	80084e4 <_Balloc>
 80085f2:	4680      	mov	r8, r0
 80085f4:	b928      	cbnz	r0, 8008602 <__multadd+0x5a>
 80085f6:	4602      	mov	r2, r0
 80085f8:	4b0c      	ldr	r3, [pc, #48]	; (800862c <__multadd+0x84>)
 80085fa:	480d      	ldr	r0, [pc, #52]	; (8008630 <__multadd+0x88>)
 80085fc:	21ba      	movs	r1, #186	; 0xba
 80085fe:	f000 fd1d 	bl	800903c <__assert_func>
 8008602:	6922      	ldr	r2, [r4, #16]
 8008604:	3202      	adds	r2, #2
 8008606:	f104 010c 	add.w	r1, r4, #12
 800860a:	0092      	lsls	r2, r2, #2
 800860c:	300c      	adds	r0, #12
 800860e:	f7fe ffde 	bl	80075ce <memcpy>
 8008612:	4621      	mov	r1, r4
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff ffa5 	bl	8008564 <_Bfree>
 800861a:	4644      	mov	r4, r8
 800861c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008620:	3501      	adds	r5, #1
 8008622:	615e      	str	r6, [r3, #20]
 8008624:	6125      	str	r5, [r4, #16]
 8008626:	4620      	mov	r0, r4
 8008628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800862c:	0800987c 	.word	0x0800987c
 8008630:	0800988d 	.word	0x0800988d

08008634 <__hi0bits>:
 8008634:	0c03      	lsrs	r3, r0, #16
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	b9d3      	cbnz	r3, 8008670 <__hi0bits+0x3c>
 800863a:	0400      	lsls	r0, r0, #16
 800863c:	2310      	movs	r3, #16
 800863e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008642:	bf04      	itt	eq
 8008644:	0200      	lsleq	r0, r0, #8
 8008646:	3308      	addeq	r3, #8
 8008648:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800864c:	bf04      	itt	eq
 800864e:	0100      	lsleq	r0, r0, #4
 8008650:	3304      	addeq	r3, #4
 8008652:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008656:	bf04      	itt	eq
 8008658:	0080      	lsleq	r0, r0, #2
 800865a:	3302      	addeq	r3, #2
 800865c:	2800      	cmp	r0, #0
 800865e:	db05      	blt.n	800866c <__hi0bits+0x38>
 8008660:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008664:	f103 0301 	add.w	r3, r3, #1
 8008668:	bf08      	it	eq
 800866a:	2320      	moveq	r3, #32
 800866c:	4618      	mov	r0, r3
 800866e:	4770      	bx	lr
 8008670:	2300      	movs	r3, #0
 8008672:	e7e4      	b.n	800863e <__hi0bits+0xa>

08008674 <__lo0bits>:
 8008674:	6803      	ldr	r3, [r0, #0]
 8008676:	f013 0207 	ands.w	r2, r3, #7
 800867a:	d00c      	beq.n	8008696 <__lo0bits+0x22>
 800867c:	07d9      	lsls	r1, r3, #31
 800867e:	d422      	bmi.n	80086c6 <__lo0bits+0x52>
 8008680:	079a      	lsls	r2, r3, #30
 8008682:	bf49      	itett	mi
 8008684:	085b      	lsrmi	r3, r3, #1
 8008686:	089b      	lsrpl	r3, r3, #2
 8008688:	6003      	strmi	r3, [r0, #0]
 800868a:	2201      	movmi	r2, #1
 800868c:	bf5c      	itt	pl
 800868e:	6003      	strpl	r3, [r0, #0]
 8008690:	2202      	movpl	r2, #2
 8008692:	4610      	mov	r0, r2
 8008694:	4770      	bx	lr
 8008696:	b299      	uxth	r1, r3
 8008698:	b909      	cbnz	r1, 800869e <__lo0bits+0x2a>
 800869a:	0c1b      	lsrs	r3, r3, #16
 800869c:	2210      	movs	r2, #16
 800869e:	b2d9      	uxtb	r1, r3
 80086a0:	b909      	cbnz	r1, 80086a6 <__lo0bits+0x32>
 80086a2:	3208      	adds	r2, #8
 80086a4:	0a1b      	lsrs	r3, r3, #8
 80086a6:	0719      	lsls	r1, r3, #28
 80086a8:	bf04      	itt	eq
 80086aa:	091b      	lsreq	r3, r3, #4
 80086ac:	3204      	addeq	r2, #4
 80086ae:	0799      	lsls	r1, r3, #30
 80086b0:	bf04      	itt	eq
 80086b2:	089b      	lsreq	r3, r3, #2
 80086b4:	3202      	addeq	r2, #2
 80086b6:	07d9      	lsls	r1, r3, #31
 80086b8:	d403      	bmi.n	80086c2 <__lo0bits+0x4e>
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	f102 0201 	add.w	r2, r2, #1
 80086c0:	d003      	beq.n	80086ca <__lo0bits+0x56>
 80086c2:	6003      	str	r3, [r0, #0]
 80086c4:	e7e5      	b.n	8008692 <__lo0bits+0x1e>
 80086c6:	2200      	movs	r2, #0
 80086c8:	e7e3      	b.n	8008692 <__lo0bits+0x1e>
 80086ca:	2220      	movs	r2, #32
 80086cc:	e7e1      	b.n	8008692 <__lo0bits+0x1e>
	...

080086d0 <__i2b>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	460c      	mov	r4, r1
 80086d4:	2101      	movs	r1, #1
 80086d6:	f7ff ff05 	bl	80084e4 <_Balloc>
 80086da:	4602      	mov	r2, r0
 80086dc:	b928      	cbnz	r0, 80086ea <__i2b+0x1a>
 80086de:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <__i2b+0x24>)
 80086e0:	4805      	ldr	r0, [pc, #20]	; (80086f8 <__i2b+0x28>)
 80086e2:	f240 1145 	movw	r1, #325	; 0x145
 80086e6:	f000 fca9 	bl	800903c <__assert_func>
 80086ea:	2301      	movs	r3, #1
 80086ec:	6144      	str	r4, [r0, #20]
 80086ee:	6103      	str	r3, [r0, #16]
 80086f0:	bd10      	pop	{r4, pc}
 80086f2:	bf00      	nop
 80086f4:	0800987c 	.word	0x0800987c
 80086f8:	0800988d 	.word	0x0800988d

080086fc <__multiply>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	4691      	mov	r9, r2
 8008702:	690a      	ldr	r2, [r1, #16]
 8008704:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008708:	429a      	cmp	r2, r3
 800870a:	bfb8      	it	lt
 800870c:	460b      	movlt	r3, r1
 800870e:	460c      	mov	r4, r1
 8008710:	bfbc      	itt	lt
 8008712:	464c      	movlt	r4, r9
 8008714:	4699      	movlt	r9, r3
 8008716:	6927      	ldr	r7, [r4, #16]
 8008718:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	6861      	ldr	r1, [r4, #4]
 8008720:	eb07 060a 	add.w	r6, r7, sl
 8008724:	42b3      	cmp	r3, r6
 8008726:	b085      	sub	sp, #20
 8008728:	bfb8      	it	lt
 800872a:	3101      	addlt	r1, #1
 800872c:	f7ff feda 	bl	80084e4 <_Balloc>
 8008730:	b930      	cbnz	r0, 8008740 <__multiply+0x44>
 8008732:	4602      	mov	r2, r0
 8008734:	4b44      	ldr	r3, [pc, #272]	; (8008848 <__multiply+0x14c>)
 8008736:	4845      	ldr	r0, [pc, #276]	; (800884c <__multiply+0x150>)
 8008738:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800873c:	f000 fc7e 	bl	800903c <__assert_func>
 8008740:	f100 0514 	add.w	r5, r0, #20
 8008744:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008748:	462b      	mov	r3, r5
 800874a:	2200      	movs	r2, #0
 800874c:	4543      	cmp	r3, r8
 800874e:	d321      	bcc.n	8008794 <__multiply+0x98>
 8008750:	f104 0314 	add.w	r3, r4, #20
 8008754:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008758:	f109 0314 	add.w	r3, r9, #20
 800875c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008760:	9202      	str	r2, [sp, #8]
 8008762:	1b3a      	subs	r2, r7, r4
 8008764:	3a15      	subs	r2, #21
 8008766:	f022 0203 	bic.w	r2, r2, #3
 800876a:	3204      	adds	r2, #4
 800876c:	f104 0115 	add.w	r1, r4, #21
 8008770:	428f      	cmp	r7, r1
 8008772:	bf38      	it	cc
 8008774:	2204      	movcc	r2, #4
 8008776:	9201      	str	r2, [sp, #4]
 8008778:	9a02      	ldr	r2, [sp, #8]
 800877a:	9303      	str	r3, [sp, #12]
 800877c:	429a      	cmp	r2, r3
 800877e:	d80c      	bhi.n	800879a <__multiply+0x9e>
 8008780:	2e00      	cmp	r6, #0
 8008782:	dd03      	ble.n	800878c <__multiply+0x90>
 8008784:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008788:	2b00      	cmp	r3, #0
 800878a:	d05b      	beq.n	8008844 <__multiply+0x148>
 800878c:	6106      	str	r6, [r0, #16]
 800878e:	b005      	add	sp, #20
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	f843 2b04 	str.w	r2, [r3], #4
 8008798:	e7d8      	b.n	800874c <__multiply+0x50>
 800879a:	f8b3 a000 	ldrh.w	sl, [r3]
 800879e:	f1ba 0f00 	cmp.w	sl, #0
 80087a2:	d024      	beq.n	80087ee <__multiply+0xf2>
 80087a4:	f104 0e14 	add.w	lr, r4, #20
 80087a8:	46a9      	mov	r9, r5
 80087aa:	f04f 0c00 	mov.w	ip, #0
 80087ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087b2:	f8d9 1000 	ldr.w	r1, [r9]
 80087b6:	fa1f fb82 	uxth.w	fp, r2
 80087ba:	b289      	uxth	r1, r1
 80087bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80087c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087c4:	f8d9 2000 	ldr.w	r2, [r9]
 80087c8:	4461      	add	r1, ip
 80087ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80087d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087d6:	b289      	uxth	r1, r1
 80087d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087dc:	4577      	cmp	r7, lr
 80087de:	f849 1b04 	str.w	r1, [r9], #4
 80087e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087e6:	d8e2      	bhi.n	80087ae <__multiply+0xb2>
 80087e8:	9a01      	ldr	r2, [sp, #4]
 80087ea:	f845 c002 	str.w	ip, [r5, r2]
 80087ee:	9a03      	ldr	r2, [sp, #12]
 80087f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087f4:	3304      	adds	r3, #4
 80087f6:	f1b9 0f00 	cmp.w	r9, #0
 80087fa:	d021      	beq.n	8008840 <__multiply+0x144>
 80087fc:	6829      	ldr	r1, [r5, #0]
 80087fe:	f104 0c14 	add.w	ip, r4, #20
 8008802:	46ae      	mov	lr, r5
 8008804:	f04f 0a00 	mov.w	sl, #0
 8008808:	f8bc b000 	ldrh.w	fp, [ip]
 800880c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008810:	fb09 220b 	mla	r2, r9, fp, r2
 8008814:	4452      	add	r2, sl
 8008816:	b289      	uxth	r1, r1
 8008818:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800881c:	f84e 1b04 	str.w	r1, [lr], #4
 8008820:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008824:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008828:	f8be 1000 	ldrh.w	r1, [lr]
 800882c:	fb09 110a 	mla	r1, r9, sl, r1
 8008830:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008834:	4567      	cmp	r7, ip
 8008836:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800883a:	d8e5      	bhi.n	8008808 <__multiply+0x10c>
 800883c:	9a01      	ldr	r2, [sp, #4]
 800883e:	50a9      	str	r1, [r5, r2]
 8008840:	3504      	adds	r5, #4
 8008842:	e799      	b.n	8008778 <__multiply+0x7c>
 8008844:	3e01      	subs	r6, #1
 8008846:	e79b      	b.n	8008780 <__multiply+0x84>
 8008848:	0800987c 	.word	0x0800987c
 800884c:	0800988d 	.word	0x0800988d

08008850 <__pow5mult>:
 8008850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008854:	4615      	mov	r5, r2
 8008856:	f012 0203 	ands.w	r2, r2, #3
 800885a:	4606      	mov	r6, r0
 800885c:	460f      	mov	r7, r1
 800885e:	d007      	beq.n	8008870 <__pow5mult+0x20>
 8008860:	4c25      	ldr	r4, [pc, #148]	; (80088f8 <__pow5mult+0xa8>)
 8008862:	3a01      	subs	r2, #1
 8008864:	2300      	movs	r3, #0
 8008866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800886a:	f7ff fe9d 	bl	80085a8 <__multadd>
 800886e:	4607      	mov	r7, r0
 8008870:	10ad      	asrs	r5, r5, #2
 8008872:	d03d      	beq.n	80088f0 <__pow5mult+0xa0>
 8008874:	69f4      	ldr	r4, [r6, #28]
 8008876:	b97c      	cbnz	r4, 8008898 <__pow5mult+0x48>
 8008878:	2010      	movs	r0, #16
 800887a:	f7ff fd7f 	bl	800837c <malloc>
 800887e:	4602      	mov	r2, r0
 8008880:	61f0      	str	r0, [r6, #28]
 8008882:	b928      	cbnz	r0, 8008890 <__pow5mult+0x40>
 8008884:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <__pow5mult+0xac>)
 8008886:	481e      	ldr	r0, [pc, #120]	; (8008900 <__pow5mult+0xb0>)
 8008888:	f240 11b3 	movw	r1, #435	; 0x1b3
 800888c:	f000 fbd6 	bl	800903c <__assert_func>
 8008890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008894:	6004      	str	r4, [r0, #0]
 8008896:	60c4      	str	r4, [r0, #12]
 8008898:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800889c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088a0:	b94c      	cbnz	r4, 80088b6 <__pow5mult+0x66>
 80088a2:	f240 2171 	movw	r1, #625	; 0x271
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7ff ff12 	bl	80086d0 <__i2b>
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80088b2:	4604      	mov	r4, r0
 80088b4:	6003      	str	r3, [r0, #0]
 80088b6:	f04f 0900 	mov.w	r9, #0
 80088ba:	07eb      	lsls	r3, r5, #31
 80088bc:	d50a      	bpl.n	80088d4 <__pow5mult+0x84>
 80088be:	4639      	mov	r1, r7
 80088c0:	4622      	mov	r2, r4
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7ff ff1a 	bl	80086fc <__multiply>
 80088c8:	4639      	mov	r1, r7
 80088ca:	4680      	mov	r8, r0
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7ff fe49 	bl	8008564 <_Bfree>
 80088d2:	4647      	mov	r7, r8
 80088d4:	106d      	asrs	r5, r5, #1
 80088d6:	d00b      	beq.n	80088f0 <__pow5mult+0xa0>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	b938      	cbnz	r0, 80088ec <__pow5mult+0x9c>
 80088dc:	4622      	mov	r2, r4
 80088de:	4621      	mov	r1, r4
 80088e0:	4630      	mov	r0, r6
 80088e2:	f7ff ff0b 	bl	80086fc <__multiply>
 80088e6:	6020      	str	r0, [r4, #0]
 80088e8:	f8c0 9000 	str.w	r9, [r0]
 80088ec:	4604      	mov	r4, r0
 80088ee:	e7e4      	b.n	80088ba <__pow5mult+0x6a>
 80088f0:	4638      	mov	r0, r7
 80088f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f6:	bf00      	nop
 80088f8:	080099d8 	.word	0x080099d8
 80088fc:	0800980d 	.word	0x0800980d
 8008900:	0800988d 	.word	0x0800988d

08008904 <__lshift>:
 8008904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	460c      	mov	r4, r1
 800890a:	6849      	ldr	r1, [r1, #4]
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	4607      	mov	r7, r0
 8008916:	4691      	mov	r9, r2
 8008918:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800891c:	f108 0601 	add.w	r6, r8, #1
 8008920:	42b3      	cmp	r3, r6
 8008922:	db0b      	blt.n	800893c <__lshift+0x38>
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff fddd 	bl	80084e4 <_Balloc>
 800892a:	4605      	mov	r5, r0
 800892c:	b948      	cbnz	r0, 8008942 <__lshift+0x3e>
 800892e:	4602      	mov	r2, r0
 8008930:	4b28      	ldr	r3, [pc, #160]	; (80089d4 <__lshift+0xd0>)
 8008932:	4829      	ldr	r0, [pc, #164]	; (80089d8 <__lshift+0xd4>)
 8008934:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008938:	f000 fb80 	bl	800903c <__assert_func>
 800893c:	3101      	adds	r1, #1
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	e7ee      	b.n	8008920 <__lshift+0x1c>
 8008942:	2300      	movs	r3, #0
 8008944:	f100 0114 	add.w	r1, r0, #20
 8008948:	f100 0210 	add.w	r2, r0, #16
 800894c:	4618      	mov	r0, r3
 800894e:	4553      	cmp	r3, sl
 8008950:	db33      	blt.n	80089ba <__lshift+0xb6>
 8008952:	6920      	ldr	r0, [r4, #16]
 8008954:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008958:	f104 0314 	add.w	r3, r4, #20
 800895c:	f019 091f 	ands.w	r9, r9, #31
 8008960:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008964:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008968:	d02b      	beq.n	80089c2 <__lshift+0xbe>
 800896a:	f1c9 0e20 	rsb	lr, r9, #32
 800896e:	468a      	mov	sl, r1
 8008970:	2200      	movs	r2, #0
 8008972:	6818      	ldr	r0, [r3, #0]
 8008974:	fa00 f009 	lsl.w	r0, r0, r9
 8008978:	4310      	orrs	r0, r2
 800897a:	f84a 0b04 	str.w	r0, [sl], #4
 800897e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008982:	459c      	cmp	ip, r3
 8008984:	fa22 f20e 	lsr.w	r2, r2, lr
 8008988:	d8f3      	bhi.n	8008972 <__lshift+0x6e>
 800898a:	ebac 0304 	sub.w	r3, ip, r4
 800898e:	3b15      	subs	r3, #21
 8008990:	f023 0303 	bic.w	r3, r3, #3
 8008994:	3304      	adds	r3, #4
 8008996:	f104 0015 	add.w	r0, r4, #21
 800899a:	4584      	cmp	ip, r0
 800899c:	bf38      	it	cc
 800899e:	2304      	movcc	r3, #4
 80089a0:	50ca      	str	r2, [r1, r3]
 80089a2:	b10a      	cbz	r2, 80089a8 <__lshift+0xa4>
 80089a4:	f108 0602 	add.w	r6, r8, #2
 80089a8:	3e01      	subs	r6, #1
 80089aa:	4638      	mov	r0, r7
 80089ac:	612e      	str	r6, [r5, #16]
 80089ae:	4621      	mov	r1, r4
 80089b0:	f7ff fdd8 	bl	8008564 <_Bfree>
 80089b4:	4628      	mov	r0, r5
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80089be:	3301      	adds	r3, #1
 80089c0:	e7c5      	b.n	800894e <__lshift+0x4a>
 80089c2:	3904      	subs	r1, #4
 80089c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80089cc:	459c      	cmp	ip, r3
 80089ce:	d8f9      	bhi.n	80089c4 <__lshift+0xc0>
 80089d0:	e7ea      	b.n	80089a8 <__lshift+0xa4>
 80089d2:	bf00      	nop
 80089d4:	0800987c 	.word	0x0800987c
 80089d8:	0800988d 	.word	0x0800988d

080089dc <__mcmp>:
 80089dc:	b530      	push	{r4, r5, lr}
 80089de:	6902      	ldr	r2, [r0, #16]
 80089e0:	690c      	ldr	r4, [r1, #16]
 80089e2:	1b12      	subs	r2, r2, r4
 80089e4:	d10e      	bne.n	8008a04 <__mcmp+0x28>
 80089e6:	f100 0314 	add.w	r3, r0, #20
 80089ea:	3114      	adds	r1, #20
 80089ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089fc:	42a5      	cmp	r5, r4
 80089fe:	d003      	beq.n	8008a08 <__mcmp+0x2c>
 8008a00:	d305      	bcc.n	8008a0e <__mcmp+0x32>
 8008a02:	2201      	movs	r2, #1
 8008a04:	4610      	mov	r0, r2
 8008a06:	bd30      	pop	{r4, r5, pc}
 8008a08:	4283      	cmp	r3, r0
 8008a0a:	d3f3      	bcc.n	80089f4 <__mcmp+0x18>
 8008a0c:	e7fa      	b.n	8008a04 <__mcmp+0x28>
 8008a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a12:	e7f7      	b.n	8008a04 <__mcmp+0x28>

08008a14 <__mdiff>:
 8008a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4690      	mov	r8, r2
 8008a22:	f7ff ffdb 	bl	80089dc <__mcmp>
 8008a26:	1e05      	subs	r5, r0, #0
 8008a28:	d110      	bne.n	8008a4c <__mdiff+0x38>
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f7ff fd59 	bl	80084e4 <_Balloc>
 8008a32:	b930      	cbnz	r0, 8008a42 <__mdiff+0x2e>
 8008a34:	4b3a      	ldr	r3, [pc, #232]	; (8008b20 <__mdiff+0x10c>)
 8008a36:	4602      	mov	r2, r0
 8008a38:	f240 2137 	movw	r1, #567	; 0x237
 8008a3c:	4839      	ldr	r0, [pc, #228]	; (8008b24 <__mdiff+0x110>)
 8008a3e:	f000 fafd 	bl	800903c <__assert_func>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4c:	bfa4      	itt	ge
 8008a4e:	4643      	movge	r3, r8
 8008a50:	46a0      	movge	r8, r4
 8008a52:	4630      	mov	r0, r6
 8008a54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a58:	bfa6      	itte	ge
 8008a5a:	461c      	movge	r4, r3
 8008a5c:	2500      	movge	r5, #0
 8008a5e:	2501      	movlt	r5, #1
 8008a60:	f7ff fd40 	bl	80084e4 <_Balloc>
 8008a64:	b920      	cbnz	r0, 8008a70 <__mdiff+0x5c>
 8008a66:	4b2e      	ldr	r3, [pc, #184]	; (8008b20 <__mdiff+0x10c>)
 8008a68:	4602      	mov	r2, r0
 8008a6a:	f240 2145 	movw	r1, #581	; 0x245
 8008a6e:	e7e5      	b.n	8008a3c <__mdiff+0x28>
 8008a70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a74:	6926      	ldr	r6, [r4, #16]
 8008a76:	60c5      	str	r5, [r0, #12]
 8008a78:	f104 0914 	add.w	r9, r4, #20
 8008a7c:	f108 0514 	add.w	r5, r8, #20
 8008a80:	f100 0e14 	add.w	lr, r0, #20
 8008a84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a8c:	f108 0210 	add.w	r2, r8, #16
 8008a90:	46f2      	mov	sl, lr
 8008a92:	2100      	movs	r1, #0
 8008a94:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a9c:	fa11 f88b 	uxtah	r8, r1, fp
 8008aa0:	b299      	uxth	r1, r3
 8008aa2:	0c1b      	lsrs	r3, r3, #16
 8008aa4:	eba8 0801 	sub.w	r8, r8, r1
 8008aa8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008aac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ab0:	fa1f f888 	uxth.w	r8, r8
 8008ab4:	1419      	asrs	r1, r3, #16
 8008ab6:	454e      	cmp	r6, r9
 8008ab8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008abc:	f84a 3b04 	str.w	r3, [sl], #4
 8008ac0:	d8e8      	bhi.n	8008a94 <__mdiff+0x80>
 8008ac2:	1b33      	subs	r3, r6, r4
 8008ac4:	3b15      	subs	r3, #21
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	3304      	adds	r3, #4
 8008acc:	3415      	adds	r4, #21
 8008ace:	42a6      	cmp	r6, r4
 8008ad0:	bf38      	it	cc
 8008ad2:	2304      	movcc	r3, #4
 8008ad4:	441d      	add	r5, r3
 8008ad6:	4473      	add	r3, lr
 8008ad8:	469e      	mov	lr, r3
 8008ada:	462e      	mov	r6, r5
 8008adc:	4566      	cmp	r6, ip
 8008ade:	d30e      	bcc.n	8008afe <__mdiff+0xea>
 8008ae0:	f10c 0203 	add.w	r2, ip, #3
 8008ae4:	1b52      	subs	r2, r2, r5
 8008ae6:	f022 0203 	bic.w	r2, r2, #3
 8008aea:	3d03      	subs	r5, #3
 8008aec:	45ac      	cmp	ip, r5
 8008aee:	bf38      	it	cc
 8008af0:	2200      	movcc	r2, #0
 8008af2:	4413      	add	r3, r2
 8008af4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008af8:	b17a      	cbz	r2, 8008b1a <__mdiff+0x106>
 8008afa:	6107      	str	r7, [r0, #16]
 8008afc:	e7a4      	b.n	8008a48 <__mdiff+0x34>
 8008afe:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b02:	fa11 f288 	uxtah	r2, r1, r8
 8008b06:	1414      	asrs	r4, r2, #16
 8008b08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b0c:	b292      	uxth	r2, r2
 8008b0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b12:	f84e 2b04 	str.w	r2, [lr], #4
 8008b16:	1421      	asrs	r1, r4, #16
 8008b18:	e7e0      	b.n	8008adc <__mdiff+0xc8>
 8008b1a:	3f01      	subs	r7, #1
 8008b1c:	e7ea      	b.n	8008af4 <__mdiff+0xe0>
 8008b1e:	bf00      	nop
 8008b20:	0800987c 	.word	0x0800987c
 8008b24:	0800988d 	.word	0x0800988d

08008b28 <__d2b>:
 8008b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	2101      	movs	r1, #1
 8008b30:	ec59 8b10 	vmov	r8, r9, d0
 8008b34:	4616      	mov	r6, r2
 8008b36:	f7ff fcd5 	bl	80084e4 <_Balloc>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	b930      	cbnz	r0, 8008b4c <__d2b+0x24>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <__d2b+0xac>)
 8008b42:	4825      	ldr	r0, [pc, #148]	; (8008bd8 <__d2b+0xb0>)
 8008b44:	f240 310f 	movw	r1, #783	; 0x30f
 8008b48:	f000 fa78 	bl	800903c <__assert_func>
 8008b4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b54:	bb2d      	cbnz	r5, 8008ba2 <__d2b+0x7a>
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	f1b8 0300 	subs.w	r3, r8, #0
 8008b5c:	d026      	beq.n	8008bac <__d2b+0x84>
 8008b5e:	4668      	mov	r0, sp
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	f7ff fd87 	bl	8008674 <__lo0bits>
 8008b66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b6a:	b1e8      	cbz	r0, 8008ba8 <__d2b+0x80>
 8008b6c:	f1c0 0320 	rsb	r3, r0, #32
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	430b      	orrs	r3, r1
 8008b76:	40c2      	lsrs	r2, r0
 8008b78:	6163      	str	r3, [r4, #20]
 8008b7a:	9201      	str	r2, [sp, #4]
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	61a3      	str	r3, [r4, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bf14      	ite	ne
 8008b84:	2202      	movne	r2, #2
 8008b86:	2201      	moveq	r2, #1
 8008b88:	6122      	str	r2, [r4, #16]
 8008b8a:	b1bd      	cbz	r5, 8008bbc <__d2b+0x94>
 8008b8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b90:	4405      	add	r5, r0
 8008b92:	603d      	str	r5, [r7, #0]
 8008b94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b98:	6030      	str	r0, [r6, #0]
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	b003      	add	sp, #12
 8008b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ba6:	e7d6      	b.n	8008b56 <__d2b+0x2e>
 8008ba8:	6161      	str	r1, [r4, #20]
 8008baa:	e7e7      	b.n	8008b7c <__d2b+0x54>
 8008bac:	a801      	add	r0, sp, #4
 8008bae:	f7ff fd61 	bl	8008674 <__lo0bits>
 8008bb2:	9b01      	ldr	r3, [sp, #4]
 8008bb4:	6163      	str	r3, [r4, #20]
 8008bb6:	3020      	adds	r0, #32
 8008bb8:	2201      	movs	r2, #1
 8008bba:	e7e5      	b.n	8008b88 <__d2b+0x60>
 8008bbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bc4:	6038      	str	r0, [r7, #0]
 8008bc6:	6918      	ldr	r0, [r3, #16]
 8008bc8:	f7ff fd34 	bl	8008634 <__hi0bits>
 8008bcc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bd0:	e7e2      	b.n	8008b98 <__d2b+0x70>
 8008bd2:	bf00      	nop
 8008bd4:	0800987c 	.word	0x0800987c
 8008bd8:	0800988d 	.word	0x0800988d

08008bdc <__ssputs_r>:
 8008bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be0:	688e      	ldr	r6, [r1, #8]
 8008be2:	461f      	mov	r7, r3
 8008be4:	42be      	cmp	r6, r7
 8008be6:	680b      	ldr	r3, [r1, #0]
 8008be8:	4682      	mov	sl, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	4690      	mov	r8, r2
 8008bee:	d82c      	bhi.n	8008c4a <__ssputs_r+0x6e>
 8008bf0:	898a      	ldrh	r2, [r1, #12]
 8008bf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bf6:	d026      	beq.n	8008c46 <__ssputs_r+0x6a>
 8008bf8:	6965      	ldr	r5, [r4, #20]
 8008bfa:	6909      	ldr	r1, [r1, #16]
 8008bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c00:	eba3 0901 	sub.w	r9, r3, r1
 8008c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c08:	1c7b      	adds	r3, r7, #1
 8008c0a:	444b      	add	r3, r9
 8008c0c:	106d      	asrs	r5, r5, #1
 8008c0e:	429d      	cmp	r5, r3
 8008c10:	bf38      	it	cc
 8008c12:	461d      	movcc	r5, r3
 8008c14:	0553      	lsls	r3, r2, #21
 8008c16:	d527      	bpl.n	8008c68 <__ssputs_r+0x8c>
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7ff fbd7 	bl	80083cc <_malloc_r>
 8008c1e:	4606      	mov	r6, r0
 8008c20:	b360      	cbz	r0, 8008c7c <__ssputs_r+0xa0>
 8008c22:	6921      	ldr	r1, [r4, #16]
 8008c24:	464a      	mov	r2, r9
 8008c26:	f7fe fcd2 	bl	80075ce <memcpy>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	6126      	str	r6, [r4, #16]
 8008c38:	6165      	str	r5, [r4, #20]
 8008c3a:	444e      	add	r6, r9
 8008c3c:	eba5 0509 	sub.w	r5, r5, r9
 8008c40:	6026      	str	r6, [r4, #0]
 8008c42:	60a5      	str	r5, [r4, #8]
 8008c44:	463e      	mov	r6, r7
 8008c46:	42be      	cmp	r6, r7
 8008c48:	d900      	bls.n	8008c4c <__ssputs_r+0x70>
 8008c4a:	463e      	mov	r6, r7
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	4632      	mov	r2, r6
 8008c50:	4641      	mov	r1, r8
 8008c52:	f000 f9c9 	bl	8008fe8 <memmove>
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	1b9b      	subs	r3, r3, r6
 8008c5a:	60a3      	str	r3, [r4, #8]
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	4433      	add	r3, r6
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	2000      	movs	r0, #0
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c68:	462a      	mov	r2, r5
 8008c6a:	f000 fa2d 	bl	80090c8 <_realloc_r>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1e0      	bne.n	8008c36 <__ssputs_r+0x5a>
 8008c74:	6921      	ldr	r1, [r4, #16]
 8008c76:	4650      	mov	r0, sl
 8008c78:	f7ff fb34 	bl	80082e4 <_free_r>
 8008c7c:	230c      	movs	r3, #12
 8008c7e:	f8ca 3000 	str.w	r3, [sl]
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c88:	81a3      	strh	r3, [r4, #12]
 8008c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8e:	e7e9      	b.n	8008c64 <__ssputs_r+0x88>

08008c90 <_svfiprintf_r>:
 8008c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	4698      	mov	r8, r3
 8008c96:	898b      	ldrh	r3, [r1, #12]
 8008c98:	061b      	lsls	r3, r3, #24
 8008c9a:	b09d      	sub	sp, #116	; 0x74
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	460d      	mov	r5, r1
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	d50e      	bpl.n	8008cc2 <_svfiprintf_r+0x32>
 8008ca4:	690b      	ldr	r3, [r1, #16]
 8008ca6:	b963      	cbnz	r3, 8008cc2 <_svfiprintf_r+0x32>
 8008ca8:	2140      	movs	r1, #64	; 0x40
 8008caa:	f7ff fb8f 	bl	80083cc <_malloc_r>
 8008cae:	6028      	str	r0, [r5, #0]
 8008cb0:	6128      	str	r0, [r5, #16]
 8008cb2:	b920      	cbnz	r0, 8008cbe <_svfiprintf_r+0x2e>
 8008cb4:	230c      	movs	r3, #12
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e0d0      	b.n	8008e60 <_svfiprintf_r+0x1d0>
 8008cbe:	2340      	movs	r3, #64	; 0x40
 8008cc0:	616b      	str	r3, [r5, #20]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc6:	2320      	movs	r3, #32
 8008cc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd0:	2330      	movs	r3, #48	; 0x30
 8008cd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e78 <_svfiprintf_r+0x1e8>
 8008cd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cda:	f04f 0901 	mov.w	r9, #1
 8008cde:	4623      	mov	r3, r4
 8008ce0:	469a      	mov	sl, r3
 8008ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce6:	b10a      	cbz	r2, 8008cec <_svfiprintf_r+0x5c>
 8008ce8:	2a25      	cmp	r2, #37	; 0x25
 8008cea:	d1f9      	bne.n	8008ce0 <_svfiprintf_r+0x50>
 8008cec:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf0:	d00b      	beq.n	8008d0a <_svfiprintf_r+0x7a>
 8008cf2:	465b      	mov	r3, fp
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f7ff ff6f 	bl	8008bdc <__ssputs_r>
 8008cfe:	3001      	adds	r0, #1
 8008d00:	f000 80a9 	beq.w	8008e56 <_svfiprintf_r+0x1c6>
 8008d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d06:	445a      	add	r2, fp
 8008d08:	9209      	str	r2, [sp, #36]	; 0x24
 8008d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 80a1 	beq.w	8008e56 <_svfiprintf_r+0x1c6>
 8008d14:	2300      	movs	r3, #0
 8008d16:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d1e:	f10a 0a01 	add.w	sl, sl, #1
 8008d22:	9304      	str	r3, [sp, #16]
 8008d24:	9307      	str	r3, [sp, #28]
 8008d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d2c:	4654      	mov	r4, sl
 8008d2e:	2205      	movs	r2, #5
 8008d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d34:	4850      	ldr	r0, [pc, #320]	; (8008e78 <_svfiprintf_r+0x1e8>)
 8008d36:	f7f7 fa53 	bl	80001e0 <memchr>
 8008d3a:	9a04      	ldr	r2, [sp, #16]
 8008d3c:	b9d8      	cbnz	r0, 8008d76 <_svfiprintf_r+0xe6>
 8008d3e:	06d0      	lsls	r0, r2, #27
 8008d40:	bf44      	itt	mi
 8008d42:	2320      	movmi	r3, #32
 8008d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d48:	0711      	lsls	r1, r2, #28
 8008d4a:	bf44      	itt	mi
 8008d4c:	232b      	movmi	r3, #43	; 0x2b
 8008d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d52:	f89a 3000 	ldrb.w	r3, [sl]
 8008d56:	2b2a      	cmp	r3, #42	; 0x2a
 8008d58:	d015      	beq.n	8008d86 <_svfiprintf_r+0xf6>
 8008d5a:	9a07      	ldr	r2, [sp, #28]
 8008d5c:	4654      	mov	r4, sl
 8008d5e:	2000      	movs	r0, #0
 8008d60:	f04f 0c0a 	mov.w	ip, #10
 8008d64:	4621      	mov	r1, r4
 8008d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6a:	3b30      	subs	r3, #48	; 0x30
 8008d6c:	2b09      	cmp	r3, #9
 8008d6e:	d94d      	bls.n	8008e0c <_svfiprintf_r+0x17c>
 8008d70:	b1b0      	cbz	r0, 8008da0 <_svfiprintf_r+0x110>
 8008d72:	9207      	str	r2, [sp, #28]
 8008d74:	e014      	b.n	8008da0 <_svfiprintf_r+0x110>
 8008d76:	eba0 0308 	sub.w	r3, r0, r8
 8008d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	46a2      	mov	sl, r4
 8008d84:	e7d2      	b.n	8008d2c <_svfiprintf_r+0x9c>
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	1d19      	adds	r1, r3, #4
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	9103      	str	r1, [sp, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bfbb      	ittet	lt
 8008d92:	425b      	neglt	r3, r3
 8008d94:	f042 0202 	orrlt.w	r2, r2, #2
 8008d98:	9307      	strge	r3, [sp, #28]
 8008d9a:	9307      	strlt	r3, [sp, #28]
 8008d9c:	bfb8      	it	lt
 8008d9e:	9204      	strlt	r2, [sp, #16]
 8008da0:	7823      	ldrb	r3, [r4, #0]
 8008da2:	2b2e      	cmp	r3, #46	; 0x2e
 8008da4:	d10c      	bne.n	8008dc0 <_svfiprintf_r+0x130>
 8008da6:	7863      	ldrb	r3, [r4, #1]
 8008da8:	2b2a      	cmp	r3, #42	; 0x2a
 8008daa:	d134      	bne.n	8008e16 <_svfiprintf_r+0x186>
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	1d1a      	adds	r2, r3, #4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	9203      	str	r2, [sp, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	bfb8      	it	lt
 8008db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dbc:	3402      	adds	r4, #2
 8008dbe:	9305      	str	r3, [sp, #20]
 8008dc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008e88 <_svfiprintf_r+0x1f8>
 8008dc4:	7821      	ldrb	r1, [r4, #0]
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	4650      	mov	r0, sl
 8008dca:	f7f7 fa09 	bl	80001e0 <memchr>
 8008dce:	b138      	cbz	r0, 8008de0 <_svfiprintf_r+0x150>
 8008dd0:	9b04      	ldr	r3, [sp, #16]
 8008dd2:	eba0 000a 	sub.w	r0, r0, sl
 8008dd6:	2240      	movs	r2, #64	; 0x40
 8008dd8:	4082      	lsls	r2, r0
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	3401      	adds	r4, #1
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de4:	4825      	ldr	r0, [pc, #148]	; (8008e7c <_svfiprintf_r+0x1ec>)
 8008de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dea:	2206      	movs	r2, #6
 8008dec:	f7f7 f9f8 	bl	80001e0 <memchr>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d038      	beq.n	8008e66 <_svfiprintf_r+0x1d6>
 8008df4:	4b22      	ldr	r3, [pc, #136]	; (8008e80 <_svfiprintf_r+0x1f0>)
 8008df6:	bb1b      	cbnz	r3, 8008e40 <_svfiprintf_r+0x1b0>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	3307      	adds	r3, #7
 8008dfc:	f023 0307 	bic.w	r3, r3, #7
 8008e00:	3308      	adds	r3, #8
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e06:	4433      	add	r3, r6
 8008e08:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0a:	e768      	b.n	8008cde <_svfiprintf_r+0x4e>
 8008e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e10:	460c      	mov	r4, r1
 8008e12:	2001      	movs	r0, #1
 8008e14:	e7a6      	b.n	8008d64 <_svfiprintf_r+0xd4>
 8008e16:	2300      	movs	r3, #0
 8008e18:	3401      	adds	r4, #1
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f04f 0c0a 	mov.w	ip, #10
 8008e22:	4620      	mov	r0, r4
 8008e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e28:	3a30      	subs	r2, #48	; 0x30
 8008e2a:	2a09      	cmp	r2, #9
 8008e2c:	d903      	bls.n	8008e36 <_svfiprintf_r+0x1a6>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0c6      	beq.n	8008dc0 <_svfiprintf_r+0x130>
 8008e32:	9105      	str	r1, [sp, #20]
 8008e34:	e7c4      	b.n	8008dc0 <_svfiprintf_r+0x130>
 8008e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e7f0      	b.n	8008e22 <_svfiprintf_r+0x192>
 8008e40:	ab03      	add	r3, sp, #12
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	462a      	mov	r2, r5
 8008e46:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <_svfiprintf_r+0x1f4>)
 8008e48:	a904      	add	r1, sp, #16
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	f7fd fdfe 	bl	8006a4c <_printf_float>
 8008e50:	1c42      	adds	r2, r0, #1
 8008e52:	4606      	mov	r6, r0
 8008e54:	d1d6      	bne.n	8008e04 <_svfiprintf_r+0x174>
 8008e56:	89ab      	ldrh	r3, [r5, #12]
 8008e58:	065b      	lsls	r3, r3, #25
 8008e5a:	f53f af2d 	bmi.w	8008cb8 <_svfiprintf_r+0x28>
 8008e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e60:	b01d      	add	sp, #116	; 0x74
 8008e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <_svfiprintf_r+0x1f4>)
 8008e6e:	a904      	add	r1, sp, #16
 8008e70:	4638      	mov	r0, r7
 8008e72:	f7fe f88f 	bl	8006f94 <_printf_i>
 8008e76:	e7eb      	b.n	8008e50 <_svfiprintf_r+0x1c0>
 8008e78:	080099e4 	.word	0x080099e4
 8008e7c:	080099ee 	.word	0x080099ee
 8008e80:	08006a4d 	.word	0x08006a4d
 8008e84:	08008bdd 	.word	0x08008bdd
 8008e88:	080099ea 	.word	0x080099ea

08008e8c <__sflush_r>:
 8008e8c:	898a      	ldrh	r2, [r1, #12]
 8008e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e92:	4605      	mov	r5, r0
 8008e94:	0710      	lsls	r0, r2, #28
 8008e96:	460c      	mov	r4, r1
 8008e98:	d458      	bmi.n	8008f4c <__sflush_r+0xc0>
 8008e9a:	684b      	ldr	r3, [r1, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dc05      	bgt.n	8008eac <__sflush_r+0x20>
 8008ea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	dc02      	bgt.n	8008eac <__sflush_r+0x20>
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	d0f9      	beq.n	8008ea6 <__sflush_r+0x1a>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008eb8:	682f      	ldr	r7, [r5, #0]
 8008eba:	6a21      	ldr	r1, [r4, #32]
 8008ebc:	602b      	str	r3, [r5, #0]
 8008ebe:	d032      	beq.n	8008f26 <__sflush_r+0x9a>
 8008ec0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	075a      	lsls	r2, r3, #29
 8008ec6:	d505      	bpl.n	8008ed4 <__sflush_r+0x48>
 8008ec8:	6863      	ldr	r3, [r4, #4]
 8008eca:	1ac0      	subs	r0, r0, r3
 8008ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ece:	b10b      	cbz	r3, 8008ed4 <__sflush_r+0x48>
 8008ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ed2:	1ac0      	subs	r0, r0, r3
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eda:	6a21      	ldr	r1, [r4, #32]
 8008edc:	4628      	mov	r0, r5
 8008ede:	47b0      	blx	r6
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	d106      	bne.n	8008ef4 <__sflush_r+0x68>
 8008ee6:	6829      	ldr	r1, [r5, #0]
 8008ee8:	291d      	cmp	r1, #29
 8008eea:	d82b      	bhi.n	8008f44 <__sflush_r+0xb8>
 8008eec:	4a29      	ldr	r2, [pc, #164]	; (8008f94 <__sflush_r+0x108>)
 8008eee:	410a      	asrs	r2, r1
 8008ef0:	07d6      	lsls	r6, r2, #31
 8008ef2:	d427      	bmi.n	8008f44 <__sflush_r+0xb8>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	6062      	str	r2, [r4, #4]
 8008ef8:	04d9      	lsls	r1, r3, #19
 8008efa:	6922      	ldr	r2, [r4, #16]
 8008efc:	6022      	str	r2, [r4, #0]
 8008efe:	d504      	bpl.n	8008f0a <__sflush_r+0x7e>
 8008f00:	1c42      	adds	r2, r0, #1
 8008f02:	d101      	bne.n	8008f08 <__sflush_r+0x7c>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	b903      	cbnz	r3, 8008f0a <__sflush_r+0x7e>
 8008f08:	6560      	str	r0, [r4, #84]	; 0x54
 8008f0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f0c:	602f      	str	r7, [r5, #0]
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	d0c9      	beq.n	8008ea6 <__sflush_r+0x1a>
 8008f12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f16:	4299      	cmp	r1, r3
 8008f18:	d002      	beq.n	8008f20 <__sflush_r+0x94>
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f7ff f9e2 	bl	80082e4 <_free_r>
 8008f20:	2000      	movs	r0, #0
 8008f22:	6360      	str	r0, [r4, #52]	; 0x34
 8008f24:	e7c0      	b.n	8008ea8 <__sflush_r+0x1c>
 8008f26:	2301      	movs	r3, #1
 8008f28:	4628      	mov	r0, r5
 8008f2a:	47b0      	blx	r6
 8008f2c:	1c41      	adds	r1, r0, #1
 8008f2e:	d1c8      	bne.n	8008ec2 <__sflush_r+0x36>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0c5      	beq.n	8008ec2 <__sflush_r+0x36>
 8008f36:	2b1d      	cmp	r3, #29
 8008f38:	d001      	beq.n	8008f3e <__sflush_r+0xb2>
 8008f3a:	2b16      	cmp	r3, #22
 8008f3c:	d101      	bne.n	8008f42 <__sflush_r+0xb6>
 8008f3e:	602f      	str	r7, [r5, #0]
 8008f40:	e7b1      	b.n	8008ea6 <__sflush_r+0x1a>
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	e7ad      	b.n	8008ea8 <__sflush_r+0x1c>
 8008f4c:	690f      	ldr	r7, [r1, #16]
 8008f4e:	2f00      	cmp	r7, #0
 8008f50:	d0a9      	beq.n	8008ea6 <__sflush_r+0x1a>
 8008f52:	0793      	lsls	r3, r2, #30
 8008f54:	680e      	ldr	r6, [r1, #0]
 8008f56:	bf08      	it	eq
 8008f58:	694b      	ldreq	r3, [r1, #20]
 8008f5a:	600f      	str	r7, [r1, #0]
 8008f5c:	bf18      	it	ne
 8008f5e:	2300      	movne	r3, #0
 8008f60:	eba6 0807 	sub.w	r8, r6, r7
 8008f64:	608b      	str	r3, [r1, #8]
 8008f66:	f1b8 0f00 	cmp.w	r8, #0
 8008f6a:	dd9c      	ble.n	8008ea6 <__sflush_r+0x1a>
 8008f6c:	6a21      	ldr	r1, [r4, #32]
 8008f6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f70:	4643      	mov	r3, r8
 8008f72:	463a      	mov	r2, r7
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b0      	blx	r6
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	dc06      	bgt.n	8008f8a <__sflush_r+0xfe>
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	f04f 30ff 	mov.w	r0, #4294967295
 8008f88:	e78e      	b.n	8008ea8 <__sflush_r+0x1c>
 8008f8a:	4407      	add	r7, r0
 8008f8c:	eba8 0800 	sub.w	r8, r8, r0
 8008f90:	e7e9      	b.n	8008f66 <__sflush_r+0xda>
 8008f92:	bf00      	nop
 8008f94:	dfbffffe 	.word	0xdfbffffe

08008f98 <_fflush_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	690b      	ldr	r3, [r1, #16]
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	b913      	cbnz	r3, 8008fa8 <_fflush_r+0x10>
 8008fa2:	2500      	movs	r5, #0
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	b118      	cbz	r0, 8008fb2 <_fflush_r+0x1a>
 8008faa:	6a03      	ldr	r3, [r0, #32]
 8008fac:	b90b      	cbnz	r3, 8008fb2 <_fflush_r+0x1a>
 8008fae:	f7fe f99f 	bl	80072f0 <__sinit>
 8008fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0f3      	beq.n	8008fa2 <_fflush_r+0xa>
 8008fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fbc:	07d0      	lsls	r0, r2, #31
 8008fbe:	d404      	bmi.n	8008fca <_fflush_r+0x32>
 8008fc0:	0599      	lsls	r1, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_fflush_r+0x32>
 8008fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fc6:	f7fe fb00 	bl	80075ca <__retarget_lock_acquire_recursive>
 8008fca:	4628      	mov	r0, r5
 8008fcc:	4621      	mov	r1, r4
 8008fce:	f7ff ff5d 	bl	8008e8c <__sflush_r>
 8008fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fd4:	07da      	lsls	r2, r3, #31
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	d4e4      	bmi.n	8008fa4 <_fflush_r+0xc>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	059b      	lsls	r3, r3, #22
 8008fde:	d4e1      	bmi.n	8008fa4 <_fflush_r+0xc>
 8008fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fe2:	f7fe faf3 	bl	80075cc <__retarget_lock_release_recursive>
 8008fe6:	e7dd      	b.n	8008fa4 <_fflush_r+0xc>

08008fe8 <memmove>:
 8008fe8:	4288      	cmp	r0, r1
 8008fea:	b510      	push	{r4, lr}
 8008fec:	eb01 0402 	add.w	r4, r1, r2
 8008ff0:	d902      	bls.n	8008ff8 <memmove+0x10>
 8008ff2:	4284      	cmp	r4, r0
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	d807      	bhi.n	8009008 <memmove+0x20>
 8008ff8:	1e43      	subs	r3, r0, #1
 8008ffa:	42a1      	cmp	r1, r4
 8008ffc:	d008      	beq.n	8009010 <memmove+0x28>
 8008ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009006:	e7f8      	b.n	8008ffa <memmove+0x12>
 8009008:	4402      	add	r2, r0
 800900a:	4601      	mov	r1, r0
 800900c:	428a      	cmp	r2, r1
 800900e:	d100      	bne.n	8009012 <memmove+0x2a>
 8009010:	bd10      	pop	{r4, pc}
 8009012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800901a:	e7f7      	b.n	800900c <memmove+0x24>

0800901c <_sbrk_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	; (8009038 <_sbrk_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7f8 fe46 	bl	8001cb8 <_sbrk>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_sbrk_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_sbrk_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	200044e0 	.word	0x200044e0

0800903c <__assert_func>:
 800903c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800903e:	4614      	mov	r4, r2
 8009040:	461a      	mov	r2, r3
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <__assert_func+0x2c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4605      	mov	r5, r0
 8009048:	68d8      	ldr	r0, [r3, #12]
 800904a:	b14c      	cbz	r4, 8009060 <__assert_func+0x24>
 800904c:	4b07      	ldr	r3, [pc, #28]	; (800906c <__assert_func+0x30>)
 800904e:	9100      	str	r1, [sp, #0]
 8009050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009054:	4906      	ldr	r1, [pc, #24]	; (8009070 <__assert_func+0x34>)
 8009056:	462b      	mov	r3, r5
 8009058:	f000 f872 	bl	8009140 <fiprintf>
 800905c:	f000 f882 	bl	8009164 <abort>
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <__assert_func+0x38>)
 8009062:	461c      	mov	r4, r3
 8009064:	e7f3      	b.n	800904e <__assert_func+0x12>
 8009066:	bf00      	nop
 8009068:	20000068 	.word	0x20000068
 800906c:	080099ff 	.word	0x080099ff
 8009070:	08009a0c 	.word	0x08009a0c
 8009074:	08009a3a 	.word	0x08009a3a

08009078 <_calloc_r>:
 8009078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800907a:	fba1 2402 	umull	r2, r4, r1, r2
 800907e:	b94c      	cbnz	r4, 8009094 <_calloc_r+0x1c>
 8009080:	4611      	mov	r1, r2
 8009082:	9201      	str	r2, [sp, #4]
 8009084:	f7ff f9a2 	bl	80083cc <_malloc_r>
 8009088:	9a01      	ldr	r2, [sp, #4]
 800908a:	4605      	mov	r5, r0
 800908c:	b930      	cbnz	r0, 800909c <_calloc_r+0x24>
 800908e:	4628      	mov	r0, r5
 8009090:	b003      	add	sp, #12
 8009092:	bd30      	pop	{r4, r5, pc}
 8009094:	220c      	movs	r2, #12
 8009096:	6002      	str	r2, [r0, #0]
 8009098:	2500      	movs	r5, #0
 800909a:	e7f8      	b.n	800908e <_calloc_r+0x16>
 800909c:	4621      	mov	r1, r4
 800909e:	f7fe f9c0 	bl	8007422 <memset>
 80090a2:	e7f4      	b.n	800908e <_calloc_r+0x16>

080090a4 <__ascii_mbtowc>:
 80090a4:	b082      	sub	sp, #8
 80090a6:	b901      	cbnz	r1, 80090aa <__ascii_mbtowc+0x6>
 80090a8:	a901      	add	r1, sp, #4
 80090aa:	b142      	cbz	r2, 80090be <__ascii_mbtowc+0x1a>
 80090ac:	b14b      	cbz	r3, 80090c2 <__ascii_mbtowc+0x1e>
 80090ae:	7813      	ldrb	r3, [r2, #0]
 80090b0:	600b      	str	r3, [r1, #0]
 80090b2:	7812      	ldrb	r2, [r2, #0]
 80090b4:	1e10      	subs	r0, r2, #0
 80090b6:	bf18      	it	ne
 80090b8:	2001      	movne	r0, #1
 80090ba:	b002      	add	sp, #8
 80090bc:	4770      	bx	lr
 80090be:	4610      	mov	r0, r2
 80090c0:	e7fb      	b.n	80090ba <__ascii_mbtowc+0x16>
 80090c2:	f06f 0001 	mvn.w	r0, #1
 80090c6:	e7f8      	b.n	80090ba <__ascii_mbtowc+0x16>

080090c8 <_realloc_r>:
 80090c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090cc:	4680      	mov	r8, r0
 80090ce:	4614      	mov	r4, r2
 80090d0:	460e      	mov	r6, r1
 80090d2:	b921      	cbnz	r1, 80090de <_realloc_r+0x16>
 80090d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d8:	4611      	mov	r1, r2
 80090da:	f7ff b977 	b.w	80083cc <_malloc_r>
 80090de:	b92a      	cbnz	r2, 80090ec <_realloc_r+0x24>
 80090e0:	f7ff f900 	bl	80082e4 <_free_r>
 80090e4:	4625      	mov	r5, r4
 80090e6:	4628      	mov	r0, r5
 80090e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ec:	f000 f841 	bl	8009172 <_malloc_usable_size_r>
 80090f0:	4284      	cmp	r4, r0
 80090f2:	4607      	mov	r7, r0
 80090f4:	d802      	bhi.n	80090fc <_realloc_r+0x34>
 80090f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090fa:	d812      	bhi.n	8009122 <_realloc_r+0x5a>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4640      	mov	r0, r8
 8009100:	f7ff f964 	bl	80083cc <_malloc_r>
 8009104:	4605      	mov	r5, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	d0ed      	beq.n	80090e6 <_realloc_r+0x1e>
 800910a:	42bc      	cmp	r4, r7
 800910c:	4622      	mov	r2, r4
 800910e:	4631      	mov	r1, r6
 8009110:	bf28      	it	cs
 8009112:	463a      	movcs	r2, r7
 8009114:	f7fe fa5b 	bl	80075ce <memcpy>
 8009118:	4631      	mov	r1, r6
 800911a:	4640      	mov	r0, r8
 800911c:	f7ff f8e2 	bl	80082e4 <_free_r>
 8009120:	e7e1      	b.n	80090e6 <_realloc_r+0x1e>
 8009122:	4635      	mov	r5, r6
 8009124:	e7df      	b.n	80090e6 <_realloc_r+0x1e>

08009126 <__ascii_wctomb>:
 8009126:	b149      	cbz	r1, 800913c <__ascii_wctomb+0x16>
 8009128:	2aff      	cmp	r2, #255	; 0xff
 800912a:	bf85      	ittet	hi
 800912c:	238a      	movhi	r3, #138	; 0x8a
 800912e:	6003      	strhi	r3, [r0, #0]
 8009130:	700a      	strbls	r2, [r1, #0]
 8009132:	f04f 30ff 	movhi.w	r0, #4294967295
 8009136:	bf98      	it	ls
 8009138:	2001      	movls	r0, #1
 800913a:	4770      	bx	lr
 800913c:	4608      	mov	r0, r1
 800913e:	4770      	bx	lr

08009140 <fiprintf>:
 8009140:	b40e      	push	{r1, r2, r3}
 8009142:	b503      	push	{r0, r1, lr}
 8009144:	4601      	mov	r1, r0
 8009146:	ab03      	add	r3, sp, #12
 8009148:	4805      	ldr	r0, [pc, #20]	; (8009160 <fiprintf+0x20>)
 800914a:	f853 2b04 	ldr.w	r2, [r3], #4
 800914e:	6800      	ldr	r0, [r0, #0]
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	f000 f83f 	bl	80091d4 <_vfiprintf_r>
 8009156:	b002      	add	sp, #8
 8009158:	f85d eb04 	ldr.w	lr, [sp], #4
 800915c:	b003      	add	sp, #12
 800915e:	4770      	bx	lr
 8009160:	20000068 	.word	0x20000068

08009164 <abort>:
 8009164:	b508      	push	{r3, lr}
 8009166:	2006      	movs	r0, #6
 8009168:	f000 fa0c 	bl	8009584 <raise>
 800916c:	2001      	movs	r0, #1
 800916e:	f7f8 fd2b 	bl	8001bc8 <_exit>

08009172 <_malloc_usable_size_r>:
 8009172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009176:	1f18      	subs	r0, r3, #4
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfbc      	itt	lt
 800917c:	580b      	ldrlt	r3, [r1, r0]
 800917e:	18c0      	addlt	r0, r0, r3
 8009180:	4770      	bx	lr

08009182 <__sfputc_r>:
 8009182:	6893      	ldr	r3, [r2, #8]
 8009184:	3b01      	subs	r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	b410      	push	{r4}
 800918a:	6093      	str	r3, [r2, #8]
 800918c:	da08      	bge.n	80091a0 <__sfputc_r+0x1e>
 800918e:	6994      	ldr	r4, [r2, #24]
 8009190:	42a3      	cmp	r3, r4
 8009192:	db01      	blt.n	8009198 <__sfputc_r+0x16>
 8009194:	290a      	cmp	r1, #10
 8009196:	d103      	bne.n	80091a0 <__sfputc_r+0x1e>
 8009198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800919c:	f000 b934 	b.w	8009408 <__swbuf_r>
 80091a0:	6813      	ldr	r3, [r2, #0]
 80091a2:	1c58      	adds	r0, r3, #1
 80091a4:	6010      	str	r0, [r2, #0]
 80091a6:	7019      	strb	r1, [r3, #0]
 80091a8:	4608      	mov	r0, r1
 80091aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <__sfputs_r>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	4606      	mov	r6, r0
 80091b4:	460f      	mov	r7, r1
 80091b6:	4614      	mov	r4, r2
 80091b8:	18d5      	adds	r5, r2, r3
 80091ba:	42ac      	cmp	r4, r5
 80091bc:	d101      	bne.n	80091c2 <__sfputs_r+0x12>
 80091be:	2000      	movs	r0, #0
 80091c0:	e007      	b.n	80091d2 <__sfputs_r+0x22>
 80091c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c6:	463a      	mov	r2, r7
 80091c8:	4630      	mov	r0, r6
 80091ca:	f7ff ffda 	bl	8009182 <__sfputc_r>
 80091ce:	1c43      	adds	r3, r0, #1
 80091d0:	d1f3      	bne.n	80091ba <__sfputs_r+0xa>
 80091d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091d4 <_vfiprintf_r>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	460d      	mov	r5, r1
 80091da:	b09d      	sub	sp, #116	; 0x74
 80091dc:	4614      	mov	r4, r2
 80091de:	4698      	mov	r8, r3
 80091e0:	4606      	mov	r6, r0
 80091e2:	b118      	cbz	r0, 80091ec <_vfiprintf_r+0x18>
 80091e4:	6a03      	ldr	r3, [r0, #32]
 80091e6:	b90b      	cbnz	r3, 80091ec <_vfiprintf_r+0x18>
 80091e8:	f7fe f882 	bl	80072f0 <__sinit>
 80091ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091ee:	07d9      	lsls	r1, r3, #31
 80091f0:	d405      	bmi.n	80091fe <_vfiprintf_r+0x2a>
 80091f2:	89ab      	ldrh	r3, [r5, #12]
 80091f4:	059a      	lsls	r2, r3, #22
 80091f6:	d402      	bmi.n	80091fe <_vfiprintf_r+0x2a>
 80091f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091fa:	f7fe f9e6 	bl	80075ca <__retarget_lock_acquire_recursive>
 80091fe:	89ab      	ldrh	r3, [r5, #12]
 8009200:	071b      	lsls	r3, r3, #28
 8009202:	d501      	bpl.n	8009208 <_vfiprintf_r+0x34>
 8009204:	692b      	ldr	r3, [r5, #16]
 8009206:	b99b      	cbnz	r3, 8009230 <_vfiprintf_r+0x5c>
 8009208:	4629      	mov	r1, r5
 800920a:	4630      	mov	r0, r6
 800920c:	f000 f93a 	bl	8009484 <__swsetup_r>
 8009210:	b170      	cbz	r0, 8009230 <_vfiprintf_r+0x5c>
 8009212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009214:	07dc      	lsls	r4, r3, #31
 8009216:	d504      	bpl.n	8009222 <_vfiprintf_r+0x4e>
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	b01d      	add	sp, #116	; 0x74
 800921e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	0598      	lsls	r0, r3, #22
 8009226:	d4f7      	bmi.n	8009218 <_vfiprintf_r+0x44>
 8009228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800922a:	f7fe f9cf 	bl	80075cc <__retarget_lock_release_recursive>
 800922e:	e7f3      	b.n	8009218 <_vfiprintf_r+0x44>
 8009230:	2300      	movs	r3, #0
 8009232:	9309      	str	r3, [sp, #36]	; 0x24
 8009234:	2320      	movs	r3, #32
 8009236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800923a:	f8cd 800c 	str.w	r8, [sp, #12]
 800923e:	2330      	movs	r3, #48	; 0x30
 8009240:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80093f4 <_vfiprintf_r+0x220>
 8009244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009248:	f04f 0901 	mov.w	r9, #1
 800924c:	4623      	mov	r3, r4
 800924e:	469a      	mov	sl, r3
 8009250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009254:	b10a      	cbz	r2, 800925a <_vfiprintf_r+0x86>
 8009256:	2a25      	cmp	r2, #37	; 0x25
 8009258:	d1f9      	bne.n	800924e <_vfiprintf_r+0x7a>
 800925a:	ebba 0b04 	subs.w	fp, sl, r4
 800925e:	d00b      	beq.n	8009278 <_vfiprintf_r+0xa4>
 8009260:	465b      	mov	r3, fp
 8009262:	4622      	mov	r2, r4
 8009264:	4629      	mov	r1, r5
 8009266:	4630      	mov	r0, r6
 8009268:	f7ff ffa2 	bl	80091b0 <__sfputs_r>
 800926c:	3001      	adds	r0, #1
 800926e:	f000 80a9 	beq.w	80093c4 <_vfiprintf_r+0x1f0>
 8009272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009274:	445a      	add	r2, fp
 8009276:	9209      	str	r2, [sp, #36]	; 0x24
 8009278:	f89a 3000 	ldrb.w	r3, [sl]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 80a1 	beq.w	80093c4 <_vfiprintf_r+0x1f0>
 8009282:	2300      	movs	r3, #0
 8009284:	f04f 32ff 	mov.w	r2, #4294967295
 8009288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800928c:	f10a 0a01 	add.w	sl, sl, #1
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	9307      	str	r3, [sp, #28]
 8009294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009298:	931a      	str	r3, [sp, #104]	; 0x68
 800929a:	4654      	mov	r4, sl
 800929c:	2205      	movs	r2, #5
 800929e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a2:	4854      	ldr	r0, [pc, #336]	; (80093f4 <_vfiprintf_r+0x220>)
 80092a4:	f7f6 ff9c 	bl	80001e0 <memchr>
 80092a8:	9a04      	ldr	r2, [sp, #16]
 80092aa:	b9d8      	cbnz	r0, 80092e4 <_vfiprintf_r+0x110>
 80092ac:	06d1      	lsls	r1, r2, #27
 80092ae:	bf44      	itt	mi
 80092b0:	2320      	movmi	r3, #32
 80092b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b6:	0713      	lsls	r3, r2, #28
 80092b8:	bf44      	itt	mi
 80092ba:	232b      	movmi	r3, #43	; 0x2b
 80092bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c0:	f89a 3000 	ldrb.w	r3, [sl]
 80092c4:	2b2a      	cmp	r3, #42	; 0x2a
 80092c6:	d015      	beq.n	80092f4 <_vfiprintf_r+0x120>
 80092c8:	9a07      	ldr	r2, [sp, #28]
 80092ca:	4654      	mov	r4, sl
 80092cc:	2000      	movs	r0, #0
 80092ce:	f04f 0c0a 	mov.w	ip, #10
 80092d2:	4621      	mov	r1, r4
 80092d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d8:	3b30      	subs	r3, #48	; 0x30
 80092da:	2b09      	cmp	r3, #9
 80092dc:	d94d      	bls.n	800937a <_vfiprintf_r+0x1a6>
 80092de:	b1b0      	cbz	r0, 800930e <_vfiprintf_r+0x13a>
 80092e0:	9207      	str	r2, [sp, #28]
 80092e2:	e014      	b.n	800930e <_vfiprintf_r+0x13a>
 80092e4:	eba0 0308 	sub.w	r3, r0, r8
 80092e8:	fa09 f303 	lsl.w	r3, r9, r3
 80092ec:	4313      	orrs	r3, r2
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	46a2      	mov	sl, r4
 80092f2:	e7d2      	b.n	800929a <_vfiprintf_r+0xc6>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	1d19      	adds	r1, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9103      	str	r1, [sp, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	bfbb      	ittet	lt
 8009300:	425b      	neglt	r3, r3
 8009302:	f042 0202 	orrlt.w	r2, r2, #2
 8009306:	9307      	strge	r3, [sp, #28]
 8009308:	9307      	strlt	r3, [sp, #28]
 800930a:	bfb8      	it	lt
 800930c:	9204      	strlt	r2, [sp, #16]
 800930e:	7823      	ldrb	r3, [r4, #0]
 8009310:	2b2e      	cmp	r3, #46	; 0x2e
 8009312:	d10c      	bne.n	800932e <_vfiprintf_r+0x15a>
 8009314:	7863      	ldrb	r3, [r4, #1]
 8009316:	2b2a      	cmp	r3, #42	; 0x2a
 8009318:	d134      	bne.n	8009384 <_vfiprintf_r+0x1b0>
 800931a:	9b03      	ldr	r3, [sp, #12]
 800931c:	1d1a      	adds	r2, r3, #4
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	9203      	str	r2, [sp, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	bfb8      	it	lt
 8009326:	f04f 33ff 	movlt.w	r3, #4294967295
 800932a:	3402      	adds	r4, #2
 800932c:	9305      	str	r3, [sp, #20]
 800932e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009404 <_vfiprintf_r+0x230>
 8009332:	7821      	ldrb	r1, [r4, #0]
 8009334:	2203      	movs	r2, #3
 8009336:	4650      	mov	r0, sl
 8009338:	f7f6 ff52 	bl	80001e0 <memchr>
 800933c:	b138      	cbz	r0, 800934e <_vfiprintf_r+0x17a>
 800933e:	9b04      	ldr	r3, [sp, #16]
 8009340:	eba0 000a 	sub.w	r0, r0, sl
 8009344:	2240      	movs	r2, #64	; 0x40
 8009346:	4082      	lsls	r2, r0
 8009348:	4313      	orrs	r3, r2
 800934a:	3401      	adds	r4, #1
 800934c:	9304      	str	r3, [sp, #16]
 800934e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009352:	4829      	ldr	r0, [pc, #164]	; (80093f8 <_vfiprintf_r+0x224>)
 8009354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009358:	2206      	movs	r2, #6
 800935a:	f7f6 ff41 	bl	80001e0 <memchr>
 800935e:	2800      	cmp	r0, #0
 8009360:	d03f      	beq.n	80093e2 <_vfiprintf_r+0x20e>
 8009362:	4b26      	ldr	r3, [pc, #152]	; (80093fc <_vfiprintf_r+0x228>)
 8009364:	bb1b      	cbnz	r3, 80093ae <_vfiprintf_r+0x1da>
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	3307      	adds	r3, #7
 800936a:	f023 0307 	bic.w	r3, r3, #7
 800936e:	3308      	adds	r3, #8
 8009370:	9303      	str	r3, [sp, #12]
 8009372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009374:	443b      	add	r3, r7
 8009376:	9309      	str	r3, [sp, #36]	; 0x24
 8009378:	e768      	b.n	800924c <_vfiprintf_r+0x78>
 800937a:	fb0c 3202 	mla	r2, ip, r2, r3
 800937e:	460c      	mov	r4, r1
 8009380:	2001      	movs	r0, #1
 8009382:	e7a6      	b.n	80092d2 <_vfiprintf_r+0xfe>
 8009384:	2300      	movs	r3, #0
 8009386:	3401      	adds	r4, #1
 8009388:	9305      	str	r3, [sp, #20]
 800938a:	4619      	mov	r1, r3
 800938c:	f04f 0c0a 	mov.w	ip, #10
 8009390:	4620      	mov	r0, r4
 8009392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009396:	3a30      	subs	r2, #48	; 0x30
 8009398:	2a09      	cmp	r2, #9
 800939a:	d903      	bls.n	80093a4 <_vfiprintf_r+0x1d0>
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0c6      	beq.n	800932e <_vfiprintf_r+0x15a>
 80093a0:	9105      	str	r1, [sp, #20]
 80093a2:	e7c4      	b.n	800932e <_vfiprintf_r+0x15a>
 80093a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a8:	4604      	mov	r4, r0
 80093aa:	2301      	movs	r3, #1
 80093ac:	e7f0      	b.n	8009390 <_vfiprintf_r+0x1bc>
 80093ae:	ab03      	add	r3, sp, #12
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	462a      	mov	r2, r5
 80093b4:	4b12      	ldr	r3, [pc, #72]	; (8009400 <_vfiprintf_r+0x22c>)
 80093b6:	a904      	add	r1, sp, #16
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7fd fb47 	bl	8006a4c <_printf_float>
 80093be:	4607      	mov	r7, r0
 80093c0:	1c78      	adds	r0, r7, #1
 80093c2:	d1d6      	bne.n	8009372 <_vfiprintf_r+0x19e>
 80093c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093c6:	07d9      	lsls	r1, r3, #31
 80093c8:	d405      	bmi.n	80093d6 <_vfiprintf_r+0x202>
 80093ca:	89ab      	ldrh	r3, [r5, #12]
 80093cc:	059a      	lsls	r2, r3, #22
 80093ce:	d402      	bmi.n	80093d6 <_vfiprintf_r+0x202>
 80093d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093d2:	f7fe f8fb 	bl	80075cc <__retarget_lock_release_recursive>
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	065b      	lsls	r3, r3, #25
 80093da:	f53f af1d 	bmi.w	8009218 <_vfiprintf_r+0x44>
 80093de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e0:	e71c      	b.n	800921c <_vfiprintf_r+0x48>
 80093e2:	ab03      	add	r3, sp, #12
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	462a      	mov	r2, r5
 80093e8:	4b05      	ldr	r3, [pc, #20]	; (8009400 <_vfiprintf_r+0x22c>)
 80093ea:	a904      	add	r1, sp, #16
 80093ec:	4630      	mov	r0, r6
 80093ee:	f7fd fdd1 	bl	8006f94 <_printf_i>
 80093f2:	e7e4      	b.n	80093be <_vfiprintf_r+0x1ea>
 80093f4:	080099e4 	.word	0x080099e4
 80093f8:	080099ee 	.word	0x080099ee
 80093fc:	08006a4d 	.word	0x08006a4d
 8009400:	080091b1 	.word	0x080091b1
 8009404:	080099ea 	.word	0x080099ea

08009408 <__swbuf_r>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	460e      	mov	r6, r1
 800940c:	4614      	mov	r4, r2
 800940e:	4605      	mov	r5, r0
 8009410:	b118      	cbz	r0, 800941a <__swbuf_r+0x12>
 8009412:	6a03      	ldr	r3, [r0, #32]
 8009414:	b90b      	cbnz	r3, 800941a <__swbuf_r+0x12>
 8009416:	f7fd ff6b 	bl	80072f0 <__sinit>
 800941a:	69a3      	ldr	r3, [r4, #24]
 800941c:	60a3      	str	r3, [r4, #8]
 800941e:	89a3      	ldrh	r3, [r4, #12]
 8009420:	071a      	lsls	r2, r3, #28
 8009422:	d525      	bpl.n	8009470 <__swbuf_r+0x68>
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	b31b      	cbz	r3, 8009470 <__swbuf_r+0x68>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	6922      	ldr	r2, [r4, #16]
 800942c:	1a98      	subs	r0, r3, r2
 800942e:	6963      	ldr	r3, [r4, #20]
 8009430:	b2f6      	uxtb	r6, r6
 8009432:	4283      	cmp	r3, r0
 8009434:	4637      	mov	r7, r6
 8009436:	dc04      	bgt.n	8009442 <__swbuf_r+0x3a>
 8009438:	4621      	mov	r1, r4
 800943a:	4628      	mov	r0, r5
 800943c:	f7ff fdac 	bl	8008f98 <_fflush_r>
 8009440:	b9e0      	cbnz	r0, 800947c <__swbuf_r+0x74>
 8009442:	68a3      	ldr	r3, [r4, #8]
 8009444:	3b01      	subs	r3, #1
 8009446:	60a3      	str	r3, [r4, #8]
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	6022      	str	r2, [r4, #0]
 800944e:	701e      	strb	r6, [r3, #0]
 8009450:	6962      	ldr	r2, [r4, #20]
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	429a      	cmp	r2, r3
 8009456:	d004      	beq.n	8009462 <__swbuf_r+0x5a>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	07db      	lsls	r3, r3, #31
 800945c:	d506      	bpl.n	800946c <__swbuf_r+0x64>
 800945e:	2e0a      	cmp	r6, #10
 8009460:	d104      	bne.n	800946c <__swbuf_r+0x64>
 8009462:	4621      	mov	r1, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f7ff fd97 	bl	8008f98 <_fflush_r>
 800946a:	b938      	cbnz	r0, 800947c <__swbuf_r+0x74>
 800946c:	4638      	mov	r0, r7
 800946e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009470:	4621      	mov	r1, r4
 8009472:	4628      	mov	r0, r5
 8009474:	f000 f806 	bl	8009484 <__swsetup_r>
 8009478:	2800      	cmp	r0, #0
 800947a:	d0d5      	beq.n	8009428 <__swbuf_r+0x20>
 800947c:	f04f 37ff 	mov.w	r7, #4294967295
 8009480:	e7f4      	b.n	800946c <__swbuf_r+0x64>
	...

08009484 <__swsetup_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4b2a      	ldr	r3, [pc, #168]	; (8009530 <__swsetup_r+0xac>)
 8009488:	4605      	mov	r5, r0
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	460c      	mov	r4, r1
 800948e:	b118      	cbz	r0, 8009498 <__swsetup_r+0x14>
 8009490:	6a03      	ldr	r3, [r0, #32]
 8009492:	b90b      	cbnz	r3, 8009498 <__swsetup_r+0x14>
 8009494:	f7fd ff2c 	bl	80072f0 <__sinit>
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800949e:	0718      	lsls	r0, r3, #28
 80094a0:	d422      	bmi.n	80094e8 <__swsetup_r+0x64>
 80094a2:	06d9      	lsls	r1, r3, #27
 80094a4:	d407      	bmi.n	80094b6 <__swsetup_r+0x32>
 80094a6:	2309      	movs	r3, #9
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094ae:	81a3      	strh	r3, [r4, #12]
 80094b0:	f04f 30ff 	mov.w	r0, #4294967295
 80094b4:	e034      	b.n	8009520 <__swsetup_r+0x9c>
 80094b6:	0758      	lsls	r0, r3, #29
 80094b8:	d512      	bpl.n	80094e0 <__swsetup_r+0x5c>
 80094ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094bc:	b141      	cbz	r1, 80094d0 <__swsetup_r+0x4c>
 80094be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094c2:	4299      	cmp	r1, r3
 80094c4:	d002      	beq.n	80094cc <__swsetup_r+0x48>
 80094c6:	4628      	mov	r0, r5
 80094c8:	f7fe ff0c 	bl	80082e4 <_free_r>
 80094cc:	2300      	movs	r3, #0
 80094ce:	6363      	str	r3, [r4, #52]	; 0x34
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094d6:	81a3      	strh	r3, [r4, #12]
 80094d8:	2300      	movs	r3, #0
 80094da:	6063      	str	r3, [r4, #4]
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	6023      	str	r3, [r4, #0]
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f043 0308 	orr.w	r3, r3, #8
 80094e6:	81a3      	strh	r3, [r4, #12]
 80094e8:	6923      	ldr	r3, [r4, #16]
 80094ea:	b94b      	cbnz	r3, 8009500 <__swsetup_r+0x7c>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094f6:	d003      	beq.n	8009500 <__swsetup_r+0x7c>
 80094f8:	4621      	mov	r1, r4
 80094fa:	4628      	mov	r0, r5
 80094fc:	f000 f884 	bl	8009608 <__smakebuf_r>
 8009500:	89a0      	ldrh	r0, [r4, #12]
 8009502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009506:	f010 0301 	ands.w	r3, r0, #1
 800950a:	d00a      	beq.n	8009522 <__swsetup_r+0x9e>
 800950c:	2300      	movs	r3, #0
 800950e:	60a3      	str	r3, [r4, #8]
 8009510:	6963      	ldr	r3, [r4, #20]
 8009512:	425b      	negs	r3, r3
 8009514:	61a3      	str	r3, [r4, #24]
 8009516:	6923      	ldr	r3, [r4, #16]
 8009518:	b943      	cbnz	r3, 800952c <__swsetup_r+0xa8>
 800951a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800951e:	d1c4      	bne.n	80094aa <__swsetup_r+0x26>
 8009520:	bd38      	pop	{r3, r4, r5, pc}
 8009522:	0781      	lsls	r1, r0, #30
 8009524:	bf58      	it	pl
 8009526:	6963      	ldrpl	r3, [r4, #20]
 8009528:	60a3      	str	r3, [r4, #8]
 800952a:	e7f4      	b.n	8009516 <__swsetup_r+0x92>
 800952c:	2000      	movs	r0, #0
 800952e:	e7f7      	b.n	8009520 <__swsetup_r+0x9c>
 8009530:	20000068 	.word	0x20000068

08009534 <_raise_r>:
 8009534:	291f      	cmp	r1, #31
 8009536:	b538      	push	{r3, r4, r5, lr}
 8009538:	4604      	mov	r4, r0
 800953a:	460d      	mov	r5, r1
 800953c:	d904      	bls.n	8009548 <_raise_r+0x14>
 800953e:	2316      	movs	r3, #22
 8009540:	6003      	str	r3, [r0, #0]
 8009542:	f04f 30ff 	mov.w	r0, #4294967295
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800954a:	b112      	cbz	r2, 8009552 <_raise_r+0x1e>
 800954c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009550:	b94b      	cbnz	r3, 8009566 <_raise_r+0x32>
 8009552:	4620      	mov	r0, r4
 8009554:	f000 f830 	bl	80095b8 <_getpid_r>
 8009558:	462a      	mov	r2, r5
 800955a:	4601      	mov	r1, r0
 800955c:	4620      	mov	r0, r4
 800955e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009562:	f000 b817 	b.w	8009594 <_kill_r>
 8009566:	2b01      	cmp	r3, #1
 8009568:	d00a      	beq.n	8009580 <_raise_r+0x4c>
 800956a:	1c59      	adds	r1, r3, #1
 800956c:	d103      	bne.n	8009576 <_raise_r+0x42>
 800956e:	2316      	movs	r3, #22
 8009570:	6003      	str	r3, [r0, #0]
 8009572:	2001      	movs	r0, #1
 8009574:	e7e7      	b.n	8009546 <_raise_r+0x12>
 8009576:	2400      	movs	r4, #0
 8009578:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800957c:	4628      	mov	r0, r5
 800957e:	4798      	blx	r3
 8009580:	2000      	movs	r0, #0
 8009582:	e7e0      	b.n	8009546 <_raise_r+0x12>

08009584 <raise>:
 8009584:	4b02      	ldr	r3, [pc, #8]	; (8009590 <raise+0xc>)
 8009586:	4601      	mov	r1, r0
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	f7ff bfd3 	b.w	8009534 <_raise_r>
 800958e:	bf00      	nop
 8009590:	20000068 	.word	0x20000068

08009594 <_kill_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d07      	ldr	r5, [pc, #28]	; (80095b4 <_kill_r+0x20>)
 8009598:	2300      	movs	r3, #0
 800959a:	4604      	mov	r4, r0
 800959c:	4608      	mov	r0, r1
 800959e:	4611      	mov	r1, r2
 80095a0:	602b      	str	r3, [r5, #0]
 80095a2:	f7f8 fb01 	bl	8001ba8 <_kill>
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	d102      	bne.n	80095b0 <_kill_r+0x1c>
 80095aa:	682b      	ldr	r3, [r5, #0]
 80095ac:	b103      	cbz	r3, 80095b0 <_kill_r+0x1c>
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	bd38      	pop	{r3, r4, r5, pc}
 80095b2:	bf00      	nop
 80095b4:	200044e0 	.word	0x200044e0

080095b8 <_getpid_r>:
 80095b8:	f7f8 baee 	b.w	8001b98 <_getpid>

080095bc <__swhatbuf_r>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	460c      	mov	r4, r1
 80095c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c4:	2900      	cmp	r1, #0
 80095c6:	b096      	sub	sp, #88	; 0x58
 80095c8:	4615      	mov	r5, r2
 80095ca:	461e      	mov	r6, r3
 80095cc:	da0d      	bge.n	80095ea <__swhatbuf_r+0x2e>
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095d4:	f04f 0100 	mov.w	r1, #0
 80095d8:	bf0c      	ite	eq
 80095da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095de:	2340      	movne	r3, #64	; 0x40
 80095e0:	2000      	movs	r0, #0
 80095e2:	6031      	str	r1, [r6, #0]
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	b016      	add	sp, #88	; 0x58
 80095e8:	bd70      	pop	{r4, r5, r6, pc}
 80095ea:	466a      	mov	r2, sp
 80095ec:	f000 f848 	bl	8009680 <_fstat_r>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	dbec      	blt.n	80095ce <__swhatbuf_r+0x12>
 80095f4:	9901      	ldr	r1, [sp, #4]
 80095f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80095fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80095fe:	4259      	negs	r1, r3
 8009600:	4159      	adcs	r1, r3
 8009602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009606:	e7eb      	b.n	80095e0 <__swhatbuf_r+0x24>

08009608 <__smakebuf_r>:
 8009608:	898b      	ldrh	r3, [r1, #12]
 800960a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800960c:	079d      	lsls	r5, r3, #30
 800960e:	4606      	mov	r6, r0
 8009610:	460c      	mov	r4, r1
 8009612:	d507      	bpl.n	8009624 <__smakebuf_r+0x1c>
 8009614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	6123      	str	r3, [r4, #16]
 800961c:	2301      	movs	r3, #1
 800961e:	6163      	str	r3, [r4, #20]
 8009620:	b002      	add	sp, #8
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	ab01      	add	r3, sp, #4
 8009626:	466a      	mov	r2, sp
 8009628:	f7ff ffc8 	bl	80095bc <__swhatbuf_r>
 800962c:	9900      	ldr	r1, [sp, #0]
 800962e:	4605      	mov	r5, r0
 8009630:	4630      	mov	r0, r6
 8009632:	f7fe fecb 	bl	80083cc <_malloc_r>
 8009636:	b948      	cbnz	r0, 800964c <__smakebuf_r+0x44>
 8009638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800963c:	059a      	lsls	r2, r3, #22
 800963e:	d4ef      	bmi.n	8009620 <__smakebuf_r+0x18>
 8009640:	f023 0303 	bic.w	r3, r3, #3
 8009644:	f043 0302 	orr.w	r3, r3, #2
 8009648:	81a3      	strh	r3, [r4, #12]
 800964a:	e7e3      	b.n	8009614 <__smakebuf_r+0xc>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	6020      	str	r0, [r4, #0]
 8009650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	6163      	str	r3, [r4, #20]
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	6120      	str	r0, [r4, #16]
 800965e:	b15b      	cbz	r3, 8009678 <__smakebuf_r+0x70>
 8009660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009664:	4630      	mov	r0, r6
 8009666:	f000 f81d 	bl	80096a4 <_isatty_r>
 800966a:	b128      	cbz	r0, 8009678 <__smakebuf_r+0x70>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f023 0303 	bic.w	r3, r3, #3
 8009672:	f043 0301 	orr.w	r3, r3, #1
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	431d      	orrs	r5, r3
 800967c:	81a5      	strh	r5, [r4, #12]
 800967e:	e7cf      	b.n	8009620 <__smakebuf_r+0x18>

08009680 <_fstat_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d07      	ldr	r5, [pc, #28]	; (80096a0 <_fstat_r+0x20>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	4611      	mov	r1, r2
 800968c:	602b      	str	r3, [r5, #0]
 800968e:	f7f8 faea 	bl	8001c66 <_fstat>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	d102      	bne.n	800969c <_fstat_r+0x1c>
 8009696:	682b      	ldr	r3, [r5, #0]
 8009698:	b103      	cbz	r3, 800969c <_fstat_r+0x1c>
 800969a:	6023      	str	r3, [r4, #0]
 800969c:	bd38      	pop	{r3, r4, r5, pc}
 800969e:	bf00      	nop
 80096a0:	200044e0 	.word	0x200044e0

080096a4 <_isatty_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d06      	ldr	r5, [pc, #24]	; (80096c0 <_isatty_r+0x1c>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	602b      	str	r3, [r5, #0]
 80096b0:	f7f8 fae9 	bl	8001c86 <_isatty>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d102      	bne.n	80096be <_isatty_r+0x1a>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	b103      	cbz	r3, 80096be <_isatty_r+0x1a>
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	bd38      	pop	{r3, r4, r5, pc}
 80096c0:	200044e0 	.word	0x200044e0

080096c4 <_init>:
 80096c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c6:	bf00      	nop
 80096c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ca:	bc08      	pop	{r3}
 80096cc:	469e      	mov	lr, r3
 80096ce:	4770      	bx	lr

080096d0 <_fini>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	bf00      	nop
 80096d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d6:	bc08      	pop	{r3}
 80096d8:	469e      	mov	lr, r3
 80096da:	4770      	bx	lr
