
WSST_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009858  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  080099f8  080099f8  000199f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e9c  08009e9c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ea4  08009ea4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ea8  08009ea8  00019ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004320  200001e0  0800a08c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004500  0800a08c  00024500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d7a  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000329e  00000000  00000000  00035fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00039270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ede  00000000  00000000  0003a598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a781  00000000  00000000  0003b476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160cb  00000000  00000000  00055bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4865  00000000  00000000  0006bcc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061ec  00000000  00000000  00110528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00116714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099e0 	.word	0x080099e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080099e0 	.word	0x080099e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <vApplicationGetIdleTaskMemory+0x30>)
 8000f6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200001fc 	.word	0x200001fc
 8000f84:	200002ac 	.word	0x200002ac

08000f88 <set_setpoint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_setpoint(uint32_t new_setpoint)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	temp_setpoint = new_setpoint;
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <set_setpoint+0x1c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000598 	.word	0x20000598

08000fa8 <reset_setpoint>:

void reset_setpoint(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	temp_setpoint = 0;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <reset_setpoint+0x14>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000598 	.word	0x20000598

08000fc0 <thermistor_adc_to_temp_c>:

float thermistor_adc_to_temp_c(uint16_t thermistor_adc_value)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
	float thermistor_resistance_ohm = (((float) 4096/(float) thermistor_adc_value) - 1) * (float) THERMISTOR_RESISTOR;
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	ee07 3a90 	vmov	s15, r3
 8000fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fd4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001050 <thermistor_adc_to_temp_c+0x90>
 8000fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001054 <thermistor_adc_to_temp_c+0x94>
 8000fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fec:	edc7 7a03 	vstr	s15, [r7, #12]

	float thermistor_temp = -(30.21*logf(thermistor_resistance_ohm)) + 137.57;
 8000ff0:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ff4:	f008 fbce 	bl	8009794 <logf>
 8000ff8:	ee10 3a10 	vmov	r3, s0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff faab 	bl	8000558 <__aeabi_f2d>
 8001002:	a30f      	add	r3, pc, #60	; (adr r3, 8001040 <thermistor_adc_to_temp_c+0x80>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff fafe 	bl	8000608 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	a10d      	add	r1, pc, #52	; (adr r1, 8001048 <thermistor_adc_to_temp_c+0x88>)
 8001012:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001016:	f7ff f93f 	bl	8000298 <__aeabi_dsub>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fdc9 	bl	8000bb8 <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	60bb      	str	r3, [r7, #8]
	return thermistor_temp;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	ee07 3a90 	vmov	s15, r3
}
 8001030:	eeb0 0a67 	vmov.f32	s0, s15
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	8f5c28f6 	.word	0x8f5c28f6
 8001044:	403e35c2 	.word	0x403e35c2
 8001048:	70a3d70a 	.word	0x70a3d70a
 800104c:	4061323d 	.word	0x4061323d
 8001050:	45800000 	.word	0x45800000
 8001054:	409570a4 	.word	0x409570a4

08001058 <cycle_heater_state>:

void cycle_heater_state(int active_heater)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  switch(heater_state[active_heater])
 8001060:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <cycle_heater_state+0x60>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d018      	beq.n	800109e <cycle_heater_state+0x46>
 800106c:	2b02      	cmp	r3, #2
 800106e:	dc1e      	bgt.n	80010ae <cycle_heater_state+0x56>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <cycle_heater_state+0x22>
 8001074:	2b01      	cmp	r3, #1
 8001076:	d009      	beq.n	800108c <cycle_heater_state+0x34>
	case FULL_HEAT:
		heater_state[active_heater] = OFF;
		reset_setpoint();
		break;
  }
}
 8001078:	e019      	b.n	80010ae <cycle_heater_state+0x56>
		heater_state[active_heater] = PRE_HEAT;
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <cycle_heater_state+0x60>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
		set_setpoint(PRE_HEAT_SETPOINT);
 8001084:	207d      	movs	r0, #125	; 0x7d
 8001086:	f7ff ff7f 	bl	8000f88 <set_setpoint>
		break;
 800108a:	e010      	b.n	80010ae <cycle_heater_state+0x56>
		heater_state[active_heater] = FULL_HEAT;
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <cycle_heater_state+0x60>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
		set_setpoint(FULL_HEAT_STOPPOINT);
 8001096:	2096      	movs	r0, #150	; 0x96
 8001098:	f7ff ff76 	bl	8000f88 <set_setpoint>
		break;
 800109c:	e007      	b.n	80010ae <cycle_heater_state+0x56>
		heater_state[active_heater] = OFF;
 800109e:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <cycle_heater_state+0x60>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
		reset_setpoint();
 80010a8:	f7ff ff7e 	bl	8000fa8 <reset_setpoint>
		break;
 80010ac:	bf00      	nop
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000059c 	.word	0x2000059c

080010bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010cc:	d105      	bne.n	80010da <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  cycle_heater_state(active_heater);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_GPIO_EXTI_Callback+0x38>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffc0 	bl	8001058 <cycle_heater_state>
  else if(GPIO_Pin == GPIO_PIN_7)
  {
//	  rpm_time = HAL_GetTick();
	  IR_RPM_interrupt_count++;
  }
}
 80010d8:	e007      	b.n	80010ea <HAL_GPIO_EXTI_Callback+0x2e>
  else if(GPIO_Pin == GPIO_PIN_7)
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	2b80      	cmp	r3, #128	; 0x80
 80010de:	d104      	bne.n	80010ea <HAL_GPIO_EXTI_Callback+0x2e>
	  IR_RPM_interrupt_count++;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e8:	6013      	str	r3, [r2, #0]
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200005a4 	.word	0x200005a4
 80010f8:	200005a8 	.word	0x200005a8

080010fc <read_and_accumulate_adc_channels>:

void read_and_accumulate_adc_channels()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	for(int i = 0; i < HEATER_COUNT; i++)
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	e019      	b.n	800113c <read_and_accumulate_adc_channels+0x40>
	{
		HAL_ADC_Start(&hadc1);
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <read_and_accumulate_adc_channels+0x54>)
 800110a:	f001 f847 	bl	800219c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800110e:	f04f 31ff 	mov.w	r1, #4294967295
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <read_and_accumulate_adc_channels+0x54>)
 8001114:	f001 f929 	bl	800236a <HAL_ADC_PollForConversion>
		adc_values[i] += HAL_ADC_GetValue(&hadc1);
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <read_and_accumulate_adc_channels+0x54>)
 800111a:	f001 f9b1 	bl	8002480 <HAL_ADC_GetValue>
 800111e:	4601      	mov	r1, r0
 8001120:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <read_and_accumulate_adc_channels+0x58>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001128:	b28b      	uxth	r3, r1
 800112a:	4413      	add	r3, r2
 800112c:	b299      	uxth	r1, r3
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <read_and_accumulate_adc_channels+0x58>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < HEATER_COUNT; i++)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3301      	adds	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b07      	cmp	r3, #7
 8001140:	dde2      	ble.n	8001108 <read_and_accumulate_adc_channels+0xc>
	}

	HAL_ADC_Stop(&hadc1);
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <read_and_accumulate_adc_channels+0x54>)
 8001144:	f001 f8de 	bl	8002304 <HAL_ADC_Stop>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200004ac 	.word	0x200004ac
 8001154:	200005e0 	.word	0x200005e0

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b0a4      	sub	sp, #144	; 0x90
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f000 ff97 	bl	8002090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f000 f881 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f000 fa21 	bl	80015ac <MX_GPIO_Init>
  MX_ADC1_Init();
 800116a:	f000 f8e7 	bl	800133c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800116e:	f000 f9f3 	bl	8001558 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001172:	f000 f999 	bl	80014a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001176:	4831      	ldr	r0, [pc, #196]	; (800123c <main+0xe4>)
 8001178:	f001 f810 	bl	800219c <HAL_ADC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <main+0xe8>)
 800117e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001182:	461d      	mov	r5, r3
 8001184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001188:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800118c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001190:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f004 f9c9 	bl	800552e <osThreadCreate>
 800119c:	4603      	mov	r3, r0
 800119e:	4a29      	ldr	r2, [pc, #164]	; (8001244 <main+0xec>)
 80011a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of readSensors */
  osThreadDef(readSensors, startReadSensors, osPriorityNormal, 0, 128);
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <main+0xf0>)
 80011a4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80011a8:	461d      	mov	r5, r3
 80011aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorsHandle = osThreadCreate(osThread(readSensors), NULL);
 80011b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f004 f9b6 	bl	800552e <osThreadCreate>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a21      	ldr	r2, [pc, #132]	; (800124c <main+0xf4>)
 80011c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of bangBangControl */
  osThreadDef(bangBangControl, StartBangBangControl, osPriorityRealtime, 0, 128);
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <main+0xf8>)
 80011ca:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bangBangControlHandle = osThreadCreate(osThread(bangBangControl), NULL);
 80011dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 f9a3 	bl	800552e <osThreadCreate>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <main+0xfc>)
 80011ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of communicationTa */
  osThreadDef(communicationTa, StartComTask, osPriorityNormal, 0, 256);
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <main+0x100>)
 80011f0:	f107 0420 	add.w	r4, r7, #32
 80011f4:	461d      	mov	r5, r3
 80011f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  communicationTaHandle = osThreadCreate(osThread(communicationTa), NULL);
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f004 f990 	bl	800552e <osThreadCreate>
 800120e:	4603      	mov	r3, r0
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <main+0x104>)
 8001212:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, startMotorTask, osPriorityNormal, 0, 128);
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <main+0x108>)
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	461d      	mov	r5, r3
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f004 f97f 	bl	800552e <osThreadCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <main+0x10c>)
 8001234:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001236:	f004 f973 	bl	8005520 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800123a:	e7fe      	b.n	800123a <main+0xe2>
 800123c:	200004ac 	.word	0x200004ac
 8001240:	08009a04 	.word	0x08009a04
 8001244:	20000584 	.word	0x20000584
 8001248:	08009a2c 	.word	0x08009a2c
 800124c:	20000588 	.word	0x20000588
 8001250:	08009a58 	.word	0x08009a58
 8001254:	2000058c 	.word	0x2000058c
 8001258:	08009a84 	.word	0x08009a84
 800125c:	20000590 	.word	0x20000590
 8001260:	08009aac 	.word	0x08009aac
 8001264:	20000594 	.word	0x20000594

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	; 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2230      	movs	r2, #48	; 0x30
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f006 f93b 	bl	80074f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <SystemClock_Config+0xcc>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a27      	ldr	r2, [pc, #156]	; (8001334 <SystemClock_Config+0xcc>)
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <SystemClock_Config+0xcc>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <SystemClock_Config+0xd0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012b4:	4a20      	ldr	r2, [pc, #128]	; (8001338 <SystemClock_Config+0xd0>)
 80012b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <SystemClock_Config+0xd0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c8:	2302      	movs	r3, #2
 80012ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d0:	2310      	movs	r3, #16
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d4:	2302      	movs	r3, #2
 80012d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012d8:	2300      	movs	r3, #0
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012dc:	2308      	movs	r3, #8
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012e0:	2348      	movs	r3, #72	; 0x48
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012e8:	2304      	movs	r3, #4
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fe1b 	bl	8002f2c <HAL_RCC_OscConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012fc:	f000 fbae 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001300:	230f      	movs	r3, #15
 8001302:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001304:	2302      	movs	r3, #2
 8001306:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2102      	movs	r1, #2
 800131c:	4618      	mov	r0, r3
 800131e:	f002 f87d 	bl	800341c <HAL_RCC_ClockConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001328:	f000 fb98 	bl	8001a5c <Error_Handler>
  }
}
 800132c:	bf00      	nop
 800132e:	3750      	adds	r7, #80	; 0x50
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000

0800133c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800134e:	4b53      	ldr	r3, [pc, #332]	; (800149c <MX_ADC1_Init+0x160>)
 8001350:	4a53      	ldr	r2, [pc, #332]	; (80014a0 <MX_ADC1_Init+0x164>)
 8001352:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001354:	4b51      	ldr	r3, [pc, #324]	; (800149c <MX_ADC1_Init+0x160>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135a:	4b50      	ldr	r3, [pc, #320]	; (800149c <MX_ADC1_Init+0x160>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001360:	4b4e      	ldr	r3, [pc, #312]	; (800149c <MX_ADC1_Init+0x160>)
 8001362:	2201      	movs	r2, #1
 8001364:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <MX_ADC1_Init+0x160>)
 8001368:	2200      	movs	r2, #0
 800136a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800136c:	4b4b      	ldr	r3, [pc, #300]	; (800149c <MX_ADC1_Init+0x160>)
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001374:	4b49      	ldr	r3, [pc, #292]	; (800149c <MX_ADC1_Init+0x160>)
 8001376:	2201      	movs	r2, #1
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800137a:	4b48      	ldr	r3, [pc, #288]	; (800149c <MX_ADC1_Init+0x160>)
 800137c:	2200      	movs	r2, #0
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <MX_ADC1_Init+0x160>)
 8001382:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <MX_ADC1_Init+0x168>)
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001386:	4b45      	ldr	r3, [pc, #276]	; (800149c <MX_ADC1_Init+0x160>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800138c:	4b43      	ldr	r3, [pc, #268]	; (800149c <MX_ADC1_Init+0x160>)
 800138e:	2208      	movs	r2, #8
 8001390:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001392:	4b42      	ldr	r3, [pc, #264]	; (800149c <MX_ADC1_Init+0x160>)
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <MX_ADC1_Init+0x160>)
 800139c:	2201      	movs	r2, #1
 800139e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a0:	483e      	ldr	r0, [pc, #248]	; (800149c <MX_ADC1_Init+0x160>)
 80013a2:	f000 feb7 	bl	8002114 <HAL_ADC_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80013ac:	f000 fb56 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	4836      	ldr	r0, [pc, #216]	; (800149c <MX_ADC1_Init+0x160>)
 80013c2:	f001 f86b 	bl	800249c <HAL_ADC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013cc:	f000 fb46 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	482f      	ldr	r0, [pc, #188]	; (800149c <MX_ADC1_Init+0x160>)
 80013de:	f001 f85d 	bl	800249c <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80013e8:	f000 fb38 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013ec:	2304      	movs	r3, #4
 80013ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013f0:	2303      	movs	r3, #3
 80013f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4828      	ldr	r0, [pc, #160]	; (800149c <MX_ADC1_Init+0x160>)
 80013fa:	f001 f84f 	bl	800249c <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001404:	f000 fb2a 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001408:	2308      	movs	r3, #8
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800140c:	2304      	movs	r3, #4
 800140e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4821      	ldr	r0, [pc, #132]	; (800149c <MX_ADC1_Init+0x160>)
 8001416:	f001 f841 	bl	800249c <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001420:	f000 fb1c 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001424:	230a      	movs	r3, #10
 8001426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001428:	2305      	movs	r3, #5
 800142a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	481a      	ldr	r0, [pc, #104]	; (800149c <MX_ADC1_Init+0x160>)
 8001432:	f001 f833 	bl	800249c <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 800143c:	f000 fb0e 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001440:	230b      	movs	r3, #11
 8001442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001444:	2306      	movs	r3, #6
 8001446:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <MX_ADC1_Init+0x160>)
 800144e:	f001 f825 	bl	800249c <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001458:	f000 fb00 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800145c:	230c      	movs	r3, #12
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001460:	2307      	movs	r3, #7
 8001462:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <MX_ADC1_Init+0x160>)
 800146a:	f001 f817 	bl	800249c <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001474:	f000 faf2 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001478:	230d      	movs	r3, #13
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800147c:	2308      	movs	r3, #8
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_ADC1_Init+0x160>)
 8001486:	f001 f809 	bl	800249c <HAL_ADC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8001490:	f000 fae4 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200004ac 	.word	0x200004ac
 80014a0:	40012000 	.word	0x40012000
 80014a4:	0f000001 	.word	0x0f000001

080014a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <MX_TIM2_Init+0xac>)
 80014cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <MX_TIM2_Init+0xac>)
 80014d4:	2247      	movs	r2, #71	; 0x47
 80014d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_TIM2_Init+0xac>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_TIM2_Init+0xac>)
 80014e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_TIM2_Init+0xac>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <MX_TIM2_Init+0xac>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f2:	4818      	ldr	r0, [pc, #96]	; (8001554 <MX_TIM2_Init+0xac>)
 80014f4:	f002 fa60 	bl	80039b8 <HAL_TIM_PWM_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014fe:	f000 faad 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	4619      	mov	r1, r3
 8001510:	4810      	ldr	r0, [pc, #64]	; (8001554 <MX_TIM2_Init+0xac>)
 8001512:	f002 ff69 	bl	80043e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800151c:	f000 fa9e 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001520:	2360      	movs	r3, #96	; 0x60
 8001522:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <MX_TIM2_Init+0xac>)
 8001538:	f002 fc2e 	bl	8003d98 <HAL_TIM_PWM_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001542:	f000 fa8b 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001546:	4803      	ldr	r0, [pc, #12]	; (8001554 <MX_TIM2_Init+0xac>)
 8001548:	f000 fb6c 	bl	8001c24 <HAL_TIM_MspPostInit>

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200004f4 	.word	0x200004f4

08001558 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <MX_USART2_UART_Init+0x50>)
 8001560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001590:	f002 ffac 	bl	80044ec <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800159a:	f000 fa5f 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000053c 	.word	0x2000053c
 80015a8:	40004400 	.word	0x40004400

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <MX_GPIO_Init+0x11c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a3f      	ldr	r2, [pc, #252]	; (80016c8 <MX_GPIO_Init+0x11c>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <MX_GPIO_Init+0x11c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <MX_GPIO_Init+0x11c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a38      	ldr	r2, [pc, #224]	; (80016c8 <MX_GPIO_Init+0x11c>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <MX_GPIO_Init+0x11c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <MX_GPIO_Init+0x11c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <MX_GPIO_Init+0x11c>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <MX_GPIO_Init+0x11c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800161c:	482b      	ldr	r0, [pc, #172]	; (80016cc <MX_GPIO_Init+0x120>)
 800161e:	f001 fc53 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEATER_BANK_3_Pin|HEATER_BANK_0_Pin|HEATER_BANK_1_Pin|HEATER_BANK_2_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001628:	4829      	ldr	r0, [pc, #164]	; (80016d0 <MX_GPIO_Init+0x124>)
 800162a:	f001 fc4d 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Interrupt_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Interrupt_Pin;
 800162e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001634:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	4823      	ldr	r0, [pc, #140]	; (80016d4 <MX_GPIO_Init+0x128>)
 8001646:	f001 fabb 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 800164a:	f44f 73b0 	mov.w	r3, #352	; 0x160
 800164e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	481a      	ldr	r0, [pc, #104]	; (80016cc <MX_GPIO_Init+0x120>)
 8001664:	f001 faac 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Input_Interrupt_Pin */
  GPIO_InitStruct.Pin = IR_Input_Interrupt_Pin;
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800166c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_Input_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4619      	mov	r1, r3
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <MX_GPIO_Init+0x120>)
 800167e:	f001 fa9f 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HEATER_BANK_3_Pin HEATER_BANK_0_Pin HEATER_BANK_1_Pin HEATER_BANK_2_Pin */
  GPIO_InitStruct.Pin = HEATER_BANK_3_Pin|HEATER_BANK_0_Pin|HEATER_BANK_1_Pin|HEATER_BANK_2_Pin;
 8001682:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4619      	mov	r1, r3
 800169a:	480d      	ldr	r0, [pc, #52]	; (80016d0 <MX_GPIO_Init+0x124>)
 800169c:	f001 fa90 	bl	8002bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2105      	movs	r1, #5
 80016a4:	2017      	movs	r0, #23
 80016a6:	f001 f9cf 	bl	8002a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016aa:	2017      	movs	r0, #23
 80016ac:	f001 f9e8 	bl	8002a80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2105      	movs	r1, #5
 80016b4:	2028      	movs	r0, #40	; 0x28
 80016b6:	f001 f9c7 	bl	8002a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ba:	2028      	movs	r0, #40	; 0x28
 80016bc:	f001 f9e0 	bl	8002a80 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c0:	bf00      	nop
 80016c2:	3720      	adds	r7, #32
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800

080016d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  reset_setpoint();
 80016e0:	f7ff fc62 	bl	8000fa8 <reset_setpoint>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 80016e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80016e8:	f003 ff6d 	bl	80055c6 <osDelay>
 80016ec:	e7fa      	b.n	80016e4 <StartDefaultTask+0xc>
	...

080016f0 <startReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadSensors */
void startReadSensors(void const * argument)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadSensors */
  int oversample_count_max = 10;
 80016f8:	230a      	movs	r3, #10
 80016fa:	60fb      	str	r3, [r7, #12]
  int oversample_count = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  // add switch case here for reading ADC channels
  for(;;)
  {
	read_and_accumulate_adc_channels();
 8001700:	f7ff fcfc 	bl	80010fc <read_and_accumulate_adc_channels>
	oversample_count++;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]

	if(oversample_count == oversample_count_max)
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	429a      	cmp	r2, r3
 8001710:	d12b      	bne.n	800176a <startReadSensors+0x7a>
	{
		oversample_count = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < HEATER_COUNT; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	e023      	b.n	8001764 <startReadSensors+0x74>
		{
			adc_values[i] = adc_values[i]/oversample_count_max;
 800171c:	4a15      	ldr	r2, [pc, #84]	; (8001774 <startReadSensors+0x84>)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001724:	461a      	mov	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	fb92 f3f3 	sdiv	r3, r2, r3
 800172c:	b299      	uxth	r1, r3
 800172e:	4a11      	ldr	r2, [pc, #68]	; (8001774 <startReadSensors+0x84>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			temp_values[i] = thermistor_adc_to_temp_c(adc_values[i]);
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <startReadSensors+0x84>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc3e 	bl	8000fc0 <thermistor_adc_to_temp_c>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <startReadSensors+0x88>)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	edc3 7a00 	vstr	s15, [r3]
			adc_values[i] = 0;
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <startReadSensors+0x84>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2100      	movs	r1, #0
 800175a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < HEATER_COUNT; i++)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	3301      	adds	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2b07      	cmp	r3, #7
 8001768:	ddd8      	ble.n	800171c <startReadSensors+0x2c>
		}
	}
    osDelay(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f003 ff2b 	bl	80055c6 <osDelay>
	read_and_accumulate_adc_channels();
 8001770:	e7c6      	b.n	8001700 <startReadSensors+0x10>
 8001772:	bf00      	nop
 8001774:	200005e0 	.word	0x200005e0
 8001778:	200005f0 	.word	0x200005f0

0800177c <StartBangBangControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBangBangControl */
void StartBangBangControl(void const * argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBangBangControl */
  TIM2->CCR1 = 500; // Divide by 1000 to get PWM Duty Cycle
 8001784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001788:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800178e:	2100      	movs	r1, #0
 8001790:	483a      	ldr	r0, [pc, #232]	; (800187c <StartBangBangControl+0x100>)
 8001792:	f002 f961 	bl	8003a58 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // D7 on board
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	4838      	ldr	r0, [pc, #224]	; (8001880 <StartBangBangControl+0x104>)
 800179e:	f001 fb93 	bl	8002ec8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	if(heater_state[active_heater] == PRE_HEAT)
 80017a2:	4b38      	ldr	r3, [pc, #224]	; (8001884 <StartBangBangControl+0x108>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a38      	ldr	r2, [pc, #224]	; (8001888 <StartBangBangControl+0x10c>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d127      	bne.n	80017fe <StartBangBangControl+0x82>
	{
		if(temp_values[0] < temp_setpoint - PRE_HEAT_DEADBAND)
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <StartBangBangControl+0x110>)
 80017b0:	ed93 7a00 	vldr	s14, [r3]
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <StartBangBangControl+0x114>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	d50c      	bpl.n	80017e4 <StartBangBangControl+0x68>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2120      	movs	r1, #32
 80017ce:	482c      	ldr	r0, [pc, #176]	; (8001880 <StartBangBangControl+0x104>)
 80017d0:	f001 fb7a 	bl	8002ec8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_SET);
 80017d4:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <StartBangBangControl+0x118>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	4619      	mov	r1, r3
 80017dc:	482e      	ldr	r0, [pc, #184]	; (8001898 <StartBangBangControl+0x11c>)
 80017de:	f001 fb73 	bl	8002ec8 <HAL_GPIO_WritePin>
 80017e2:	e047      	b.n	8001874 <StartBangBangControl+0xf8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2120      	movs	r1, #32
 80017e8:	4825      	ldr	r0, [pc, #148]	; (8001880 <StartBangBangControl+0x104>)
 80017ea:	f001 fb6d 	bl	8002ec8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_RESET);
 80017ee:	4b29      	ldr	r3, [pc, #164]	; (8001894 <StartBangBangControl+0x118>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4828      	ldr	r0, [pc, #160]	; (8001898 <StartBangBangControl+0x11c>)
 80017f8:	f001 fb66 	bl	8002ec8 <HAL_GPIO_WritePin>
 80017fc:	e03a      	b.n	8001874 <StartBangBangControl+0xf8>
		}
	}
	else if(heater_state[active_heater] == FULL_HEAT)
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <StartBangBangControl+0x108>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a21      	ldr	r2, [pc, #132]	; (8001888 <StartBangBangControl+0x10c>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d128      	bne.n	800185c <StartBangBangControl+0xe0>
	{
		if(temp_values[0] < FULL_HEAT_STOPPOINT)
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <StartBangBangControl+0x110>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800189c <StartBangBangControl+0x120>
 8001814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d50c      	bpl.n	8001838 <StartBangBangControl+0xbc>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	2120      	movs	r1, #32
 8001822:	4817      	ldr	r0, [pc, #92]	; (8001880 <StartBangBangControl+0x104>)
 8001824:	f001 fb50 	bl	8002ec8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_SET); // D12 on board
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <StartBangBangControl+0x118>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	4619      	mov	r1, r3
 8001830:	4819      	ldr	r0, [pc, #100]	; (8001898 <StartBangBangControl+0x11c>)
 8001832:	f001 fb49 	bl	8002ec8 <HAL_GPIO_WritePin>
 8001836:	e01d      	b.n	8001874 <StartBangBangControl+0xf8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2120      	movs	r1, #32
 800183c:	4810      	ldr	r0, [pc, #64]	; (8001880 <StartBangBangControl+0x104>)
 800183e:	f001 fb43 	bl	8002ec8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_RESET);
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <StartBangBangControl+0x118>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	4813      	ldr	r0, [pc, #76]	; (8001898 <StartBangBangControl+0x11c>)
 800184c:	f001 fb3c 	bl	8002ec8 <HAL_GPIO_WritePin>
			heater_state[active_heater] = OFF;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <StartBangBangControl+0x108>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <StartBangBangControl+0x10c>)
 8001856:	2100      	movs	r1, #0
 8001858:	54d1      	strb	r1, [r2, r3]
 800185a:	e00b      	b.n	8001874 <StartBangBangControl+0xf8>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2120      	movs	r1, #32
 8001860:	4807      	ldr	r0, [pc, #28]	; (8001880 <StartBangBangControl+0x104>)
 8001862:	f001 fb31 	bl	8002ec8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_RESET);
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <StartBangBangControl+0x118>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <StartBangBangControl+0x11c>)
 8001870:	f001 fb2a 	bl	8002ec8 <HAL_GPIO_WritePin>
	}
	osDelay(100);
 8001874:	2064      	movs	r0, #100	; 0x64
 8001876:	f003 fea6 	bl	80055c6 <osDelay>
	if(heater_state[active_heater] == PRE_HEAT)
 800187a:	e792      	b.n	80017a2 <StartBangBangControl+0x26>
 800187c:	200004f4 	.word	0x200004f4
 8001880:	40020000 	.word	0x40020000
 8001884:	200005a4 	.word	0x200005a4
 8001888:	2000059c 	.word	0x2000059c
 800188c:	200005f0 	.word	0x200005f0
 8001890:	20000598 	.word	0x20000598
 8001894:	20000004 	.word	0x20000004
 8001898:	40020400 	.word	0x40020400
 800189c:	43160000 	.word	0x43160000

080018a0 <StartComTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartComTask */
void StartComTask(void const * argument)
{
 80018a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018a4:	b0a9      	sub	sp, #164	; 0xa4
 80018a6:	af06      	add	r7, sp, #24
 80018a8:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	char buf[128];
	sprintf(buf, "T0(C): %f // T1(C): %f // State: %d // RPM: %f\r\n", temp_values[0], temp_values[1], heater_state[0], global_rpm_avg);
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <StartComTask+0x78>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe52 	bl	8000558 <__aeabi_f2d>
 80018b4:	4680      	mov	r8, r0
 80018b6:	4689      	mov	r9, r1
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <StartComTask+0x78>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe4b 	bl	8000558 <__aeabi_f2d>
 80018c2:	4604      	mov	r4, r0
 80018c4:	460d      	mov	r5, r1
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <StartComTask+0x7c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461e      	mov	r6, r3
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <StartComTask+0x80>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe41 	bl	8000558 <__aeabi_f2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	f107 0008 	add.w	r0, r7, #8
 80018de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018e2:	9602      	str	r6, [sp, #8]
 80018e4:	e9cd 4500 	strd	r4, r5, [sp]
 80018e8:	4642      	mov	r2, r8
 80018ea:	464b      	mov	r3, r9
 80018ec:	490d      	ldr	r1, [pc, #52]	; (8001924 <StartComTask+0x84>)
 80018ee:	f005 fd9d 	bl	800742c <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fcc2 	bl	8000280 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29a      	uxth	r2, r3
 8001900:	f107 0108 	add.w	r1, r7, #8
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <StartComTask+0x88>)
 800190a:	f002 fe3f 	bl	800458c <HAL_UART_Transmit>

    osDelay(200);
 800190e:	20c8      	movs	r0, #200	; 0xc8
 8001910:	f003 fe59 	bl	80055c6 <osDelay>
  {
 8001914:	e7c9      	b.n	80018aa <StartComTask+0xa>
 8001916:	bf00      	nop
 8001918:	200005f0 	.word	0x200005f0
 800191c:	2000059c 	.word	0x2000059c
 8001920:	200005dc 	.word	0x200005dc
 8001924:	08009ac8 	.word	0x08009ac8
 8001928:	2000053c 	.word	0x2000053c

0800192c <startMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMotorTask */
void startMotorTask(void const * argument)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMotorTask */
  int i = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  float rpm_avg = 0;
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	rpm_time = HAL_GetTick();
 800193e:	f000 fbdd 	bl	80020fc <HAL_GetTick>
 8001942:	4603      	mov	r3, r0
 8001944:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <startMotorTask+0xec>)
 8001946:	6013      	str	r3, [r2, #0]
	float time_delta = ((float) rpm_time - (float) prev_rpm_time)/MS_TO_S;
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <startMotorTask+0xec>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <startMotorTask+0xf0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001960:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <startMotorTask+0xf4>)
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800196e:	edc7 7a02 	vstr	s15, [r7, #8]
	centrifuge_RPM[i] = ((IR_RPM_interrupt_count/time_delta)*60)/8;
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <startMotorTask+0xf8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800197e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001986:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a28 <startMotorTask+0xfc>
 800198a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800198e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001996:	4a25      	ldr	r2, [pc, #148]	; (8001a2c <startMotorTask+0x100>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	edc3 7a00 	vstr	s15, [r3]
	IR_RPM_interrupt_count = 0;
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <startMotorTask+0xf8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
	prev_rpm_time = rpm_time;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <startMotorTask+0xec>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <startMotorTask+0xf0>)
 80019ae:	6013      	str	r3, [r2, #0]

	rpm_avg = 0;
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]

	for(int index = 0; index < 10; index++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e00e      	b.n	80019da <startMotorTask+0xae>
	{
		rpm_avg += centrifuge_RPM[index];
 80019bc:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <startMotorTask+0x100>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int index = 0; index < 10; index++)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b09      	cmp	r3, #9
 80019de:	dded      	ble.n	80019bc <startMotorTask+0x90>
	}

	global_rpm_avg = (rpm_avg/10);
 80019e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80019e4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <startMotorTask+0x104>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]

	i = (i+1) % 10;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <startMotorTask+0x108>)
 80019f8:	fb83 1302 	smull	r1, r3, r3, r2
 80019fc:	1099      	asrs	r1, r3, #2
 80019fe:	17d3      	asrs	r3, r2, #31
 8001a00:	1ac9      	subs	r1, r1, r3
 8001a02:	460b      	mov	r3, r1
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]

    osDelay(100);
 8001a0e:	2064      	movs	r0, #100	; 0x64
 8001a10:	f003 fdd9 	bl	80055c6 <osDelay>
  {
 8001a14:	e793      	b.n	800193e <startMotorTask+0x12>
 8001a16:	bf00      	nop
 8001a18:	200005d4 	.word	0x200005d4
 8001a1c:	200005d8 	.word	0x200005d8
 8001a20:	20000000 	.word	0x20000000
 8001a24:	200005a8 	.word	0x200005a8
 8001a28:	42700000 	.word	0x42700000
 8001a2c:	200005ac 	.word	0x200005ac
 8001a30:	200005dc 	.word	0x200005dc
 8001a34:	66666667 	.word	0x66666667

08001a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a4a:	f000 fb43 	bl	80020d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40010000 	.word	0x40010000

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b090      	sub	sp, #64	; 0x40
 8001a60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a62:	b672      	cpsid	i
}
 8001a64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char buf[64];
  sprintf(buf, "BRUH MOMENT");
 8001a66:	463b      	mov	r3, r7
 8001a68:	4908      	ldr	r1, [pc, #32]	; (8001a8c <Error_Handler+0x30>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f005 fcde 	bl	800742c <siprintf>

  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8001a70:	463b      	mov	r3, r7
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fc04 	bl	8000280 <strlen>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4639      	mov	r1, r7
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	4803      	ldr	r0, [pc, #12]	; (8001a90 <Error_Handler+0x34>)
 8001a84:	f002 fd82 	bl	800458c <HAL_UART_Transmit>
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x2c>
 8001a8a:	bf00      	nop
 8001a8c:	08009afc 	.word	0x08009afc
 8001a90:	2000053c 	.word	0x2000053c

08001a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_MspInit+0x54>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_MspInit+0x54>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_MspInit+0x54>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_MspInit+0x54>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <HAL_MspInit+0x54>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_MspInit+0x54>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	f06f 0001 	mvn.w	r0, #1
 8001ada:	f000 ffb5 	bl	8002a48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	; 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a31      	ldr	r2, [pc, #196]	; (8001bd0 <HAL_ADC_MspInit+0xe4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d15b      	bne.n	8001bc6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_ADC_MspInit+0xe8>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b7e:	230f      	movs	r3, #15
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b82:	2303      	movs	r3, #3
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <HAL_ADC_MspInit+0xec>)
 8001b92:	f001 f815 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001b96:	2313      	movs	r3, #19
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <HAL_ADC_MspInit+0xf0>)
 8001baa:	f001 f809 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <HAL_ADC_MspInit+0xf4>)
 8001bc2:	f000 fffd 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3730      	adds	r7, #48	; 0x30
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40012000 	.word	0x40012000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400

08001be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d10d      	bne.n	8001c12 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c44:	d11e      	bne.n	8001c84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_TIM_MspPostInit+0x68>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_TIM_MspPostInit+0x68>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_TIM_MspPostInit+0x68>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4804      	ldr	r0, [pc, #16]	; (8001c90 <HAL_TIM_MspPostInit+0x6c>)
 8001c80:	f000 ff9e 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_UART_MspInit+0x94>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d133      	bne.n	8001d1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4809      	ldr	r0, [pc, #36]	; (8001d30 <HAL_UART_MspInit+0x9c>)
 8001d0a:	f000 ff59 	bl	8002bc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2105      	movs	r1, #5
 8001d12:	2026      	movs	r0, #38	; 0x26
 8001d14:	f000 fe98 	bl	8002a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d18:	2026      	movs	r0, #38	; 0x26
 8001d1a:	f000 feb1 	bl	8002a80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40004400 	.word	0x40004400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000

08001d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_InitTick+0xd0>)
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_InitTick+0xd0>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6453      	str	r3, [r2, #68]	; 0x44
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_InitTick+0xd0>)
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d60:	f107 020c 	add.w	r2, r7, #12
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 fd36 	bl	80037dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d70:	f001 fd20 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8001d74:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	4a23      	ldr	r2, [pc, #140]	; (8001e08 <HAL_InitTick+0xd4>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0c9b      	lsrs	r3, r3, #18
 8001d80:	3b01      	subs	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_InitTick+0xd8>)
 8001d86:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <HAL_InitTick+0xdc>)
 8001d88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_InitTick+0xd8>)
 8001d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_InitTick+0xd8>)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_InitTick+0xd8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_InitTick+0xd8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_InitTick+0xd8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001daa:	4818      	ldr	r0, [pc, #96]	; (8001e0c <HAL_InitTick+0xd8>)
 8001dac:	f001 fd48 	bl	8003840 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11b      	bne.n	8001df6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001dbe:	4813      	ldr	r0, [pc, #76]	; (8001e0c <HAL_InitTick+0xd8>)
 8001dc0:	f001 fd98 	bl	80038f4 <HAL_TIM_Base_Start_IT>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d111      	bne.n	8001df6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dd2:	2019      	movs	r0, #25
 8001dd4:	f000 fe54 	bl	8002a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	d808      	bhi.n	8001df0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001dde:	2200      	movs	r2, #0
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	2019      	movs	r0, #25
 8001de4:	f000 fe30 	bl	8002a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_InitTick+0xe0>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e002      	b.n	8001df6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3730      	adds	r7, #48	; 0x30
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	20000610 	.word	0x20000610
 8001e10:	40010000 	.word	0x40010000
 8001e14:	2000000c 	.word	0x2000000c

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e1c:	e7fe      	b.n	8001e1c <NMI_Handler+0x4>

08001e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <BusFault_Handler+0x4>

08001e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <UsageFault_Handler+0x4>

08001e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Input_Interrupt_Pin);
 8001e48:	2080      	movs	r0, #128	; 0x80
 8001e4a:	f001 f857 	bl	8002efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e5a:	f001 fead 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000610 	.word	0x20000610

08001e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <USART2_IRQHandler+0x10>)
 8001e6e:	f002 fc19 	bl	80046a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000053c 	.word	0x2000053c

08001e7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Interrupt_Pin);
 8001e80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e84:	f001 f83a 	bl	8002efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_kill>:

int _kill(int pid, int sig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea6:	f005 fbcd 	bl	8007644 <__errno>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2216      	movs	r2, #22
 8001eae:	601a      	str	r2, [r3, #0]
  return -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_exit>:

void _exit (int status)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ffe7 	bl	8001e9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ece:	e7fe      	b.n	8001ece <_exit+0x12>

08001ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00a      	b.n	8001ef8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee2:	f3af 8000 	nop.w
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf0      	blt.n	8001ee2 <_read+0x12>
  }

  return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x12>
  }
  return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_close>:

int _close(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_isatty>:

int _isatty(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f005 fb32 	bl	8007644 <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20018000 	.word	0x20018000
 800200c:	00000400 	.word	0x00000400
 8002010:	20000658 	.word	0x20000658
 8002014:	20004500 	.word	0x20004500

08002018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800203c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002074 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002040:	f7ff ffea 	bl	8002018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002046:	490d      	ldr	r1, [pc, #52]	; (800207c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800204c:	e002      	b.n	8002054 <LoopCopyDataInit>

0800204e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002052:	3304      	adds	r3, #4

08002054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002058:	d3f9      	bcc.n	800204e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800205c:	4c0a      	ldr	r4, [pc, #40]	; (8002088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002060:	e001      	b.n	8002066 <LoopFillZerobss>

08002062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002064:	3204      	adds	r2, #4

08002066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002068:	d3fb      	bcc.n	8002062 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800206a:	f005 faf1 	bl	8007650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206e:	f7ff f873 	bl	8001158 <main>
  bx  lr    
 8002072:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002074:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002080:	08009eac 	.word	0x08009eac
  ldr r2, =_sbss
 8002084:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002088:	20004500 	.word	0x20004500

0800208c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC_IRQHandler>
	...

08002090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <HAL_Init+0x40>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_Init+0x40>)
 80020a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_Init+0x40>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f000 fcba 	bl	8002a32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020be:	200f      	movs	r0, #15
 80020c0:	f7ff fe38 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c4:	f7ff fce6 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000010 	.word	0x20000010
 80020f8:	2000065c 	.word	0x2000065c

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2000065c 	.word	0x2000065c

08002114 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e033      	b.n	8002192 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fcda 	bl	8001aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800215a:	f023 0302 	bic.w	r3, r3, #2
 800215e:	f043 0202 	orr.w	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 faba 	bl	80026e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
 8002182:	e001      	b.n	8002188 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Start+0x1a>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e097      	b.n	80022e6 <HAL_ADC_Start+0x14a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d018      	beq.n	80021fe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021dc:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <HAL_ADC_Start+0x158>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <HAL_ADC_Start+0x15c>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0c9a      	lsrs	r2, r3, #18
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021f0:	e002      	b.n	80021f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f9      	bne.n	80021f2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d15f      	bne.n	80022cc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002236:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224a:	d106      	bne.n	800225a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	f023 0206 	bic.w	r2, r3, #6
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	645a      	str	r2, [r3, #68]	; 0x44
 8002258:	e002      	b.n	8002260 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_ADC_Start+0x160>)
 800226a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002274:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d129      	bne.n	80022e4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	e020      	b.n	80022e4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a16      	ldr	r2, [pc, #88]	; (8002300 <HAL_ADC_Start+0x164>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d11b      	bne.n	80022e4 <HAL_ADC_Start+0x148>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d114      	bne.n	80022e4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	e00b      	b.n	80022e4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f043 0210 	orr.w	r2, r3, #16
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000008 	.word	0x20000008
 80022f8:	431bde83 	.word	0x431bde83
 80022fc:	40012300 	.word	0x40012300
 8002300:	40012000 	.word	0x40012000

08002304 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_ADC_Stop+0x16>
 8002316:	2302      	movs	r3, #2
 8002318:	e021      	b.n	800235e <HAL_ADC_Stop+0x5a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	f043 0201 	orr.w	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002386:	d113      	bne.n	80023b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002396:	d10b      	bne.n	80023b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f043 0220 	orr.w	r2, r3, #32
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e063      	b.n	8002478 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b0:	f7ff fea4 	bl	80020fc <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023b6:	e021      	b.n	80023fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d01d      	beq.n	80023fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_ADC_PollForConversion+0x6c>
 80023c6:	f7ff fe99 	bl	80020fc <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d212      	bcs.n	80023fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d00b      	beq.n	80023fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f043 0204 	orr.w	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e03d      	b.n	8002478 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	d1d6      	bne.n	80023b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f06f 0212 	mvn.w	r2, #18
 8002412:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d123      	bne.n	8002476 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002432:	2b00      	cmp	r3, #0
 8002434:	d11f      	bne.n	8002476 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800244e:	2b00      	cmp	r3, #0
 8002450:	d111      	bne.n	8002476 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1c>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e105      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x228>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b09      	cmp	r3, #9
 80024c6:	d925      	bls.n	8002514 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68d9      	ldr	r1, [r3, #12]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	3b1e      	subs	r3, #30
 80024de:	2207      	movs	r2, #7
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43da      	mvns	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	400a      	ands	r2, r1
 80024ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68d9      	ldr	r1, [r3, #12]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	4603      	mov	r3, r0
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4403      	add	r3, r0
 8002506:	3b1e      	subs	r3, #30
 8002508:	409a      	lsls	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	e022      	b.n	800255a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6919      	ldr	r1, [r3, #16]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	2207      	movs	r2, #7
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6919      	ldr	r1, [r3, #16]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	4618      	mov	r0, r3
 800254a:	4603      	mov	r3, r0
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4403      	add	r3, r0
 8002550:	409a      	lsls	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b06      	cmp	r3, #6
 8002560:	d824      	bhi.n	80025ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b05      	subs	r3, #5
 8002574:	221f      	movs	r2, #31
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	400a      	ands	r2, r1
 8002582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b05      	subs	r3, #5
 800259e:	fa00 f203 	lsl.w	r2, r0, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34
 80025aa:	e04c      	b.n	8002646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b0c      	cmp	r3, #12
 80025b2:	d824      	bhi.n	80025fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	3b23      	subs	r3, #35	; 0x23
 80025c6:	221f      	movs	r2, #31
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43da      	mvns	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	400a      	ands	r2, r1
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	3b23      	subs	r3, #35	; 0x23
 80025f0:	fa00 f203 	lsl.w	r2, r0, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
 80025fc:	e023      	b.n	8002646 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3b41      	subs	r3, #65	; 0x41
 8002610:	221f      	movs	r2, #31
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	400a      	ands	r2, r1
 800261e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	4618      	mov	r0, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b41      	subs	r3, #65	; 0x41
 800263a:	fa00 f203 	lsl.w	r2, r0, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_ADC_ConfigChannel+0x234>)
 8002648:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <HAL_ADC_ConfigChannel+0x238>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d109      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1cc>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b12      	cmp	r3, #18
 800265a:	d105      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_ADC_ConfigChannel+0x238>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d123      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x21e>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b10      	cmp	r3, #16
 8002678:	d003      	beq.n	8002682 <HAL_ADC_ConfigChannel+0x1e6>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b11      	cmp	r3, #17
 8002680:	d11b      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b10      	cmp	r3, #16
 8002694:	d111      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_ADC_ConfigChannel+0x23c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_ADC_ConfigChannel+0x240>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40012300 	.word	0x40012300
 80026d4:	40012000 	.word	0x40012000
 80026d8:	20000008 	.word	0x20000008
 80026dc:	431bde83 	.word	0x431bde83

080026e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026e8:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <ADC_Init+0x1f0>)
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	431a      	orrs	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	021a      	lsls	r2, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800275a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <ADC_Init+0x1f4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d022      	beq.n	80027be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002786:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6899      	ldr	r1, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	e00f      	b.n	80027de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0202 	bic.w	r2, r2, #2
 80027ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6899      	ldr	r1, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7e1b      	ldrb	r3, [r3, #24]
 80027f8:	005a      	lsls	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800281a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800282a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	3b01      	subs	r3, #1
 8002838:	035a      	lsls	r2, r3, #13
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	e007      	b.n	8002854 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002852:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	3b01      	subs	r3, #1
 8002870:	051a      	lsls	r2, r3, #20
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002896:	025a      	lsls	r2, r3, #9
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	029a      	lsls	r2, r3, #10
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	40012300 	.word	0x40012300
 80028d4:	0f000001 	.word	0x0f000001

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290a:	4a04      	ldr	r2, [pc, #16]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60d3      	str	r3, [r2, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <__NVIC_EnableIRQ+0x38>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ff4c 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5a:	f7ff ff61 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	6978      	ldr	r0, [r7, #20]
 8002a66:	f7ff ffb1 	bl	80029cc <NVIC_EncodePriority>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff80 	bl	8002978 <__NVIC_SetPriority>
}
 8002a78:	bf00      	nop
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff54 	bl	800293c <__NVIC_EnableIRQ>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aaa:	f7ff fb27 	bl	80020fc <HAL_GetTick>
 8002aae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d008      	beq.n	8002ace <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e052      	b.n	8002b74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0216 	bic.w	r2, r2, #22
 8002adc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <HAL_DMA_Abort+0x62>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0208 	bic.w	r2, r2, #8
 8002b0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1e:	e013      	b.n	8002b48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b20:	f7ff faec 	bl	80020fc <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d90c      	bls.n	8002b48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2203      	movs	r2, #3
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e015      	b.n	8002b74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e4      	bne.n	8002b20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	223f      	movs	r2, #63	; 0x3f
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d004      	beq.n	8002b9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00c      	b.n	8002bb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2205      	movs	r2, #5
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e159      	b.n	8002e90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 8148 	bne.w	8002e8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a2 	beq.w	8002e8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b57      	ldr	r3, [pc, #348]	; (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	4a56      	ldr	r2, [pc, #344]	; (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	; 0x44
 8002d56:	4b54      	ldr	r3, [pc, #336]	; (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d62:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_GPIO_Init+0x2ec>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a49      	ldr	r2, [pc, #292]	; (8002eb0 <HAL_GPIO_Init+0x2f0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d019      	beq.n	8002dc2 <HAL_GPIO_Init+0x202>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a48      	ldr	r2, [pc, #288]	; (8002eb4 <HAL_GPIO_Init+0x2f4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x1fe>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a47      	ldr	r2, [pc, #284]	; (8002eb8 <HAL_GPIO_Init+0x2f8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x1fa>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a46      	ldr	r2, [pc, #280]	; (8002ebc <HAL_GPIO_Init+0x2fc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x1f6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a45      	ldr	r2, [pc, #276]	; (8002ec0 <HAL_GPIO_Init+0x300>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x1f2>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e008      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002db6:	2303      	movs	r3, #3
 8002db8:	e004      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f002 0203 	and.w	r2, r2, #3
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	4093      	lsls	r3, r2
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd4:	4935      	ldr	r1, [pc, #212]	; (8002eac <HAL_GPIO_Init+0x2ec>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de2:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e06:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e30:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e36:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5a:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e84:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	f67f aea2 	bls.w	8002bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40013800 	.word	0x40013800
 8002eb0:	40020000 	.word	0x40020000
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	40020800 	.word	0x40020800
 8002ebc:	40020c00 	.word	0x40020c00
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed8:	787b      	ldrb	r3, [r7, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee4:	e003      	b.n	8002eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	041a      	lsls	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	619a      	str	r2, [r3, #24]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe f8ce 	bl	80010bc <HAL_GPIO_EXTI_Callback>
  }
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e267      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d075      	beq.n	8003036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f4a:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d00c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f56:	4b85      	ldr	r3, [pc, #532]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d112      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4b82      	ldr	r3, [pc, #520]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	4b7e      	ldr	r3, [pc, #504]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d05b      	beq.n	8003034 <HAL_RCC_OscConfig+0x108>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d157      	bne.n	8003034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e242      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x74>
 8002f92:	4b76      	ldr	r3, [pc, #472]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a75      	ldr	r2, [pc, #468]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e01d      	b.n	8002fdc <HAL_RCC_OscConfig+0xb0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x98>
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6f      	ldr	r2, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6c      	ldr	r2, [pc, #432]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCC_OscConfig+0xb0>
 8002fc4:	4b69      	ldr	r3, [pc, #420]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a68      	ldr	r2, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b66      	ldr	r3, [pc, #408]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a65      	ldr	r2, [pc, #404]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8002fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7ff f88a 	bl	80020fc <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fec:	f7ff f886 	bl	80020fc <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e207      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0xc0>
 800300a:	e014      	b.n	8003036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7ff f876 	bl	80020fc <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003014:	f7ff f872 	bl	80020fc <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e1f3      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	4b51      	ldr	r3, [pc, #324]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0xe8>
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d063      	beq.n	800310a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003042:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003056:	2b08      	cmp	r3, #8
 8003058:	d11c      	bne.n	8003094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b44      	ldr	r3, [pc, #272]	; (800316c <HAL_RCC_OscConfig+0x240>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d116      	bne.n	8003094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x152>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e1c7      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4937      	ldr	r1, [pc, #220]	; (800316c <HAL_RCC_OscConfig+0x240>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	e03a      	b.n	800310a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309c:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_RCC_OscConfig+0x244>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7ff f82b 	bl	80020fc <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030aa:	f7ff f827 	bl	80020fc <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1a8      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4925      	ldr	r1, [pc, #148]	; (800316c <HAL_RCC_OscConfig+0x240>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
 80030dc:	e015      	b.n	800310a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x244>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7ff f80a 	bl	80020fc <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ec:	f7ff f806 	bl	80020fc <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e187      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d036      	beq.n	8003184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x248>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe ffea 	bl	80020fc <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312c:	f7fe ffe6 	bl	80020fc <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e167      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_OscConfig+0x240>)
 8003140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x200>
 800314a:	e01b      	b.n	8003184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_OscConfig+0x248>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003152:	f7fe ffd3 	bl	80020fc <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	e00e      	b.n	8003178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800315a:	f7fe ffcf 	bl	80020fc <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d907      	bls.n	8003178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e150      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	42470000 	.word	0x42470000
 8003174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b88      	ldr	r3, [pc, #544]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ea      	bne.n	800315a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8097 	beq.w	80032c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b81      	ldr	r3, [pc, #516]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	4b7d      	ldr	r3, [pc, #500]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a7c      	ldr	r2, [pc, #496]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b7a      	ldr	r3, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b77      	ldr	r3, [pc, #476]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b74      	ldr	r3, [pc, #464]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a73      	ldr	r2, [pc, #460]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe ff8f 	bl	80020fc <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe ff8b 	bl	80020fc <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e10c      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x2ea>
 8003208:	4b64      	ldr	r3, [pc, #400]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a63      	ldr	r2, [pc, #396]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	e01c      	b.n	8003250 <HAL_RCC_OscConfig+0x324>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x30c>
 800321e:	4b5f      	ldr	r3, [pc, #380]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a5e      	ldr	r2, [pc, #376]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	4b5c      	ldr	r3, [pc, #368]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a5b      	ldr	r2, [pc, #364]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0x324>
 8003238:	4b58      	ldr	r3, [pc, #352]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4a57      	ldr	r2, [pc, #348]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6713      	str	r3, [r2, #112]	; 0x70
 8003244:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a54      	ldr	r2, [pc, #336]	; (800339c <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 0304 	bic.w	r3, r3, #4
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe ff50 	bl	80020fc <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	e00a      	b.n	8003276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe ff4c 	bl	80020fc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0cb      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003276:	4b49      	ldr	r3, [pc, #292]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ee      	beq.n	8003260 <HAL_RCC_OscConfig+0x334>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003284:	f7fe ff3a 	bl	80020fc <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe ff36 	bl	80020fc <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0b5      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a2:	4b3e      	ldr	r3, [pc, #248]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1ee      	bne.n	800328c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b4:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a1 	beq.w	800340c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ca:	4b34      	ldr	r3, [pc, #208]	; (800339c <HAL_RCC_OscConfig+0x470>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d05c      	beq.n	8003390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d141      	bne.n	8003362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCC_OscConfig+0x478>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe ff0a 	bl	80020fc <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe ff06 	bl	80020fc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e087      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	3b01      	subs	r3, #1
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	491b      	ldr	r1, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x478>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe fedf 	bl	80020fc <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe fedb 	bl	80020fc <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e05c      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x416>
 8003360:	e054      	b.n	800340c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x478>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fec8 	bl	80020fc <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe fec4 	bl	80020fc <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e045      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_RCC_OscConfig+0x470>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x444>
 800338e:	e03d      	b.n	800340c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e038      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
 800339c:	40023800 	.word	0x40023800
 80033a0:	40007000 	.word	0x40007000
 80033a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x4ec>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d028      	beq.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d121      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d11a      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d111      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0cc      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003430:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d90c      	bls.n	8003458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b65      	ldr	r3, [pc, #404]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800347a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d044      	beq.n	800353c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d119      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d003      	beq.n	80034da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e06f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e067      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fa:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 0203 	bic.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4934      	ldr	r1, [pc, #208]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800350c:	f7fe fdf6 	bl	80020fc <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	e00a      	b.n	800352a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003514:	f7fe fdf2 	bl	80020fc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e04f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 020c 	and.w	r2, r3, #12
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	429a      	cmp	r2, r3
 800353a:	d1eb      	bne.n	8003514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d20c      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490a      	ldr	r1, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fbb6 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023c00 	.word	0x40023c00
 80035d8:	40023800 	.word	0x40023800
 80035dc:	08009b10 	.word	0x08009b10
 80035e0:	20000008 	.word	0x20000008
 80035e4:	2000000c 	.word	0x2000000c

080035e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ec:	b090      	sub	sp, #64	; 0x40
 80035ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
 80035f4:	2300      	movs	r3, #0
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f8:	2300      	movs	r3, #0
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003600:	4b59      	ldr	r3, [pc, #356]	; (8003768 <HAL_RCC_GetSysClockFreq+0x180>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d00d      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x40>
 800360c:	2b08      	cmp	r3, #8
 800360e:	f200 80a1 	bhi.w	8003754 <HAL_RCC_GetSysClockFreq+0x16c>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x34>
 8003616:	2b04      	cmp	r3, #4
 8003618:	d003      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x3a>
 800361a:	e09b      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b53      	ldr	r3, [pc, #332]	; (800376c <HAL_RCC_GetSysClockFreq+0x184>)
 800361e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003620:	e09b      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003622:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_GetSysClockFreq+0x188>)
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003626:	e098      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003628:	4b4f      	ldr	r3, [pc, #316]	; (8003768 <HAL_RCC_GetSysClockFreq+0x180>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003632:	4b4d      	ldr	r3, [pc, #308]	; (8003768 <HAL_RCC_GetSysClockFreq+0x180>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d028      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363e:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <HAL_RCC_GetSysClockFreq+0x180>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	2200      	movs	r2, #0
 8003646:	623b      	str	r3, [r7, #32]
 8003648:	627a      	str	r2, [r7, #36]	; 0x24
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003650:	2100      	movs	r1, #0
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_GetSysClockFreq+0x188>)
 8003654:	fb03 f201 	mul.w	r2, r3, r1
 8003658:	2300      	movs	r3, #0
 800365a:	fb00 f303 	mul.w	r3, r0, r3
 800365e:	4413      	add	r3, r2
 8003660:	4a43      	ldr	r2, [pc, #268]	; (8003770 <HAL_RCC_GetSysClockFreq+0x188>)
 8003662:	fba0 1202 	umull	r1, r2, r0, r2
 8003666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003668:	460a      	mov	r2, r1
 800366a:	62ba      	str	r2, [r7, #40]	; 0x28
 800366c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366e:	4413      	add	r3, r2
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	2200      	movs	r2, #0
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	61fa      	str	r2, [r7, #28]
 800367a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800367e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003682:	f7fd fae9 	bl	8000c58 <__aeabi_uldivmod>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4613      	mov	r3, r2
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368e:	e053      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003690:	4b35      	ldr	r3, [pc, #212]	; (8003768 <HAL_RCC_GetSysClockFreq+0x180>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	099b      	lsrs	r3, r3, #6
 8003696:	2200      	movs	r2, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	617a      	str	r2, [r7, #20]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036a2:	f04f 0b00 	mov.w	fp, #0
 80036a6:	4652      	mov	r2, sl
 80036a8:	465b      	mov	r3, fp
 80036aa:	f04f 0000 	mov.w	r0, #0
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	0159      	lsls	r1, r3, #5
 80036b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b8:	0150      	lsls	r0, r2, #5
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	ebb2 080a 	subs.w	r8, r2, sl
 80036c2:	eb63 090b 	sbc.w	r9, r3, fp
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036da:	ebb2 0408 	subs.w	r4, r2, r8
 80036de:	eb63 0509 	sbc.w	r5, r3, r9
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	00eb      	lsls	r3, r5, #3
 80036ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f0:	00e2      	lsls	r2, r4, #3
 80036f2:	4614      	mov	r4, r2
 80036f4:	461d      	mov	r5, r3
 80036f6:	eb14 030a 	adds.w	r3, r4, sl
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	eb45 030b 	adc.w	r3, r5, fp
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800370e:	4629      	mov	r1, r5
 8003710:	028b      	lsls	r3, r1, #10
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003718:	4621      	mov	r1, r4
 800371a:	028a      	lsls	r2, r1, #10
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	2200      	movs	r2, #0
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	60fa      	str	r2, [r7, #12]
 8003728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800372c:	f7fd fa94 	bl	8000c58 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4613      	mov	r3, r2
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_GetSysClockFreq+0x180>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	3301      	adds	r3, #1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003752:	e002      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetSysClockFreq+0x184>)
 8003756:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800375c:	4618      	mov	r0, r3
 800375e:	3740      	adds	r7, #64	; 0x40
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	00f42400 	.word	0x00f42400
 8003770:	017d7840 	.word	0x017d7840

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000008 	.word	0x20000008

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003790:	f7ff fff0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	08009b20 	.word	0x08009b20

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037b8:	f7ff ffdc 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	08009b20 	.word	0x08009b20

080037dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	220f      	movs	r2, #15
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_RCC_GetClockConfig+0x60>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0207 	and.w	r2, r3, #7
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	40023c00 	.word	0x40023c00

08003840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e041      	b.n	80038d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f839 	bl	80038de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f000 fb74 	bl	8003f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e044      	b.n	8003996 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d018      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d013      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00e      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_TIM_Base_Start_IT+0xb8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x6c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d111      	bne.n	8003984 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b06      	cmp	r3, #6
 8003970:	d010      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	e007      	b.n	8003994 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800
 80039b0:	40000c00 	.word	0x40000c00
 80039b4:	40014000 	.word	0x40014000

080039b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e041      	b.n	8003a4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe f900 	bl	8001be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 fab8 	bl	8003f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_TIM_PWM_Start+0x24>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e022      	b.n	8003ac2 <HAL_TIM_PWM_Start+0x6a>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d109      	bne.n	8003a96 <HAL_TIM_PWM_Start+0x3e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	e015      	b.n	8003ac2 <HAL_TIM_PWM_Start+0x6a>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d109      	bne.n	8003ab0 <HAL_TIM_PWM_Start+0x58>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e008      	b.n	8003ac2 <HAL_TIM_PWM_Start+0x6a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e068      	b.n	8003b9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Start+0x82>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad8:	e013      	b.n	8003b02 <HAL_TIM_PWM_Start+0xaa>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Start+0x92>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae8:	e00b      	b.n	8003b02 <HAL_TIM_PWM_Start+0xaa>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d104      	bne.n	8003afa <HAL_TIM_PWM_Start+0xa2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af8:	e003      	b.n	8003b02 <HAL_TIM_PWM_Start+0xaa>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2201      	movs	r2, #1
 8003b08:	6839      	ldr	r1, [r7, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fc46 	bl	800439c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <HAL_TIM_PWM_Start+0x14c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d107      	bne.n	8003b2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_TIM_PWM_Start+0x14c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_TIM_PWM_Start+0x10e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d013      	beq.n	8003b66 <HAL_TIM_PWM_Start+0x10e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_TIM_PWM_Start+0x150>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_TIM_PWM_Start+0x10e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_TIM_PWM_Start+0x154>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_TIM_PWM_Start+0x10e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_TIM_PWM_Start+0x158>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_TIM_PWM_Start+0x10e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <HAL_TIM_PWM_Start+0x15c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d111      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b06      	cmp	r3, #6
 8003b76:	d010      	beq.n	8003b9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b88:	e007      	b.n	8003b9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40014000 	.word	0x40014000

08003bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d020      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01b      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0202 	mvn.w	r2, #2
 8003bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f994 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f986 	bl	8003f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f997 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d020      	beq.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01b      	beq.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0204 	mvn.w	r2, #4
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f96e 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f960 	bl	8003f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f971 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d020      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01b      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0208 	mvn.w	r2, #8
 8003c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f948 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003ca0:	e005      	b.n	8003cae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f93a 	bl	8003f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f94b 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d020      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01b      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0210 	mvn.w	r2, #16
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f922 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f914 	bl	8003f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f925 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00c      	beq.n	8003d24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0201 	mvn.w	r2, #1
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fe8a 	bl	8001a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00c      	beq.n	8003d48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fbc8 	bl	80044d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f8f6 	bl	8003f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00c      	beq.n	8003d90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0220 	mvn.w	r2, #32
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fb9a 	bl	80044c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e0ae      	b.n	8003f14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b0c      	cmp	r3, #12
 8003dc2:	f200 809f 	bhi.w	8003f04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003f05 	.word	0x08003f05
 8003dd4:	08003f05 	.word	0x08003f05
 8003dd8:	08003f05 	.word	0x08003f05
 8003ddc:	08003e41 	.word	0x08003e41
 8003de0:	08003f05 	.word	0x08003f05
 8003de4:	08003f05 	.word	0x08003f05
 8003de8:	08003f05 	.word	0x08003f05
 8003dec:	08003e83 	.word	0x08003e83
 8003df0:	08003f05 	.word	0x08003f05
 8003df4:	08003f05 	.word	0x08003f05
 8003df8:	08003f05 	.word	0x08003f05
 8003dfc:	08003ec3 	.word	0x08003ec3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f93c 	bl	8004084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0208 	orr.w	r2, r2, #8
 8003e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0204 	bic.w	r2, r2, #4
 8003e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6999      	ldr	r1, [r3, #24]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	619a      	str	r2, [r3, #24]
      break;
 8003e3e:	e064      	b.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f982 	bl	8004150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6999      	ldr	r1, [r3, #24]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	021a      	lsls	r2, r3, #8
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	619a      	str	r2, [r3, #24]
      break;
 8003e80:	e043      	b.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f9cd 	bl	8004228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0208 	orr.w	r2, r2, #8
 8003e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0204 	bic.w	r2, r2, #4
 8003eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69d9      	ldr	r1, [r3, #28]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	61da      	str	r2, [r3, #28]
      break;
 8003ec0:	e023      	b.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fa17 	bl	80042fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69d9      	ldr	r1, [r3, #28]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	021a      	lsls	r2, r3, #8
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	61da      	str	r2, [r3, #28]
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
      break;
 8003f08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a3a      	ldr	r2, [pc, #232]	; (8004068 <TIM_Base_SetConfig+0xfc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00f      	beq.n	8003fa4 <TIM_Base_SetConfig+0x38>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d00b      	beq.n	8003fa4 <TIM_Base_SetConfig+0x38>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a37      	ldr	r2, [pc, #220]	; (800406c <TIM_Base_SetConfig+0x100>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_Base_SetConfig+0x38>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a36      	ldr	r2, [pc, #216]	; (8004070 <TIM_Base_SetConfig+0x104>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0x38>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a35      	ldr	r2, [pc, #212]	; (8004074 <TIM_Base_SetConfig+0x108>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d108      	bne.n	8003fb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	; (8004068 <TIM_Base_SetConfig+0xfc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01b      	beq.n	8003ff6 <TIM_Base_SetConfig+0x8a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d017      	beq.n	8003ff6 <TIM_Base_SetConfig+0x8a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a28      	ldr	r2, [pc, #160]	; (800406c <TIM_Base_SetConfig+0x100>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <TIM_Base_SetConfig+0x8a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a27      	ldr	r2, [pc, #156]	; (8004070 <TIM_Base_SetConfig+0x104>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00f      	beq.n	8003ff6 <TIM_Base_SetConfig+0x8a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a26      	ldr	r2, [pc, #152]	; (8004074 <TIM_Base_SetConfig+0x108>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <TIM_Base_SetConfig+0x8a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a25      	ldr	r2, [pc, #148]	; (8004078 <TIM_Base_SetConfig+0x10c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <TIM_Base_SetConfig+0x8a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a24      	ldr	r2, [pc, #144]	; (800407c <TIM_Base_SetConfig+0x110>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_Base_SetConfig+0x8a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a23      	ldr	r2, [pc, #140]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <TIM_Base_SetConfig+0xfc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d103      	bne.n	800403c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b01      	cmp	r3, #1
 800404c:	d105      	bne.n	800405a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	611a      	str	r2, [r3, #16]
  }
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800

08004084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f023 0201 	bic.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f023 0302 	bic.w	r3, r3, #2
 80040cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a1c      	ldr	r2, [pc, #112]	; (800414c <TIM_OC1_SetConfig+0xc8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10c      	bne.n	80040fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0308 	bic.w	r3, r3, #8
 80040e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a13      	ldr	r2, [pc, #76]	; (800414c <TIM_OC1_SetConfig+0xc8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d111      	bne.n	8004126 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	621a      	str	r2, [r3, #32]
}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40010000 	.word	0x40010000

08004150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f023 0210 	bic.w	r2, r3, #16
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0320 	bic.w	r3, r3, #32
 800419a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1e      	ldr	r2, [pc, #120]	; (8004224 <TIM_OC2_SetConfig+0xd4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10d      	bne.n	80041cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a15      	ldr	r2, [pc, #84]	; (8004224 <TIM_OC2_SetConfig+0xd4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d113      	bne.n	80041fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40010000 	.word	0x40010000

08004228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <TIM_OC3_SetConfig+0xd0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10d      	bne.n	80042a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <TIM_OC3_SetConfig+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d113      	bne.n	80042d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	621a      	str	r2, [r3, #32]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40010000 	.word	0x40010000

080042fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a10      	ldr	r2, [pc, #64]	; (8004398 <TIM_OC4_SetConfig+0x9c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d109      	bne.n	8004370 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000

0800439c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2201      	movs	r2, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1a      	ldr	r2, [r3, #32]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	43db      	mvns	r3, r3
 80043be:	401a      	ands	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e050      	b.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d013      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a13      	ldr	r2, [pc, #76]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10c      	bne.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4313      	orrs	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40014000 	.word	0x40014000

080044c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e042      	b.n	8004584 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fbbe 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	; 0x24
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800452e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fd69 	bl	8005008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d175      	bne.n	8004698 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Transmit+0x2c>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e06e      	b.n	800469a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2221      	movs	r2, #33	; 0x21
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ca:	f7fd fd97 	bl	80020fc <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d108      	bne.n	80045f8 <HAL_UART_Transmit+0x6c>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004600:	e02e      	b.n	8004660 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	2180      	movs	r1, #128	; 0x80
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fb05 	bl	8004c1c <UART_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e03a      	b.n	800469a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3302      	adds	r3, #2
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e007      	b.n	8004652 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	3301      	adds	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1cb      	bne.n	8004602 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	2140      	movs	r1, #64	; 0x40
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fad1 	bl	8004c1c <UART_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e006      	b.n	800469a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b0ba      	sub	sp, #232	; 0xe8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <HAL_UART_IRQHandler+0x66>
 80046f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fbc2 	bl	8004e8c <UART_Receive_IT>
      return;
 8004708:	e25b      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800470a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80de 	beq.w	80048d0 <HAL_UART_IRQHandler+0x22c>
 8004714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004724:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80d1 	beq.w	80048d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_UART_IRQHandler+0xae>
 800473a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_UART_IRQHandler+0xd2>
 800475e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	f043 0202 	orr.w	r2, r3, #2
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <HAL_UART_IRQHandler+0xf6>
 8004782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d011      	beq.n	80047ca <HAL_UART_IRQHandler+0x126>
 80047a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d105      	bne.n	80047be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f043 0208 	orr.w	r2, r3, #8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 81f2 	beq.w	8004bb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_UART_IRQHandler+0x14e>
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb4d 	bl	8004e8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_UART_IRQHandler+0x17a>
 8004816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d04f      	beq.n	80048be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa55 	bl	8004cce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d141      	bne.n	80048b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3314      	adds	r3, #20
 8004838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800484c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3314      	adds	r3, #20
 800485a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800485e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800486a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1d9      	bne.n	8004832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d013      	beq.n	80048ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	4a7e      	ldr	r2, [pc, #504]	; (8004a84 <HAL_UART_IRQHandler+0x3e0>)
 800488c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe f972 	bl	8002b7c <HAL_DMA_Abort_IT>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048a8:	4610      	mov	r0, r2
 80048aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ac:	e00e      	b.n	80048cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f99e 	bl	8004bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b4:	e00a      	b.n	80048cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f99a 	bl	8004bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	e006      	b.n	80048cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f996 	bl	8004bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80048ca:	e175      	b.n	8004bb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	bf00      	nop
    return;
 80048ce:	e173      	b.n	8004bb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 814f 	bne.w	8004b78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8148 	beq.w	8004b78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8141 	beq.w	8004b78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	f040 80b6 	bne.w	8004a88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8145 	beq.w	8004bbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800493a:	429a      	cmp	r2, r3
 800493c:	f080 813e 	bcs.w	8004bbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004946:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004952:	f000 8088 	beq.w	8004a66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	330c      	adds	r3, #12
 800495c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800496c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800498e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800499a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1d9      	bne.n	8004956 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3314      	adds	r3, #20
 80049a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e1      	bne.n	80049a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3314      	adds	r3, #20
 80049e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3314      	adds	r3, #20
 80049fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e3      	bne.n	80049de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a36:	f023 0310 	bic.w	r3, r3, #16
 8004a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a48:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e3      	bne.n	8004a24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe f81b 	bl	8002a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f8c1 	bl	8004c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a82:	e09b      	b.n	8004bbc <HAL_UART_IRQHandler+0x518>
 8004a84:	08004d95 	.word	0x08004d95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 808e 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8089 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ad2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e3      	bne.n	8004aae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3314      	adds	r3, #20
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	623b      	str	r3, [r7, #32]
   return(result);
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3314      	adds	r3, #20
 8004b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e3      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b50:	61fa      	str	r2, [r7, #28]
 8004b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	69b9      	ldr	r1, [r7, #24]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e3      	bne.n	8004b2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f847 	bl	8004c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b76:	e023      	b.n	8004bc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_UART_IRQHandler+0x4f4>
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f913 	bl	8004dbc <UART_Transmit_IT>
    return;
 8004b96:	e014      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f953 	bl	8004e5c <UART_EndTransmit_IT>
    return;
 8004bb6:	e004      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004bb8:	bf00      	nop
 8004bba:	e002      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bc0:	bf00      	nop
  }
}
 8004bc2:	37e8      	adds	r7, #232	; 0xe8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2c:	e03b      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d037      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c36:	f7fd fa61 	bl	80020fc <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d302      	bcc.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e03a      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d023      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b80      	cmp	r3, #128	; 0x80
 8004c62:	d020      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d01d      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d116      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f81d 	bl	8004cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2208      	movs	r2, #8
 8004c98:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e00f      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d0b4      	beq.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b095      	sub	sp, #84	; 0x54
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cf6:	643a      	str	r2, [r7, #64]	; 0x40
 8004cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e5      	bne.n	8004cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3314      	adds	r3, #20
 8004d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e5      	bne.n	8004d0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d119      	bne.n	8004d7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f023 0310 	bic.w	r3, r3, #16
 8004d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d66:	61ba      	str	r2, [r7, #24]
 8004d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	613b      	str	r3, [r7, #16]
   return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e5      	bne.n	8004d46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d88:	bf00      	nop
 8004d8a:	3754      	adds	r7, #84	; 0x54
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff ff1e 	bl	8004bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b21      	cmp	r3, #33	; 0x21
 8004dce:	d13e      	bne.n	8004e4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd8:	d114      	bne.n	8004e04 <UART_Transmit_IT+0x48>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d110      	bne.n	8004e04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	1c9a      	adds	r2, r3, #2
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	621a      	str	r2, [r3, #32]
 8004e02:	e008      	b.n	8004e16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	1c59      	adds	r1, r3, #1
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6211      	str	r1, [r2, #32]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4619      	mov	r1, r3
 8004e24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e4e:	2302      	movs	r3, #2
  }
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff fea3 	bl	8004bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08c      	sub	sp, #48	; 0x30
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b22      	cmp	r3, #34	; 0x22
 8004e9e:	f040 80ae 	bne.w	8004ffe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eaa:	d117      	bne.n	8004edc <UART_Receive_IT+0x50>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d113      	bne.n	8004edc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	1c9a      	adds	r2, r3, #2
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8004eda:	e026      	b.n	8004f2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d007      	beq.n	8004f00 <UART_Receive_IT+0x74>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <UART_Receive_IT+0x82>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e008      	b.n	8004f20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	4619      	mov	r1, r3
 8004f38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d15d      	bne.n	8004ffa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0220 	bic.w	r2, r2, #32
 8004f4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d135      	bne.n	8004ff0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f023 0310 	bic.w	r3, r3, #16
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004faa:	623a      	str	r2, [r7, #32]
 8004fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	69f9      	ldr	r1, [r7, #28]
 8004fb0:	6a3a      	ldr	r2, [r7, #32]
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e5      	bne.n	8004f8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d10a      	bne.n	8004fe2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fe0b 	bl	8004c04 <HAL_UARTEx_RxEventCallback>
 8004fee:	e002      	b.n	8004ff6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff fdf3 	bl	8004bdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e002      	b.n	8005000 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e000      	b.n	8005000 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
  }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3730      	adds	r7, #48	; 0x30
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800500c:	b0c0      	sub	sp, #256	; 0x100
 800500e:	af00      	add	r7, sp, #0
 8005010:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	68d9      	ldr	r1, [r3, #12]
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	ea40 0301 	orr.w	r3, r0, r1
 8005030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	431a      	orrs	r2, r3
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	431a      	orrs	r2, r3
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005060:	f021 010c 	bic.w	r1, r1, #12
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800506e:	430b      	orrs	r3, r1
 8005070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005082:	6999      	ldr	r1, [r3, #24]
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	ea40 0301 	orr.w	r3, r0, r1
 800508e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b8f      	ldr	r3, [pc, #572]	; (80052d4 <UART_SetConfig+0x2cc>)
 8005098:	429a      	cmp	r2, r3
 800509a:	d005      	beq.n	80050a8 <UART_SetConfig+0xa0>
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b8d      	ldr	r3, [pc, #564]	; (80052d8 <UART_SetConfig+0x2d0>)
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d104      	bne.n	80050b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050a8:	f7fe fb84 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 80050ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050b0:	e003      	b.n	80050ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050b2:	f7fe fb6b 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 80050b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c4:	f040 810c 	bne.w	80052e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050da:	4622      	mov	r2, r4
 80050dc:	462b      	mov	r3, r5
 80050de:	1891      	adds	r1, r2, r2
 80050e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050e2:	415b      	adcs	r3, r3
 80050e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ea:	4621      	mov	r1, r4
 80050ec:	eb12 0801 	adds.w	r8, r2, r1
 80050f0:	4629      	mov	r1, r5
 80050f2:	eb43 0901 	adc.w	r9, r3, r1
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800510a:	4690      	mov	r8, r2
 800510c:	4699      	mov	r9, r3
 800510e:	4623      	mov	r3, r4
 8005110:	eb18 0303 	adds.w	r3, r8, r3
 8005114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005118:	462b      	mov	r3, r5
 800511a:	eb49 0303 	adc.w	r3, r9, r3
 800511e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800512e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005136:	460b      	mov	r3, r1
 8005138:	18db      	adds	r3, r3, r3
 800513a:	653b      	str	r3, [r7, #80]	; 0x50
 800513c:	4613      	mov	r3, r2
 800513e:	eb42 0303 	adc.w	r3, r2, r3
 8005142:	657b      	str	r3, [r7, #84]	; 0x54
 8005144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800514c:	f7fb fd84 	bl	8000c58 <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4b61      	ldr	r3, [pc, #388]	; (80052dc <UART_SetConfig+0x2d4>)
 8005156:	fba3 2302 	umull	r2, r3, r3, r2
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	011c      	lsls	r4, r3, #4
 800515e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005168:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800516c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	1891      	adds	r1, r2, r2
 8005176:	64b9      	str	r1, [r7, #72]	; 0x48
 8005178:	415b      	adcs	r3, r3
 800517a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800517c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005180:	4641      	mov	r1, r8
 8005182:	eb12 0a01 	adds.w	sl, r2, r1
 8005186:	4649      	mov	r1, r9
 8005188:	eb43 0b01 	adc.w	fp, r3, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800519c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a0:	4692      	mov	sl, r2
 80051a2:	469b      	mov	fp, r3
 80051a4:	4643      	mov	r3, r8
 80051a6:	eb1a 0303 	adds.w	r3, sl, r3
 80051aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ae:	464b      	mov	r3, r9
 80051b0:	eb4b 0303 	adc.w	r3, fp, r3
 80051b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051cc:	460b      	mov	r3, r1
 80051ce:	18db      	adds	r3, r3, r3
 80051d0:	643b      	str	r3, [r7, #64]	; 0x40
 80051d2:	4613      	mov	r3, r2
 80051d4:	eb42 0303 	adc.w	r3, r2, r3
 80051d8:	647b      	str	r3, [r7, #68]	; 0x44
 80051da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051e2:	f7fb fd39 	bl	8000c58 <__aeabi_uldivmod>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <UART_SetConfig+0x2d4>)
 80051ee:	fba3 2301 	umull	r2, r3, r3, r1
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	2264      	movs	r2, #100	; 0x64
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	1acb      	subs	r3, r1, r3
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005202:	4b36      	ldr	r3, [pc, #216]	; (80052dc <UART_SetConfig+0x2d4>)
 8005204:	fba3 2302 	umull	r2, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005210:	441c      	add	r4, r3
 8005212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005216:	2200      	movs	r2, #0
 8005218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800521c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005224:	4642      	mov	r2, r8
 8005226:	464b      	mov	r3, r9
 8005228:	1891      	adds	r1, r2, r2
 800522a:	63b9      	str	r1, [r7, #56]	; 0x38
 800522c:	415b      	adcs	r3, r3
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005234:	4641      	mov	r1, r8
 8005236:	1851      	adds	r1, r2, r1
 8005238:	6339      	str	r1, [r7, #48]	; 0x30
 800523a:	4649      	mov	r1, r9
 800523c:	414b      	adcs	r3, r1
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800524c:	4659      	mov	r1, fp
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4651      	mov	r1, sl
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	4603      	mov	r3, r0
 8005260:	4642      	mov	r2, r8
 8005262:	189b      	adds	r3, r3, r2
 8005264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005268:	464b      	mov	r3, r9
 800526a:	460a      	mov	r2, r1
 800526c:	eb42 0303 	adc.w	r3, r2, r3
 8005270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005280:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005288:	460b      	mov	r3, r1
 800528a:	18db      	adds	r3, r3, r3
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
 800528e:	4613      	mov	r3, r2
 8005290:	eb42 0303 	adc.w	r3, r2, r3
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800529a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800529e:	f7fb fcdb 	bl	8000c58 <__aeabi_uldivmod>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <UART_SetConfig+0x2d4>)
 80052a8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	2164      	movs	r1, #100	; 0x64
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	3332      	adds	r3, #50	; 0x32
 80052ba:	4a08      	ldr	r2, [pc, #32]	; (80052dc <UART_SetConfig+0x2d4>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f003 0207 	and.w	r2, r3, #7
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4422      	add	r2, r4
 80052ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052d0:	e106      	b.n	80054e0 <UART_SetConfig+0x4d8>
 80052d2:	bf00      	nop
 80052d4:	40011000 	.word	0x40011000
 80052d8:	40011400 	.word	0x40011400
 80052dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052f2:	4642      	mov	r2, r8
 80052f4:	464b      	mov	r3, r9
 80052f6:	1891      	adds	r1, r2, r2
 80052f8:	6239      	str	r1, [r7, #32]
 80052fa:	415b      	adcs	r3, r3
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005302:	4641      	mov	r1, r8
 8005304:	1854      	adds	r4, r2, r1
 8005306:	4649      	mov	r1, r9
 8005308:	eb43 0501 	adc.w	r5, r3, r1
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	00eb      	lsls	r3, r5, #3
 8005316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800531a:	00e2      	lsls	r2, r4, #3
 800531c:	4614      	mov	r4, r2
 800531e:	461d      	mov	r5, r3
 8005320:	4643      	mov	r3, r8
 8005322:	18e3      	adds	r3, r4, r3
 8005324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005328:	464b      	mov	r3, r9
 800532a:	eb45 0303 	adc.w	r3, r5, r3
 800532e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800533e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800534e:	4629      	mov	r1, r5
 8005350:	008b      	lsls	r3, r1, #2
 8005352:	4621      	mov	r1, r4
 8005354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005358:	4621      	mov	r1, r4
 800535a:	008a      	lsls	r2, r1, #2
 800535c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005360:	f7fb fc7a 	bl	8000c58 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4b60      	ldr	r3, [pc, #384]	; (80054ec <UART_SetConfig+0x4e4>)
 800536a:	fba3 2302 	umull	r2, r3, r3, r2
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	011c      	lsls	r4, r3, #4
 8005372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005376:	2200      	movs	r2, #0
 8005378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800537c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	1891      	adds	r1, r2, r2
 800538a:	61b9      	str	r1, [r7, #24]
 800538c:	415b      	adcs	r3, r3
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005394:	4641      	mov	r1, r8
 8005396:	1851      	adds	r1, r2, r1
 8005398:	6139      	str	r1, [r7, #16]
 800539a:	4649      	mov	r1, r9
 800539c:	414b      	adcs	r3, r1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ac:	4659      	mov	r1, fp
 80053ae:	00cb      	lsls	r3, r1, #3
 80053b0:	4651      	mov	r1, sl
 80053b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b6:	4651      	mov	r1, sl
 80053b8:	00ca      	lsls	r2, r1, #3
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	4603      	mov	r3, r0
 80053c0:	4642      	mov	r2, r8
 80053c2:	189b      	adds	r3, r3, r2
 80053c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053c8:	464b      	mov	r3, r9
 80053ca:	460a      	mov	r2, r1
 80053cc:	eb42 0303 	adc.w	r3, r2, r3
 80053d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80053de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053ec:	4649      	mov	r1, r9
 80053ee:	008b      	lsls	r3, r1, #2
 80053f0:	4641      	mov	r1, r8
 80053f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053f6:	4641      	mov	r1, r8
 80053f8:	008a      	lsls	r2, r1, #2
 80053fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053fe:	f7fb fc2b 	bl	8000c58 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4611      	mov	r1, r2
 8005408:	4b38      	ldr	r3, [pc, #224]	; (80054ec <UART_SetConfig+0x4e4>)
 800540a:	fba3 2301 	umull	r2, r3, r3, r1
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	2264      	movs	r2, #100	; 0x64
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	1acb      	subs	r3, r1, r3
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	3332      	adds	r3, #50	; 0x32
 800541c:	4a33      	ldr	r2, [pc, #204]	; (80054ec <UART_SetConfig+0x4e4>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005428:	441c      	add	r4, r3
 800542a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542e:	2200      	movs	r2, #0
 8005430:	673b      	str	r3, [r7, #112]	; 0x70
 8005432:	677a      	str	r2, [r7, #116]	; 0x74
 8005434:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	1891      	adds	r1, r2, r2
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	415b      	adcs	r3, r3
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005448:	4641      	mov	r1, r8
 800544a:	1851      	adds	r1, r2, r1
 800544c:	6039      	str	r1, [r7, #0]
 800544e:	4649      	mov	r1, r9
 8005450:	414b      	adcs	r3, r1
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005460:	4659      	mov	r1, fp
 8005462:	00cb      	lsls	r3, r1, #3
 8005464:	4651      	mov	r1, sl
 8005466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800546a:	4651      	mov	r1, sl
 800546c:	00ca      	lsls	r2, r1, #3
 800546e:	4610      	mov	r0, r2
 8005470:	4619      	mov	r1, r3
 8005472:	4603      	mov	r3, r0
 8005474:	4642      	mov	r2, r8
 8005476:	189b      	adds	r3, r3, r2
 8005478:	66bb      	str	r3, [r7, #104]	; 0x68
 800547a:	464b      	mov	r3, r9
 800547c:	460a      	mov	r2, r1
 800547e:	eb42 0303 	adc.w	r3, r2, r3
 8005482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	663b      	str	r3, [r7, #96]	; 0x60
 800548e:	667a      	str	r2, [r7, #100]	; 0x64
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800549c:	4649      	mov	r1, r9
 800549e:	008b      	lsls	r3, r1, #2
 80054a0:	4641      	mov	r1, r8
 80054a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a6:	4641      	mov	r1, r8
 80054a8:	008a      	lsls	r2, r1, #2
 80054aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054ae:	f7fb fbd3 	bl	8000c58 <__aeabi_uldivmod>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <UART_SetConfig+0x4e4>)
 80054b8:	fba3 1302 	umull	r1, r3, r3, r2
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	2164      	movs	r1, #100	; 0x64
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	3332      	adds	r3, #50	; 0x32
 80054ca:	4a08      	ldr	r2, [pc, #32]	; (80054ec <UART_SetConfig+0x4e4>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	f003 020f 	and.w	r2, r3, #15
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4422      	add	r2, r4
 80054de:	609a      	str	r2, [r3, #8]
}
 80054e0:	bf00      	nop
 80054e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054e6:	46bd      	mov	sp, r7
 80054e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ec:	51eb851f 	.word	0x51eb851f

080054f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005502:	2b84      	cmp	r3, #132	; 0x84
 8005504:	d005      	beq.n	8005512 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005506:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	3303      	adds	r3, #3
 8005510:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005512:	68fb      	ldr	r3, [r7, #12]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005524:	f000 faf6 	bl	8005b14 <vTaskStartScheduler>
  
  return osOK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	bd80      	pop	{r7, pc}

0800552e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800552e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005530:	b089      	sub	sp, #36	; 0x24
 8005532:	af04      	add	r7, sp, #16
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d020      	beq.n	8005582 <osThreadCreate+0x54>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01c      	beq.n	8005582 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685c      	ldr	r4, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691e      	ldr	r6, [r3, #16]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff ffc8 	bl	80054f0 <makeFreeRtosPriority>
 8005560:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800556a:	9202      	str	r2, [sp, #8]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	9100      	str	r1, [sp, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	4632      	mov	r2, r6
 8005574:	4629      	mov	r1, r5
 8005576:	4620      	mov	r0, r4
 8005578:	f000 f8ed 	bl	8005756 <xTaskCreateStatic>
 800557c:	4603      	mov	r3, r0
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e01c      	b.n	80055bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685c      	ldr	r4, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800558e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff ffaa 	bl	80054f0 <makeFreeRtosPriority>
 800559c:	4602      	mov	r2, r0
 800559e:	f107 030c 	add.w	r3, r7, #12
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	9200      	str	r2, [sp, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	4632      	mov	r2, r6
 80055aa:	4629      	mov	r1, r5
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f92f 	bl	8005810 <xTaskCreate>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e000      	b.n	80055be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055bc:	68fb      	ldr	r3, [r7, #12]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <osDelay+0x16>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	e000      	b.n	80055de <osDelay+0x18>
 80055dc:	2301      	movs	r3, #1
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fa64 	bl	8005aac <vTaskDelay>
  
  return osOK;
 80055e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f103 0208 	add.w	r2, r3, #8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f04f 32ff 	mov.w	r2, #4294967295
 8005606:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f103 0208 	add.w	r2, r3, #8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f103 0208 	add.w	r2, r3, #8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d103      	bne.n	80056b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e00c      	b.n	80056ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3308      	adds	r3, #8
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	e002      	b.n	80056be <vListInsert+0x2e>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d2f6      	bcs.n	80056b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6892      	ldr	r2, [r2, #8]
 8005718:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6852      	ldr	r2, [r2, #4]
 8005722:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	429a      	cmp	r2, r3
 800572c:	d103      	bne.n	8005736 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	1e5a      	subs	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005756:	b580      	push	{r7, lr}
 8005758:	b08e      	sub	sp, #56	; 0x38
 800575a:	af04      	add	r7, sp, #16
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <xTaskCreateStatic+0x46>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	61fb      	str	r3, [r7, #28]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800579c:	23b0      	movs	r3, #176	; 0xb0
 800579e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2bb0      	cmp	r3, #176	; 0xb0
 80057a4:	d00a      	beq.n	80057bc <xTaskCreateStatic+0x66>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	61bb      	str	r3, [r7, #24]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01e      	beq.n	8005802 <xTaskCreateStatic+0xac>
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01b      	beq.n	8005802 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057dc:	2300      	movs	r3, #0
 80057de:	9303      	str	r3, [sp, #12]
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	9302      	str	r3, [sp, #8]
 80057e4:	f107 0314 	add.w	r3, r7, #20
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f851 	bl	800589c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057fc:	f000 f8ec 	bl	80059d8 <prvAddNewTaskToReadyList>
 8005800:	e001      	b.n	8005806 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005806:	697b      	ldr	r3, [r7, #20]
	}
 8005808:	4618      	mov	r0, r3
 800580a:	3728      	adds	r7, #40	; 0x28
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af04      	add	r7, sp, #16
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005820:	88fb      	ldrh	r3, [r7, #6]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4618      	mov	r0, r3
 8005826:	f000 feef 	bl	8006608 <pvPortMalloc>
 800582a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00e      	beq.n	8005850 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005832:	20b0      	movs	r0, #176	; 0xb0
 8005834:	f000 fee8 	bl	8006608 <pvPortMalloc>
 8005838:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
 8005846:	e005      	b.n	8005854 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005848:	6978      	ldr	r0, [r7, #20]
 800584a:	f000 ffa9 	bl	80067a0 <vPortFree>
 800584e:	e001      	b.n	8005854 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d017      	beq.n	800588a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	2300      	movs	r3, #0
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	9302      	str	r3, [sp, #8]
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	9301      	str	r3, [sp, #4]
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f80f 	bl	800589c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800587e:	69f8      	ldr	r0, [r7, #28]
 8005880:	f000 f8aa 	bl	80059d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005884:	2301      	movs	r3, #1
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	e002      	b.n	8005890 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005890:	69bb      	ldr	r3, [r7, #24]
	}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058b4:	3b01      	subs	r3, #1
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f023 0307 	bic.w	r3, r3, #7
 80058c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	617b      	str	r3, [r7, #20]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01f      	beq.n	800592a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	e012      	b.n	8005916 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	7819      	ldrb	r1, [r3, #0]
 80058f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	3334      	adds	r3, #52	; 0x34
 8005900:	460a      	mov	r2, r1
 8005902:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b1f      	cmp	r3, #31
 800591a:	d9e9      	bls.n	80058f0 <prvInitialiseNewTask+0x54>
 800591c:	e000      	b.n	8005920 <prvInitialiseNewTask+0x84>
			{
				break;
 800591e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005928:	e003      	b.n	8005932 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	2b06      	cmp	r3, #6
 8005936:	d901      	bls.n	800593c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005938:	2306      	movs	r3, #6
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005940:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005946:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	2200      	movs	r2, #0
 800594c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	3304      	adds	r3, #4
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fe6b 	bl	800562e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	3318      	adds	r3, #24
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff fe66 	bl	800562e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005966:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	f1c3 0207 	rsb	r2, r3, #7
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005976:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	335c      	adds	r3, #92	; 0x5c
 800598c:	224c      	movs	r2, #76	; 0x4c
 800598e:	2100      	movs	r1, #0
 8005990:	4618      	mov	r0, r3
 8005992:	f001 fdae 	bl	80074f2 <memset>
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	4a0c      	ldr	r2, [pc, #48]	; (80059cc <prvInitialiseNewTask+0x130>)
 800599a:	661a      	str	r2, [r3, #96]	; 0x60
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	4a0c      	ldr	r2, [pc, #48]	; (80059d0 <prvInitialiseNewTask+0x134>)
 80059a0:	665a      	str	r2, [r3, #100]	; 0x64
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	4a0b      	ldr	r2, [pc, #44]	; (80059d4 <prvInitialiseNewTask+0x138>)
 80059a6:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	69b8      	ldr	r0, [r7, #24]
 80059ae:	f000 fc1f 	bl	80061f0 <pxPortInitialiseStack>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c4:	bf00      	nop
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	200043b4 	.word	0x200043b4
 80059d0:	2000441c 	.word	0x2000441c
 80059d4:	20004484 	.word	0x20004484

080059d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059e0:	f000 fd30 	bl	8006444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059e4:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <prvAddNewTaskToReadyList+0xb8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3301      	adds	r3, #1
 80059ea:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <prvAddNewTaskToReadyList+0xb8>)
 80059ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059ee:	4b29      	ldr	r3, [pc, #164]	; (8005a94 <prvAddNewTaskToReadyList+0xbc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059f6:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <prvAddNewTaskToReadyList+0xbc>)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059fc:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <prvAddNewTaskToReadyList+0xb8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d110      	bne.n	8005a26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a04:	f000 facc 	bl	8005fa0 <prvInitialiseTaskLists>
 8005a08:	e00d      	b.n	8005a26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a0a:	4b23      	ldr	r3, [pc, #140]	; (8005a98 <prvAddNewTaskToReadyList+0xc0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a12:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <prvAddNewTaskToReadyList+0xbc>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d802      	bhi.n	8005a26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a20:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <prvAddNewTaskToReadyList+0xbc>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <prvAddNewTaskToReadyList+0xc4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <prvAddNewTaskToReadyList+0xc4>)
 8005a2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	2201      	movs	r2, #1
 8005a36:	409a      	lsls	r2, r3
 8005a38:	4b19      	ldr	r3, [pc, #100]	; (8005aa0 <prvAddNewTaskToReadyList+0xc8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <prvAddNewTaskToReadyList+0xc8>)
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <prvAddNewTaskToReadyList+0xcc>)
 8005a50:	441a      	add	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f7ff fdf5 	bl	8005648 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a5e:	f000 fd21 	bl	80064a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a62:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <prvAddNewTaskToReadyList+0xc0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00e      	beq.n	8005a88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a6a:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <prvAddNewTaskToReadyList+0xbc>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d207      	bcs.n	8005a88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <prvAddNewTaskToReadyList+0xd0>)
 8005a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000760 	.word	0x20000760
 8005a94:	20000660 	.word	0x20000660
 8005a98:	2000076c 	.word	0x2000076c
 8005a9c:	2000077c 	.word	0x2000077c
 8005aa0:	20000768 	.word	0x20000768
 8005aa4:	20000664 	.word	0x20000664
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d017      	beq.n	8005aee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005abe:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <vTaskDelay+0x60>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <vTaskDelay+0x30>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	60bb      	str	r3, [r7, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	e7fe      	b.n	8005ada <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005adc:	f000 f884 	bl	8005be8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fb1e 	bl	8006124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ae8:	f000 f88c 	bl	8005c04 <xTaskResumeAll>
 8005aec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <vTaskDelay+0x64>)
 8005af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000788 	.word	0x20000788
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	; 0x28
 8005b18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b22:	463a      	mov	r2, r7
 8005b24:	1d39      	adds	r1, r7, #4
 8005b26:	f107 0308 	add.w	r3, r7, #8
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fb fa12 	bl	8000f54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	9202      	str	r2, [sp, #8]
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	460a      	mov	r2, r1
 8005b42:	4921      	ldr	r1, [pc, #132]	; (8005bc8 <vTaskStartScheduler+0xb4>)
 8005b44:	4821      	ldr	r0, [pc, #132]	; (8005bcc <vTaskStartScheduler+0xb8>)
 8005b46:	f7ff fe06 	bl	8005756 <xTaskCreateStatic>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4a20      	ldr	r2, [pc, #128]	; (8005bd0 <vTaskStartScheduler+0xbc>)
 8005b4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b50:	4b1f      	ldr	r3, [pc, #124]	; (8005bd0 <vTaskStartScheduler+0xbc>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	e001      	b.n	8005b62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d11b      	bne.n	8005ba0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	613b      	str	r3, [r7, #16]
}
 8005b7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b7c:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <vTaskStartScheduler+0xc0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	335c      	adds	r3, #92	; 0x5c
 8005b82:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <vTaskStartScheduler+0xc4>)
 8005b84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b86:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <vTaskStartScheduler+0xc8>)
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b8e:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <vTaskStartScheduler+0xcc>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b94:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <vTaskStartScheduler+0xd0>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b9a:	f000 fbb1 	bl	8006300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b9e:	e00e      	b.n	8005bbe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d10a      	bne.n	8005bbe <vTaskStartScheduler+0xaa>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60fb      	str	r3, [r7, #12]
}
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <vTaskStartScheduler+0xa8>
}
 8005bbe:	bf00      	nop
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08009b08 	.word	0x08009b08
 8005bcc:	08005f71 	.word	0x08005f71
 8005bd0:	20000784 	.word	0x20000784
 8005bd4:	20000660 	.word	0x20000660
 8005bd8:	20000070 	.word	0x20000070
 8005bdc:	20000780 	.word	0x20000780
 8005be0:	2000076c 	.word	0x2000076c
 8005be4:	20000764 	.word	0x20000764

08005be8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bec:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <vTaskSuspendAll+0x18>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	4a03      	ldr	r2, [pc, #12]	; (8005c00 <vTaskSuspendAll+0x18>)
 8005bf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bf6:	bf00      	nop
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	20000788 	.word	0x20000788

08005c04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c12:	4b41      	ldr	r3, [pc, #260]	; (8005d18 <xTaskResumeAll+0x114>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	603b      	str	r3, [r7, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c30:	f000 fc08 	bl	8006444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c34:	4b38      	ldr	r3, [pc, #224]	; (8005d18 <xTaskResumeAll+0x114>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	4a37      	ldr	r2, [pc, #220]	; (8005d18 <xTaskResumeAll+0x114>)
 8005c3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c3e:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <xTaskResumeAll+0x114>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d161      	bne.n	8005d0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c46:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <xTaskResumeAll+0x118>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d05d      	beq.n	8005d0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c4e:	e02e      	b.n	8005cae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c50:	4b33      	ldr	r3, [pc, #204]	; (8005d20 <xTaskResumeAll+0x11c>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3318      	adds	r3, #24
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fd50 	bl	8005702 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fd4b 	bl	8005702 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	2201      	movs	r2, #1
 8005c72:	409a      	lsls	r2, r3
 8005c74:	4b2b      	ldr	r3, [pc, #172]	; (8005d24 <xTaskResumeAll+0x120>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	4a2a      	ldr	r2, [pc, #168]	; (8005d24 <xTaskResumeAll+0x120>)
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4a27      	ldr	r2, [pc, #156]	; (8005d28 <xTaskResumeAll+0x124>)
 8005c8c:	441a      	add	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f7ff fcd7 	bl	8005648 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	4b23      	ldr	r3, [pc, #140]	; (8005d2c <xTaskResumeAll+0x128>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ca8:	4b21      	ldr	r3, [pc, #132]	; (8005d30 <xTaskResumeAll+0x12c>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cae:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <xTaskResumeAll+0x11c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1cc      	bne.n	8005c50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cbc:	f000 fa12 	bl	80060e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cc0:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <xTaskResumeAll+0x130>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d010      	beq.n	8005cee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ccc:	f000 f836 	bl	8005d3c <xTaskIncrementTick>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005cd6:	4b16      	ldr	r3, [pc, #88]	; (8005d30 <xTaskResumeAll+0x12c>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1f1      	bne.n	8005ccc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005ce8:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <xTaskResumeAll+0x130>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cee:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <xTaskResumeAll+0x12c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cfa:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <xTaskResumeAll+0x134>)
 8005cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d0a:	f000 fbcb 	bl	80064a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000788 	.word	0x20000788
 8005d1c:	20000760 	.word	0x20000760
 8005d20:	20000720 	.word	0x20000720
 8005d24:	20000768 	.word	0x20000768
 8005d28:	20000664 	.word	0x20000664
 8005d2c:	20000660 	.word	0x20000660
 8005d30:	20000774 	.word	0x20000774
 8005d34:	20000770 	.word	0x20000770
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d46:	4b4e      	ldr	r3, [pc, #312]	; (8005e80 <xTaskIncrementTick+0x144>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 808e 	bne.w	8005e6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d50:	4b4c      	ldr	r3, [pc, #304]	; (8005e84 <xTaskIncrementTick+0x148>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d58:	4a4a      	ldr	r2, [pc, #296]	; (8005e84 <xTaskIncrementTick+0x148>)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d120      	bne.n	8005da6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d64:	4b48      	ldr	r3, [pc, #288]	; (8005e88 <xTaskIncrementTick+0x14c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	603b      	str	r3, [r7, #0]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <xTaskIncrementTick+0x46>
 8005d84:	4b40      	ldr	r3, [pc, #256]	; (8005e88 <xTaskIncrementTick+0x14c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	4b40      	ldr	r3, [pc, #256]	; (8005e8c <xTaskIncrementTick+0x150>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a3e      	ldr	r2, [pc, #248]	; (8005e88 <xTaskIncrementTick+0x14c>)
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4a3e      	ldr	r2, [pc, #248]	; (8005e8c <xTaskIncrementTick+0x150>)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	4b3d      	ldr	r3, [pc, #244]	; (8005e90 <xTaskIncrementTick+0x154>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	4a3c      	ldr	r2, [pc, #240]	; (8005e90 <xTaskIncrementTick+0x154>)
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	f000 f99f 	bl	80060e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005da6:	4b3b      	ldr	r3, [pc, #236]	; (8005e94 <xTaskIncrementTick+0x158>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d348      	bcc.n	8005e42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005db0:	4b35      	ldr	r3, [pc, #212]	; (8005e88 <xTaskIncrementTick+0x14c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dba:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <xTaskIncrementTick+0x158>)
 8005dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc0:	601a      	str	r2, [r3, #0]
					break;
 8005dc2:	e03e      	b.n	8005e42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc4:	4b30      	ldr	r3, [pc, #192]	; (8005e88 <xTaskIncrementTick+0x14c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d203      	bcs.n	8005de4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ddc:	4a2d      	ldr	r2, [pc, #180]	; (8005e94 <xTaskIncrementTick+0x158>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005de2:	e02e      	b.n	8005e42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fc8a 	bl	8005702 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d004      	beq.n	8005e00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3318      	adds	r3, #24
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff fc81 	bl	8005702 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	2201      	movs	r2, #1
 8005e06:	409a      	lsls	r2, r3
 8005e08:	4b23      	ldr	r3, [pc, #140]	; (8005e98 <xTaskIncrementTick+0x15c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <xTaskIncrementTick+0x15c>)
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <xTaskIncrementTick+0x160>)
 8005e20:	441a      	add	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7ff fc0d 	bl	8005648 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e32:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <xTaskIncrementTick+0x164>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d3b9      	bcc.n	8005db0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e40:	e7b6      	b.n	8005db0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e42:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <xTaskIncrementTick+0x164>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e48:	4914      	ldr	r1, [pc, #80]	; (8005e9c <xTaskIncrementTick+0x160>)
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d901      	bls.n	8005e5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e5e:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <xTaskIncrementTick+0x168>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e66:	2301      	movs	r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	e004      	b.n	8005e76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <xTaskIncrementTick+0x16c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3301      	adds	r3, #1
 8005e72:	4a0d      	ldr	r2, [pc, #52]	; (8005ea8 <xTaskIncrementTick+0x16c>)
 8005e74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e76:	697b      	ldr	r3, [r7, #20]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20000788 	.word	0x20000788
 8005e84:	20000764 	.word	0x20000764
 8005e88:	20000718 	.word	0x20000718
 8005e8c:	2000071c 	.word	0x2000071c
 8005e90:	20000778 	.word	0x20000778
 8005e94:	20000780 	.word	0x20000780
 8005e98:	20000768 	.word	0x20000768
 8005e9c:	20000664 	.word	0x20000664
 8005ea0:	20000660 	.word	0x20000660
 8005ea4:	20000774 	.word	0x20000774
 8005ea8:	20000770 	.word	0x20000770

08005eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eb2:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <vTaskSwitchContext+0xac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eba:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <vTaskSwitchContext+0xb0>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ec0:	e044      	b.n	8005f4c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005ec2:	4b26      	ldr	r3, [pc, #152]	; (8005f5c <vTaskSwitchContext+0xb0>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec8:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <vTaskSwitchContext+0xb4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	fab3 f383 	clz	r3, r3
 8005ed4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	f1c3 031f 	rsb	r3, r3, #31
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	4921      	ldr	r1, [pc, #132]	; (8005f64 <vTaskSwitchContext+0xb8>)
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	607b      	str	r3, [r7, #4]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <vTaskSwitchContext+0x5a>
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <vTaskSwitchContext+0xb8>)
 8005f14:	4413      	add	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d104      	bne.n	8005f38 <vTaskSwitchContext+0x8c>
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	605a      	str	r2, [r3, #4]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	4a0a      	ldr	r2, [pc, #40]	; (8005f68 <vTaskSwitchContext+0xbc>)
 8005f40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <vTaskSwitchContext+0xbc>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	335c      	adds	r3, #92	; 0x5c
 8005f48:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <vTaskSwitchContext+0xc0>)
 8005f4a:	6013      	str	r3, [r2, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	20000788 	.word	0x20000788
 8005f5c:	20000774 	.word	0x20000774
 8005f60:	20000768 	.word	0x20000768
 8005f64:	20000664 	.word	0x20000664
 8005f68:	20000660 	.word	0x20000660
 8005f6c:	20000070 	.word	0x20000070

08005f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f78:	f000 f852 	bl	8006020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <prvIdleTask+0x28>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d9f9      	bls.n	8005f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <prvIdleTask+0x2c>)
 8005f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f94:	e7f0      	b.n	8005f78 <prvIdleTask+0x8>
 8005f96:	bf00      	nop
 8005f98:	20000664 	.word	0x20000664
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	e00c      	b.n	8005fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4a12      	ldr	r2, [pc, #72]	; (8006000 <prvInitialiseTaskLists+0x60>)
 8005fb8:	4413      	add	r3, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff fb17 	bl	80055ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d9ef      	bls.n	8005fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fcc:	480d      	ldr	r0, [pc, #52]	; (8006004 <prvInitialiseTaskLists+0x64>)
 8005fce:	f7ff fb0e 	bl	80055ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fd2:	480d      	ldr	r0, [pc, #52]	; (8006008 <prvInitialiseTaskLists+0x68>)
 8005fd4:	f7ff fb0b 	bl	80055ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fd8:	480c      	ldr	r0, [pc, #48]	; (800600c <prvInitialiseTaskLists+0x6c>)
 8005fda:	f7ff fb08 	bl	80055ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fde:	480c      	ldr	r0, [pc, #48]	; (8006010 <prvInitialiseTaskLists+0x70>)
 8005fe0:	f7ff fb05 	bl	80055ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fe4:	480b      	ldr	r0, [pc, #44]	; (8006014 <prvInitialiseTaskLists+0x74>)
 8005fe6:	f7ff fb02 	bl	80055ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fea:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <prvInitialiseTaskLists+0x78>)
 8005fec:	4a05      	ldr	r2, [pc, #20]	; (8006004 <prvInitialiseTaskLists+0x64>)
 8005fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <prvInitialiseTaskLists+0x7c>)
 8005ff2:	4a05      	ldr	r2, [pc, #20]	; (8006008 <prvInitialiseTaskLists+0x68>)
 8005ff4:	601a      	str	r2, [r3, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000664 	.word	0x20000664
 8006004:	200006f0 	.word	0x200006f0
 8006008:	20000704 	.word	0x20000704
 800600c:	20000720 	.word	0x20000720
 8006010:	20000734 	.word	0x20000734
 8006014:	2000074c 	.word	0x2000074c
 8006018:	20000718 	.word	0x20000718
 800601c:	2000071c 	.word	0x2000071c

08006020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006026:	e019      	b.n	800605c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006028:	f000 fa0c 	bl	8006444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602c:	4b10      	ldr	r3, [pc, #64]	; (8006070 <prvCheckTasksWaitingTermination+0x50>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff fb62 	bl	8005702 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800603e:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <prvCheckTasksWaitingTermination+0x54>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3b01      	subs	r3, #1
 8006044:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <prvCheckTasksWaitingTermination+0x54>)
 8006046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <prvCheckTasksWaitingTermination+0x58>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	4a0a      	ldr	r2, [pc, #40]	; (8006078 <prvCheckTasksWaitingTermination+0x58>)
 8006050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006052:	f000 fa27 	bl	80064a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f810 	bl	800607c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <prvCheckTasksWaitingTermination+0x58>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e1      	bne.n	8006028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000734 	.word	0x20000734
 8006074:	20000760 	.word	0x20000760
 8006078:	20000748 	.word	0x20000748

0800607c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	335c      	adds	r3, #92	; 0x5c
 8006088:	4618      	mov	r0, r3
 800608a:	f001 fa4f 	bl	800752c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006094:	2b00      	cmp	r3, #0
 8006096:	d108      	bne.n	80060aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fb7f 	bl	80067a0 <vPortFree>
				vPortFree( pxTCB );
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fb7c 	bl	80067a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060a8:	e018      	b.n	80060dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d103      	bne.n	80060bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fb73 	bl	80067a0 <vPortFree>
	}
 80060ba:	e00f      	b.n	80060dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d00a      	beq.n	80060dc <prvDeleteTCB+0x60>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	60fb      	str	r3, [r7, #12]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <prvDeleteTCB+0x5e>
	}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ea:	4b0c      	ldr	r3, [pc, #48]	; (800611c <prvResetNextTaskUnblockTime+0x38>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d104      	bne.n	80060fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060f4:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <prvResetNextTaskUnblockTime+0x3c>)
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060fc:	e008      	b.n	8006110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <prvResetNextTaskUnblockTime+0x38>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4a04      	ldr	r2, [pc, #16]	; (8006120 <prvResetNextTaskUnblockTime+0x3c>)
 800610e:	6013      	str	r3, [r2, #0]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20000718 	.word	0x20000718
 8006120:	20000780 	.word	0x20000780

08006124 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800612e:	4b29      	ldr	r3, [pc, #164]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006134:	4b28      	ldr	r3, [pc, #160]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3304      	adds	r3, #4
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fae1 	bl	8005702 <uxListRemove>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006146:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	2201      	movs	r2, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43da      	mvns	r2, r3
 8006154:	4b21      	ldr	r3, [pc, #132]	; (80061dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4013      	ands	r3, r2
 800615a:	4a20      	ldr	r2, [pc, #128]	; (80061dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800615c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d10a      	bne.n	800617c <prvAddCurrentTaskToDelayedList+0x58>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800616c:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	481a      	ldr	r0, [pc, #104]	; (80061e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006176:	f7ff fa67 	bl	8005648 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800617a:	e026      	b.n	80061ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4413      	add	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006184:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	429a      	cmp	r2, r3
 8006192:	d209      	bcs.n	80061a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006194:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3304      	adds	r3, #4
 800619e:	4619      	mov	r1, r3
 80061a0:	4610      	mov	r0, r2
 80061a2:	f7ff fa75 	bl	8005690 <vListInsert>
}
 80061a6:	e010      	b.n	80061ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f7ff fa6b 	bl	8005690 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d202      	bcs.n	80061ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061c4:	4a09      	ldr	r2, [pc, #36]	; (80061ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6013      	str	r3, [r2, #0]
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000764 	.word	0x20000764
 80061d8:	20000660 	.word	0x20000660
 80061dc:	20000768 	.word	0x20000768
 80061e0:	2000074c 	.word	0x2000074c
 80061e4:	2000071c 	.word	0x2000071c
 80061e8:	20000718 	.word	0x20000718
 80061ec:	20000780 	.word	0x20000780

080061f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3b04      	subs	r3, #4
 8006200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b04      	subs	r3, #4
 800620e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f023 0201 	bic.w	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3b04      	subs	r3, #4
 800621e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006220:	4a0c      	ldr	r2, [pc, #48]	; (8006254 <pxPortInitialiseStack+0x64>)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3b14      	subs	r3, #20
 800622a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3b04      	subs	r3, #4
 8006236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f06f 0202 	mvn.w	r2, #2
 800623e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3b20      	subs	r3, #32
 8006244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006246:	68fb      	ldr	r3, [r7, #12]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	08006259 	.word	0x08006259

08006258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006262:	4b12      	ldr	r3, [pc, #72]	; (80062ac <prvTaskExitError+0x54>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d00a      	beq.n	8006282 <prvTaskExitError+0x2a>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	60fb      	str	r3, [r7, #12]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <prvTaskExitError+0x28>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60bb      	str	r3, [r7, #8]
}
 8006294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006296:	bf00      	nop
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0fc      	beq.n	8006298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800629e:	bf00      	nop
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	20000014 	.word	0x20000014

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	4770      	bx	lr
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst2>:
 80062d0:	20000660 	.word	0x20000660
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062d8:	4808      	ldr	r0, [pc, #32]	; (80062fc <prvPortStartFirstTask+0x24>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8814 	msr	CONTROL, r0
 80062ea:	b662      	cpsie	i
 80062ec:	b661      	cpsie	f
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	df00      	svc	0
 80062f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062fa:	bf00      	nop
 80062fc:	e000ed08 	.word	0xe000ed08

08006300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006306:	4b46      	ldr	r3, [pc, #280]	; (8006420 <xPortStartScheduler+0x120>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a46      	ldr	r2, [pc, #280]	; (8006424 <xPortStartScheduler+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d10a      	bne.n	8006326 <xPortStartScheduler+0x26>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	613b      	str	r3, [r7, #16]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006326:	4b3e      	ldr	r3, [pc, #248]	; (8006420 <xPortStartScheduler+0x120>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3f      	ldr	r2, [pc, #252]	; (8006428 <xPortStartScheduler+0x128>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10a      	bne.n	8006346 <xPortStartScheduler+0x46>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006346:	4b39      	ldr	r3, [pc, #228]	; (800642c <xPortStartScheduler+0x12c>)
 8006348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b31      	ldr	r3, [pc, #196]	; (8006430 <xPortStartScheduler+0x130>)
 800636c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800636e:	4b31      	ldr	r3, [pc, #196]	; (8006434 <xPortStartScheduler+0x134>)
 8006370:	2207      	movs	r2, #7
 8006372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006374:	e009      	b.n	800638a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006376:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <xPortStartScheduler+0x134>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3b01      	subs	r3, #1
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <xPortStartScheduler+0x134>)
 800637e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d0ef      	beq.n	8006376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006396:	4b27      	ldr	r3, [pc, #156]	; (8006434 <xPortStartScheduler+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1c3 0307 	rsb	r3, r3, #7
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00a      	beq.n	80063b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60bb      	str	r3, [r7, #8]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063b8:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <xPortStartScheduler+0x134>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <xPortStartScheduler+0x134>)
 80063c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <xPortStartScheduler+0x134>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ca:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <xPortStartScheduler+0x134>)
 80063cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <xPortStartScheduler+0x138>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <xPortStartScheduler+0x138>)
 80063dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <xPortStartScheduler+0x138>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a14      	ldr	r2, [pc, #80]	; (8006438 <xPortStartScheduler+0x138>)
 80063e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063ee:	f000 f8dd 	bl	80065ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <xPortStartScheduler+0x13c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063f8:	f000 f8fc 	bl	80065f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xPortStartScheduler+0x140>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0f      	ldr	r2, [pc, #60]	; (8006440 <xPortStartScheduler+0x140>)
 8006402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006408:	f7ff ff66 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800640c:	f7ff fd4e 	bl	8005eac <vTaskSwitchContext>
	prvTaskExitError();
 8006410:	f7ff ff22 	bl	8006258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	e000ed00 	.word	0xe000ed00
 8006424:	410fc271 	.word	0x410fc271
 8006428:	410fc270 	.word	0x410fc270
 800642c:	e000e400 	.word	0xe000e400
 8006430:	2000078c 	.word	0x2000078c
 8006434:	20000790 	.word	0x20000790
 8006438:	e000ed20 	.word	0xe000ed20
 800643c:	20000014 	.word	0x20000014
 8006440:	e000ef34 	.word	0xe000ef34

08006444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <vPortEnterCritical+0x58>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	4a0d      	ldr	r2, [pc, #52]	; (800649c <vPortEnterCritical+0x58>)
 8006466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <vPortEnterCritical+0x58>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10f      	bne.n	8006490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <vPortEnterCritical+0x5c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <vPortEnterCritical+0x4c>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	603b      	str	r3, [r7, #0]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <vPortEnterCritical+0x4a>
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	20000014 	.word	0x20000014
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <vPortExitCritical+0x50>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <vPortExitCritical+0x24>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	607b      	str	r3, [r7, #4]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <vPortExitCritical+0x50>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <vPortExitCritical+0x50>)
 80064d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <vPortExitCritical+0x50>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <vPortExitCritical+0x42>
 80064da:	2300      	movs	r3, #0
 80064dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20000014 	.word	0x20000014
	...

08006500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006500:	f3ef 8009 	mrs	r0, PSP
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4b15      	ldr	r3, [pc, #84]	; (8006560 <pxCurrentTCBConst>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f01e 0f10 	tst.w	lr, #16
 8006510:	bf08      	it	eq
 8006512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006524:	f380 8811 	msr	BASEPRI, r0
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f7ff fcbc 	bl	8005eac <vTaskSwitchContext>
 8006534:	f04f 0000 	mov.w	r0, #0
 8006538:	f380 8811 	msr	BASEPRI, r0
 800653c:	bc09      	pop	{r0, r3}
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006546:	f01e 0f10 	tst.w	lr, #16
 800654a:	bf08      	it	eq
 800654c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006550:	f380 8809 	msr	PSP, r0
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst>:
 8006560:	20000660 	.word	0x20000660
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
}
 8006580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006582:	f7ff fbdb 	bl	8005d3c <xTaskIncrementTick>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <SysTick_Handler+0x40>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f383 8811 	msr	BASEPRI, r3
}
 800659e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <vPortSetupTimerInterrupt+0x38>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <vPortSetupTimerInterrupt+0x3c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <vPortSetupTimerInterrupt+0x40>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <vPortSetupTimerInterrupt+0x44>)
 80065ca:	3b01      	subs	r3, #1
 80065cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ce:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065d0:	2207      	movs	r2, #7
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	e000e010 	.word	0xe000e010
 80065e4:	e000e018 	.word	0xe000e018
 80065e8:	20000008 	.word	0x20000008
 80065ec:	10624dd3 	.word	0x10624dd3
 80065f0:	e000e014 	.word	0xe000e014

080065f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006604 <vPortEnableVFP+0x10>
 80065f8:	6801      	ldr	r1, [r0, #0]
 80065fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065fe:	6001      	str	r1, [r0, #0]
 8006600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006602:	bf00      	nop
 8006604:	e000ed88 	.word	0xe000ed88

08006608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	; 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006610:	2300      	movs	r3, #0
 8006612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006614:	f7ff fae8 	bl	8005be8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006618:	4b5b      	ldr	r3, [pc, #364]	; (8006788 <pvPortMalloc+0x180>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006620:	f000 f920 	bl	8006864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006624:	4b59      	ldr	r3, [pc, #356]	; (800678c <pvPortMalloc+0x184>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 8093 	bne.w	8006758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01d      	beq.n	8006674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006638:	2208      	movs	r2, #8
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	2b00      	cmp	r3, #0
 8006648:	d014      	beq.n	8006674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f023 0307 	bic.w	r3, r3, #7
 8006650:	3308      	adds	r3, #8
 8006652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <pvPortMalloc+0x6c>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	617b      	str	r3, [r7, #20]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d06e      	beq.n	8006758 <pvPortMalloc+0x150>
 800667a:	4b45      	ldr	r3, [pc, #276]	; (8006790 <pvPortMalloc+0x188>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d869      	bhi.n	8006758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006684:	4b43      	ldr	r3, [pc, #268]	; (8006794 <pvPortMalloc+0x18c>)
 8006686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006688:	4b42      	ldr	r3, [pc, #264]	; (8006794 <pvPortMalloc+0x18c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800668e:	e004      	b.n	800669a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d903      	bls.n	80066ac <pvPortMalloc+0xa4>
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1f1      	bne.n	8006690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066ac:	4b36      	ldr	r3, [pc, #216]	; (8006788 <pvPortMalloc+0x180>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d050      	beq.n	8006758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2208      	movs	r2, #8
 80066bc:	4413      	add	r3, r2
 80066be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	2308      	movs	r3, #8
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d91f      	bls.n	8006718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <pvPortMalloc+0xf8>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	613b      	str	r3, [r7, #16]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006712:	69b8      	ldr	r0, [r7, #24]
 8006714:	f000 f908 	bl	8006928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006718:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <pvPortMalloc+0x188>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	4a1b      	ldr	r2, [pc, #108]	; (8006790 <pvPortMalloc+0x188>)
 8006724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006726:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <pvPortMalloc+0x188>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b1b      	ldr	r3, [pc, #108]	; (8006798 <pvPortMalloc+0x190>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d203      	bcs.n	800673a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006732:	4b17      	ldr	r3, [pc, #92]	; (8006790 <pvPortMalloc+0x188>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a18      	ldr	r2, [pc, #96]	; (8006798 <pvPortMalloc+0x190>)
 8006738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <pvPortMalloc+0x184>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	431a      	orrs	r2, r3
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800674e:	4b13      	ldr	r3, [pc, #76]	; (800679c <pvPortMalloc+0x194>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	4a11      	ldr	r2, [pc, #68]	; (800679c <pvPortMalloc+0x194>)
 8006756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006758:	f7ff fa54 	bl	8005c04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <pvPortMalloc+0x174>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60fb      	str	r3, [r7, #12]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <pvPortMalloc+0x172>
	return pvReturn;
 800677c:	69fb      	ldr	r3, [r7, #28]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3728      	adds	r7, #40	; 0x28
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	2000439c 	.word	0x2000439c
 800678c:	200043b0 	.word	0x200043b0
 8006790:	200043a0 	.word	0x200043a0
 8006794:	20004394 	.word	0x20004394
 8006798:	200043a4 	.word	0x200043a4
 800679c:	200043a8 	.word	0x200043a8

080067a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d04d      	beq.n	800684e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067b2:	2308      	movs	r3, #8
 80067b4:	425b      	negs	r3, r3
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4413      	add	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	4b24      	ldr	r3, [pc, #144]	; (8006858 <vPortFree+0xb8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <vPortFree+0x44>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	60fb      	str	r3, [r7, #12]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <vPortFree+0x62>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	60bb      	str	r3, [r7, #8]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	4b14      	ldr	r3, [pc, #80]	; (8006858 <vPortFree+0xb8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4013      	ands	r3, r2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01e      	beq.n	800684e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11a      	bne.n	800684e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <vPortFree+0xb8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	43db      	mvns	r3, r3
 8006822:	401a      	ands	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006828:	f7ff f9de 	bl	8005be8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <vPortFree+0xbc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4413      	add	r3, r2
 8006836:	4a09      	ldr	r2, [pc, #36]	; (800685c <vPortFree+0xbc>)
 8006838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800683a:	6938      	ldr	r0, [r7, #16]
 800683c:	f000 f874 	bl	8006928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <vPortFree+0xc0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	4a06      	ldr	r2, [pc, #24]	; (8006860 <vPortFree+0xc0>)
 8006848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800684a:	f7ff f9db 	bl	8005c04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800684e:	bf00      	nop
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	200043b0 	.word	0x200043b0
 800685c:	200043a0 	.word	0x200043a0
 8006860:	200043ac 	.word	0x200043ac

08006864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800686a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800686e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006870:	4b27      	ldr	r3, [pc, #156]	; (8006910 <prvHeapInit+0xac>)
 8006872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00c      	beq.n	8006898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3307      	adds	r3, #7
 8006882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	4a1f      	ldr	r2, [pc, #124]	; (8006910 <prvHeapInit+0xac>)
 8006894:	4413      	add	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800689c:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <prvHeapInit+0xb0>)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068a2:	4b1c      	ldr	r3, [pc, #112]	; (8006914 <prvHeapInit+0xb0>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	4413      	add	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068b0:	2208      	movs	r2, #8
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0307 	bic.w	r3, r3, #7
 80068be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a15      	ldr	r2, [pc, #84]	; (8006918 <prvHeapInit+0xb4>)
 80068c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <prvHeapInit+0xb4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ce:	4b12      	ldr	r3, [pc, #72]	; (8006918 <prvHeapInit+0xb4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068e4:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <prvHeapInit+0xb4>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4a0a      	ldr	r2, [pc, #40]	; (800691c <prvHeapInit+0xb8>)
 80068f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <prvHeapInit+0xbc>)
 80068fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <prvHeapInit+0xc0>)
 80068fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006902:	601a      	str	r2, [r3, #0]
}
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	20000794 	.word	0x20000794
 8006914:	20004394 	.word	0x20004394
 8006918:	2000439c 	.word	0x2000439c
 800691c:	200043a4 	.word	0x200043a4
 8006920:	200043a0 	.word	0x200043a0
 8006924:	200043b0 	.word	0x200043b0

08006928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006930:	4b28      	ldr	r3, [pc, #160]	; (80069d4 <prvInsertBlockIntoFreeList+0xac>)
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e002      	b.n	800693c <prvInsertBlockIntoFreeList+0x14>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	429a      	cmp	r2, r3
 8006944:	d8f7      	bhi.n	8006936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	4413      	add	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d108      	bne.n	800696a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	441a      	add	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	441a      	add	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d118      	bne.n	80069b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d00d      	beq.n	80069a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	441a      	add	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e008      	b.n	80069b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <prvInsertBlockIntoFreeList+0xb0>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e003      	b.n	80069b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d002      	beq.n	80069c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069c6:	bf00      	nop
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20004394 	.word	0x20004394
 80069d8:	2000439c 	.word	0x2000439c

080069dc <__cvt>:
 80069dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	ec55 4b10 	vmov	r4, r5, d0
 80069e4:	2d00      	cmp	r5, #0
 80069e6:	460e      	mov	r6, r1
 80069e8:	4619      	mov	r1, r3
 80069ea:	462b      	mov	r3, r5
 80069ec:	bfbb      	ittet	lt
 80069ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069f2:	461d      	movlt	r5, r3
 80069f4:	2300      	movge	r3, #0
 80069f6:	232d      	movlt	r3, #45	; 0x2d
 80069f8:	700b      	strb	r3, [r1, #0]
 80069fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a00:	4691      	mov	r9, r2
 8006a02:	f023 0820 	bic.w	r8, r3, #32
 8006a06:	bfbc      	itt	lt
 8006a08:	4622      	movlt	r2, r4
 8006a0a:	4614      	movlt	r4, r2
 8006a0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a10:	d005      	beq.n	8006a1e <__cvt+0x42>
 8006a12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a16:	d100      	bne.n	8006a1a <__cvt+0x3e>
 8006a18:	3601      	adds	r6, #1
 8006a1a:	2102      	movs	r1, #2
 8006a1c:	e000      	b.n	8006a20 <__cvt+0x44>
 8006a1e:	2103      	movs	r1, #3
 8006a20:	ab03      	add	r3, sp, #12
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	ab02      	add	r3, sp, #8
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	ec45 4b10 	vmov	d0, r4, r5
 8006a2c:	4653      	mov	r3, sl
 8006a2e:	4632      	mov	r2, r6
 8006a30:	f000 fece 	bl	80077d0 <_dtoa_r>
 8006a34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a38:	4607      	mov	r7, r0
 8006a3a:	d102      	bne.n	8006a42 <__cvt+0x66>
 8006a3c:	f019 0f01 	tst.w	r9, #1
 8006a40:	d022      	beq.n	8006a88 <__cvt+0xac>
 8006a42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a46:	eb07 0906 	add.w	r9, r7, r6
 8006a4a:	d110      	bne.n	8006a6e <__cvt+0x92>
 8006a4c:	783b      	ldrb	r3, [r7, #0]
 8006a4e:	2b30      	cmp	r3, #48	; 0x30
 8006a50:	d10a      	bne.n	8006a68 <__cvt+0x8c>
 8006a52:	2200      	movs	r2, #0
 8006a54:	2300      	movs	r3, #0
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7fa f83d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a5e:	b918      	cbnz	r0, 8006a68 <__cvt+0x8c>
 8006a60:	f1c6 0601 	rsb	r6, r6, #1
 8006a64:	f8ca 6000 	str.w	r6, [sl]
 8006a68:	f8da 3000 	ldr.w	r3, [sl]
 8006a6c:	4499      	add	r9, r3
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2300      	movs	r3, #0
 8006a72:	4620      	mov	r0, r4
 8006a74:	4629      	mov	r1, r5
 8006a76:	f7fa f82f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a7a:	b108      	cbz	r0, 8006a80 <__cvt+0xa4>
 8006a7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a80:	2230      	movs	r2, #48	; 0x30
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	454b      	cmp	r3, r9
 8006a86:	d307      	bcc.n	8006a98 <__cvt+0xbc>
 8006a88:	9b03      	ldr	r3, [sp, #12]
 8006a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a8c:	1bdb      	subs	r3, r3, r7
 8006a8e:	4638      	mov	r0, r7
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	b004      	add	sp, #16
 8006a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a98:	1c59      	adds	r1, r3, #1
 8006a9a:	9103      	str	r1, [sp, #12]
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	e7f0      	b.n	8006a82 <__cvt+0xa6>

08006aa0 <__exponent>:
 8006aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	bfb8      	it	lt
 8006aa8:	4249      	neglt	r1, r1
 8006aaa:	f803 2b02 	strb.w	r2, [r3], #2
 8006aae:	bfb4      	ite	lt
 8006ab0:	222d      	movlt	r2, #45	; 0x2d
 8006ab2:	222b      	movge	r2, #43	; 0x2b
 8006ab4:	2909      	cmp	r1, #9
 8006ab6:	7042      	strb	r2, [r0, #1]
 8006ab8:	dd2a      	ble.n	8006b10 <__exponent+0x70>
 8006aba:	f10d 0207 	add.w	r2, sp, #7
 8006abe:	4617      	mov	r7, r2
 8006ac0:	260a      	movs	r6, #10
 8006ac2:	4694      	mov	ip, r2
 8006ac4:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ac8:	fb06 1415 	mls	r4, r6, r5, r1
 8006acc:	3430      	adds	r4, #48	; 0x30
 8006ace:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	2c63      	cmp	r4, #99	; 0x63
 8006ad6:	f102 32ff 	add.w	r2, r2, #4294967295
 8006ada:	4629      	mov	r1, r5
 8006adc:	dcf1      	bgt.n	8006ac2 <__exponent+0x22>
 8006ade:	3130      	adds	r1, #48	; 0x30
 8006ae0:	f1ac 0402 	sub.w	r4, ip, #2
 8006ae4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006ae8:	1c41      	adds	r1, r0, #1
 8006aea:	4622      	mov	r2, r4
 8006aec:	42ba      	cmp	r2, r7
 8006aee:	d30a      	bcc.n	8006b06 <__exponent+0x66>
 8006af0:	f10d 0209 	add.w	r2, sp, #9
 8006af4:	eba2 020c 	sub.w	r2, r2, ip
 8006af8:	42bc      	cmp	r4, r7
 8006afa:	bf88      	it	hi
 8006afc:	2200      	movhi	r2, #0
 8006afe:	4413      	add	r3, r2
 8006b00:	1a18      	subs	r0, r3, r0
 8006b02:	b003      	add	sp, #12
 8006b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b06:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b0a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b0e:	e7ed      	b.n	8006aec <__exponent+0x4c>
 8006b10:	2330      	movs	r3, #48	; 0x30
 8006b12:	3130      	adds	r1, #48	; 0x30
 8006b14:	7083      	strb	r3, [r0, #2]
 8006b16:	70c1      	strb	r1, [r0, #3]
 8006b18:	1d03      	adds	r3, r0, #4
 8006b1a:	e7f1      	b.n	8006b00 <__exponent+0x60>

08006b1c <_printf_float>:
 8006b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	ed2d 8b02 	vpush	{d8}
 8006b24:	b08d      	sub	sp, #52	; 0x34
 8006b26:	460c      	mov	r4, r1
 8006b28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	461f      	mov	r7, r3
 8006b30:	4605      	mov	r5, r0
 8006b32:	f000 fce7 	bl	8007504 <_localeconv_r>
 8006b36:	f8d0 a000 	ldr.w	sl, [r0]
 8006b3a:	4650      	mov	r0, sl
 8006b3c:	f7f9 fba0 	bl	8000280 <strlen>
 8006b40:	2300      	movs	r3, #0
 8006b42:	930a      	str	r3, [sp, #40]	; 0x28
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	9305      	str	r3, [sp, #20]
 8006b48:	f8d8 3000 	ldr.w	r3, [r8]
 8006b4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b50:	3307      	adds	r3, #7
 8006b52:	f023 0307 	bic.w	r3, r3, #7
 8006b56:	f103 0208 	add.w	r2, r3, #8
 8006b5a:	f8c8 2000 	str.w	r2, [r8]
 8006b5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b66:	9307      	str	r3, [sp, #28]
 8006b68:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b6c:	ee08 0a10 	vmov	s16, r0
 8006b70:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b78:	4b9e      	ldr	r3, [pc, #632]	; (8006df4 <_printf_float+0x2d8>)
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7e:	f7f9 ffdd 	bl	8000b3c <__aeabi_dcmpun>
 8006b82:	bb88      	cbnz	r0, 8006be8 <_printf_float+0xcc>
 8006b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b88:	4b9a      	ldr	r3, [pc, #616]	; (8006df4 <_printf_float+0x2d8>)
 8006b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8e:	f7f9 ffb7 	bl	8000b00 <__aeabi_dcmple>
 8006b92:	bb48      	cbnz	r0, 8006be8 <_printf_float+0xcc>
 8006b94:	2200      	movs	r2, #0
 8006b96:	2300      	movs	r3, #0
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	f7f9 ffa6 	bl	8000aec <__aeabi_dcmplt>
 8006ba0:	b110      	cbz	r0, 8006ba8 <_printf_float+0x8c>
 8006ba2:	232d      	movs	r3, #45	; 0x2d
 8006ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba8:	4a93      	ldr	r2, [pc, #588]	; (8006df8 <_printf_float+0x2dc>)
 8006baa:	4b94      	ldr	r3, [pc, #592]	; (8006dfc <_printf_float+0x2e0>)
 8006bac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bb0:	bf94      	ite	ls
 8006bb2:	4690      	movls	r8, r2
 8006bb4:	4698      	movhi	r8, r3
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	6123      	str	r3, [r4, #16]
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	f023 0304 	bic.w	r3, r3, #4
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	f04f 0900 	mov.w	r9, #0
 8006bc6:	9700      	str	r7, [sp, #0]
 8006bc8:	4633      	mov	r3, r6
 8006bca:	aa0b      	add	r2, sp, #44	; 0x2c
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f9da 	bl	8006f88 <_printf_common>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f040 8090 	bne.w	8006cfa <_printf_float+0x1de>
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295
 8006bde:	b00d      	add	sp, #52	; 0x34
 8006be0:	ecbd 8b02 	vpop	{d8}
 8006be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be8:	4642      	mov	r2, r8
 8006bea:	464b      	mov	r3, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	4649      	mov	r1, r9
 8006bf0:	f7f9 ffa4 	bl	8000b3c <__aeabi_dcmpun>
 8006bf4:	b140      	cbz	r0, 8006c08 <_printf_float+0xec>
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bfbc      	itt	lt
 8006bfc:	232d      	movlt	r3, #45	; 0x2d
 8006bfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c02:	4a7f      	ldr	r2, [pc, #508]	; (8006e00 <_printf_float+0x2e4>)
 8006c04:	4b7f      	ldr	r3, [pc, #508]	; (8006e04 <_printf_float+0x2e8>)
 8006c06:	e7d1      	b.n	8006bac <_printf_float+0x90>
 8006c08:	6863      	ldr	r3, [r4, #4]
 8006c0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c0e:	9206      	str	r2, [sp, #24]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	d13f      	bne.n	8006c94 <_printf_float+0x178>
 8006c14:	2306      	movs	r3, #6
 8006c16:	6063      	str	r3, [r4, #4]
 8006c18:	9b05      	ldr	r3, [sp, #20]
 8006c1a:	6861      	ldr	r1, [r4, #4]
 8006c1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c20:	2300      	movs	r3, #0
 8006c22:	9303      	str	r3, [sp, #12]
 8006c24:	ab0a      	add	r3, sp, #40	; 0x28
 8006c26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c2a:	ab09      	add	r3, sp, #36	; 0x24
 8006c2c:	ec49 8b10 	vmov	d0, r8, r9
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f7ff fecf 	bl	80069dc <__cvt>
 8006c3e:	9b06      	ldr	r3, [sp, #24]
 8006c40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c42:	2b47      	cmp	r3, #71	; 0x47
 8006c44:	4680      	mov	r8, r0
 8006c46:	d108      	bne.n	8006c5a <_printf_float+0x13e>
 8006c48:	1cc8      	adds	r0, r1, #3
 8006c4a:	db02      	blt.n	8006c52 <_printf_float+0x136>
 8006c4c:	6863      	ldr	r3, [r4, #4]
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	dd41      	ble.n	8006cd6 <_printf_float+0x1ba>
 8006c52:	f1ab 0302 	sub.w	r3, fp, #2
 8006c56:	fa5f fb83 	uxtb.w	fp, r3
 8006c5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c5e:	d820      	bhi.n	8006ca2 <_printf_float+0x186>
 8006c60:	3901      	subs	r1, #1
 8006c62:	465a      	mov	r2, fp
 8006c64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c68:	9109      	str	r1, [sp, #36]	; 0x24
 8006c6a:	f7ff ff19 	bl	8006aa0 <__exponent>
 8006c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c70:	1813      	adds	r3, r2, r0
 8006c72:	2a01      	cmp	r2, #1
 8006c74:	4681      	mov	r9, r0
 8006c76:	6123      	str	r3, [r4, #16]
 8006c78:	dc02      	bgt.n	8006c80 <_printf_float+0x164>
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	07d2      	lsls	r2, r2, #31
 8006c7e:	d501      	bpl.n	8006c84 <_printf_float+0x168>
 8006c80:	3301      	adds	r3, #1
 8006c82:	6123      	str	r3, [r4, #16]
 8006c84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d09c      	beq.n	8006bc6 <_printf_float+0xaa>
 8006c8c:	232d      	movs	r3, #45	; 0x2d
 8006c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c92:	e798      	b.n	8006bc6 <_printf_float+0xaa>
 8006c94:	9a06      	ldr	r2, [sp, #24]
 8006c96:	2a47      	cmp	r2, #71	; 0x47
 8006c98:	d1be      	bne.n	8006c18 <_printf_float+0xfc>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1bc      	bne.n	8006c18 <_printf_float+0xfc>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e7b9      	b.n	8006c16 <_printf_float+0xfa>
 8006ca2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ca6:	d118      	bne.n	8006cda <_printf_float+0x1be>
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	dd0b      	ble.n	8006cc6 <_printf_float+0x1aa>
 8006cae:	6121      	str	r1, [r4, #16]
 8006cb0:	b913      	cbnz	r3, 8006cb8 <_printf_float+0x19c>
 8006cb2:	6822      	ldr	r2, [r4, #0]
 8006cb4:	07d0      	lsls	r0, r2, #31
 8006cb6:	d502      	bpl.n	8006cbe <_printf_float+0x1a2>
 8006cb8:	3301      	adds	r3, #1
 8006cba:	440b      	add	r3, r1
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cc0:	f04f 0900 	mov.w	r9, #0
 8006cc4:	e7de      	b.n	8006c84 <_printf_float+0x168>
 8006cc6:	b913      	cbnz	r3, 8006cce <_printf_float+0x1b2>
 8006cc8:	6822      	ldr	r2, [r4, #0]
 8006cca:	07d2      	lsls	r2, r2, #31
 8006ccc:	d501      	bpl.n	8006cd2 <_printf_float+0x1b6>
 8006cce:	3302      	adds	r3, #2
 8006cd0:	e7f4      	b.n	8006cbc <_printf_float+0x1a0>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e7f2      	b.n	8006cbc <_printf_float+0x1a0>
 8006cd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cdc:	4299      	cmp	r1, r3
 8006cde:	db05      	blt.n	8006cec <_printf_float+0x1d0>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	6121      	str	r1, [r4, #16]
 8006ce4:	07d8      	lsls	r0, r3, #31
 8006ce6:	d5ea      	bpl.n	8006cbe <_printf_float+0x1a2>
 8006ce8:	1c4b      	adds	r3, r1, #1
 8006cea:	e7e7      	b.n	8006cbc <_printf_float+0x1a0>
 8006cec:	2900      	cmp	r1, #0
 8006cee:	bfd4      	ite	le
 8006cf0:	f1c1 0202 	rsble	r2, r1, #2
 8006cf4:	2201      	movgt	r2, #1
 8006cf6:	4413      	add	r3, r2
 8006cf8:	e7e0      	b.n	8006cbc <_printf_float+0x1a0>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	055a      	lsls	r2, r3, #21
 8006cfe:	d407      	bmi.n	8006d10 <_printf_float+0x1f4>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	4642      	mov	r2, r8
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d12c      	bne.n	8006d68 <_printf_float+0x24c>
 8006d0e:	e764      	b.n	8006bda <_printf_float+0xbe>
 8006d10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d14:	f240 80e0 	bls.w	8006ed8 <_printf_float+0x3bc>
 8006d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f7f9 feda 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d034      	beq.n	8006d92 <_printf_float+0x276>
 8006d28:	4a37      	ldr	r2, [pc, #220]	; (8006e08 <_printf_float+0x2ec>)
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	f43f af51 	beq.w	8006bda <_printf_float+0xbe>
 8006d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	db02      	blt.n	8006d46 <_printf_float+0x22a>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	07d8      	lsls	r0, r3, #31
 8006d44:	d510      	bpl.n	8006d68 <_printf_float+0x24c>
 8006d46:	ee18 3a10 	vmov	r3, s16
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af41 	beq.w	8006bda <_printf_float+0xbe>
 8006d58:	f04f 0800 	mov.w	r8, #0
 8006d5c:	f104 091a 	add.w	r9, r4, #26
 8006d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d62:	3b01      	subs	r3, #1
 8006d64:	4543      	cmp	r3, r8
 8006d66:	dc09      	bgt.n	8006d7c <_printf_float+0x260>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	079b      	lsls	r3, r3, #30
 8006d6c:	f100 8107 	bmi.w	8006f7e <_printf_float+0x462>
 8006d70:	68e0      	ldr	r0, [r4, #12]
 8006d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d74:	4298      	cmp	r0, r3
 8006d76:	bfb8      	it	lt
 8006d78:	4618      	movlt	r0, r3
 8006d7a:	e730      	b.n	8006bde <_printf_float+0xc2>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	464a      	mov	r2, r9
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f43f af27 	beq.w	8006bda <_printf_float+0xbe>
 8006d8c:	f108 0801 	add.w	r8, r8, #1
 8006d90:	e7e6      	b.n	8006d60 <_printf_float+0x244>
 8006d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc39      	bgt.n	8006e0c <_printf_float+0x2f0>
 8006d98:	4a1b      	ldr	r2, [pc, #108]	; (8006e08 <_printf_float+0x2ec>)
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	f43f af19 	beq.w	8006bda <_printf_float+0xbe>
 8006da8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d102      	bne.n	8006db6 <_printf_float+0x29a>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	07d9      	lsls	r1, r3, #31
 8006db4:	d5d8      	bpl.n	8006d68 <_printf_float+0x24c>
 8006db6:	ee18 3a10 	vmov	r3, s16
 8006dba:	4652      	mov	r2, sl
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f43f af09 	beq.w	8006bda <_printf_float+0xbe>
 8006dc8:	f04f 0900 	mov.w	r9, #0
 8006dcc:	f104 0a1a 	add.w	sl, r4, #26
 8006dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd2:	425b      	negs	r3, r3
 8006dd4:	454b      	cmp	r3, r9
 8006dd6:	dc01      	bgt.n	8006ddc <_printf_float+0x2c0>
 8006dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dda:	e792      	b.n	8006d02 <_printf_float+0x1e6>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4652      	mov	r2, sl
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f aef7 	beq.w	8006bda <_printf_float+0xbe>
 8006dec:	f109 0901 	add.w	r9, r9, #1
 8006df0:	e7ee      	b.n	8006dd0 <_printf_float+0x2b4>
 8006df2:	bf00      	nop
 8006df4:	7fefffff 	.word	0x7fefffff
 8006df8:	08009b28 	.word	0x08009b28
 8006dfc:	08009b2c 	.word	0x08009b2c
 8006e00:	08009b30 	.word	0x08009b30
 8006e04:	08009b34 	.word	0x08009b34
 8006e08:	08009b38 	.word	0x08009b38
 8006e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e10:	429a      	cmp	r2, r3
 8006e12:	bfa8      	it	ge
 8006e14:	461a      	movge	r2, r3
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	4691      	mov	r9, r2
 8006e1a:	dc37      	bgt.n	8006e8c <_printf_float+0x370>
 8006e1c:	f04f 0b00 	mov.w	fp, #0
 8006e20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e24:	f104 021a 	add.w	r2, r4, #26
 8006e28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e2a:	9305      	str	r3, [sp, #20]
 8006e2c:	eba3 0309 	sub.w	r3, r3, r9
 8006e30:	455b      	cmp	r3, fp
 8006e32:	dc33      	bgt.n	8006e9c <_printf_float+0x380>
 8006e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	db3b      	blt.n	8006eb4 <_printf_float+0x398>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	07da      	lsls	r2, r3, #31
 8006e40:	d438      	bmi.n	8006eb4 <_printf_float+0x398>
 8006e42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e46:	eba2 0903 	sub.w	r9, r2, r3
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	1ad2      	subs	r2, r2, r3
 8006e4e:	4591      	cmp	r9, r2
 8006e50:	bfa8      	it	ge
 8006e52:	4691      	movge	r9, r2
 8006e54:	f1b9 0f00 	cmp.w	r9, #0
 8006e58:	dc35      	bgt.n	8006ec6 <_printf_float+0x3aa>
 8006e5a:	f04f 0800 	mov.w	r8, #0
 8006e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e62:	f104 0a1a 	add.w	sl, r4, #26
 8006e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	eba3 0309 	sub.w	r3, r3, r9
 8006e70:	4543      	cmp	r3, r8
 8006e72:	f77f af79 	ble.w	8006d68 <_printf_float+0x24c>
 8006e76:	2301      	movs	r3, #1
 8006e78:	4652      	mov	r2, sl
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	47b8      	blx	r7
 8006e80:	3001      	adds	r0, #1
 8006e82:	f43f aeaa 	beq.w	8006bda <_printf_float+0xbe>
 8006e86:	f108 0801 	add.w	r8, r8, #1
 8006e8a:	e7ec      	b.n	8006e66 <_printf_float+0x34a>
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4642      	mov	r2, r8
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	d1c0      	bne.n	8006e1c <_printf_float+0x300>
 8006e9a:	e69e      	b.n	8006bda <_printf_float+0xbe>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	9205      	str	r2, [sp, #20]
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f ae97 	beq.w	8006bda <_printf_float+0xbe>
 8006eac:	9a05      	ldr	r2, [sp, #20]
 8006eae:	f10b 0b01 	add.w	fp, fp, #1
 8006eb2:	e7b9      	b.n	8006e28 <_printf_float+0x30c>
 8006eb4:	ee18 3a10 	vmov	r3, s16
 8006eb8:	4652      	mov	r2, sl
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d1be      	bne.n	8006e42 <_printf_float+0x326>
 8006ec4:	e689      	b.n	8006bda <_printf_float+0xbe>
 8006ec6:	9a05      	ldr	r2, [sp, #20]
 8006ec8:	464b      	mov	r3, r9
 8006eca:	4442      	add	r2, r8
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d1c1      	bne.n	8006e5a <_printf_float+0x33e>
 8006ed6:	e680      	b.n	8006bda <_printf_float+0xbe>
 8006ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eda:	2a01      	cmp	r2, #1
 8006edc:	dc01      	bgt.n	8006ee2 <_printf_float+0x3c6>
 8006ede:	07db      	lsls	r3, r3, #31
 8006ee0:	d53a      	bpl.n	8006f58 <_printf_float+0x43c>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b8      	blx	r7
 8006eec:	3001      	adds	r0, #1
 8006eee:	f43f ae74 	beq.w	8006bda <_printf_float+0xbe>
 8006ef2:	ee18 3a10 	vmov	r3, s16
 8006ef6:	4652      	mov	r2, sl
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	f43f ae6b 	beq.w	8006bda <_printf_float+0xbe>
 8006f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006f10:	f7f9 fde2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f14:	b9d8      	cbnz	r0, 8006f4e <_printf_float+0x432>
 8006f16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f1a:	f108 0201 	add.w	r2, r8, #1
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4628      	mov	r0, r5
 8006f22:	47b8      	blx	r7
 8006f24:	3001      	adds	r0, #1
 8006f26:	d10e      	bne.n	8006f46 <_printf_float+0x42a>
 8006f28:	e657      	b.n	8006bda <_printf_float+0xbe>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	4652      	mov	r2, sl
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	f43f ae50 	beq.w	8006bda <_printf_float+0xbe>
 8006f3a:	f108 0801 	add.w	r8, r8, #1
 8006f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f40:	3b01      	subs	r3, #1
 8006f42:	4543      	cmp	r3, r8
 8006f44:	dcf1      	bgt.n	8006f2a <_printf_float+0x40e>
 8006f46:	464b      	mov	r3, r9
 8006f48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f4c:	e6da      	b.n	8006d04 <_printf_float+0x1e8>
 8006f4e:	f04f 0800 	mov.w	r8, #0
 8006f52:	f104 0a1a 	add.w	sl, r4, #26
 8006f56:	e7f2      	b.n	8006f3e <_printf_float+0x422>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4642      	mov	r2, r8
 8006f5c:	e7df      	b.n	8006f1e <_printf_float+0x402>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	464a      	mov	r2, r9
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f ae36 	beq.w	8006bda <_printf_float+0xbe>
 8006f6e:	f108 0801 	add.w	r8, r8, #1
 8006f72:	68e3      	ldr	r3, [r4, #12]
 8006f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f76:	1a5b      	subs	r3, r3, r1
 8006f78:	4543      	cmp	r3, r8
 8006f7a:	dcf0      	bgt.n	8006f5e <_printf_float+0x442>
 8006f7c:	e6f8      	b.n	8006d70 <_printf_float+0x254>
 8006f7e:	f04f 0800 	mov.w	r8, #0
 8006f82:	f104 0919 	add.w	r9, r4, #25
 8006f86:	e7f4      	b.n	8006f72 <_printf_float+0x456>

08006f88 <_printf_common>:
 8006f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	4699      	mov	r9, r3
 8006f90:	688a      	ldr	r2, [r1, #8]
 8006f92:	690b      	ldr	r3, [r1, #16]
 8006f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	bfb8      	it	lt
 8006f9c:	4613      	movlt	r3, r2
 8006f9e:	6033      	str	r3, [r6, #0]
 8006fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fa4:	4607      	mov	r7, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	b10a      	cbz	r2, 8006fae <_printf_common+0x26>
 8006faa:	3301      	adds	r3, #1
 8006fac:	6033      	str	r3, [r6, #0]
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	0699      	lsls	r1, r3, #26
 8006fb2:	bf42      	ittt	mi
 8006fb4:	6833      	ldrmi	r3, [r6, #0]
 8006fb6:	3302      	addmi	r3, #2
 8006fb8:	6033      	strmi	r3, [r6, #0]
 8006fba:	6825      	ldr	r5, [r4, #0]
 8006fbc:	f015 0506 	ands.w	r5, r5, #6
 8006fc0:	d106      	bne.n	8006fd0 <_printf_common+0x48>
 8006fc2:	f104 0a19 	add.w	sl, r4, #25
 8006fc6:	68e3      	ldr	r3, [r4, #12]
 8006fc8:	6832      	ldr	r2, [r6, #0]
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	42ab      	cmp	r3, r5
 8006fce:	dc26      	bgt.n	800701e <_printf_common+0x96>
 8006fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fd4:	1e13      	subs	r3, r2, #0
 8006fd6:	6822      	ldr	r2, [r4, #0]
 8006fd8:	bf18      	it	ne
 8006fda:	2301      	movne	r3, #1
 8006fdc:	0692      	lsls	r2, r2, #26
 8006fde:	d42b      	bmi.n	8007038 <_printf_common+0xb0>
 8006fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	47c0      	blx	r8
 8006fea:	3001      	adds	r0, #1
 8006fec:	d01e      	beq.n	800702c <_printf_common+0xa4>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	6922      	ldr	r2, [r4, #16]
 8006ff2:	f003 0306 	and.w	r3, r3, #6
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	bf02      	ittt	eq
 8006ffa:	68e5      	ldreq	r5, [r4, #12]
 8006ffc:	6833      	ldreq	r3, [r6, #0]
 8006ffe:	1aed      	subeq	r5, r5, r3
 8007000:	68a3      	ldr	r3, [r4, #8]
 8007002:	bf0c      	ite	eq
 8007004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007008:	2500      	movne	r5, #0
 800700a:	4293      	cmp	r3, r2
 800700c:	bfc4      	itt	gt
 800700e:	1a9b      	subgt	r3, r3, r2
 8007010:	18ed      	addgt	r5, r5, r3
 8007012:	2600      	movs	r6, #0
 8007014:	341a      	adds	r4, #26
 8007016:	42b5      	cmp	r5, r6
 8007018:	d11a      	bne.n	8007050 <_printf_common+0xc8>
 800701a:	2000      	movs	r0, #0
 800701c:	e008      	b.n	8007030 <_printf_common+0xa8>
 800701e:	2301      	movs	r3, #1
 8007020:	4652      	mov	r2, sl
 8007022:	4649      	mov	r1, r9
 8007024:	4638      	mov	r0, r7
 8007026:	47c0      	blx	r8
 8007028:	3001      	adds	r0, #1
 800702a:	d103      	bne.n	8007034 <_printf_common+0xac>
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007034:	3501      	adds	r5, #1
 8007036:	e7c6      	b.n	8006fc6 <_printf_common+0x3e>
 8007038:	18e1      	adds	r1, r4, r3
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	2030      	movs	r0, #48	; 0x30
 800703e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007042:	4422      	add	r2, r4
 8007044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800704c:	3302      	adds	r3, #2
 800704e:	e7c7      	b.n	8006fe0 <_printf_common+0x58>
 8007050:	2301      	movs	r3, #1
 8007052:	4622      	mov	r2, r4
 8007054:	4649      	mov	r1, r9
 8007056:	4638      	mov	r0, r7
 8007058:	47c0      	blx	r8
 800705a:	3001      	adds	r0, #1
 800705c:	d0e6      	beq.n	800702c <_printf_common+0xa4>
 800705e:	3601      	adds	r6, #1
 8007060:	e7d9      	b.n	8007016 <_printf_common+0x8e>
	...

08007064 <_printf_i>:
 8007064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	7e0f      	ldrb	r7, [r1, #24]
 800706a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800706c:	2f78      	cmp	r7, #120	; 0x78
 800706e:	4691      	mov	r9, r2
 8007070:	4680      	mov	r8, r0
 8007072:	460c      	mov	r4, r1
 8007074:	469a      	mov	sl, r3
 8007076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800707a:	d807      	bhi.n	800708c <_printf_i+0x28>
 800707c:	2f62      	cmp	r7, #98	; 0x62
 800707e:	d80a      	bhi.n	8007096 <_printf_i+0x32>
 8007080:	2f00      	cmp	r7, #0
 8007082:	f000 80d4 	beq.w	800722e <_printf_i+0x1ca>
 8007086:	2f58      	cmp	r7, #88	; 0x58
 8007088:	f000 80c0 	beq.w	800720c <_printf_i+0x1a8>
 800708c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007094:	e03a      	b.n	800710c <_printf_i+0xa8>
 8007096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800709a:	2b15      	cmp	r3, #21
 800709c:	d8f6      	bhi.n	800708c <_printf_i+0x28>
 800709e:	a101      	add	r1, pc, #4	; (adr r1, 80070a4 <_printf_i+0x40>)
 80070a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070a4:	080070fd 	.word	0x080070fd
 80070a8:	08007111 	.word	0x08007111
 80070ac:	0800708d 	.word	0x0800708d
 80070b0:	0800708d 	.word	0x0800708d
 80070b4:	0800708d 	.word	0x0800708d
 80070b8:	0800708d 	.word	0x0800708d
 80070bc:	08007111 	.word	0x08007111
 80070c0:	0800708d 	.word	0x0800708d
 80070c4:	0800708d 	.word	0x0800708d
 80070c8:	0800708d 	.word	0x0800708d
 80070cc:	0800708d 	.word	0x0800708d
 80070d0:	08007215 	.word	0x08007215
 80070d4:	0800713d 	.word	0x0800713d
 80070d8:	080071cf 	.word	0x080071cf
 80070dc:	0800708d 	.word	0x0800708d
 80070e0:	0800708d 	.word	0x0800708d
 80070e4:	08007237 	.word	0x08007237
 80070e8:	0800708d 	.word	0x0800708d
 80070ec:	0800713d 	.word	0x0800713d
 80070f0:	0800708d 	.word	0x0800708d
 80070f4:	0800708d 	.word	0x0800708d
 80070f8:	080071d7 	.word	0x080071d7
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	1d1a      	adds	r2, r3, #4
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	602a      	str	r2, [r5, #0]
 8007104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800710c:	2301      	movs	r3, #1
 800710e:	e09f      	b.n	8007250 <_printf_i+0x1ec>
 8007110:	6820      	ldr	r0, [r4, #0]
 8007112:	682b      	ldr	r3, [r5, #0]
 8007114:	0607      	lsls	r7, r0, #24
 8007116:	f103 0104 	add.w	r1, r3, #4
 800711a:	6029      	str	r1, [r5, #0]
 800711c:	d501      	bpl.n	8007122 <_printf_i+0xbe>
 800711e:	681e      	ldr	r6, [r3, #0]
 8007120:	e003      	b.n	800712a <_printf_i+0xc6>
 8007122:	0646      	lsls	r6, r0, #25
 8007124:	d5fb      	bpl.n	800711e <_printf_i+0xba>
 8007126:	f9b3 6000 	ldrsh.w	r6, [r3]
 800712a:	2e00      	cmp	r6, #0
 800712c:	da03      	bge.n	8007136 <_printf_i+0xd2>
 800712e:	232d      	movs	r3, #45	; 0x2d
 8007130:	4276      	negs	r6, r6
 8007132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007136:	485a      	ldr	r0, [pc, #360]	; (80072a0 <_printf_i+0x23c>)
 8007138:	230a      	movs	r3, #10
 800713a:	e012      	b.n	8007162 <_printf_i+0xfe>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	6820      	ldr	r0, [r4, #0]
 8007140:	1d19      	adds	r1, r3, #4
 8007142:	6029      	str	r1, [r5, #0]
 8007144:	0605      	lsls	r5, r0, #24
 8007146:	d501      	bpl.n	800714c <_printf_i+0xe8>
 8007148:	681e      	ldr	r6, [r3, #0]
 800714a:	e002      	b.n	8007152 <_printf_i+0xee>
 800714c:	0641      	lsls	r1, r0, #25
 800714e:	d5fb      	bpl.n	8007148 <_printf_i+0xe4>
 8007150:	881e      	ldrh	r6, [r3, #0]
 8007152:	4853      	ldr	r0, [pc, #332]	; (80072a0 <_printf_i+0x23c>)
 8007154:	2f6f      	cmp	r7, #111	; 0x6f
 8007156:	bf0c      	ite	eq
 8007158:	2308      	moveq	r3, #8
 800715a:	230a      	movne	r3, #10
 800715c:	2100      	movs	r1, #0
 800715e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007162:	6865      	ldr	r5, [r4, #4]
 8007164:	60a5      	str	r5, [r4, #8]
 8007166:	2d00      	cmp	r5, #0
 8007168:	bfa2      	ittt	ge
 800716a:	6821      	ldrge	r1, [r4, #0]
 800716c:	f021 0104 	bicge.w	r1, r1, #4
 8007170:	6021      	strge	r1, [r4, #0]
 8007172:	b90e      	cbnz	r6, 8007178 <_printf_i+0x114>
 8007174:	2d00      	cmp	r5, #0
 8007176:	d04b      	beq.n	8007210 <_printf_i+0x1ac>
 8007178:	4615      	mov	r5, r2
 800717a:	fbb6 f1f3 	udiv	r1, r6, r3
 800717e:	fb03 6711 	mls	r7, r3, r1, r6
 8007182:	5dc7      	ldrb	r7, [r0, r7]
 8007184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007188:	4637      	mov	r7, r6
 800718a:	42bb      	cmp	r3, r7
 800718c:	460e      	mov	r6, r1
 800718e:	d9f4      	bls.n	800717a <_printf_i+0x116>
 8007190:	2b08      	cmp	r3, #8
 8007192:	d10b      	bne.n	80071ac <_printf_i+0x148>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	07de      	lsls	r6, r3, #31
 8007198:	d508      	bpl.n	80071ac <_printf_i+0x148>
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	6861      	ldr	r1, [r4, #4]
 800719e:	4299      	cmp	r1, r3
 80071a0:	bfde      	ittt	le
 80071a2:	2330      	movle	r3, #48	; 0x30
 80071a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071ac:	1b52      	subs	r2, r2, r5
 80071ae:	6122      	str	r2, [r4, #16]
 80071b0:	f8cd a000 	str.w	sl, [sp]
 80071b4:	464b      	mov	r3, r9
 80071b6:	aa03      	add	r2, sp, #12
 80071b8:	4621      	mov	r1, r4
 80071ba:	4640      	mov	r0, r8
 80071bc:	f7ff fee4 	bl	8006f88 <_printf_common>
 80071c0:	3001      	adds	r0, #1
 80071c2:	d14a      	bne.n	800725a <_printf_i+0x1f6>
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	b004      	add	sp, #16
 80071ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	f043 0320 	orr.w	r3, r3, #32
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	4833      	ldr	r0, [pc, #204]	; (80072a4 <_printf_i+0x240>)
 80071d8:	2778      	movs	r7, #120	; 0x78
 80071da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	6829      	ldr	r1, [r5, #0]
 80071e2:	061f      	lsls	r7, r3, #24
 80071e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80071e8:	d402      	bmi.n	80071f0 <_printf_i+0x18c>
 80071ea:	065f      	lsls	r7, r3, #25
 80071ec:	bf48      	it	mi
 80071ee:	b2b6      	uxthmi	r6, r6
 80071f0:	07df      	lsls	r7, r3, #31
 80071f2:	bf48      	it	mi
 80071f4:	f043 0320 	orrmi.w	r3, r3, #32
 80071f8:	6029      	str	r1, [r5, #0]
 80071fa:	bf48      	it	mi
 80071fc:	6023      	strmi	r3, [r4, #0]
 80071fe:	b91e      	cbnz	r6, 8007208 <_printf_i+0x1a4>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	f023 0320 	bic.w	r3, r3, #32
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	2310      	movs	r3, #16
 800720a:	e7a7      	b.n	800715c <_printf_i+0xf8>
 800720c:	4824      	ldr	r0, [pc, #144]	; (80072a0 <_printf_i+0x23c>)
 800720e:	e7e4      	b.n	80071da <_printf_i+0x176>
 8007210:	4615      	mov	r5, r2
 8007212:	e7bd      	b.n	8007190 <_printf_i+0x12c>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	6826      	ldr	r6, [r4, #0]
 8007218:	6961      	ldr	r1, [r4, #20]
 800721a:	1d18      	adds	r0, r3, #4
 800721c:	6028      	str	r0, [r5, #0]
 800721e:	0635      	lsls	r5, r6, #24
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	d501      	bpl.n	8007228 <_printf_i+0x1c4>
 8007224:	6019      	str	r1, [r3, #0]
 8007226:	e002      	b.n	800722e <_printf_i+0x1ca>
 8007228:	0670      	lsls	r0, r6, #25
 800722a:	d5fb      	bpl.n	8007224 <_printf_i+0x1c0>
 800722c:	8019      	strh	r1, [r3, #0]
 800722e:	2300      	movs	r3, #0
 8007230:	6123      	str	r3, [r4, #16]
 8007232:	4615      	mov	r5, r2
 8007234:	e7bc      	b.n	80071b0 <_printf_i+0x14c>
 8007236:	682b      	ldr	r3, [r5, #0]
 8007238:	1d1a      	adds	r2, r3, #4
 800723a:	602a      	str	r2, [r5, #0]
 800723c:	681d      	ldr	r5, [r3, #0]
 800723e:	6862      	ldr	r2, [r4, #4]
 8007240:	2100      	movs	r1, #0
 8007242:	4628      	mov	r0, r5
 8007244:	f7f8 ffcc 	bl	80001e0 <memchr>
 8007248:	b108      	cbz	r0, 800724e <_printf_i+0x1ea>
 800724a:	1b40      	subs	r0, r0, r5
 800724c:	6060      	str	r0, [r4, #4]
 800724e:	6863      	ldr	r3, [r4, #4]
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	2300      	movs	r3, #0
 8007254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007258:	e7aa      	b.n	80071b0 <_printf_i+0x14c>
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	462a      	mov	r2, r5
 800725e:	4649      	mov	r1, r9
 8007260:	4640      	mov	r0, r8
 8007262:	47d0      	blx	sl
 8007264:	3001      	adds	r0, #1
 8007266:	d0ad      	beq.n	80071c4 <_printf_i+0x160>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	079b      	lsls	r3, r3, #30
 800726c:	d413      	bmi.n	8007296 <_printf_i+0x232>
 800726e:	68e0      	ldr	r0, [r4, #12]
 8007270:	9b03      	ldr	r3, [sp, #12]
 8007272:	4298      	cmp	r0, r3
 8007274:	bfb8      	it	lt
 8007276:	4618      	movlt	r0, r3
 8007278:	e7a6      	b.n	80071c8 <_printf_i+0x164>
 800727a:	2301      	movs	r3, #1
 800727c:	4632      	mov	r2, r6
 800727e:	4649      	mov	r1, r9
 8007280:	4640      	mov	r0, r8
 8007282:	47d0      	blx	sl
 8007284:	3001      	adds	r0, #1
 8007286:	d09d      	beq.n	80071c4 <_printf_i+0x160>
 8007288:	3501      	adds	r5, #1
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	9903      	ldr	r1, [sp, #12]
 800728e:	1a5b      	subs	r3, r3, r1
 8007290:	42ab      	cmp	r3, r5
 8007292:	dcf2      	bgt.n	800727a <_printf_i+0x216>
 8007294:	e7eb      	b.n	800726e <_printf_i+0x20a>
 8007296:	2500      	movs	r5, #0
 8007298:	f104 0619 	add.w	r6, r4, #25
 800729c:	e7f5      	b.n	800728a <_printf_i+0x226>
 800729e:	bf00      	nop
 80072a0:	08009b3a 	.word	0x08009b3a
 80072a4:	08009b4b 	.word	0x08009b4b

080072a8 <std>:
 80072a8:	2300      	movs	r3, #0
 80072aa:	b510      	push	{r4, lr}
 80072ac:	4604      	mov	r4, r0
 80072ae:	e9c0 3300 	strd	r3, r3, [r0]
 80072b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072b6:	6083      	str	r3, [r0, #8]
 80072b8:	8181      	strh	r1, [r0, #12]
 80072ba:	6643      	str	r3, [r0, #100]	; 0x64
 80072bc:	81c2      	strh	r2, [r0, #14]
 80072be:	6183      	str	r3, [r0, #24]
 80072c0:	4619      	mov	r1, r3
 80072c2:	2208      	movs	r2, #8
 80072c4:	305c      	adds	r0, #92	; 0x5c
 80072c6:	f000 f914 	bl	80074f2 <memset>
 80072ca:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <std+0x58>)
 80072cc:	6263      	str	r3, [r4, #36]	; 0x24
 80072ce:	4b0d      	ldr	r3, [pc, #52]	; (8007304 <std+0x5c>)
 80072d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80072d2:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <std+0x60>)
 80072d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <std+0x64>)
 80072d8:	6323      	str	r3, [r4, #48]	; 0x30
 80072da:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <std+0x68>)
 80072dc:	6224      	str	r4, [r4, #32]
 80072de:	429c      	cmp	r4, r3
 80072e0:	d006      	beq.n	80072f0 <std+0x48>
 80072e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80072e6:	4294      	cmp	r4, r2
 80072e8:	d002      	beq.n	80072f0 <std+0x48>
 80072ea:	33d0      	adds	r3, #208	; 0xd0
 80072ec:	429c      	cmp	r4, r3
 80072ee:	d105      	bne.n	80072fc <std+0x54>
 80072f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f8:	f000 b9ce 	b.w	8007698 <__retarget_lock_init_recursive>
 80072fc:	bd10      	pop	{r4, pc}
 80072fe:	bf00      	nop
 8007300:	0800746d 	.word	0x0800746d
 8007304:	0800748f 	.word	0x0800748f
 8007308:	080074c7 	.word	0x080074c7
 800730c:	080074eb 	.word	0x080074eb
 8007310:	200043b4 	.word	0x200043b4

08007314 <stdio_exit_handler>:
 8007314:	4a02      	ldr	r2, [pc, #8]	; (8007320 <stdio_exit_handler+0xc>)
 8007316:	4903      	ldr	r1, [pc, #12]	; (8007324 <stdio_exit_handler+0x10>)
 8007318:	4803      	ldr	r0, [pc, #12]	; (8007328 <stdio_exit_handler+0x14>)
 800731a:	f000 b869 	b.w	80073f0 <_fwalk_sglue>
 800731e:	bf00      	nop
 8007320:	20000018 	.word	0x20000018
 8007324:	08009069 	.word	0x08009069
 8007328:	20000024 	.word	0x20000024

0800732c <cleanup_stdio>:
 800732c:	6841      	ldr	r1, [r0, #4]
 800732e:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <cleanup_stdio+0x34>)
 8007330:	4299      	cmp	r1, r3
 8007332:	b510      	push	{r4, lr}
 8007334:	4604      	mov	r4, r0
 8007336:	d001      	beq.n	800733c <cleanup_stdio+0x10>
 8007338:	f001 fe96 	bl	8009068 <_fflush_r>
 800733c:	68a1      	ldr	r1, [r4, #8]
 800733e:	4b09      	ldr	r3, [pc, #36]	; (8007364 <cleanup_stdio+0x38>)
 8007340:	4299      	cmp	r1, r3
 8007342:	d002      	beq.n	800734a <cleanup_stdio+0x1e>
 8007344:	4620      	mov	r0, r4
 8007346:	f001 fe8f 	bl	8009068 <_fflush_r>
 800734a:	68e1      	ldr	r1, [r4, #12]
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <cleanup_stdio+0x3c>)
 800734e:	4299      	cmp	r1, r3
 8007350:	d004      	beq.n	800735c <cleanup_stdio+0x30>
 8007352:	4620      	mov	r0, r4
 8007354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007358:	f001 be86 	b.w	8009068 <_fflush_r>
 800735c:	bd10      	pop	{r4, pc}
 800735e:	bf00      	nop
 8007360:	200043b4 	.word	0x200043b4
 8007364:	2000441c 	.word	0x2000441c
 8007368:	20004484 	.word	0x20004484

0800736c <global_stdio_init.part.0>:
 800736c:	b510      	push	{r4, lr}
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <global_stdio_init.part.0+0x30>)
 8007370:	4c0b      	ldr	r4, [pc, #44]	; (80073a0 <global_stdio_init.part.0+0x34>)
 8007372:	4a0c      	ldr	r2, [pc, #48]	; (80073a4 <global_stdio_init.part.0+0x38>)
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	4620      	mov	r0, r4
 8007378:	2200      	movs	r2, #0
 800737a:	2104      	movs	r1, #4
 800737c:	f7ff ff94 	bl	80072a8 <std>
 8007380:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007384:	2201      	movs	r2, #1
 8007386:	2109      	movs	r1, #9
 8007388:	f7ff ff8e 	bl	80072a8 <std>
 800738c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007390:	2202      	movs	r2, #2
 8007392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007396:	2112      	movs	r1, #18
 8007398:	f7ff bf86 	b.w	80072a8 <std>
 800739c:	200044ec 	.word	0x200044ec
 80073a0:	200043b4 	.word	0x200043b4
 80073a4:	08007315 	.word	0x08007315

080073a8 <__sfp_lock_acquire>:
 80073a8:	4801      	ldr	r0, [pc, #4]	; (80073b0 <__sfp_lock_acquire+0x8>)
 80073aa:	f000 b976 	b.w	800769a <__retarget_lock_acquire_recursive>
 80073ae:	bf00      	nop
 80073b0:	200044f5 	.word	0x200044f5

080073b4 <__sfp_lock_release>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__sfp_lock_release+0x8>)
 80073b6:	f000 b971 	b.w	800769c <__retarget_lock_release_recursive>
 80073ba:	bf00      	nop
 80073bc:	200044f5 	.word	0x200044f5

080073c0 <__sinit>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	4604      	mov	r4, r0
 80073c4:	f7ff fff0 	bl	80073a8 <__sfp_lock_acquire>
 80073c8:	6a23      	ldr	r3, [r4, #32]
 80073ca:	b11b      	cbz	r3, 80073d4 <__sinit+0x14>
 80073cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d0:	f7ff bff0 	b.w	80073b4 <__sfp_lock_release>
 80073d4:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <__sinit+0x28>)
 80073d6:	6223      	str	r3, [r4, #32]
 80073d8:	4b04      	ldr	r3, [pc, #16]	; (80073ec <__sinit+0x2c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1f5      	bne.n	80073cc <__sinit+0xc>
 80073e0:	f7ff ffc4 	bl	800736c <global_stdio_init.part.0>
 80073e4:	e7f2      	b.n	80073cc <__sinit+0xc>
 80073e6:	bf00      	nop
 80073e8:	0800732d 	.word	0x0800732d
 80073ec:	200044ec 	.word	0x200044ec

080073f0 <_fwalk_sglue>:
 80073f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	4607      	mov	r7, r0
 80073f6:	4688      	mov	r8, r1
 80073f8:	4614      	mov	r4, r2
 80073fa:	2600      	movs	r6, #0
 80073fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007400:	f1b9 0901 	subs.w	r9, r9, #1
 8007404:	d505      	bpl.n	8007412 <_fwalk_sglue+0x22>
 8007406:	6824      	ldr	r4, [r4, #0]
 8007408:	2c00      	cmp	r4, #0
 800740a:	d1f7      	bne.n	80073fc <_fwalk_sglue+0xc>
 800740c:	4630      	mov	r0, r6
 800740e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d907      	bls.n	8007428 <_fwalk_sglue+0x38>
 8007418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800741c:	3301      	adds	r3, #1
 800741e:	d003      	beq.n	8007428 <_fwalk_sglue+0x38>
 8007420:	4629      	mov	r1, r5
 8007422:	4638      	mov	r0, r7
 8007424:	47c0      	blx	r8
 8007426:	4306      	orrs	r6, r0
 8007428:	3568      	adds	r5, #104	; 0x68
 800742a:	e7e9      	b.n	8007400 <_fwalk_sglue+0x10>

0800742c <siprintf>:
 800742c:	b40e      	push	{r1, r2, r3}
 800742e:	b500      	push	{lr}
 8007430:	b09c      	sub	sp, #112	; 0x70
 8007432:	ab1d      	add	r3, sp, #116	; 0x74
 8007434:	9002      	str	r0, [sp, #8]
 8007436:	9006      	str	r0, [sp, #24]
 8007438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800743c:	4809      	ldr	r0, [pc, #36]	; (8007464 <siprintf+0x38>)
 800743e:	9107      	str	r1, [sp, #28]
 8007440:	9104      	str	r1, [sp, #16]
 8007442:	4909      	ldr	r1, [pc, #36]	; (8007468 <siprintf+0x3c>)
 8007444:	f853 2b04 	ldr.w	r2, [r3], #4
 8007448:	9105      	str	r1, [sp, #20]
 800744a:	6800      	ldr	r0, [r0, #0]
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	a902      	add	r1, sp, #8
 8007450:	f001 fc86 	bl	8008d60 <_svfiprintf_r>
 8007454:	9b02      	ldr	r3, [sp, #8]
 8007456:	2200      	movs	r2, #0
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	b01c      	add	sp, #112	; 0x70
 800745c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007460:	b003      	add	sp, #12
 8007462:	4770      	bx	lr
 8007464:	20000070 	.word	0x20000070
 8007468:	ffff0208 	.word	0xffff0208

0800746c <__sread>:
 800746c:	b510      	push	{r4, lr}
 800746e:	460c      	mov	r4, r1
 8007470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007474:	f000 f8c2 	bl	80075fc <_read_r>
 8007478:	2800      	cmp	r0, #0
 800747a:	bfab      	itete	ge
 800747c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800747e:	89a3      	ldrhlt	r3, [r4, #12]
 8007480:	181b      	addge	r3, r3, r0
 8007482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007486:	bfac      	ite	ge
 8007488:	6563      	strge	r3, [r4, #84]	; 0x54
 800748a:	81a3      	strhlt	r3, [r4, #12]
 800748c:	bd10      	pop	{r4, pc}

0800748e <__swrite>:
 800748e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007492:	461f      	mov	r7, r3
 8007494:	898b      	ldrh	r3, [r1, #12]
 8007496:	05db      	lsls	r3, r3, #23
 8007498:	4605      	mov	r5, r0
 800749a:	460c      	mov	r4, r1
 800749c:	4616      	mov	r6, r2
 800749e:	d505      	bpl.n	80074ac <__swrite+0x1e>
 80074a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a4:	2302      	movs	r3, #2
 80074a6:	2200      	movs	r2, #0
 80074a8:	f000 f896 	bl	80075d8 <_lseek_r>
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074b6:	81a3      	strh	r3, [r4, #12]
 80074b8:	4632      	mov	r2, r6
 80074ba:	463b      	mov	r3, r7
 80074bc:	4628      	mov	r0, r5
 80074be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074c2:	f000 b8ad 	b.w	8007620 <_write_r>

080074c6 <__sseek>:
 80074c6:	b510      	push	{r4, lr}
 80074c8:	460c      	mov	r4, r1
 80074ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ce:	f000 f883 	bl	80075d8 <_lseek_r>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	bf15      	itete	ne
 80074d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074e2:	81a3      	strheq	r3, [r4, #12]
 80074e4:	bf18      	it	ne
 80074e6:	81a3      	strhne	r3, [r4, #12]
 80074e8:	bd10      	pop	{r4, pc}

080074ea <__sclose>:
 80074ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ee:	f000 b80d 	b.w	800750c <_close_r>

080074f2 <memset>:
 80074f2:	4402      	add	r2, r0
 80074f4:	4603      	mov	r3, r0
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d100      	bne.n	80074fc <memset+0xa>
 80074fa:	4770      	bx	lr
 80074fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007500:	e7f9      	b.n	80074f6 <memset+0x4>
	...

08007504 <_localeconv_r>:
 8007504:	4800      	ldr	r0, [pc, #0]	; (8007508 <_localeconv_r+0x4>)
 8007506:	4770      	bx	lr
 8007508:	20000164 	.word	0x20000164

0800750c <_close_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4d06      	ldr	r5, [pc, #24]	; (8007528 <_close_r+0x1c>)
 8007510:	2300      	movs	r3, #0
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	602b      	str	r3, [r5, #0]
 8007518:	f7fa fd13 	bl	8001f42 <_close>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_close_r+0x1a>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	b103      	cbz	r3, 8007526 <_close_r+0x1a>
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	200044f0 	.word	0x200044f0

0800752c <_reclaim_reent>:
 800752c:	4b29      	ldr	r3, [pc, #164]	; (80075d4 <_reclaim_reent+0xa8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4283      	cmp	r3, r0
 8007532:	b570      	push	{r4, r5, r6, lr}
 8007534:	4604      	mov	r4, r0
 8007536:	d04b      	beq.n	80075d0 <_reclaim_reent+0xa4>
 8007538:	69c3      	ldr	r3, [r0, #28]
 800753a:	b143      	cbz	r3, 800754e <_reclaim_reent+0x22>
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d144      	bne.n	80075cc <_reclaim_reent+0xa0>
 8007542:	69e3      	ldr	r3, [r4, #28]
 8007544:	6819      	ldr	r1, [r3, #0]
 8007546:	b111      	cbz	r1, 800754e <_reclaim_reent+0x22>
 8007548:	4620      	mov	r0, r4
 800754a:	f000 ff33 	bl	80083b4 <_free_r>
 800754e:	6961      	ldr	r1, [r4, #20]
 8007550:	b111      	cbz	r1, 8007558 <_reclaim_reent+0x2c>
 8007552:	4620      	mov	r0, r4
 8007554:	f000 ff2e 	bl	80083b4 <_free_r>
 8007558:	69e1      	ldr	r1, [r4, #28]
 800755a:	b111      	cbz	r1, 8007562 <_reclaim_reent+0x36>
 800755c:	4620      	mov	r0, r4
 800755e:	f000 ff29 	bl	80083b4 <_free_r>
 8007562:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007564:	b111      	cbz	r1, 800756c <_reclaim_reent+0x40>
 8007566:	4620      	mov	r0, r4
 8007568:	f000 ff24 	bl	80083b4 <_free_r>
 800756c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800756e:	b111      	cbz	r1, 8007576 <_reclaim_reent+0x4a>
 8007570:	4620      	mov	r0, r4
 8007572:	f000 ff1f 	bl	80083b4 <_free_r>
 8007576:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007578:	b111      	cbz	r1, 8007580 <_reclaim_reent+0x54>
 800757a:	4620      	mov	r0, r4
 800757c:	f000 ff1a 	bl	80083b4 <_free_r>
 8007580:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007582:	b111      	cbz	r1, 800758a <_reclaim_reent+0x5e>
 8007584:	4620      	mov	r0, r4
 8007586:	f000 ff15 	bl	80083b4 <_free_r>
 800758a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800758c:	b111      	cbz	r1, 8007594 <_reclaim_reent+0x68>
 800758e:	4620      	mov	r0, r4
 8007590:	f000 ff10 	bl	80083b4 <_free_r>
 8007594:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007596:	b111      	cbz	r1, 800759e <_reclaim_reent+0x72>
 8007598:	4620      	mov	r0, r4
 800759a:	f000 ff0b 	bl	80083b4 <_free_r>
 800759e:	6a23      	ldr	r3, [r4, #32]
 80075a0:	b1b3      	cbz	r3, 80075d0 <_reclaim_reent+0xa4>
 80075a2:	4620      	mov	r0, r4
 80075a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075a8:	4718      	bx	r3
 80075aa:	5949      	ldr	r1, [r1, r5]
 80075ac:	b941      	cbnz	r1, 80075c0 <_reclaim_reent+0x94>
 80075ae:	3504      	adds	r5, #4
 80075b0:	69e3      	ldr	r3, [r4, #28]
 80075b2:	2d80      	cmp	r5, #128	; 0x80
 80075b4:	68d9      	ldr	r1, [r3, #12]
 80075b6:	d1f8      	bne.n	80075aa <_reclaim_reent+0x7e>
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 fefb 	bl	80083b4 <_free_r>
 80075be:	e7c0      	b.n	8007542 <_reclaim_reent+0x16>
 80075c0:	680e      	ldr	r6, [r1, #0]
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 fef6 	bl	80083b4 <_free_r>
 80075c8:	4631      	mov	r1, r6
 80075ca:	e7ef      	b.n	80075ac <_reclaim_reent+0x80>
 80075cc:	2500      	movs	r5, #0
 80075ce:	e7ef      	b.n	80075b0 <_reclaim_reent+0x84>
 80075d0:	bd70      	pop	{r4, r5, r6, pc}
 80075d2:	bf00      	nop
 80075d4:	20000070 	.word	0x20000070

080075d8 <_lseek_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d07      	ldr	r5, [pc, #28]	; (80075f8 <_lseek_r+0x20>)
 80075dc:	4604      	mov	r4, r0
 80075de:	4608      	mov	r0, r1
 80075e0:	4611      	mov	r1, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	602a      	str	r2, [r5, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	f7fa fcd2 	bl	8001f90 <_lseek>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_lseek_r+0x1e>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_lseek_r+0x1e>
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	200044f0 	.word	0x200044f0

080075fc <_read_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4d07      	ldr	r5, [pc, #28]	; (800761c <_read_r+0x20>)
 8007600:	4604      	mov	r4, r0
 8007602:	4608      	mov	r0, r1
 8007604:	4611      	mov	r1, r2
 8007606:	2200      	movs	r2, #0
 8007608:	602a      	str	r2, [r5, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	f7fa fc60 	bl	8001ed0 <_read>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_read_r+0x1e>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	b103      	cbz	r3, 800761a <_read_r+0x1e>
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	200044f0 	.word	0x200044f0

08007620 <_write_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d07      	ldr	r5, [pc, #28]	; (8007640 <_write_r+0x20>)
 8007624:	4604      	mov	r4, r0
 8007626:	4608      	mov	r0, r1
 8007628:	4611      	mov	r1, r2
 800762a:	2200      	movs	r2, #0
 800762c:	602a      	str	r2, [r5, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	f7fa fc6b 	bl	8001f0a <_write>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_write_r+0x1e>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_write_r+0x1e>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	200044f0 	.word	0x200044f0

08007644 <__errno>:
 8007644:	4b01      	ldr	r3, [pc, #4]	; (800764c <__errno+0x8>)
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000070 	.word	0x20000070

08007650 <__libc_init_array>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4d0d      	ldr	r5, [pc, #52]	; (8007688 <__libc_init_array+0x38>)
 8007654:	4c0d      	ldr	r4, [pc, #52]	; (800768c <__libc_init_array+0x3c>)
 8007656:	1b64      	subs	r4, r4, r5
 8007658:	10a4      	asrs	r4, r4, #2
 800765a:	2600      	movs	r6, #0
 800765c:	42a6      	cmp	r6, r4
 800765e:	d109      	bne.n	8007674 <__libc_init_array+0x24>
 8007660:	4d0b      	ldr	r5, [pc, #44]	; (8007690 <__libc_init_array+0x40>)
 8007662:	4c0c      	ldr	r4, [pc, #48]	; (8007694 <__libc_init_array+0x44>)
 8007664:	f002 f9bc 	bl	80099e0 <_init>
 8007668:	1b64      	subs	r4, r4, r5
 800766a:	10a4      	asrs	r4, r4, #2
 800766c:	2600      	movs	r6, #0
 800766e:	42a6      	cmp	r6, r4
 8007670:	d105      	bne.n	800767e <__libc_init_array+0x2e>
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	f855 3b04 	ldr.w	r3, [r5], #4
 8007678:	4798      	blx	r3
 800767a:	3601      	adds	r6, #1
 800767c:	e7ee      	b.n	800765c <__libc_init_array+0xc>
 800767e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007682:	4798      	blx	r3
 8007684:	3601      	adds	r6, #1
 8007686:	e7f2      	b.n	800766e <__libc_init_array+0x1e>
 8007688:	08009ea4 	.word	0x08009ea4
 800768c:	08009ea4 	.word	0x08009ea4
 8007690:	08009ea4 	.word	0x08009ea4
 8007694:	08009ea8 	.word	0x08009ea8

08007698 <__retarget_lock_init_recursive>:
 8007698:	4770      	bx	lr

0800769a <__retarget_lock_acquire_recursive>:
 800769a:	4770      	bx	lr

0800769c <__retarget_lock_release_recursive>:
 800769c:	4770      	bx	lr

0800769e <memcpy>:
 800769e:	440a      	add	r2, r1
 80076a0:	4291      	cmp	r1, r2
 80076a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a6:	d100      	bne.n	80076aa <memcpy+0xc>
 80076a8:	4770      	bx	lr
 80076aa:	b510      	push	{r4, lr}
 80076ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b4:	4291      	cmp	r1, r2
 80076b6:	d1f9      	bne.n	80076ac <memcpy+0xe>
 80076b8:	bd10      	pop	{r4, pc}

080076ba <quorem>:
 80076ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076be:	6903      	ldr	r3, [r0, #16]
 80076c0:	690c      	ldr	r4, [r1, #16]
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	4607      	mov	r7, r0
 80076c6:	db7e      	blt.n	80077c6 <quorem+0x10c>
 80076c8:	3c01      	subs	r4, #1
 80076ca:	f101 0814 	add.w	r8, r1, #20
 80076ce:	f100 0514 	add.w	r5, r0, #20
 80076d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076e0:	3301      	adds	r3, #1
 80076e2:	429a      	cmp	r2, r3
 80076e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80076f0:	d331      	bcc.n	8007756 <quorem+0x9c>
 80076f2:	f04f 0e00 	mov.w	lr, #0
 80076f6:	4640      	mov	r0, r8
 80076f8:	46ac      	mov	ip, r5
 80076fa:	46f2      	mov	sl, lr
 80076fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007700:	b293      	uxth	r3, r2
 8007702:	fb06 e303 	mla	r3, r6, r3, lr
 8007706:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800770a:	0c1a      	lsrs	r2, r3, #16
 800770c:	b29b      	uxth	r3, r3
 800770e:	ebaa 0303 	sub.w	r3, sl, r3
 8007712:	f8dc a000 	ldr.w	sl, [ip]
 8007716:	fa13 f38a 	uxtah	r3, r3, sl
 800771a:	fb06 220e 	mla	r2, r6, lr, r2
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007726:	b292      	uxth	r2, r2
 8007728:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800772c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007730:	f8bd 3000 	ldrh.w	r3, [sp]
 8007734:	4581      	cmp	r9, r0
 8007736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800773a:	f84c 3b04 	str.w	r3, [ip], #4
 800773e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007742:	d2db      	bcs.n	80076fc <quorem+0x42>
 8007744:	f855 300b 	ldr.w	r3, [r5, fp]
 8007748:	b92b      	cbnz	r3, 8007756 <quorem+0x9c>
 800774a:	9b01      	ldr	r3, [sp, #4]
 800774c:	3b04      	subs	r3, #4
 800774e:	429d      	cmp	r5, r3
 8007750:	461a      	mov	r2, r3
 8007752:	d32c      	bcc.n	80077ae <quorem+0xf4>
 8007754:	613c      	str	r4, [r7, #16]
 8007756:	4638      	mov	r0, r7
 8007758:	f001 f9a8 	bl	8008aac <__mcmp>
 800775c:	2800      	cmp	r0, #0
 800775e:	db22      	blt.n	80077a6 <quorem+0xec>
 8007760:	3601      	adds	r6, #1
 8007762:	4629      	mov	r1, r5
 8007764:	2000      	movs	r0, #0
 8007766:	f858 2b04 	ldr.w	r2, [r8], #4
 800776a:	f8d1 c000 	ldr.w	ip, [r1]
 800776e:	b293      	uxth	r3, r2
 8007770:	1ac3      	subs	r3, r0, r3
 8007772:	0c12      	lsrs	r2, r2, #16
 8007774:	fa13 f38c 	uxtah	r3, r3, ip
 8007778:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800777c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007780:	b29b      	uxth	r3, r3
 8007782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007786:	45c1      	cmp	r9, r8
 8007788:	f841 3b04 	str.w	r3, [r1], #4
 800778c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007790:	d2e9      	bcs.n	8007766 <quorem+0xac>
 8007792:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800779a:	b922      	cbnz	r2, 80077a6 <quorem+0xec>
 800779c:	3b04      	subs	r3, #4
 800779e:	429d      	cmp	r5, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	d30a      	bcc.n	80077ba <quorem+0x100>
 80077a4:	613c      	str	r4, [r7, #16]
 80077a6:	4630      	mov	r0, r6
 80077a8:	b003      	add	sp, #12
 80077aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ae:	6812      	ldr	r2, [r2, #0]
 80077b0:	3b04      	subs	r3, #4
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	d1ce      	bne.n	8007754 <quorem+0x9a>
 80077b6:	3c01      	subs	r4, #1
 80077b8:	e7c9      	b.n	800774e <quorem+0x94>
 80077ba:	6812      	ldr	r2, [r2, #0]
 80077bc:	3b04      	subs	r3, #4
 80077be:	2a00      	cmp	r2, #0
 80077c0:	d1f0      	bne.n	80077a4 <quorem+0xea>
 80077c2:	3c01      	subs	r4, #1
 80077c4:	e7eb      	b.n	800779e <quorem+0xe4>
 80077c6:	2000      	movs	r0, #0
 80077c8:	e7ee      	b.n	80077a8 <quorem+0xee>
 80077ca:	0000      	movs	r0, r0
 80077cc:	0000      	movs	r0, r0
	...

080077d0 <_dtoa_r>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	ed2d 8b04 	vpush	{d8-d9}
 80077d8:	69c5      	ldr	r5, [r0, #28]
 80077da:	b093      	sub	sp, #76	; 0x4c
 80077dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80077e0:	ec57 6b10 	vmov	r6, r7, d0
 80077e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077e8:	9107      	str	r1, [sp, #28]
 80077ea:	4604      	mov	r4, r0
 80077ec:	920a      	str	r2, [sp, #40]	; 0x28
 80077ee:	930d      	str	r3, [sp, #52]	; 0x34
 80077f0:	b975      	cbnz	r5, 8007810 <_dtoa_r+0x40>
 80077f2:	2010      	movs	r0, #16
 80077f4:	f000 fe2a 	bl	800844c <malloc>
 80077f8:	4602      	mov	r2, r0
 80077fa:	61e0      	str	r0, [r4, #28]
 80077fc:	b920      	cbnz	r0, 8007808 <_dtoa_r+0x38>
 80077fe:	4bae      	ldr	r3, [pc, #696]	; (8007ab8 <_dtoa_r+0x2e8>)
 8007800:	21ef      	movs	r1, #239	; 0xef
 8007802:	48ae      	ldr	r0, [pc, #696]	; (8007abc <_dtoa_r+0x2ec>)
 8007804:	f001 fc82 	bl	800910c <__assert_func>
 8007808:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800780c:	6005      	str	r5, [r0, #0]
 800780e:	60c5      	str	r5, [r0, #12]
 8007810:	69e3      	ldr	r3, [r4, #28]
 8007812:	6819      	ldr	r1, [r3, #0]
 8007814:	b151      	cbz	r1, 800782c <_dtoa_r+0x5c>
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	604a      	str	r2, [r1, #4]
 800781a:	2301      	movs	r3, #1
 800781c:	4093      	lsls	r3, r2
 800781e:	608b      	str	r3, [r1, #8]
 8007820:	4620      	mov	r0, r4
 8007822:	f000 ff07 	bl	8008634 <_Bfree>
 8007826:	69e3      	ldr	r3, [r4, #28]
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	1e3b      	subs	r3, r7, #0
 800782e:	bfbb      	ittet	lt
 8007830:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007834:	9303      	strlt	r3, [sp, #12]
 8007836:	2300      	movge	r3, #0
 8007838:	2201      	movlt	r2, #1
 800783a:	bfac      	ite	ge
 800783c:	f8c8 3000 	strge.w	r3, [r8]
 8007840:	f8c8 2000 	strlt.w	r2, [r8]
 8007844:	4b9e      	ldr	r3, [pc, #632]	; (8007ac0 <_dtoa_r+0x2f0>)
 8007846:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800784a:	ea33 0308 	bics.w	r3, r3, r8
 800784e:	d11b      	bne.n	8007888 <_dtoa_r+0xb8>
 8007850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007852:	f242 730f 	movw	r3, #9999	; 0x270f
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800785c:	4333      	orrs	r3, r6
 800785e:	f000 8593 	beq.w	8008388 <_dtoa_r+0xbb8>
 8007862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007864:	b963      	cbnz	r3, 8007880 <_dtoa_r+0xb0>
 8007866:	4b97      	ldr	r3, [pc, #604]	; (8007ac4 <_dtoa_r+0x2f4>)
 8007868:	e027      	b.n	80078ba <_dtoa_r+0xea>
 800786a:	4b97      	ldr	r3, [pc, #604]	; (8007ac8 <_dtoa_r+0x2f8>)
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	9800      	ldr	r0, [sp, #0]
 8007876:	b013      	add	sp, #76	; 0x4c
 8007878:	ecbd 8b04 	vpop	{d8-d9}
 800787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	4b90      	ldr	r3, [pc, #576]	; (8007ac4 <_dtoa_r+0x2f4>)
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	3303      	adds	r3, #3
 8007886:	e7f3      	b.n	8007870 <_dtoa_r+0xa0>
 8007888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	ec51 0b17 	vmov	r0, r1, d7
 8007892:	eeb0 8a47 	vmov.f32	s16, s14
 8007896:	eef0 8a67 	vmov.f32	s17, s15
 800789a:	2300      	movs	r3, #0
 800789c:	f7f9 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80078a0:	4681      	mov	r9, r0
 80078a2:	b160      	cbz	r0, 80078be <_dtoa_r+0xee>
 80078a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078a6:	2301      	movs	r3, #1
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8568 	beq.w	8008382 <_dtoa_r+0xbb2>
 80078b2:	4b86      	ldr	r3, [pc, #536]	; (8007acc <_dtoa_r+0x2fc>)
 80078b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	e7da      	b.n	8007874 <_dtoa_r+0xa4>
 80078be:	aa10      	add	r2, sp, #64	; 0x40
 80078c0:	a911      	add	r1, sp, #68	; 0x44
 80078c2:	4620      	mov	r0, r4
 80078c4:	eeb0 0a48 	vmov.f32	s0, s16
 80078c8:	eef0 0a68 	vmov.f32	s1, s17
 80078cc:	f001 f994 	bl	8008bf8 <__d2b>
 80078d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80078d4:	4682      	mov	sl, r0
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	d07f      	beq.n	80079da <_dtoa_r+0x20a>
 80078da:	ee18 3a90 	vmov	r3, s17
 80078de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80078e6:	ec51 0b18 	vmov	r0, r1, d8
 80078ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80078ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80078f6:	4619      	mov	r1, r3
 80078f8:	2200      	movs	r2, #0
 80078fa:	4b75      	ldr	r3, [pc, #468]	; (8007ad0 <_dtoa_r+0x300>)
 80078fc:	f7f8 fccc 	bl	8000298 <__aeabi_dsub>
 8007900:	a367      	add	r3, pc, #412	; (adr r3, 8007aa0 <_dtoa_r+0x2d0>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f8 fe7f 	bl	8000608 <__aeabi_dmul>
 800790a:	a367      	add	r3, pc, #412	; (adr r3, 8007aa8 <_dtoa_r+0x2d8>)
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f7f8 fcc4 	bl	800029c <__adddf3>
 8007914:	4606      	mov	r6, r0
 8007916:	4628      	mov	r0, r5
 8007918:	460f      	mov	r7, r1
 800791a:	f7f8 fe0b 	bl	8000534 <__aeabi_i2d>
 800791e:	a364      	add	r3, pc, #400	; (adr r3, 8007ab0 <_dtoa_r+0x2e0>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f7f8 fe70 	bl	8000608 <__aeabi_dmul>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	f7f8 fcb4 	bl	800029c <__adddf3>
 8007934:	4606      	mov	r6, r0
 8007936:	460f      	mov	r7, r1
 8007938:	f7f9 f916 	bl	8000b68 <__aeabi_d2iz>
 800793c:	2200      	movs	r2, #0
 800793e:	4683      	mov	fp, r0
 8007940:	2300      	movs	r3, #0
 8007942:	4630      	mov	r0, r6
 8007944:	4639      	mov	r1, r7
 8007946:	f7f9 f8d1 	bl	8000aec <__aeabi_dcmplt>
 800794a:	b148      	cbz	r0, 8007960 <_dtoa_r+0x190>
 800794c:	4658      	mov	r0, fp
 800794e:	f7f8 fdf1 	bl	8000534 <__aeabi_i2d>
 8007952:	4632      	mov	r2, r6
 8007954:	463b      	mov	r3, r7
 8007956:	f7f9 f8bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800795a:	b908      	cbnz	r0, 8007960 <_dtoa_r+0x190>
 800795c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007960:	f1bb 0f16 	cmp.w	fp, #22
 8007964:	d857      	bhi.n	8007a16 <_dtoa_r+0x246>
 8007966:	4b5b      	ldr	r3, [pc, #364]	; (8007ad4 <_dtoa_r+0x304>)
 8007968:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	ec51 0b18 	vmov	r0, r1, d8
 8007974:	f7f9 f8ba 	bl	8000aec <__aeabi_dcmplt>
 8007978:	2800      	cmp	r0, #0
 800797a:	d04e      	beq.n	8007a1a <_dtoa_r+0x24a>
 800797c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007980:	2300      	movs	r3, #0
 8007982:	930c      	str	r3, [sp, #48]	; 0x30
 8007984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007986:	1b5b      	subs	r3, r3, r5
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	bf45      	ittet	mi
 800798c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007990:	9305      	strmi	r3, [sp, #20]
 8007992:	2300      	movpl	r3, #0
 8007994:	2300      	movmi	r3, #0
 8007996:	9206      	str	r2, [sp, #24]
 8007998:	bf54      	ite	pl
 800799a:	9305      	strpl	r3, [sp, #20]
 800799c:	9306      	strmi	r3, [sp, #24]
 800799e:	f1bb 0f00 	cmp.w	fp, #0
 80079a2:	db3c      	blt.n	8007a1e <_dtoa_r+0x24e>
 80079a4:	9b06      	ldr	r3, [sp, #24]
 80079a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80079aa:	445b      	add	r3, fp
 80079ac:	9306      	str	r3, [sp, #24]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9308      	str	r3, [sp, #32]
 80079b2:	9b07      	ldr	r3, [sp, #28]
 80079b4:	2b09      	cmp	r3, #9
 80079b6:	d868      	bhi.n	8007a8a <_dtoa_r+0x2ba>
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	bfc4      	itt	gt
 80079bc:	3b04      	subgt	r3, #4
 80079be:	9307      	strgt	r3, [sp, #28]
 80079c0:	9b07      	ldr	r3, [sp, #28]
 80079c2:	f1a3 0302 	sub.w	r3, r3, #2
 80079c6:	bfcc      	ite	gt
 80079c8:	2500      	movgt	r5, #0
 80079ca:	2501      	movle	r5, #1
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	f200 8085 	bhi.w	8007adc <_dtoa_r+0x30c>
 80079d2:	e8df f003 	tbb	[pc, r3]
 80079d6:	3b2e      	.short	0x3b2e
 80079d8:	5839      	.short	0x5839
 80079da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80079de:	441d      	add	r5, r3
 80079e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	bfc1      	itttt	gt
 80079e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80079f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80079f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80079f8:	bfd6      	itet	le
 80079fa:	f1c3 0320 	rsble	r3, r3, #32
 80079fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a02:	fa06 f003 	lslle.w	r0, r6, r3
 8007a06:	f7f8 fd85 	bl	8000514 <__aeabi_ui2d>
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007a10:	3d01      	subs	r5, #1
 8007a12:	920e      	str	r2, [sp, #56]	; 0x38
 8007a14:	e76f      	b.n	80078f6 <_dtoa_r+0x126>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e7b3      	b.n	8007982 <_dtoa_r+0x1b2>
 8007a1a:	900c      	str	r0, [sp, #48]	; 0x30
 8007a1c:	e7b2      	b.n	8007984 <_dtoa_r+0x1b4>
 8007a1e:	9b05      	ldr	r3, [sp, #20]
 8007a20:	eba3 030b 	sub.w	r3, r3, fp
 8007a24:	9305      	str	r3, [sp, #20]
 8007a26:	f1cb 0300 	rsb	r3, fp, #0
 8007a2a:	9308      	str	r3, [sp, #32]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a30:	e7bf      	b.n	80079b2 <_dtoa_r+0x1e2>
 8007a32:	2300      	movs	r3, #0
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dc52      	bgt.n	8007ae2 <_dtoa_r+0x312>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	461a      	mov	r2, r3
 8007a44:	920a      	str	r2, [sp, #40]	; 0x28
 8007a46:	e00b      	b.n	8007a60 <_dtoa_r+0x290>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e7f3      	b.n	8007a34 <_dtoa_r+0x264>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a52:	445b      	add	r3, fp
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	3301      	adds	r3, #1
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	9304      	str	r3, [sp, #16]
 8007a5c:	bfb8      	it	lt
 8007a5e:	2301      	movlt	r3, #1
 8007a60:	69e0      	ldr	r0, [r4, #28]
 8007a62:	2100      	movs	r1, #0
 8007a64:	2204      	movs	r2, #4
 8007a66:	f102 0614 	add.w	r6, r2, #20
 8007a6a:	429e      	cmp	r6, r3
 8007a6c:	d93d      	bls.n	8007aea <_dtoa_r+0x31a>
 8007a6e:	6041      	str	r1, [r0, #4]
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fd9f 	bl	80085b4 <_Balloc>
 8007a76:	9000      	str	r0, [sp, #0]
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d139      	bne.n	8007af0 <_dtoa_r+0x320>
 8007a7c:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <_dtoa_r+0x308>)
 8007a7e:	4602      	mov	r2, r0
 8007a80:	f240 11af 	movw	r1, #431	; 0x1af
 8007a84:	e6bd      	b.n	8007802 <_dtoa_r+0x32>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7e1      	b.n	8007a4e <_dtoa_r+0x27e>
 8007a8a:	2501      	movs	r5, #1
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	9307      	str	r3, [sp, #28]
 8007a90:	9509      	str	r5, [sp, #36]	; 0x24
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2312      	movs	r3, #18
 8007a9e:	e7d1      	b.n	8007a44 <_dtoa_r+0x274>
 8007aa0:	636f4361 	.word	0x636f4361
 8007aa4:	3fd287a7 	.word	0x3fd287a7
 8007aa8:	8b60c8b3 	.word	0x8b60c8b3
 8007aac:	3fc68a28 	.word	0x3fc68a28
 8007ab0:	509f79fb 	.word	0x509f79fb
 8007ab4:	3fd34413 	.word	0x3fd34413
 8007ab8:	08009b69 	.word	0x08009b69
 8007abc:	08009b80 	.word	0x08009b80
 8007ac0:	7ff00000 	.word	0x7ff00000
 8007ac4:	08009b65 	.word	0x08009b65
 8007ac8:	08009b5c 	.word	0x08009b5c
 8007acc:	08009b39 	.word	0x08009b39
 8007ad0:	3ff80000 	.word	0x3ff80000
 8007ad4:	08009c70 	.word	0x08009c70
 8007ad8:	08009bd8 	.word	0x08009bd8
 8007adc:	2301      	movs	r3, #1
 8007ade:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae0:	e7d7      	b.n	8007a92 <_dtoa_r+0x2c2>
 8007ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	9304      	str	r3, [sp, #16]
 8007ae8:	e7ba      	b.n	8007a60 <_dtoa_r+0x290>
 8007aea:	3101      	adds	r1, #1
 8007aec:	0052      	lsls	r2, r2, #1
 8007aee:	e7ba      	b.n	8007a66 <_dtoa_r+0x296>
 8007af0:	69e3      	ldr	r3, [r4, #28]
 8007af2:	9a00      	ldr	r2, [sp, #0]
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	9b04      	ldr	r3, [sp, #16]
 8007af8:	2b0e      	cmp	r3, #14
 8007afa:	f200 80a8 	bhi.w	8007c4e <_dtoa_r+0x47e>
 8007afe:	2d00      	cmp	r5, #0
 8007b00:	f000 80a5 	beq.w	8007c4e <_dtoa_r+0x47e>
 8007b04:	f1bb 0f00 	cmp.w	fp, #0
 8007b08:	dd38      	ble.n	8007b7c <_dtoa_r+0x3ac>
 8007b0a:	4bc0      	ldr	r3, [pc, #768]	; (8007e0c <_dtoa_r+0x63c>)
 8007b0c:	f00b 020f 	and.w	r2, fp, #15
 8007b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007b20:	d019      	beq.n	8007b56 <_dtoa_r+0x386>
 8007b22:	4bbb      	ldr	r3, [pc, #748]	; (8007e10 <_dtoa_r+0x640>)
 8007b24:	ec51 0b18 	vmov	r0, r1, d8
 8007b28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b2c:	f7f8 fe96 	bl	800085c <__aeabi_ddiv>
 8007b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b34:	f008 080f 	and.w	r8, r8, #15
 8007b38:	2503      	movs	r5, #3
 8007b3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007e10 <_dtoa_r+0x640>
 8007b3e:	f1b8 0f00 	cmp.w	r8, #0
 8007b42:	d10a      	bne.n	8007b5a <_dtoa_r+0x38a>
 8007b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b48:	4632      	mov	r2, r6
 8007b4a:	463b      	mov	r3, r7
 8007b4c:	f7f8 fe86 	bl	800085c <__aeabi_ddiv>
 8007b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b54:	e02b      	b.n	8007bae <_dtoa_r+0x3de>
 8007b56:	2502      	movs	r5, #2
 8007b58:	e7ef      	b.n	8007b3a <_dtoa_r+0x36a>
 8007b5a:	f018 0f01 	tst.w	r8, #1
 8007b5e:	d008      	beq.n	8007b72 <_dtoa_r+0x3a2>
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b68:	f7f8 fd4e 	bl	8000608 <__aeabi_dmul>
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b76:	f109 0908 	add.w	r9, r9, #8
 8007b7a:	e7e0      	b.n	8007b3e <_dtoa_r+0x36e>
 8007b7c:	f000 809f 	beq.w	8007cbe <_dtoa_r+0x4ee>
 8007b80:	f1cb 0600 	rsb	r6, fp, #0
 8007b84:	4ba1      	ldr	r3, [pc, #644]	; (8007e0c <_dtoa_r+0x63c>)
 8007b86:	4fa2      	ldr	r7, [pc, #648]	; (8007e10 <_dtoa_r+0x640>)
 8007b88:	f006 020f 	and.w	r2, r6, #15
 8007b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	ec51 0b18 	vmov	r0, r1, d8
 8007b98:	f7f8 fd36 	bl	8000608 <__aeabi_dmul>
 8007b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba0:	1136      	asrs	r6, r6, #4
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2502      	movs	r5, #2
 8007ba6:	2e00      	cmp	r6, #0
 8007ba8:	d17e      	bne.n	8007ca8 <_dtoa_r+0x4d8>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1d0      	bne.n	8007b50 <_dtoa_r+0x380>
 8007bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8084 	beq.w	8007cc2 <_dtoa_r+0x4f2>
 8007bba:	4b96      	ldr	r3, [pc, #600]	; (8007e14 <_dtoa_r+0x644>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f7f8 ff93 	bl	8000aec <__aeabi_dcmplt>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d07b      	beq.n	8007cc2 <_dtoa_r+0x4f2>
 8007bca:	9b04      	ldr	r3, [sp, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d078      	beq.n	8007cc2 <_dtoa_r+0x4f2>
 8007bd0:	9b01      	ldr	r3, [sp, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dd39      	ble.n	8007c4a <_dtoa_r+0x47a>
 8007bd6:	4b90      	ldr	r3, [pc, #576]	; (8007e18 <_dtoa_r+0x648>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4640      	mov	r0, r8
 8007bdc:	4649      	mov	r1, r9
 8007bde:	f7f8 fd13 	bl	8000608 <__aeabi_dmul>
 8007be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007be6:	9e01      	ldr	r6, [sp, #4]
 8007be8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007bec:	3501      	adds	r5, #1
 8007bee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f7f8 fc9e 	bl	8000534 <__aeabi_i2d>
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	f7f8 fd04 	bl	8000608 <__aeabi_dmul>
 8007c00:	4b86      	ldr	r3, [pc, #536]	; (8007e1c <_dtoa_r+0x64c>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	f7f8 fb4a 	bl	800029c <__adddf3>
 8007c08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c10:	9303      	str	r3, [sp, #12]
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	d158      	bne.n	8007cc8 <_dtoa_r+0x4f8>
 8007c16:	4b82      	ldr	r3, [pc, #520]	; (8007e20 <_dtoa_r+0x650>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f8 fb3b 	bl	8000298 <__aeabi_dsub>
 8007c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c26:	4680      	mov	r8, r0
 8007c28:	4689      	mov	r9, r1
 8007c2a:	f7f8 ff7d 	bl	8000b28 <__aeabi_dcmpgt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f040 8296 	bne.w	8008160 <_dtoa_r+0x990>
 8007c34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c38:	4640      	mov	r0, r8
 8007c3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7f8 ff54 	bl	8000aec <__aeabi_dcmplt>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f040 8289 	bne.w	800815c <_dtoa_r+0x98c>
 8007c4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f2c0 814e 	blt.w	8007ef2 <_dtoa_r+0x722>
 8007c56:	f1bb 0f0e 	cmp.w	fp, #14
 8007c5a:	f300 814a 	bgt.w	8007ef2 <_dtoa_r+0x722>
 8007c5e:	4b6b      	ldr	r3, [pc, #428]	; (8007e0c <_dtoa_r+0x63c>)
 8007c60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f280 80dc 	bge.w	8007e28 <_dtoa_r+0x658>
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f300 80d8 	bgt.w	8007e28 <_dtoa_r+0x658>
 8007c78:	f040 826f 	bne.w	800815a <_dtoa_r+0x98a>
 8007c7c:	4b68      	ldr	r3, [pc, #416]	; (8007e20 <_dtoa_r+0x650>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4640      	mov	r0, r8
 8007c82:	4649      	mov	r1, r9
 8007c84:	f7f8 fcc0 	bl	8000608 <__aeabi_dmul>
 8007c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c8c:	f7f8 ff42 	bl	8000b14 <__aeabi_dcmpge>
 8007c90:	9e04      	ldr	r6, [sp, #16]
 8007c92:	4637      	mov	r7, r6
 8007c94:	2800      	cmp	r0, #0
 8007c96:	f040 8245 	bne.w	8008124 <_dtoa_r+0x954>
 8007c9a:	9d00      	ldr	r5, [sp, #0]
 8007c9c:	2331      	movs	r3, #49	; 0x31
 8007c9e:	f805 3b01 	strb.w	r3, [r5], #1
 8007ca2:	f10b 0b01 	add.w	fp, fp, #1
 8007ca6:	e241      	b.n	800812c <_dtoa_r+0x95c>
 8007ca8:	07f2      	lsls	r2, r6, #31
 8007caa:	d505      	bpl.n	8007cb8 <_dtoa_r+0x4e8>
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	f7f8 fcaa 	bl	8000608 <__aeabi_dmul>
 8007cb4:	3501      	adds	r5, #1
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	1076      	asrs	r6, r6, #1
 8007cba:	3708      	adds	r7, #8
 8007cbc:	e773      	b.n	8007ba6 <_dtoa_r+0x3d6>
 8007cbe:	2502      	movs	r5, #2
 8007cc0:	e775      	b.n	8007bae <_dtoa_r+0x3de>
 8007cc2:	9e04      	ldr	r6, [sp, #16]
 8007cc4:	465f      	mov	r7, fp
 8007cc6:	e792      	b.n	8007bee <_dtoa_r+0x41e>
 8007cc8:	9900      	ldr	r1, [sp, #0]
 8007cca:	4b50      	ldr	r3, [pc, #320]	; (8007e0c <_dtoa_r+0x63c>)
 8007ccc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cd0:	4431      	add	r1, r6
 8007cd2:	9102      	str	r1, [sp, #8]
 8007cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cd6:	eeb0 9a47 	vmov.f32	s18, s14
 8007cda:	eef0 9a67 	vmov.f32	s19, s15
 8007cde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	d044      	beq.n	8007d74 <_dtoa_r+0x5a4>
 8007cea:	494e      	ldr	r1, [pc, #312]	; (8007e24 <_dtoa_r+0x654>)
 8007cec:	2000      	movs	r0, #0
 8007cee:	f7f8 fdb5 	bl	800085c <__aeabi_ddiv>
 8007cf2:	ec53 2b19 	vmov	r2, r3, d9
 8007cf6:	f7f8 facf 	bl	8000298 <__aeabi_dsub>
 8007cfa:	9d00      	ldr	r5, [sp, #0]
 8007cfc:	ec41 0b19 	vmov	d9, r0, r1
 8007d00:	4649      	mov	r1, r9
 8007d02:	4640      	mov	r0, r8
 8007d04:	f7f8 ff30 	bl	8000b68 <__aeabi_d2iz>
 8007d08:	4606      	mov	r6, r0
 8007d0a:	f7f8 fc13 	bl	8000534 <__aeabi_i2d>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fabf 	bl	8000298 <__aeabi_dsub>
 8007d1a:	3630      	adds	r6, #48	; 0x30
 8007d1c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d20:	ec53 2b19 	vmov	r2, r3, d9
 8007d24:	4680      	mov	r8, r0
 8007d26:	4689      	mov	r9, r1
 8007d28:	f7f8 fee0 	bl	8000aec <__aeabi_dcmplt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d164      	bne.n	8007dfa <_dtoa_r+0x62a>
 8007d30:	4642      	mov	r2, r8
 8007d32:	464b      	mov	r3, r9
 8007d34:	4937      	ldr	r1, [pc, #220]	; (8007e14 <_dtoa_r+0x644>)
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7f8 faae 	bl	8000298 <__aeabi_dsub>
 8007d3c:	ec53 2b19 	vmov	r2, r3, d9
 8007d40:	f7f8 fed4 	bl	8000aec <__aeabi_dcmplt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	f040 80b6 	bne.w	8007eb6 <_dtoa_r+0x6e6>
 8007d4a:	9b02      	ldr	r3, [sp, #8]
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	f43f af7c 	beq.w	8007c4a <_dtoa_r+0x47a>
 8007d52:	4b31      	ldr	r3, [pc, #196]	; (8007e18 <_dtoa_r+0x648>)
 8007d54:	ec51 0b19 	vmov	r0, r1, d9
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f7f8 fc55 	bl	8000608 <__aeabi_dmul>
 8007d5e:	4b2e      	ldr	r3, [pc, #184]	; (8007e18 <_dtoa_r+0x648>)
 8007d60:	ec41 0b19 	vmov	d9, r0, r1
 8007d64:	2200      	movs	r2, #0
 8007d66:	4640      	mov	r0, r8
 8007d68:	4649      	mov	r1, r9
 8007d6a:	f7f8 fc4d 	bl	8000608 <__aeabi_dmul>
 8007d6e:	4680      	mov	r8, r0
 8007d70:	4689      	mov	r9, r1
 8007d72:	e7c5      	b.n	8007d00 <_dtoa_r+0x530>
 8007d74:	ec51 0b17 	vmov	r0, r1, d7
 8007d78:	f7f8 fc46 	bl	8000608 <__aeabi_dmul>
 8007d7c:	9b02      	ldr	r3, [sp, #8]
 8007d7e:	9d00      	ldr	r5, [sp, #0]
 8007d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d82:	ec41 0b19 	vmov	d9, r0, r1
 8007d86:	4649      	mov	r1, r9
 8007d88:	4640      	mov	r0, r8
 8007d8a:	f7f8 feed 	bl	8000b68 <__aeabi_d2iz>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	f7f8 fbd0 	bl	8000534 <__aeabi_i2d>
 8007d94:	3630      	adds	r6, #48	; 0x30
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	f7f8 fa7b 	bl	8000298 <__aeabi_dsub>
 8007da2:	f805 6b01 	strb.w	r6, [r5], #1
 8007da6:	9b02      	ldr	r3, [sp, #8]
 8007da8:	429d      	cmp	r5, r3
 8007daa:	4680      	mov	r8, r0
 8007dac:	4689      	mov	r9, r1
 8007dae:	f04f 0200 	mov.w	r2, #0
 8007db2:	d124      	bne.n	8007dfe <_dtoa_r+0x62e>
 8007db4:	4b1b      	ldr	r3, [pc, #108]	; (8007e24 <_dtoa_r+0x654>)
 8007db6:	ec51 0b19 	vmov	r0, r1, d9
 8007dba:	f7f8 fa6f 	bl	800029c <__adddf3>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	f7f8 feaf 	bl	8000b28 <__aeabi_dcmpgt>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d173      	bne.n	8007eb6 <_dtoa_r+0x6e6>
 8007dce:	ec53 2b19 	vmov	r2, r3, d9
 8007dd2:	4914      	ldr	r1, [pc, #80]	; (8007e24 <_dtoa_r+0x654>)
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f7f8 fa5f 	bl	8000298 <__aeabi_dsub>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 fe83 	bl	8000aec <__aeabi_dcmplt>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f af2f 	beq.w	8007c4a <_dtoa_r+0x47a>
 8007dec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007dee:	1e6b      	subs	r3, r5, #1
 8007df0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007df2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007df6:	2b30      	cmp	r3, #48	; 0x30
 8007df8:	d0f8      	beq.n	8007dec <_dtoa_r+0x61c>
 8007dfa:	46bb      	mov	fp, r7
 8007dfc:	e04a      	b.n	8007e94 <_dtoa_r+0x6c4>
 8007dfe:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <_dtoa_r+0x648>)
 8007e00:	f7f8 fc02 	bl	8000608 <__aeabi_dmul>
 8007e04:	4680      	mov	r8, r0
 8007e06:	4689      	mov	r9, r1
 8007e08:	e7bd      	b.n	8007d86 <_dtoa_r+0x5b6>
 8007e0a:	bf00      	nop
 8007e0c:	08009c70 	.word	0x08009c70
 8007e10:	08009c48 	.word	0x08009c48
 8007e14:	3ff00000 	.word	0x3ff00000
 8007e18:	40240000 	.word	0x40240000
 8007e1c:	401c0000 	.word	0x401c0000
 8007e20:	40140000 	.word	0x40140000
 8007e24:	3fe00000 	.word	0x3fe00000
 8007e28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e2c:	9d00      	ldr	r5, [sp, #0]
 8007e2e:	4642      	mov	r2, r8
 8007e30:	464b      	mov	r3, r9
 8007e32:	4630      	mov	r0, r6
 8007e34:	4639      	mov	r1, r7
 8007e36:	f7f8 fd11 	bl	800085c <__aeabi_ddiv>
 8007e3a:	f7f8 fe95 	bl	8000b68 <__aeabi_d2iz>
 8007e3e:	9001      	str	r0, [sp, #4]
 8007e40:	f7f8 fb78 	bl	8000534 <__aeabi_i2d>
 8007e44:	4642      	mov	r2, r8
 8007e46:	464b      	mov	r3, r9
 8007e48:	f7f8 fbde 	bl	8000608 <__aeabi_dmul>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fa20 	bl	8000298 <__aeabi_dsub>
 8007e58:	9e01      	ldr	r6, [sp, #4]
 8007e5a:	9f04      	ldr	r7, [sp, #16]
 8007e5c:	3630      	adds	r6, #48	; 0x30
 8007e5e:	f805 6b01 	strb.w	r6, [r5], #1
 8007e62:	9e00      	ldr	r6, [sp, #0]
 8007e64:	1bae      	subs	r6, r5, r6
 8007e66:	42b7      	cmp	r7, r6
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	d134      	bne.n	8007ed8 <_dtoa_r+0x708>
 8007e6e:	f7f8 fa15 	bl	800029c <__adddf3>
 8007e72:	4642      	mov	r2, r8
 8007e74:	464b      	mov	r3, r9
 8007e76:	4606      	mov	r6, r0
 8007e78:	460f      	mov	r7, r1
 8007e7a:	f7f8 fe55 	bl	8000b28 <__aeabi_dcmpgt>
 8007e7e:	b9c8      	cbnz	r0, 8007eb4 <_dtoa_r+0x6e4>
 8007e80:	4642      	mov	r2, r8
 8007e82:	464b      	mov	r3, r9
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e8c:	b110      	cbz	r0, 8007e94 <_dtoa_r+0x6c4>
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	07db      	lsls	r3, r3, #31
 8007e92:	d40f      	bmi.n	8007eb4 <_dtoa_r+0x6e4>
 8007e94:	4651      	mov	r1, sl
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 fbcc 	bl	8008634 <_Bfree>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ea0:	702b      	strb	r3, [r5, #0]
 8007ea2:	f10b 0301 	add.w	r3, fp, #1
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f43f ace2 	beq.w	8007874 <_dtoa_r+0xa4>
 8007eb0:	601d      	str	r5, [r3, #0]
 8007eb2:	e4df      	b.n	8007874 <_dtoa_r+0xa4>
 8007eb4:	465f      	mov	r7, fp
 8007eb6:	462b      	mov	r3, r5
 8007eb8:	461d      	mov	r5, r3
 8007eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ebe:	2a39      	cmp	r2, #57	; 0x39
 8007ec0:	d106      	bne.n	8007ed0 <_dtoa_r+0x700>
 8007ec2:	9a00      	ldr	r2, [sp, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d1f7      	bne.n	8007eb8 <_dtoa_r+0x6e8>
 8007ec8:	9900      	ldr	r1, [sp, #0]
 8007eca:	2230      	movs	r2, #48	; 0x30
 8007ecc:	3701      	adds	r7, #1
 8007ece:	700a      	strb	r2, [r1, #0]
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	3201      	adds	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e790      	b.n	8007dfa <_dtoa_r+0x62a>
 8007ed8:	4ba3      	ldr	r3, [pc, #652]	; (8008168 <_dtoa_r+0x998>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	f7f8 fb94 	bl	8000608 <__aeabi_dmul>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460f      	mov	r7, r1
 8007ee8:	f7f8 fdf6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d09e      	beq.n	8007e2e <_dtoa_r+0x65e>
 8007ef0:	e7d0      	b.n	8007e94 <_dtoa_r+0x6c4>
 8007ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ef4:	2a00      	cmp	r2, #0
 8007ef6:	f000 80ca 	beq.w	800808e <_dtoa_r+0x8be>
 8007efa:	9a07      	ldr	r2, [sp, #28]
 8007efc:	2a01      	cmp	r2, #1
 8007efe:	f300 80ad 	bgt.w	800805c <_dtoa_r+0x88c>
 8007f02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	f000 80a5 	beq.w	8008054 <_dtoa_r+0x884>
 8007f0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f0e:	9e08      	ldr	r6, [sp, #32]
 8007f10:	9d05      	ldr	r5, [sp, #20]
 8007f12:	9a05      	ldr	r2, [sp, #20]
 8007f14:	441a      	add	r2, r3
 8007f16:	9205      	str	r2, [sp, #20]
 8007f18:	9a06      	ldr	r2, [sp, #24]
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	441a      	add	r2, r3
 8007f1e:	4620      	mov	r0, r4
 8007f20:	9206      	str	r2, [sp, #24]
 8007f22:	f000 fc3d 	bl	80087a0 <__i2b>
 8007f26:	4607      	mov	r7, r0
 8007f28:	b165      	cbz	r5, 8007f44 <_dtoa_r+0x774>
 8007f2a:	9b06      	ldr	r3, [sp, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dd09      	ble.n	8007f44 <_dtoa_r+0x774>
 8007f30:	42ab      	cmp	r3, r5
 8007f32:	9a05      	ldr	r2, [sp, #20]
 8007f34:	bfa8      	it	ge
 8007f36:	462b      	movge	r3, r5
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	9205      	str	r2, [sp, #20]
 8007f3c:	9a06      	ldr	r2, [sp, #24]
 8007f3e:	1aed      	subs	r5, r5, r3
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	9306      	str	r3, [sp, #24]
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	b1f3      	cbz	r3, 8007f86 <_dtoa_r+0x7b6>
 8007f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80a3 	beq.w	8008096 <_dtoa_r+0x8c6>
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	dd10      	ble.n	8007f76 <_dtoa_r+0x7a6>
 8007f54:	4639      	mov	r1, r7
 8007f56:	4632      	mov	r2, r6
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fce1 	bl	8008920 <__pow5mult>
 8007f5e:	4652      	mov	r2, sl
 8007f60:	4601      	mov	r1, r0
 8007f62:	4607      	mov	r7, r0
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 fc31 	bl	80087cc <__multiply>
 8007f6a:	4651      	mov	r1, sl
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 fb60 	bl	8008634 <_Bfree>
 8007f74:	46c2      	mov	sl, r8
 8007f76:	9b08      	ldr	r3, [sp, #32]
 8007f78:	1b9a      	subs	r2, r3, r6
 8007f7a:	d004      	beq.n	8007f86 <_dtoa_r+0x7b6>
 8007f7c:	4651      	mov	r1, sl
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 fcce 	bl	8008920 <__pow5mult>
 8007f84:	4682      	mov	sl, r0
 8007f86:	2101      	movs	r1, #1
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 fc09 	bl	80087a0 <__i2b>
 8007f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	4606      	mov	r6, r0
 8007f94:	f340 8081 	ble.w	800809a <_dtoa_r+0x8ca>
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 fcbf 	bl	8008920 <__pow5mult>
 8007fa2:	9b07      	ldr	r3, [sp, #28]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	dd7a      	ble.n	80080a0 <_dtoa_r+0x8d0>
 8007faa:	f04f 0800 	mov.w	r8, #0
 8007fae:	6933      	ldr	r3, [r6, #16]
 8007fb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fb4:	6918      	ldr	r0, [r3, #16]
 8007fb6:	f000 fba5 	bl	8008704 <__hi0bits>
 8007fba:	f1c0 0020 	rsb	r0, r0, #32
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	4418      	add	r0, r3
 8007fc2:	f010 001f 	ands.w	r0, r0, #31
 8007fc6:	f000 8094 	beq.w	80080f2 <_dtoa_r+0x922>
 8007fca:	f1c0 0320 	rsb	r3, r0, #32
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	f340 8085 	ble.w	80080de <_dtoa_r+0x90e>
 8007fd4:	9b05      	ldr	r3, [sp, #20]
 8007fd6:	f1c0 001c 	rsb	r0, r0, #28
 8007fda:	4403      	add	r3, r0
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	4403      	add	r3, r0
 8007fe2:	4405      	add	r5, r0
 8007fe4:	9306      	str	r3, [sp, #24]
 8007fe6:	9b05      	ldr	r3, [sp, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dd05      	ble.n	8007ff8 <_dtoa_r+0x828>
 8007fec:	4651      	mov	r1, sl
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fcef 	bl	80089d4 <__lshift>
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	9b06      	ldr	r3, [sp, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dd05      	ble.n	800800a <_dtoa_r+0x83a>
 8007ffe:	4631      	mov	r1, r6
 8008000:	461a      	mov	r2, r3
 8008002:	4620      	mov	r0, r4
 8008004:	f000 fce6 	bl	80089d4 <__lshift>
 8008008:	4606      	mov	r6, r0
 800800a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800800c:	2b00      	cmp	r3, #0
 800800e:	d072      	beq.n	80080f6 <_dtoa_r+0x926>
 8008010:	4631      	mov	r1, r6
 8008012:	4650      	mov	r0, sl
 8008014:	f000 fd4a 	bl	8008aac <__mcmp>
 8008018:	2800      	cmp	r0, #0
 800801a:	da6c      	bge.n	80080f6 <_dtoa_r+0x926>
 800801c:	2300      	movs	r3, #0
 800801e:	4651      	mov	r1, sl
 8008020:	220a      	movs	r2, #10
 8008022:	4620      	mov	r0, r4
 8008024:	f000 fb28 	bl	8008678 <__multadd>
 8008028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800802e:	4682      	mov	sl, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 81b0 	beq.w	8008396 <_dtoa_r+0xbc6>
 8008036:	2300      	movs	r3, #0
 8008038:	4639      	mov	r1, r7
 800803a:	220a      	movs	r2, #10
 800803c:	4620      	mov	r0, r4
 800803e:	f000 fb1b 	bl	8008678 <__multadd>
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	4607      	mov	r7, r0
 8008048:	f300 8096 	bgt.w	8008178 <_dtoa_r+0x9a8>
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	2b02      	cmp	r3, #2
 8008050:	dc59      	bgt.n	8008106 <_dtoa_r+0x936>
 8008052:	e091      	b.n	8008178 <_dtoa_r+0x9a8>
 8008054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008056:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800805a:	e758      	b.n	8007f0e <_dtoa_r+0x73e>
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	1e5e      	subs	r6, r3, #1
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	42b3      	cmp	r3, r6
 8008064:	bfbf      	itttt	lt
 8008066:	9b08      	ldrlt	r3, [sp, #32]
 8008068:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800806a:	9608      	strlt	r6, [sp, #32]
 800806c:	1af3      	sublt	r3, r6, r3
 800806e:	bfb4      	ite	lt
 8008070:	18d2      	addlt	r2, r2, r3
 8008072:	1b9e      	subge	r6, r3, r6
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	bfbc      	itt	lt
 8008078:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800807a:	2600      	movlt	r6, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	bfb7      	itett	lt
 8008080:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008084:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008088:	1a9d      	sublt	r5, r3, r2
 800808a:	2300      	movlt	r3, #0
 800808c:	e741      	b.n	8007f12 <_dtoa_r+0x742>
 800808e:	9e08      	ldr	r6, [sp, #32]
 8008090:	9d05      	ldr	r5, [sp, #20]
 8008092:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008094:	e748      	b.n	8007f28 <_dtoa_r+0x758>
 8008096:	9a08      	ldr	r2, [sp, #32]
 8008098:	e770      	b.n	8007f7c <_dtoa_r+0x7ac>
 800809a:	9b07      	ldr	r3, [sp, #28]
 800809c:	2b01      	cmp	r3, #1
 800809e:	dc19      	bgt.n	80080d4 <_dtoa_r+0x904>
 80080a0:	9b02      	ldr	r3, [sp, #8]
 80080a2:	b9bb      	cbnz	r3, 80080d4 <_dtoa_r+0x904>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080aa:	b99b      	cbnz	r3, 80080d4 <_dtoa_r+0x904>
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080b2:	0d1b      	lsrs	r3, r3, #20
 80080b4:	051b      	lsls	r3, r3, #20
 80080b6:	b183      	cbz	r3, 80080da <_dtoa_r+0x90a>
 80080b8:	9b05      	ldr	r3, [sp, #20]
 80080ba:	3301      	adds	r3, #1
 80080bc:	9305      	str	r3, [sp, #20]
 80080be:	9b06      	ldr	r3, [sp, #24]
 80080c0:	3301      	adds	r3, #1
 80080c2:	9306      	str	r3, [sp, #24]
 80080c4:	f04f 0801 	mov.w	r8, #1
 80080c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f47f af6f 	bne.w	8007fae <_dtoa_r+0x7de>
 80080d0:	2001      	movs	r0, #1
 80080d2:	e774      	b.n	8007fbe <_dtoa_r+0x7ee>
 80080d4:	f04f 0800 	mov.w	r8, #0
 80080d8:	e7f6      	b.n	80080c8 <_dtoa_r+0x8f8>
 80080da:	4698      	mov	r8, r3
 80080dc:	e7f4      	b.n	80080c8 <_dtoa_r+0x8f8>
 80080de:	d082      	beq.n	8007fe6 <_dtoa_r+0x816>
 80080e0:	9a05      	ldr	r2, [sp, #20]
 80080e2:	331c      	adds	r3, #28
 80080e4:	441a      	add	r2, r3
 80080e6:	9205      	str	r2, [sp, #20]
 80080e8:	9a06      	ldr	r2, [sp, #24]
 80080ea:	441a      	add	r2, r3
 80080ec:	441d      	add	r5, r3
 80080ee:	9206      	str	r2, [sp, #24]
 80080f0:	e779      	b.n	8007fe6 <_dtoa_r+0x816>
 80080f2:	4603      	mov	r3, r0
 80080f4:	e7f4      	b.n	80080e0 <_dtoa_r+0x910>
 80080f6:	9b04      	ldr	r3, [sp, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dc37      	bgt.n	800816c <_dtoa_r+0x99c>
 80080fc:	9b07      	ldr	r3, [sp, #28]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	dd34      	ble.n	800816c <_dtoa_r+0x99c>
 8008102:	9b04      	ldr	r3, [sp, #16]
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	b963      	cbnz	r3, 8008124 <_dtoa_r+0x954>
 800810a:	4631      	mov	r1, r6
 800810c:	2205      	movs	r2, #5
 800810e:	4620      	mov	r0, r4
 8008110:	f000 fab2 	bl	8008678 <__multadd>
 8008114:	4601      	mov	r1, r0
 8008116:	4606      	mov	r6, r0
 8008118:	4650      	mov	r0, sl
 800811a:	f000 fcc7 	bl	8008aac <__mcmp>
 800811e:	2800      	cmp	r0, #0
 8008120:	f73f adbb 	bgt.w	8007c9a <_dtoa_r+0x4ca>
 8008124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008126:	9d00      	ldr	r5, [sp, #0]
 8008128:	ea6f 0b03 	mvn.w	fp, r3
 800812c:	f04f 0800 	mov.w	r8, #0
 8008130:	4631      	mov	r1, r6
 8008132:	4620      	mov	r0, r4
 8008134:	f000 fa7e 	bl	8008634 <_Bfree>
 8008138:	2f00      	cmp	r7, #0
 800813a:	f43f aeab 	beq.w	8007e94 <_dtoa_r+0x6c4>
 800813e:	f1b8 0f00 	cmp.w	r8, #0
 8008142:	d005      	beq.n	8008150 <_dtoa_r+0x980>
 8008144:	45b8      	cmp	r8, r7
 8008146:	d003      	beq.n	8008150 <_dtoa_r+0x980>
 8008148:	4641      	mov	r1, r8
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fa72 	bl	8008634 <_Bfree>
 8008150:	4639      	mov	r1, r7
 8008152:	4620      	mov	r0, r4
 8008154:	f000 fa6e 	bl	8008634 <_Bfree>
 8008158:	e69c      	b.n	8007e94 <_dtoa_r+0x6c4>
 800815a:	2600      	movs	r6, #0
 800815c:	4637      	mov	r7, r6
 800815e:	e7e1      	b.n	8008124 <_dtoa_r+0x954>
 8008160:	46bb      	mov	fp, r7
 8008162:	4637      	mov	r7, r6
 8008164:	e599      	b.n	8007c9a <_dtoa_r+0x4ca>
 8008166:	bf00      	nop
 8008168:	40240000 	.word	0x40240000
 800816c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 80c8 	beq.w	8008304 <_dtoa_r+0xb34>
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	2d00      	cmp	r5, #0
 800817a:	dd05      	ble.n	8008188 <_dtoa_r+0x9b8>
 800817c:	4639      	mov	r1, r7
 800817e:	462a      	mov	r2, r5
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fc27 	bl	80089d4 <__lshift>
 8008186:	4607      	mov	r7, r0
 8008188:	f1b8 0f00 	cmp.w	r8, #0
 800818c:	d05b      	beq.n	8008246 <_dtoa_r+0xa76>
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	4620      	mov	r0, r4
 8008192:	f000 fa0f 	bl	80085b4 <_Balloc>
 8008196:	4605      	mov	r5, r0
 8008198:	b928      	cbnz	r0, 80081a6 <_dtoa_r+0x9d6>
 800819a:	4b83      	ldr	r3, [pc, #524]	; (80083a8 <_dtoa_r+0xbd8>)
 800819c:	4602      	mov	r2, r0
 800819e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80081a2:	f7ff bb2e 	b.w	8007802 <_dtoa_r+0x32>
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	3202      	adds	r2, #2
 80081aa:	0092      	lsls	r2, r2, #2
 80081ac:	f107 010c 	add.w	r1, r7, #12
 80081b0:	300c      	adds	r0, #12
 80081b2:	f7ff fa74 	bl	800769e <memcpy>
 80081b6:	2201      	movs	r2, #1
 80081b8:	4629      	mov	r1, r5
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fc0a 	bl	80089d4 <__lshift>
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081ca:	4413      	add	r3, r2
 80081cc:	9308      	str	r3, [sp, #32]
 80081ce:	9b02      	ldr	r3, [sp, #8]
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	46b8      	mov	r8, r7
 80081d6:	9306      	str	r3, [sp, #24]
 80081d8:	4607      	mov	r7, r0
 80081da:	9b04      	ldr	r3, [sp, #16]
 80081dc:	4631      	mov	r1, r6
 80081de:	3b01      	subs	r3, #1
 80081e0:	4650      	mov	r0, sl
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	f7ff fa69 	bl	80076ba <quorem>
 80081e8:	4641      	mov	r1, r8
 80081ea:	9002      	str	r0, [sp, #8]
 80081ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081f0:	4650      	mov	r0, sl
 80081f2:	f000 fc5b 	bl	8008aac <__mcmp>
 80081f6:	463a      	mov	r2, r7
 80081f8:	9005      	str	r0, [sp, #20]
 80081fa:	4631      	mov	r1, r6
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fc71 	bl	8008ae4 <__mdiff>
 8008202:	68c2      	ldr	r2, [r0, #12]
 8008204:	4605      	mov	r5, r0
 8008206:	bb02      	cbnz	r2, 800824a <_dtoa_r+0xa7a>
 8008208:	4601      	mov	r1, r0
 800820a:	4650      	mov	r0, sl
 800820c:	f000 fc4e 	bl	8008aac <__mcmp>
 8008210:	4602      	mov	r2, r0
 8008212:	4629      	mov	r1, r5
 8008214:	4620      	mov	r0, r4
 8008216:	9209      	str	r2, [sp, #36]	; 0x24
 8008218:	f000 fa0c 	bl	8008634 <_Bfree>
 800821c:	9b07      	ldr	r3, [sp, #28]
 800821e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008220:	9d04      	ldr	r5, [sp, #16]
 8008222:	ea43 0102 	orr.w	r1, r3, r2
 8008226:	9b06      	ldr	r3, [sp, #24]
 8008228:	4319      	orrs	r1, r3
 800822a:	d110      	bne.n	800824e <_dtoa_r+0xa7e>
 800822c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008230:	d029      	beq.n	8008286 <_dtoa_r+0xab6>
 8008232:	9b05      	ldr	r3, [sp, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd02      	ble.n	800823e <_dtoa_r+0xa6e>
 8008238:	9b02      	ldr	r3, [sp, #8]
 800823a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	f883 9000 	strb.w	r9, [r3]
 8008244:	e774      	b.n	8008130 <_dtoa_r+0x960>
 8008246:	4638      	mov	r0, r7
 8008248:	e7ba      	b.n	80081c0 <_dtoa_r+0x9f0>
 800824a:	2201      	movs	r2, #1
 800824c:	e7e1      	b.n	8008212 <_dtoa_r+0xa42>
 800824e:	9b05      	ldr	r3, [sp, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	db04      	blt.n	800825e <_dtoa_r+0xa8e>
 8008254:	9907      	ldr	r1, [sp, #28]
 8008256:	430b      	orrs	r3, r1
 8008258:	9906      	ldr	r1, [sp, #24]
 800825a:	430b      	orrs	r3, r1
 800825c:	d120      	bne.n	80082a0 <_dtoa_r+0xad0>
 800825e:	2a00      	cmp	r2, #0
 8008260:	dded      	ble.n	800823e <_dtoa_r+0xa6e>
 8008262:	4651      	mov	r1, sl
 8008264:	2201      	movs	r2, #1
 8008266:	4620      	mov	r0, r4
 8008268:	f000 fbb4 	bl	80089d4 <__lshift>
 800826c:	4631      	mov	r1, r6
 800826e:	4682      	mov	sl, r0
 8008270:	f000 fc1c 	bl	8008aac <__mcmp>
 8008274:	2800      	cmp	r0, #0
 8008276:	dc03      	bgt.n	8008280 <_dtoa_r+0xab0>
 8008278:	d1e1      	bne.n	800823e <_dtoa_r+0xa6e>
 800827a:	f019 0f01 	tst.w	r9, #1
 800827e:	d0de      	beq.n	800823e <_dtoa_r+0xa6e>
 8008280:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008284:	d1d8      	bne.n	8008238 <_dtoa_r+0xa68>
 8008286:	9a01      	ldr	r2, [sp, #4]
 8008288:	2339      	movs	r3, #57	; 0x39
 800828a:	7013      	strb	r3, [r2, #0]
 800828c:	462b      	mov	r3, r5
 800828e:	461d      	mov	r5, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008296:	2a39      	cmp	r2, #57	; 0x39
 8008298:	d06c      	beq.n	8008374 <_dtoa_r+0xba4>
 800829a:	3201      	adds	r2, #1
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	e747      	b.n	8008130 <_dtoa_r+0x960>
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	dd07      	ble.n	80082b4 <_dtoa_r+0xae4>
 80082a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082a8:	d0ed      	beq.n	8008286 <_dtoa_r+0xab6>
 80082aa:	9a01      	ldr	r2, [sp, #4]
 80082ac:	f109 0301 	add.w	r3, r9, #1
 80082b0:	7013      	strb	r3, [r2, #0]
 80082b2:	e73d      	b.n	8008130 <_dtoa_r+0x960>
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	9a08      	ldr	r2, [sp, #32]
 80082b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80082bc:	4293      	cmp	r3, r2
 80082be:	d043      	beq.n	8008348 <_dtoa_r+0xb78>
 80082c0:	4651      	mov	r1, sl
 80082c2:	2300      	movs	r3, #0
 80082c4:	220a      	movs	r2, #10
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 f9d6 	bl	8008678 <__multadd>
 80082cc:	45b8      	cmp	r8, r7
 80082ce:	4682      	mov	sl, r0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	f04f 020a 	mov.w	r2, #10
 80082d8:	4641      	mov	r1, r8
 80082da:	4620      	mov	r0, r4
 80082dc:	d107      	bne.n	80082ee <_dtoa_r+0xb1e>
 80082de:	f000 f9cb 	bl	8008678 <__multadd>
 80082e2:	4680      	mov	r8, r0
 80082e4:	4607      	mov	r7, r0
 80082e6:	9b04      	ldr	r3, [sp, #16]
 80082e8:	3301      	adds	r3, #1
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	e775      	b.n	80081da <_dtoa_r+0xa0a>
 80082ee:	f000 f9c3 	bl	8008678 <__multadd>
 80082f2:	4639      	mov	r1, r7
 80082f4:	4680      	mov	r8, r0
 80082f6:	2300      	movs	r3, #0
 80082f8:	220a      	movs	r2, #10
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 f9bc 	bl	8008678 <__multadd>
 8008300:	4607      	mov	r7, r0
 8008302:	e7f0      	b.n	80082e6 <_dtoa_r+0xb16>
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	9d00      	ldr	r5, [sp, #0]
 800830a:	4631      	mov	r1, r6
 800830c:	4650      	mov	r0, sl
 800830e:	f7ff f9d4 	bl	80076ba <quorem>
 8008312:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008316:	9b00      	ldr	r3, [sp, #0]
 8008318:	f805 9b01 	strb.w	r9, [r5], #1
 800831c:	1aea      	subs	r2, r5, r3
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	4293      	cmp	r3, r2
 8008322:	dd07      	ble.n	8008334 <_dtoa_r+0xb64>
 8008324:	4651      	mov	r1, sl
 8008326:	2300      	movs	r3, #0
 8008328:	220a      	movs	r2, #10
 800832a:	4620      	mov	r0, r4
 800832c:	f000 f9a4 	bl	8008678 <__multadd>
 8008330:	4682      	mov	sl, r0
 8008332:	e7ea      	b.n	800830a <_dtoa_r+0xb3a>
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfc8      	it	gt
 800833a:	461d      	movgt	r5, r3
 800833c:	9b00      	ldr	r3, [sp, #0]
 800833e:	bfd8      	it	le
 8008340:	2501      	movle	r5, #1
 8008342:	441d      	add	r5, r3
 8008344:	f04f 0800 	mov.w	r8, #0
 8008348:	4651      	mov	r1, sl
 800834a:	2201      	movs	r2, #1
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fb41 	bl	80089d4 <__lshift>
 8008352:	4631      	mov	r1, r6
 8008354:	4682      	mov	sl, r0
 8008356:	f000 fba9 	bl	8008aac <__mcmp>
 800835a:	2800      	cmp	r0, #0
 800835c:	dc96      	bgt.n	800828c <_dtoa_r+0xabc>
 800835e:	d102      	bne.n	8008366 <_dtoa_r+0xb96>
 8008360:	f019 0f01 	tst.w	r9, #1
 8008364:	d192      	bne.n	800828c <_dtoa_r+0xabc>
 8008366:	462b      	mov	r3, r5
 8008368:	461d      	mov	r5, r3
 800836a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836e:	2a30      	cmp	r2, #48	; 0x30
 8008370:	d0fa      	beq.n	8008368 <_dtoa_r+0xb98>
 8008372:	e6dd      	b.n	8008130 <_dtoa_r+0x960>
 8008374:	9a00      	ldr	r2, [sp, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d189      	bne.n	800828e <_dtoa_r+0xabe>
 800837a:	f10b 0b01 	add.w	fp, fp, #1
 800837e:	2331      	movs	r3, #49	; 0x31
 8008380:	e796      	b.n	80082b0 <_dtoa_r+0xae0>
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <_dtoa_r+0xbdc>)
 8008384:	f7ff ba99 	b.w	80078ba <_dtoa_r+0xea>
 8008388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800838a:	2b00      	cmp	r3, #0
 800838c:	f47f aa6d 	bne.w	800786a <_dtoa_r+0x9a>
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <_dtoa_r+0xbe0>)
 8008392:	f7ff ba92 	b.w	80078ba <_dtoa_r+0xea>
 8008396:	9b01      	ldr	r3, [sp, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	dcb5      	bgt.n	8008308 <_dtoa_r+0xb38>
 800839c:	9b07      	ldr	r3, [sp, #28]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	f73f aeb1 	bgt.w	8008106 <_dtoa_r+0x936>
 80083a4:	e7b0      	b.n	8008308 <_dtoa_r+0xb38>
 80083a6:	bf00      	nop
 80083a8:	08009bd8 	.word	0x08009bd8
 80083ac:	08009b38 	.word	0x08009b38
 80083b0:	08009b5c 	.word	0x08009b5c

080083b4 <_free_r>:
 80083b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083b6:	2900      	cmp	r1, #0
 80083b8:	d044      	beq.n	8008444 <_free_r+0x90>
 80083ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083be:	9001      	str	r0, [sp, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f1a1 0404 	sub.w	r4, r1, #4
 80083c6:	bfb8      	it	lt
 80083c8:	18e4      	addlt	r4, r4, r3
 80083ca:	f000 f8e7 	bl	800859c <__malloc_lock>
 80083ce:	4a1e      	ldr	r2, [pc, #120]	; (8008448 <_free_r+0x94>)
 80083d0:	9801      	ldr	r0, [sp, #4]
 80083d2:	6813      	ldr	r3, [r2, #0]
 80083d4:	b933      	cbnz	r3, 80083e4 <_free_r+0x30>
 80083d6:	6063      	str	r3, [r4, #4]
 80083d8:	6014      	str	r4, [r2, #0]
 80083da:	b003      	add	sp, #12
 80083dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e0:	f000 b8e2 	b.w	80085a8 <__malloc_unlock>
 80083e4:	42a3      	cmp	r3, r4
 80083e6:	d908      	bls.n	80083fa <_free_r+0x46>
 80083e8:	6825      	ldr	r5, [r4, #0]
 80083ea:	1961      	adds	r1, r4, r5
 80083ec:	428b      	cmp	r3, r1
 80083ee:	bf01      	itttt	eq
 80083f0:	6819      	ldreq	r1, [r3, #0]
 80083f2:	685b      	ldreq	r3, [r3, #4]
 80083f4:	1949      	addeq	r1, r1, r5
 80083f6:	6021      	streq	r1, [r4, #0]
 80083f8:	e7ed      	b.n	80083d6 <_free_r+0x22>
 80083fa:	461a      	mov	r2, r3
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	b10b      	cbz	r3, 8008404 <_free_r+0x50>
 8008400:	42a3      	cmp	r3, r4
 8008402:	d9fa      	bls.n	80083fa <_free_r+0x46>
 8008404:	6811      	ldr	r1, [r2, #0]
 8008406:	1855      	adds	r5, r2, r1
 8008408:	42a5      	cmp	r5, r4
 800840a:	d10b      	bne.n	8008424 <_free_r+0x70>
 800840c:	6824      	ldr	r4, [r4, #0]
 800840e:	4421      	add	r1, r4
 8008410:	1854      	adds	r4, r2, r1
 8008412:	42a3      	cmp	r3, r4
 8008414:	6011      	str	r1, [r2, #0]
 8008416:	d1e0      	bne.n	80083da <_free_r+0x26>
 8008418:	681c      	ldr	r4, [r3, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	6053      	str	r3, [r2, #4]
 800841e:	440c      	add	r4, r1
 8008420:	6014      	str	r4, [r2, #0]
 8008422:	e7da      	b.n	80083da <_free_r+0x26>
 8008424:	d902      	bls.n	800842c <_free_r+0x78>
 8008426:	230c      	movs	r3, #12
 8008428:	6003      	str	r3, [r0, #0]
 800842a:	e7d6      	b.n	80083da <_free_r+0x26>
 800842c:	6825      	ldr	r5, [r4, #0]
 800842e:	1961      	adds	r1, r4, r5
 8008430:	428b      	cmp	r3, r1
 8008432:	bf04      	itt	eq
 8008434:	6819      	ldreq	r1, [r3, #0]
 8008436:	685b      	ldreq	r3, [r3, #4]
 8008438:	6063      	str	r3, [r4, #4]
 800843a:	bf04      	itt	eq
 800843c:	1949      	addeq	r1, r1, r5
 800843e:	6021      	streq	r1, [r4, #0]
 8008440:	6054      	str	r4, [r2, #4]
 8008442:	e7ca      	b.n	80083da <_free_r+0x26>
 8008444:	b003      	add	sp, #12
 8008446:	bd30      	pop	{r4, r5, pc}
 8008448:	200044f8 	.word	0x200044f8

0800844c <malloc>:
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <malloc+0xc>)
 800844e:	4601      	mov	r1, r0
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	f000 b823 	b.w	800849c <_malloc_r>
 8008456:	bf00      	nop
 8008458:	20000070 	.word	0x20000070

0800845c <sbrk_aligned>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	4e0e      	ldr	r6, [pc, #56]	; (8008498 <sbrk_aligned+0x3c>)
 8008460:	460c      	mov	r4, r1
 8008462:	6831      	ldr	r1, [r6, #0]
 8008464:	4605      	mov	r5, r0
 8008466:	b911      	cbnz	r1, 800846e <sbrk_aligned+0x12>
 8008468:	f000 fe40 	bl	80090ec <_sbrk_r>
 800846c:	6030      	str	r0, [r6, #0]
 800846e:	4621      	mov	r1, r4
 8008470:	4628      	mov	r0, r5
 8008472:	f000 fe3b 	bl	80090ec <_sbrk_r>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d00a      	beq.n	8008490 <sbrk_aligned+0x34>
 800847a:	1cc4      	adds	r4, r0, #3
 800847c:	f024 0403 	bic.w	r4, r4, #3
 8008480:	42a0      	cmp	r0, r4
 8008482:	d007      	beq.n	8008494 <sbrk_aligned+0x38>
 8008484:	1a21      	subs	r1, r4, r0
 8008486:	4628      	mov	r0, r5
 8008488:	f000 fe30 	bl	80090ec <_sbrk_r>
 800848c:	3001      	adds	r0, #1
 800848e:	d101      	bne.n	8008494 <sbrk_aligned+0x38>
 8008490:	f04f 34ff 	mov.w	r4, #4294967295
 8008494:	4620      	mov	r0, r4
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	200044fc 	.word	0x200044fc

0800849c <_malloc_r>:
 800849c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a0:	1ccd      	adds	r5, r1, #3
 80084a2:	f025 0503 	bic.w	r5, r5, #3
 80084a6:	3508      	adds	r5, #8
 80084a8:	2d0c      	cmp	r5, #12
 80084aa:	bf38      	it	cc
 80084ac:	250c      	movcc	r5, #12
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	4607      	mov	r7, r0
 80084b2:	db01      	blt.n	80084b8 <_malloc_r+0x1c>
 80084b4:	42a9      	cmp	r1, r5
 80084b6:	d905      	bls.n	80084c4 <_malloc_r+0x28>
 80084b8:	230c      	movs	r3, #12
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	2600      	movs	r6, #0
 80084be:	4630      	mov	r0, r6
 80084c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008598 <_malloc_r+0xfc>
 80084c8:	f000 f868 	bl	800859c <__malloc_lock>
 80084cc:	f8d8 3000 	ldr.w	r3, [r8]
 80084d0:	461c      	mov	r4, r3
 80084d2:	bb5c      	cbnz	r4, 800852c <_malloc_r+0x90>
 80084d4:	4629      	mov	r1, r5
 80084d6:	4638      	mov	r0, r7
 80084d8:	f7ff ffc0 	bl	800845c <sbrk_aligned>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	4604      	mov	r4, r0
 80084e0:	d155      	bne.n	800858e <_malloc_r+0xf2>
 80084e2:	f8d8 4000 	ldr.w	r4, [r8]
 80084e6:	4626      	mov	r6, r4
 80084e8:	2e00      	cmp	r6, #0
 80084ea:	d145      	bne.n	8008578 <_malloc_r+0xdc>
 80084ec:	2c00      	cmp	r4, #0
 80084ee:	d048      	beq.n	8008582 <_malloc_r+0xe6>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	4631      	mov	r1, r6
 80084f4:	4638      	mov	r0, r7
 80084f6:	eb04 0903 	add.w	r9, r4, r3
 80084fa:	f000 fdf7 	bl	80090ec <_sbrk_r>
 80084fe:	4581      	cmp	r9, r0
 8008500:	d13f      	bne.n	8008582 <_malloc_r+0xe6>
 8008502:	6821      	ldr	r1, [r4, #0]
 8008504:	1a6d      	subs	r5, r5, r1
 8008506:	4629      	mov	r1, r5
 8008508:	4638      	mov	r0, r7
 800850a:	f7ff ffa7 	bl	800845c <sbrk_aligned>
 800850e:	3001      	adds	r0, #1
 8008510:	d037      	beq.n	8008582 <_malloc_r+0xe6>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	442b      	add	r3, r5
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	f8d8 3000 	ldr.w	r3, [r8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d038      	beq.n	8008592 <_malloc_r+0xf6>
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	42a2      	cmp	r2, r4
 8008524:	d12b      	bne.n	800857e <_malloc_r+0xe2>
 8008526:	2200      	movs	r2, #0
 8008528:	605a      	str	r2, [r3, #4]
 800852a:	e00f      	b.n	800854c <_malloc_r+0xb0>
 800852c:	6822      	ldr	r2, [r4, #0]
 800852e:	1b52      	subs	r2, r2, r5
 8008530:	d41f      	bmi.n	8008572 <_malloc_r+0xd6>
 8008532:	2a0b      	cmp	r2, #11
 8008534:	d917      	bls.n	8008566 <_malloc_r+0xca>
 8008536:	1961      	adds	r1, r4, r5
 8008538:	42a3      	cmp	r3, r4
 800853a:	6025      	str	r5, [r4, #0]
 800853c:	bf18      	it	ne
 800853e:	6059      	strne	r1, [r3, #4]
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	bf08      	it	eq
 8008544:	f8c8 1000 	streq.w	r1, [r8]
 8008548:	5162      	str	r2, [r4, r5]
 800854a:	604b      	str	r3, [r1, #4]
 800854c:	4638      	mov	r0, r7
 800854e:	f104 060b 	add.w	r6, r4, #11
 8008552:	f000 f829 	bl	80085a8 <__malloc_unlock>
 8008556:	f026 0607 	bic.w	r6, r6, #7
 800855a:	1d23      	adds	r3, r4, #4
 800855c:	1af2      	subs	r2, r6, r3
 800855e:	d0ae      	beq.n	80084be <_malloc_r+0x22>
 8008560:	1b9b      	subs	r3, r3, r6
 8008562:	50a3      	str	r3, [r4, r2]
 8008564:	e7ab      	b.n	80084be <_malloc_r+0x22>
 8008566:	42a3      	cmp	r3, r4
 8008568:	6862      	ldr	r2, [r4, #4]
 800856a:	d1dd      	bne.n	8008528 <_malloc_r+0x8c>
 800856c:	f8c8 2000 	str.w	r2, [r8]
 8008570:	e7ec      	b.n	800854c <_malloc_r+0xb0>
 8008572:	4623      	mov	r3, r4
 8008574:	6864      	ldr	r4, [r4, #4]
 8008576:	e7ac      	b.n	80084d2 <_malloc_r+0x36>
 8008578:	4634      	mov	r4, r6
 800857a:	6876      	ldr	r6, [r6, #4]
 800857c:	e7b4      	b.n	80084e8 <_malloc_r+0x4c>
 800857e:	4613      	mov	r3, r2
 8008580:	e7cc      	b.n	800851c <_malloc_r+0x80>
 8008582:	230c      	movs	r3, #12
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	4638      	mov	r0, r7
 8008588:	f000 f80e 	bl	80085a8 <__malloc_unlock>
 800858c:	e797      	b.n	80084be <_malloc_r+0x22>
 800858e:	6025      	str	r5, [r4, #0]
 8008590:	e7dc      	b.n	800854c <_malloc_r+0xb0>
 8008592:	605b      	str	r3, [r3, #4]
 8008594:	deff      	udf	#255	; 0xff
 8008596:	bf00      	nop
 8008598:	200044f8 	.word	0x200044f8

0800859c <__malloc_lock>:
 800859c:	4801      	ldr	r0, [pc, #4]	; (80085a4 <__malloc_lock+0x8>)
 800859e:	f7ff b87c 	b.w	800769a <__retarget_lock_acquire_recursive>
 80085a2:	bf00      	nop
 80085a4:	200044f4 	.word	0x200044f4

080085a8 <__malloc_unlock>:
 80085a8:	4801      	ldr	r0, [pc, #4]	; (80085b0 <__malloc_unlock+0x8>)
 80085aa:	f7ff b877 	b.w	800769c <__retarget_lock_release_recursive>
 80085ae:	bf00      	nop
 80085b0:	200044f4 	.word	0x200044f4

080085b4 <_Balloc>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	69c6      	ldr	r6, [r0, #28]
 80085b8:	4604      	mov	r4, r0
 80085ba:	460d      	mov	r5, r1
 80085bc:	b976      	cbnz	r6, 80085dc <_Balloc+0x28>
 80085be:	2010      	movs	r0, #16
 80085c0:	f7ff ff44 	bl	800844c <malloc>
 80085c4:	4602      	mov	r2, r0
 80085c6:	61e0      	str	r0, [r4, #28]
 80085c8:	b920      	cbnz	r0, 80085d4 <_Balloc+0x20>
 80085ca:	4b18      	ldr	r3, [pc, #96]	; (800862c <_Balloc+0x78>)
 80085cc:	4818      	ldr	r0, [pc, #96]	; (8008630 <_Balloc+0x7c>)
 80085ce:	216b      	movs	r1, #107	; 0x6b
 80085d0:	f000 fd9c 	bl	800910c <__assert_func>
 80085d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085d8:	6006      	str	r6, [r0, #0]
 80085da:	60c6      	str	r6, [r0, #12]
 80085dc:	69e6      	ldr	r6, [r4, #28]
 80085de:	68f3      	ldr	r3, [r6, #12]
 80085e0:	b183      	cbz	r3, 8008604 <_Balloc+0x50>
 80085e2:	69e3      	ldr	r3, [r4, #28]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ea:	b9b8      	cbnz	r0, 800861c <_Balloc+0x68>
 80085ec:	2101      	movs	r1, #1
 80085ee:	fa01 f605 	lsl.w	r6, r1, r5
 80085f2:	1d72      	adds	r2, r6, #5
 80085f4:	0092      	lsls	r2, r2, #2
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 fda6 	bl	8009148 <_calloc_r>
 80085fc:	b160      	cbz	r0, 8008618 <_Balloc+0x64>
 80085fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008602:	e00e      	b.n	8008622 <_Balloc+0x6e>
 8008604:	2221      	movs	r2, #33	; 0x21
 8008606:	2104      	movs	r1, #4
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fd9d 	bl	8009148 <_calloc_r>
 800860e:	69e3      	ldr	r3, [r4, #28]
 8008610:	60f0      	str	r0, [r6, #12]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e4      	bne.n	80085e2 <_Balloc+0x2e>
 8008618:	2000      	movs	r0, #0
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	6802      	ldr	r2, [r0, #0]
 800861e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008622:	2300      	movs	r3, #0
 8008624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008628:	e7f7      	b.n	800861a <_Balloc+0x66>
 800862a:	bf00      	nop
 800862c:	08009b69 	.word	0x08009b69
 8008630:	08009be9 	.word	0x08009be9

08008634 <_Bfree>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	69c6      	ldr	r6, [r0, #28]
 8008638:	4605      	mov	r5, r0
 800863a:	460c      	mov	r4, r1
 800863c:	b976      	cbnz	r6, 800865c <_Bfree+0x28>
 800863e:	2010      	movs	r0, #16
 8008640:	f7ff ff04 	bl	800844c <malloc>
 8008644:	4602      	mov	r2, r0
 8008646:	61e8      	str	r0, [r5, #28]
 8008648:	b920      	cbnz	r0, 8008654 <_Bfree+0x20>
 800864a:	4b09      	ldr	r3, [pc, #36]	; (8008670 <_Bfree+0x3c>)
 800864c:	4809      	ldr	r0, [pc, #36]	; (8008674 <_Bfree+0x40>)
 800864e:	218f      	movs	r1, #143	; 0x8f
 8008650:	f000 fd5c 	bl	800910c <__assert_func>
 8008654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008658:	6006      	str	r6, [r0, #0]
 800865a:	60c6      	str	r6, [r0, #12]
 800865c:	b13c      	cbz	r4, 800866e <_Bfree+0x3a>
 800865e:	69eb      	ldr	r3, [r5, #28]
 8008660:	6862      	ldr	r2, [r4, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008668:	6021      	str	r1, [r4, #0]
 800866a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800866e:	bd70      	pop	{r4, r5, r6, pc}
 8008670:	08009b69 	.word	0x08009b69
 8008674:	08009be9 	.word	0x08009be9

08008678 <__multadd>:
 8008678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867c:	690d      	ldr	r5, [r1, #16]
 800867e:	4607      	mov	r7, r0
 8008680:	460c      	mov	r4, r1
 8008682:	461e      	mov	r6, r3
 8008684:	f101 0c14 	add.w	ip, r1, #20
 8008688:	2000      	movs	r0, #0
 800868a:	f8dc 3000 	ldr.w	r3, [ip]
 800868e:	b299      	uxth	r1, r3
 8008690:	fb02 6101 	mla	r1, r2, r1, r6
 8008694:	0c1e      	lsrs	r6, r3, #16
 8008696:	0c0b      	lsrs	r3, r1, #16
 8008698:	fb02 3306 	mla	r3, r2, r6, r3
 800869c:	b289      	uxth	r1, r1
 800869e:	3001      	adds	r0, #1
 80086a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086a4:	4285      	cmp	r5, r0
 80086a6:	f84c 1b04 	str.w	r1, [ip], #4
 80086aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086ae:	dcec      	bgt.n	800868a <__multadd+0x12>
 80086b0:	b30e      	cbz	r6, 80086f6 <__multadd+0x7e>
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	dc19      	bgt.n	80086ec <__multadd+0x74>
 80086b8:	6861      	ldr	r1, [r4, #4]
 80086ba:	4638      	mov	r0, r7
 80086bc:	3101      	adds	r1, #1
 80086be:	f7ff ff79 	bl	80085b4 <_Balloc>
 80086c2:	4680      	mov	r8, r0
 80086c4:	b928      	cbnz	r0, 80086d2 <__multadd+0x5a>
 80086c6:	4602      	mov	r2, r0
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <__multadd+0x84>)
 80086ca:	480d      	ldr	r0, [pc, #52]	; (8008700 <__multadd+0x88>)
 80086cc:	21ba      	movs	r1, #186	; 0xba
 80086ce:	f000 fd1d 	bl	800910c <__assert_func>
 80086d2:	6922      	ldr	r2, [r4, #16]
 80086d4:	3202      	adds	r2, #2
 80086d6:	f104 010c 	add.w	r1, r4, #12
 80086da:	0092      	lsls	r2, r2, #2
 80086dc:	300c      	adds	r0, #12
 80086de:	f7fe ffde 	bl	800769e <memcpy>
 80086e2:	4621      	mov	r1, r4
 80086e4:	4638      	mov	r0, r7
 80086e6:	f7ff ffa5 	bl	8008634 <_Bfree>
 80086ea:	4644      	mov	r4, r8
 80086ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086f0:	3501      	adds	r5, #1
 80086f2:	615e      	str	r6, [r3, #20]
 80086f4:	6125      	str	r5, [r4, #16]
 80086f6:	4620      	mov	r0, r4
 80086f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086fc:	08009bd8 	.word	0x08009bd8
 8008700:	08009be9 	.word	0x08009be9

08008704 <__hi0bits>:
 8008704:	0c03      	lsrs	r3, r0, #16
 8008706:	041b      	lsls	r3, r3, #16
 8008708:	b9d3      	cbnz	r3, 8008740 <__hi0bits+0x3c>
 800870a:	0400      	lsls	r0, r0, #16
 800870c:	2310      	movs	r3, #16
 800870e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008712:	bf04      	itt	eq
 8008714:	0200      	lsleq	r0, r0, #8
 8008716:	3308      	addeq	r3, #8
 8008718:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800871c:	bf04      	itt	eq
 800871e:	0100      	lsleq	r0, r0, #4
 8008720:	3304      	addeq	r3, #4
 8008722:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008726:	bf04      	itt	eq
 8008728:	0080      	lsleq	r0, r0, #2
 800872a:	3302      	addeq	r3, #2
 800872c:	2800      	cmp	r0, #0
 800872e:	db05      	blt.n	800873c <__hi0bits+0x38>
 8008730:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008734:	f103 0301 	add.w	r3, r3, #1
 8008738:	bf08      	it	eq
 800873a:	2320      	moveq	r3, #32
 800873c:	4618      	mov	r0, r3
 800873e:	4770      	bx	lr
 8008740:	2300      	movs	r3, #0
 8008742:	e7e4      	b.n	800870e <__hi0bits+0xa>

08008744 <__lo0bits>:
 8008744:	6803      	ldr	r3, [r0, #0]
 8008746:	f013 0207 	ands.w	r2, r3, #7
 800874a:	d00c      	beq.n	8008766 <__lo0bits+0x22>
 800874c:	07d9      	lsls	r1, r3, #31
 800874e:	d422      	bmi.n	8008796 <__lo0bits+0x52>
 8008750:	079a      	lsls	r2, r3, #30
 8008752:	bf49      	itett	mi
 8008754:	085b      	lsrmi	r3, r3, #1
 8008756:	089b      	lsrpl	r3, r3, #2
 8008758:	6003      	strmi	r3, [r0, #0]
 800875a:	2201      	movmi	r2, #1
 800875c:	bf5c      	itt	pl
 800875e:	6003      	strpl	r3, [r0, #0]
 8008760:	2202      	movpl	r2, #2
 8008762:	4610      	mov	r0, r2
 8008764:	4770      	bx	lr
 8008766:	b299      	uxth	r1, r3
 8008768:	b909      	cbnz	r1, 800876e <__lo0bits+0x2a>
 800876a:	0c1b      	lsrs	r3, r3, #16
 800876c:	2210      	movs	r2, #16
 800876e:	b2d9      	uxtb	r1, r3
 8008770:	b909      	cbnz	r1, 8008776 <__lo0bits+0x32>
 8008772:	3208      	adds	r2, #8
 8008774:	0a1b      	lsrs	r3, r3, #8
 8008776:	0719      	lsls	r1, r3, #28
 8008778:	bf04      	itt	eq
 800877a:	091b      	lsreq	r3, r3, #4
 800877c:	3204      	addeq	r2, #4
 800877e:	0799      	lsls	r1, r3, #30
 8008780:	bf04      	itt	eq
 8008782:	089b      	lsreq	r3, r3, #2
 8008784:	3202      	addeq	r2, #2
 8008786:	07d9      	lsls	r1, r3, #31
 8008788:	d403      	bmi.n	8008792 <__lo0bits+0x4e>
 800878a:	085b      	lsrs	r3, r3, #1
 800878c:	f102 0201 	add.w	r2, r2, #1
 8008790:	d003      	beq.n	800879a <__lo0bits+0x56>
 8008792:	6003      	str	r3, [r0, #0]
 8008794:	e7e5      	b.n	8008762 <__lo0bits+0x1e>
 8008796:	2200      	movs	r2, #0
 8008798:	e7e3      	b.n	8008762 <__lo0bits+0x1e>
 800879a:	2220      	movs	r2, #32
 800879c:	e7e1      	b.n	8008762 <__lo0bits+0x1e>
	...

080087a0 <__i2b>:
 80087a0:	b510      	push	{r4, lr}
 80087a2:	460c      	mov	r4, r1
 80087a4:	2101      	movs	r1, #1
 80087a6:	f7ff ff05 	bl	80085b4 <_Balloc>
 80087aa:	4602      	mov	r2, r0
 80087ac:	b928      	cbnz	r0, 80087ba <__i2b+0x1a>
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <__i2b+0x24>)
 80087b0:	4805      	ldr	r0, [pc, #20]	; (80087c8 <__i2b+0x28>)
 80087b2:	f240 1145 	movw	r1, #325	; 0x145
 80087b6:	f000 fca9 	bl	800910c <__assert_func>
 80087ba:	2301      	movs	r3, #1
 80087bc:	6144      	str	r4, [r0, #20]
 80087be:	6103      	str	r3, [r0, #16]
 80087c0:	bd10      	pop	{r4, pc}
 80087c2:	bf00      	nop
 80087c4:	08009bd8 	.word	0x08009bd8
 80087c8:	08009be9 	.word	0x08009be9

080087cc <__multiply>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	4691      	mov	r9, r2
 80087d2:	690a      	ldr	r2, [r1, #16]
 80087d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087d8:	429a      	cmp	r2, r3
 80087da:	bfb8      	it	lt
 80087dc:	460b      	movlt	r3, r1
 80087de:	460c      	mov	r4, r1
 80087e0:	bfbc      	itt	lt
 80087e2:	464c      	movlt	r4, r9
 80087e4:	4699      	movlt	r9, r3
 80087e6:	6927      	ldr	r7, [r4, #16]
 80087e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087ec:	68a3      	ldr	r3, [r4, #8]
 80087ee:	6861      	ldr	r1, [r4, #4]
 80087f0:	eb07 060a 	add.w	r6, r7, sl
 80087f4:	42b3      	cmp	r3, r6
 80087f6:	b085      	sub	sp, #20
 80087f8:	bfb8      	it	lt
 80087fa:	3101      	addlt	r1, #1
 80087fc:	f7ff feda 	bl	80085b4 <_Balloc>
 8008800:	b930      	cbnz	r0, 8008810 <__multiply+0x44>
 8008802:	4602      	mov	r2, r0
 8008804:	4b44      	ldr	r3, [pc, #272]	; (8008918 <__multiply+0x14c>)
 8008806:	4845      	ldr	r0, [pc, #276]	; (800891c <__multiply+0x150>)
 8008808:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800880c:	f000 fc7e 	bl	800910c <__assert_func>
 8008810:	f100 0514 	add.w	r5, r0, #20
 8008814:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008818:	462b      	mov	r3, r5
 800881a:	2200      	movs	r2, #0
 800881c:	4543      	cmp	r3, r8
 800881e:	d321      	bcc.n	8008864 <__multiply+0x98>
 8008820:	f104 0314 	add.w	r3, r4, #20
 8008824:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008828:	f109 0314 	add.w	r3, r9, #20
 800882c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008830:	9202      	str	r2, [sp, #8]
 8008832:	1b3a      	subs	r2, r7, r4
 8008834:	3a15      	subs	r2, #21
 8008836:	f022 0203 	bic.w	r2, r2, #3
 800883a:	3204      	adds	r2, #4
 800883c:	f104 0115 	add.w	r1, r4, #21
 8008840:	428f      	cmp	r7, r1
 8008842:	bf38      	it	cc
 8008844:	2204      	movcc	r2, #4
 8008846:	9201      	str	r2, [sp, #4]
 8008848:	9a02      	ldr	r2, [sp, #8]
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	429a      	cmp	r2, r3
 800884e:	d80c      	bhi.n	800886a <__multiply+0x9e>
 8008850:	2e00      	cmp	r6, #0
 8008852:	dd03      	ble.n	800885c <__multiply+0x90>
 8008854:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008858:	2b00      	cmp	r3, #0
 800885a:	d05b      	beq.n	8008914 <__multiply+0x148>
 800885c:	6106      	str	r6, [r0, #16]
 800885e:	b005      	add	sp, #20
 8008860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008864:	f843 2b04 	str.w	r2, [r3], #4
 8008868:	e7d8      	b.n	800881c <__multiply+0x50>
 800886a:	f8b3 a000 	ldrh.w	sl, [r3]
 800886e:	f1ba 0f00 	cmp.w	sl, #0
 8008872:	d024      	beq.n	80088be <__multiply+0xf2>
 8008874:	f104 0e14 	add.w	lr, r4, #20
 8008878:	46a9      	mov	r9, r5
 800887a:	f04f 0c00 	mov.w	ip, #0
 800887e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008882:	f8d9 1000 	ldr.w	r1, [r9]
 8008886:	fa1f fb82 	uxth.w	fp, r2
 800888a:	b289      	uxth	r1, r1
 800888c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008890:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008894:	f8d9 2000 	ldr.w	r2, [r9]
 8008898:	4461      	add	r1, ip
 800889a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800889e:	fb0a c20b 	mla	r2, sl, fp, ip
 80088a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088a6:	b289      	uxth	r1, r1
 80088a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088ac:	4577      	cmp	r7, lr
 80088ae:	f849 1b04 	str.w	r1, [r9], #4
 80088b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088b6:	d8e2      	bhi.n	800887e <__multiply+0xb2>
 80088b8:	9a01      	ldr	r2, [sp, #4]
 80088ba:	f845 c002 	str.w	ip, [r5, r2]
 80088be:	9a03      	ldr	r2, [sp, #12]
 80088c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088c4:	3304      	adds	r3, #4
 80088c6:	f1b9 0f00 	cmp.w	r9, #0
 80088ca:	d021      	beq.n	8008910 <__multiply+0x144>
 80088cc:	6829      	ldr	r1, [r5, #0]
 80088ce:	f104 0c14 	add.w	ip, r4, #20
 80088d2:	46ae      	mov	lr, r5
 80088d4:	f04f 0a00 	mov.w	sl, #0
 80088d8:	f8bc b000 	ldrh.w	fp, [ip]
 80088dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088e0:	fb09 220b 	mla	r2, r9, fp, r2
 80088e4:	4452      	add	r2, sl
 80088e6:	b289      	uxth	r1, r1
 80088e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088ec:	f84e 1b04 	str.w	r1, [lr], #4
 80088f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80088f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088f8:	f8be 1000 	ldrh.w	r1, [lr]
 80088fc:	fb09 110a 	mla	r1, r9, sl, r1
 8008900:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008904:	4567      	cmp	r7, ip
 8008906:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800890a:	d8e5      	bhi.n	80088d8 <__multiply+0x10c>
 800890c:	9a01      	ldr	r2, [sp, #4]
 800890e:	50a9      	str	r1, [r5, r2]
 8008910:	3504      	adds	r5, #4
 8008912:	e799      	b.n	8008848 <__multiply+0x7c>
 8008914:	3e01      	subs	r6, #1
 8008916:	e79b      	b.n	8008850 <__multiply+0x84>
 8008918:	08009bd8 	.word	0x08009bd8
 800891c:	08009be9 	.word	0x08009be9

08008920 <__pow5mult>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	4615      	mov	r5, r2
 8008926:	f012 0203 	ands.w	r2, r2, #3
 800892a:	4606      	mov	r6, r0
 800892c:	460f      	mov	r7, r1
 800892e:	d007      	beq.n	8008940 <__pow5mult+0x20>
 8008930:	4c25      	ldr	r4, [pc, #148]	; (80089c8 <__pow5mult+0xa8>)
 8008932:	3a01      	subs	r2, #1
 8008934:	2300      	movs	r3, #0
 8008936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800893a:	f7ff fe9d 	bl	8008678 <__multadd>
 800893e:	4607      	mov	r7, r0
 8008940:	10ad      	asrs	r5, r5, #2
 8008942:	d03d      	beq.n	80089c0 <__pow5mult+0xa0>
 8008944:	69f4      	ldr	r4, [r6, #28]
 8008946:	b97c      	cbnz	r4, 8008968 <__pow5mult+0x48>
 8008948:	2010      	movs	r0, #16
 800894a:	f7ff fd7f 	bl	800844c <malloc>
 800894e:	4602      	mov	r2, r0
 8008950:	61f0      	str	r0, [r6, #28]
 8008952:	b928      	cbnz	r0, 8008960 <__pow5mult+0x40>
 8008954:	4b1d      	ldr	r3, [pc, #116]	; (80089cc <__pow5mult+0xac>)
 8008956:	481e      	ldr	r0, [pc, #120]	; (80089d0 <__pow5mult+0xb0>)
 8008958:	f240 11b3 	movw	r1, #435	; 0x1b3
 800895c:	f000 fbd6 	bl	800910c <__assert_func>
 8008960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008964:	6004      	str	r4, [r0, #0]
 8008966:	60c4      	str	r4, [r0, #12]
 8008968:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800896c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008970:	b94c      	cbnz	r4, 8008986 <__pow5mult+0x66>
 8008972:	f240 2171 	movw	r1, #625	; 0x271
 8008976:	4630      	mov	r0, r6
 8008978:	f7ff ff12 	bl	80087a0 <__i2b>
 800897c:	2300      	movs	r3, #0
 800897e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008982:	4604      	mov	r4, r0
 8008984:	6003      	str	r3, [r0, #0]
 8008986:	f04f 0900 	mov.w	r9, #0
 800898a:	07eb      	lsls	r3, r5, #31
 800898c:	d50a      	bpl.n	80089a4 <__pow5mult+0x84>
 800898e:	4639      	mov	r1, r7
 8008990:	4622      	mov	r2, r4
 8008992:	4630      	mov	r0, r6
 8008994:	f7ff ff1a 	bl	80087cc <__multiply>
 8008998:	4639      	mov	r1, r7
 800899a:	4680      	mov	r8, r0
 800899c:	4630      	mov	r0, r6
 800899e:	f7ff fe49 	bl	8008634 <_Bfree>
 80089a2:	4647      	mov	r7, r8
 80089a4:	106d      	asrs	r5, r5, #1
 80089a6:	d00b      	beq.n	80089c0 <__pow5mult+0xa0>
 80089a8:	6820      	ldr	r0, [r4, #0]
 80089aa:	b938      	cbnz	r0, 80089bc <__pow5mult+0x9c>
 80089ac:	4622      	mov	r2, r4
 80089ae:	4621      	mov	r1, r4
 80089b0:	4630      	mov	r0, r6
 80089b2:	f7ff ff0b 	bl	80087cc <__multiply>
 80089b6:	6020      	str	r0, [r4, #0]
 80089b8:	f8c0 9000 	str.w	r9, [r0]
 80089bc:	4604      	mov	r4, r0
 80089be:	e7e4      	b.n	800898a <__pow5mult+0x6a>
 80089c0:	4638      	mov	r0, r7
 80089c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089c6:	bf00      	nop
 80089c8:	08009d38 	.word	0x08009d38
 80089cc:	08009b69 	.word	0x08009b69
 80089d0:	08009be9 	.word	0x08009be9

080089d4 <__lshift>:
 80089d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	460c      	mov	r4, r1
 80089da:	6849      	ldr	r1, [r1, #4]
 80089dc:	6923      	ldr	r3, [r4, #16]
 80089de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089e2:	68a3      	ldr	r3, [r4, #8]
 80089e4:	4607      	mov	r7, r0
 80089e6:	4691      	mov	r9, r2
 80089e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089ec:	f108 0601 	add.w	r6, r8, #1
 80089f0:	42b3      	cmp	r3, r6
 80089f2:	db0b      	blt.n	8008a0c <__lshift+0x38>
 80089f4:	4638      	mov	r0, r7
 80089f6:	f7ff fddd 	bl	80085b4 <_Balloc>
 80089fa:	4605      	mov	r5, r0
 80089fc:	b948      	cbnz	r0, 8008a12 <__lshift+0x3e>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b28      	ldr	r3, [pc, #160]	; (8008aa4 <__lshift+0xd0>)
 8008a02:	4829      	ldr	r0, [pc, #164]	; (8008aa8 <__lshift+0xd4>)
 8008a04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a08:	f000 fb80 	bl	800910c <__assert_func>
 8008a0c:	3101      	adds	r1, #1
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	e7ee      	b.n	80089f0 <__lshift+0x1c>
 8008a12:	2300      	movs	r3, #0
 8008a14:	f100 0114 	add.w	r1, r0, #20
 8008a18:	f100 0210 	add.w	r2, r0, #16
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	4553      	cmp	r3, sl
 8008a20:	db33      	blt.n	8008a8a <__lshift+0xb6>
 8008a22:	6920      	ldr	r0, [r4, #16]
 8008a24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a28:	f104 0314 	add.w	r3, r4, #20
 8008a2c:	f019 091f 	ands.w	r9, r9, #31
 8008a30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a38:	d02b      	beq.n	8008a92 <__lshift+0xbe>
 8008a3a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a3e:	468a      	mov	sl, r1
 8008a40:	2200      	movs	r2, #0
 8008a42:	6818      	ldr	r0, [r3, #0]
 8008a44:	fa00 f009 	lsl.w	r0, r0, r9
 8008a48:	4310      	orrs	r0, r2
 8008a4a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a52:	459c      	cmp	ip, r3
 8008a54:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a58:	d8f3      	bhi.n	8008a42 <__lshift+0x6e>
 8008a5a:	ebac 0304 	sub.w	r3, ip, r4
 8008a5e:	3b15      	subs	r3, #21
 8008a60:	f023 0303 	bic.w	r3, r3, #3
 8008a64:	3304      	adds	r3, #4
 8008a66:	f104 0015 	add.w	r0, r4, #21
 8008a6a:	4584      	cmp	ip, r0
 8008a6c:	bf38      	it	cc
 8008a6e:	2304      	movcc	r3, #4
 8008a70:	50ca      	str	r2, [r1, r3]
 8008a72:	b10a      	cbz	r2, 8008a78 <__lshift+0xa4>
 8008a74:	f108 0602 	add.w	r6, r8, #2
 8008a78:	3e01      	subs	r6, #1
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	612e      	str	r6, [r5, #16]
 8008a7e:	4621      	mov	r1, r4
 8008a80:	f7ff fdd8 	bl	8008634 <_Bfree>
 8008a84:	4628      	mov	r0, r5
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a8e:	3301      	adds	r3, #1
 8008a90:	e7c5      	b.n	8008a1e <__lshift+0x4a>
 8008a92:	3904      	subs	r1, #4
 8008a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a98:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a9c:	459c      	cmp	ip, r3
 8008a9e:	d8f9      	bhi.n	8008a94 <__lshift+0xc0>
 8008aa0:	e7ea      	b.n	8008a78 <__lshift+0xa4>
 8008aa2:	bf00      	nop
 8008aa4:	08009bd8 	.word	0x08009bd8
 8008aa8:	08009be9 	.word	0x08009be9

08008aac <__mcmp>:
 8008aac:	b530      	push	{r4, r5, lr}
 8008aae:	6902      	ldr	r2, [r0, #16]
 8008ab0:	690c      	ldr	r4, [r1, #16]
 8008ab2:	1b12      	subs	r2, r2, r4
 8008ab4:	d10e      	bne.n	8008ad4 <__mcmp+0x28>
 8008ab6:	f100 0314 	add.w	r3, r0, #20
 8008aba:	3114      	adds	r1, #20
 8008abc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ac0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ac4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ac8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008acc:	42a5      	cmp	r5, r4
 8008ace:	d003      	beq.n	8008ad8 <__mcmp+0x2c>
 8008ad0:	d305      	bcc.n	8008ade <__mcmp+0x32>
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	bd30      	pop	{r4, r5, pc}
 8008ad8:	4283      	cmp	r3, r0
 8008ada:	d3f3      	bcc.n	8008ac4 <__mcmp+0x18>
 8008adc:	e7fa      	b.n	8008ad4 <__mcmp+0x28>
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae2:	e7f7      	b.n	8008ad4 <__mcmp+0x28>

08008ae4 <__mdiff>:
 8008ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	460c      	mov	r4, r1
 8008aea:	4606      	mov	r6, r0
 8008aec:	4611      	mov	r1, r2
 8008aee:	4620      	mov	r0, r4
 8008af0:	4690      	mov	r8, r2
 8008af2:	f7ff ffdb 	bl	8008aac <__mcmp>
 8008af6:	1e05      	subs	r5, r0, #0
 8008af8:	d110      	bne.n	8008b1c <__mdiff+0x38>
 8008afa:	4629      	mov	r1, r5
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff fd59 	bl	80085b4 <_Balloc>
 8008b02:	b930      	cbnz	r0, 8008b12 <__mdiff+0x2e>
 8008b04:	4b3a      	ldr	r3, [pc, #232]	; (8008bf0 <__mdiff+0x10c>)
 8008b06:	4602      	mov	r2, r0
 8008b08:	f240 2137 	movw	r1, #567	; 0x237
 8008b0c:	4839      	ldr	r0, [pc, #228]	; (8008bf4 <__mdiff+0x110>)
 8008b0e:	f000 fafd 	bl	800910c <__assert_func>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1c:	bfa4      	itt	ge
 8008b1e:	4643      	movge	r3, r8
 8008b20:	46a0      	movge	r8, r4
 8008b22:	4630      	mov	r0, r6
 8008b24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b28:	bfa6      	itte	ge
 8008b2a:	461c      	movge	r4, r3
 8008b2c:	2500      	movge	r5, #0
 8008b2e:	2501      	movlt	r5, #1
 8008b30:	f7ff fd40 	bl	80085b4 <_Balloc>
 8008b34:	b920      	cbnz	r0, 8008b40 <__mdiff+0x5c>
 8008b36:	4b2e      	ldr	r3, [pc, #184]	; (8008bf0 <__mdiff+0x10c>)
 8008b38:	4602      	mov	r2, r0
 8008b3a:	f240 2145 	movw	r1, #581	; 0x245
 8008b3e:	e7e5      	b.n	8008b0c <__mdiff+0x28>
 8008b40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b44:	6926      	ldr	r6, [r4, #16]
 8008b46:	60c5      	str	r5, [r0, #12]
 8008b48:	f104 0914 	add.w	r9, r4, #20
 8008b4c:	f108 0514 	add.w	r5, r8, #20
 8008b50:	f100 0e14 	add.w	lr, r0, #20
 8008b54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b5c:	f108 0210 	add.w	r2, r8, #16
 8008b60:	46f2      	mov	sl, lr
 8008b62:	2100      	movs	r1, #0
 8008b64:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b6c:	fa11 f88b 	uxtah	r8, r1, fp
 8008b70:	b299      	uxth	r1, r3
 8008b72:	0c1b      	lsrs	r3, r3, #16
 8008b74:	eba8 0801 	sub.w	r8, r8, r1
 8008b78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b80:	fa1f f888 	uxth.w	r8, r8
 8008b84:	1419      	asrs	r1, r3, #16
 8008b86:	454e      	cmp	r6, r9
 8008b88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b8c:	f84a 3b04 	str.w	r3, [sl], #4
 8008b90:	d8e8      	bhi.n	8008b64 <__mdiff+0x80>
 8008b92:	1b33      	subs	r3, r6, r4
 8008b94:	3b15      	subs	r3, #21
 8008b96:	f023 0303 	bic.w	r3, r3, #3
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	3415      	adds	r4, #21
 8008b9e:	42a6      	cmp	r6, r4
 8008ba0:	bf38      	it	cc
 8008ba2:	2304      	movcc	r3, #4
 8008ba4:	441d      	add	r5, r3
 8008ba6:	4473      	add	r3, lr
 8008ba8:	469e      	mov	lr, r3
 8008baa:	462e      	mov	r6, r5
 8008bac:	4566      	cmp	r6, ip
 8008bae:	d30e      	bcc.n	8008bce <__mdiff+0xea>
 8008bb0:	f10c 0203 	add.w	r2, ip, #3
 8008bb4:	1b52      	subs	r2, r2, r5
 8008bb6:	f022 0203 	bic.w	r2, r2, #3
 8008bba:	3d03      	subs	r5, #3
 8008bbc:	45ac      	cmp	ip, r5
 8008bbe:	bf38      	it	cc
 8008bc0:	2200      	movcc	r2, #0
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008bc8:	b17a      	cbz	r2, 8008bea <__mdiff+0x106>
 8008bca:	6107      	str	r7, [r0, #16]
 8008bcc:	e7a4      	b.n	8008b18 <__mdiff+0x34>
 8008bce:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bd2:	fa11 f288 	uxtah	r2, r1, r8
 8008bd6:	1414      	asrs	r4, r2, #16
 8008bd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bdc:	b292      	uxth	r2, r2
 8008bde:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008be2:	f84e 2b04 	str.w	r2, [lr], #4
 8008be6:	1421      	asrs	r1, r4, #16
 8008be8:	e7e0      	b.n	8008bac <__mdiff+0xc8>
 8008bea:	3f01      	subs	r7, #1
 8008bec:	e7ea      	b.n	8008bc4 <__mdiff+0xe0>
 8008bee:	bf00      	nop
 8008bf0:	08009bd8 	.word	0x08009bd8
 8008bf4:	08009be9 	.word	0x08009be9

08008bf8 <__d2b>:
 8008bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	460f      	mov	r7, r1
 8008bfe:	2101      	movs	r1, #1
 8008c00:	ec59 8b10 	vmov	r8, r9, d0
 8008c04:	4616      	mov	r6, r2
 8008c06:	f7ff fcd5 	bl	80085b4 <_Balloc>
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	b930      	cbnz	r0, 8008c1c <__d2b+0x24>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b24      	ldr	r3, [pc, #144]	; (8008ca4 <__d2b+0xac>)
 8008c12:	4825      	ldr	r0, [pc, #148]	; (8008ca8 <__d2b+0xb0>)
 8008c14:	f240 310f 	movw	r1, #783	; 0x30f
 8008c18:	f000 fa78 	bl	800910c <__assert_func>
 8008c1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c24:	bb2d      	cbnz	r5, 8008c72 <__d2b+0x7a>
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	f1b8 0300 	subs.w	r3, r8, #0
 8008c2c:	d026      	beq.n	8008c7c <__d2b+0x84>
 8008c2e:	4668      	mov	r0, sp
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	f7ff fd87 	bl	8008744 <__lo0bits>
 8008c36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c3a:	b1e8      	cbz	r0, 8008c78 <__d2b+0x80>
 8008c3c:	f1c0 0320 	rsb	r3, r0, #32
 8008c40:	fa02 f303 	lsl.w	r3, r2, r3
 8008c44:	430b      	orrs	r3, r1
 8008c46:	40c2      	lsrs	r2, r0
 8008c48:	6163      	str	r3, [r4, #20]
 8008c4a:	9201      	str	r2, [sp, #4]
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	61a3      	str	r3, [r4, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bf14      	ite	ne
 8008c54:	2202      	movne	r2, #2
 8008c56:	2201      	moveq	r2, #1
 8008c58:	6122      	str	r2, [r4, #16]
 8008c5a:	b1bd      	cbz	r5, 8008c8c <__d2b+0x94>
 8008c5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c60:	4405      	add	r5, r0
 8008c62:	603d      	str	r5, [r7, #0]
 8008c64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c68:	6030      	str	r0, [r6, #0]
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	b003      	add	sp, #12
 8008c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c76:	e7d6      	b.n	8008c26 <__d2b+0x2e>
 8008c78:	6161      	str	r1, [r4, #20]
 8008c7a:	e7e7      	b.n	8008c4c <__d2b+0x54>
 8008c7c:	a801      	add	r0, sp, #4
 8008c7e:	f7ff fd61 	bl	8008744 <__lo0bits>
 8008c82:	9b01      	ldr	r3, [sp, #4]
 8008c84:	6163      	str	r3, [r4, #20]
 8008c86:	3020      	adds	r0, #32
 8008c88:	2201      	movs	r2, #1
 8008c8a:	e7e5      	b.n	8008c58 <__d2b+0x60>
 8008c8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c94:	6038      	str	r0, [r7, #0]
 8008c96:	6918      	ldr	r0, [r3, #16]
 8008c98:	f7ff fd34 	bl	8008704 <__hi0bits>
 8008c9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ca0:	e7e2      	b.n	8008c68 <__d2b+0x70>
 8008ca2:	bf00      	nop
 8008ca4:	08009bd8 	.word	0x08009bd8
 8008ca8:	08009be9 	.word	0x08009be9

08008cac <__ssputs_r>:
 8008cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb0:	688e      	ldr	r6, [r1, #8]
 8008cb2:	461f      	mov	r7, r3
 8008cb4:	42be      	cmp	r6, r7
 8008cb6:	680b      	ldr	r3, [r1, #0]
 8008cb8:	4682      	mov	sl, r0
 8008cba:	460c      	mov	r4, r1
 8008cbc:	4690      	mov	r8, r2
 8008cbe:	d82c      	bhi.n	8008d1a <__ssputs_r+0x6e>
 8008cc0:	898a      	ldrh	r2, [r1, #12]
 8008cc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cc6:	d026      	beq.n	8008d16 <__ssputs_r+0x6a>
 8008cc8:	6965      	ldr	r5, [r4, #20]
 8008cca:	6909      	ldr	r1, [r1, #16]
 8008ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cd0:	eba3 0901 	sub.w	r9, r3, r1
 8008cd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cd8:	1c7b      	adds	r3, r7, #1
 8008cda:	444b      	add	r3, r9
 8008cdc:	106d      	asrs	r5, r5, #1
 8008cde:	429d      	cmp	r5, r3
 8008ce0:	bf38      	it	cc
 8008ce2:	461d      	movcc	r5, r3
 8008ce4:	0553      	lsls	r3, r2, #21
 8008ce6:	d527      	bpl.n	8008d38 <__ssputs_r+0x8c>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f7ff fbd7 	bl	800849c <_malloc_r>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	b360      	cbz	r0, 8008d4c <__ssputs_r+0xa0>
 8008cf2:	6921      	ldr	r1, [r4, #16]
 8008cf4:	464a      	mov	r2, r9
 8008cf6:	f7fe fcd2 	bl	800769e <memcpy>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	6126      	str	r6, [r4, #16]
 8008d08:	6165      	str	r5, [r4, #20]
 8008d0a:	444e      	add	r6, r9
 8008d0c:	eba5 0509 	sub.w	r5, r5, r9
 8008d10:	6026      	str	r6, [r4, #0]
 8008d12:	60a5      	str	r5, [r4, #8]
 8008d14:	463e      	mov	r6, r7
 8008d16:	42be      	cmp	r6, r7
 8008d18:	d900      	bls.n	8008d1c <__ssputs_r+0x70>
 8008d1a:	463e      	mov	r6, r7
 8008d1c:	6820      	ldr	r0, [r4, #0]
 8008d1e:	4632      	mov	r2, r6
 8008d20:	4641      	mov	r1, r8
 8008d22:	f000 f9c9 	bl	80090b8 <memmove>
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	1b9b      	subs	r3, r3, r6
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	4433      	add	r3, r6
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	2000      	movs	r0, #0
 8008d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d38:	462a      	mov	r2, r5
 8008d3a:	f000 fa2d 	bl	8009198 <_realloc_r>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d1e0      	bne.n	8008d06 <__ssputs_r+0x5a>
 8008d44:	6921      	ldr	r1, [r4, #16]
 8008d46:	4650      	mov	r0, sl
 8008d48:	f7ff fb34 	bl	80083b4 <_free_r>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	f8ca 3000 	str.w	r3, [sl]
 8008d52:	89a3      	ldrh	r3, [r4, #12]
 8008d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5e:	e7e9      	b.n	8008d34 <__ssputs_r+0x88>

08008d60 <_svfiprintf_r>:
 8008d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	4698      	mov	r8, r3
 8008d66:	898b      	ldrh	r3, [r1, #12]
 8008d68:	061b      	lsls	r3, r3, #24
 8008d6a:	b09d      	sub	sp, #116	; 0x74
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	460d      	mov	r5, r1
 8008d70:	4614      	mov	r4, r2
 8008d72:	d50e      	bpl.n	8008d92 <_svfiprintf_r+0x32>
 8008d74:	690b      	ldr	r3, [r1, #16]
 8008d76:	b963      	cbnz	r3, 8008d92 <_svfiprintf_r+0x32>
 8008d78:	2140      	movs	r1, #64	; 0x40
 8008d7a:	f7ff fb8f 	bl	800849c <_malloc_r>
 8008d7e:	6028      	str	r0, [r5, #0]
 8008d80:	6128      	str	r0, [r5, #16]
 8008d82:	b920      	cbnz	r0, 8008d8e <_svfiprintf_r+0x2e>
 8008d84:	230c      	movs	r3, #12
 8008d86:	603b      	str	r3, [r7, #0]
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8c:	e0d0      	b.n	8008f30 <_svfiprintf_r+0x1d0>
 8008d8e:	2340      	movs	r3, #64	; 0x40
 8008d90:	616b      	str	r3, [r5, #20]
 8008d92:	2300      	movs	r3, #0
 8008d94:	9309      	str	r3, [sp, #36]	; 0x24
 8008d96:	2320      	movs	r3, #32
 8008d98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008da0:	2330      	movs	r3, #48	; 0x30
 8008da2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f48 <_svfiprintf_r+0x1e8>
 8008da6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008daa:	f04f 0901 	mov.w	r9, #1
 8008dae:	4623      	mov	r3, r4
 8008db0:	469a      	mov	sl, r3
 8008db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008db6:	b10a      	cbz	r2, 8008dbc <_svfiprintf_r+0x5c>
 8008db8:	2a25      	cmp	r2, #37	; 0x25
 8008dba:	d1f9      	bne.n	8008db0 <_svfiprintf_r+0x50>
 8008dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8008dc0:	d00b      	beq.n	8008dda <_svfiprintf_r+0x7a>
 8008dc2:	465b      	mov	r3, fp
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	4638      	mov	r0, r7
 8008dca:	f7ff ff6f 	bl	8008cac <__ssputs_r>
 8008dce:	3001      	adds	r0, #1
 8008dd0:	f000 80a9 	beq.w	8008f26 <_svfiprintf_r+0x1c6>
 8008dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd6:	445a      	add	r2, fp
 8008dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8008dda:	f89a 3000 	ldrb.w	r3, [sl]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 80a1 	beq.w	8008f26 <_svfiprintf_r+0x1c6>
 8008de4:	2300      	movs	r3, #0
 8008de6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dee:	f10a 0a01 	add.w	sl, sl, #1
 8008df2:	9304      	str	r3, [sp, #16]
 8008df4:	9307      	str	r3, [sp, #28]
 8008df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8008dfc:	4654      	mov	r4, sl
 8008dfe:	2205      	movs	r2, #5
 8008e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e04:	4850      	ldr	r0, [pc, #320]	; (8008f48 <_svfiprintf_r+0x1e8>)
 8008e06:	f7f7 f9eb 	bl	80001e0 <memchr>
 8008e0a:	9a04      	ldr	r2, [sp, #16]
 8008e0c:	b9d8      	cbnz	r0, 8008e46 <_svfiprintf_r+0xe6>
 8008e0e:	06d0      	lsls	r0, r2, #27
 8008e10:	bf44      	itt	mi
 8008e12:	2320      	movmi	r3, #32
 8008e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e18:	0711      	lsls	r1, r2, #28
 8008e1a:	bf44      	itt	mi
 8008e1c:	232b      	movmi	r3, #43	; 0x2b
 8008e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e22:	f89a 3000 	ldrb.w	r3, [sl]
 8008e26:	2b2a      	cmp	r3, #42	; 0x2a
 8008e28:	d015      	beq.n	8008e56 <_svfiprintf_r+0xf6>
 8008e2a:	9a07      	ldr	r2, [sp, #28]
 8008e2c:	4654      	mov	r4, sl
 8008e2e:	2000      	movs	r0, #0
 8008e30:	f04f 0c0a 	mov.w	ip, #10
 8008e34:	4621      	mov	r1, r4
 8008e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e3a:	3b30      	subs	r3, #48	; 0x30
 8008e3c:	2b09      	cmp	r3, #9
 8008e3e:	d94d      	bls.n	8008edc <_svfiprintf_r+0x17c>
 8008e40:	b1b0      	cbz	r0, 8008e70 <_svfiprintf_r+0x110>
 8008e42:	9207      	str	r2, [sp, #28]
 8008e44:	e014      	b.n	8008e70 <_svfiprintf_r+0x110>
 8008e46:	eba0 0308 	sub.w	r3, r0, r8
 8008e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	46a2      	mov	sl, r4
 8008e54:	e7d2      	b.n	8008dfc <_svfiprintf_r+0x9c>
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	1d19      	adds	r1, r3, #4
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	9103      	str	r1, [sp, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfbb      	ittet	lt
 8008e62:	425b      	neglt	r3, r3
 8008e64:	f042 0202 	orrlt.w	r2, r2, #2
 8008e68:	9307      	strge	r3, [sp, #28]
 8008e6a:	9307      	strlt	r3, [sp, #28]
 8008e6c:	bfb8      	it	lt
 8008e6e:	9204      	strlt	r2, [sp, #16]
 8008e70:	7823      	ldrb	r3, [r4, #0]
 8008e72:	2b2e      	cmp	r3, #46	; 0x2e
 8008e74:	d10c      	bne.n	8008e90 <_svfiprintf_r+0x130>
 8008e76:	7863      	ldrb	r3, [r4, #1]
 8008e78:	2b2a      	cmp	r3, #42	; 0x2a
 8008e7a:	d134      	bne.n	8008ee6 <_svfiprintf_r+0x186>
 8008e7c:	9b03      	ldr	r3, [sp, #12]
 8008e7e:	1d1a      	adds	r2, r3, #4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	9203      	str	r2, [sp, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bfb8      	it	lt
 8008e88:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e8c:	3402      	adds	r4, #2
 8008e8e:	9305      	str	r3, [sp, #20]
 8008e90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f58 <_svfiprintf_r+0x1f8>
 8008e94:	7821      	ldrb	r1, [r4, #0]
 8008e96:	2203      	movs	r2, #3
 8008e98:	4650      	mov	r0, sl
 8008e9a:	f7f7 f9a1 	bl	80001e0 <memchr>
 8008e9e:	b138      	cbz	r0, 8008eb0 <_svfiprintf_r+0x150>
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	eba0 000a 	sub.w	r0, r0, sl
 8008ea6:	2240      	movs	r2, #64	; 0x40
 8008ea8:	4082      	lsls	r2, r0
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	3401      	adds	r4, #1
 8008eae:	9304      	str	r3, [sp, #16]
 8008eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb4:	4825      	ldr	r0, [pc, #148]	; (8008f4c <_svfiprintf_r+0x1ec>)
 8008eb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eba:	2206      	movs	r2, #6
 8008ebc:	f7f7 f990 	bl	80001e0 <memchr>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d038      	beq.n	8008f36 <_svfiprintf_r+0x1d6>
 8008ec4:	4b22      	ldr	r3, [pc, #136]	; (8008f50 <_svfiprintf_r+0x1f0>)
 8008ec6:	bb1b      	cbnz	r3, 8008f10 <_svfiprintf_r+0x1b0>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	3307      	adds	r3, #7
 8008ecc:	f023 0307 	bic.w	r3, r3, #7
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	9303      	str	r3, [sp, #12]
 8008ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed6:	4433      	add	r3, r6
 8008ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eda:	e768      	b.n	8008dae <_svfiprintf_r+0x4e>
 8008edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	e7a6      	b.n	8008e34 <_svfiprintf_r+0xd4>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	3401      	adds	r4, #1
 8008eea:	9305      	str	r3, [sp, #20]
 8008eec:	4619      	mov	r1, r3
 8008eee:	f04f 0c0a 	mov.w	ip, #10
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef8:	3a30      	subs	r2, #48	; 0x30
 8008efa:	2a09      	cmp	r2, #9
 8008efc:	d903      	bls.n	8008f06 <_svfiprintf_r+0x1a6>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0c6      	beq.n	8008e90 <_svfiprintf_r+0x130>
 8008f02:	9105      	str	r1, [sp, #20]
 8008f04:	e7c4      	b.n	8008e90 <_svfiprintf_r+0x130>
 8008f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e7f0      	b.n	8008ef2 <_svfiprintf_r+0x192>
 8008f10:	ab03      	add	r3, sp, #12
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	462a      	mov	r2, r5
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <_svfiprintf_r+0x1f4>)
 8008f18:	a904      	add	r1, sp, #16
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	f7fd fdfe 	bl	8006b1c <_printf_float>
 8008f20:	1c42      	adds	r2, r0, #1
 8008f22:	4606      	mov	r6, r0
 8008f24:	d1d6      	bne.n	8008ed4 <_svfiprintf_r+0x174>
 8008f26:	89ab      	ldrh	r3, [r5, #12]
 8008f28:	065b      	lsls	r3, r3, #25
 8008f2a:	f53f af2d 	bmi.w	8008d88 <_svfiprintf_r+0x28>
 8008f2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f30:	b01d      	add	sp, #116	; 0x74
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <_svfiprintf_r+0x1f4>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	4638      	mov	r0, r7
 8008f42:	f7fe f88f 	bl	8007064 <_printf_i>
 8008f46:	e7eb      	b.n	8008f20 <_svfiprintf_r+0x1c0>
 8008f48:	08009d44 	.word	0x08009d44
 8008f4c:	08009d4e 	.word	0x08009d4e
 8008f50:	08006b1d 	.word	0x08006b1d
 8008f54:	08008cad 	.word	0x08008cad
 8008f58:	08009d4a 	.word	0x08009d4a

08008f5c <__sflush_r>:
 8008f5c:	898a      	ldrh	r2, [r1, #12]
 8008f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f62:	4605      	mov	r5, r0
 8008f64:	0710      	lsls	r0, r2, #28
 8008f66:	460c      	mov	r4, r1
 8008f68:	d458      	bmi.n	800901c <__sflush_r+0xc0>
 8008f6a:	684b      	ldr	r3, [r1, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dc05      	bgt.n	8008f7c <__sflush_r+0x20>
 8008f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	dc02      	bgt.n	8008f7c <__sflush_r+0x20>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f7e:	2e00      	cmp	r6, #0
 8008f80:	d0f9      	beq.n	8008f76 <__sflush_r+0x1a>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f88:	682f      	ldr	r7, [r5, #0]
 8008f8a:	6a21      	ldr	r1, [r4, #32]
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	d032      	beq.n	8008ff6 <__sflush_r+0x9a>
 8008f90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	075a      	lsls	r2, r3, #29
 8008f96:	d505      	bpl.n	8008fa4 <__sflush_r+0x48>
 8008f98:	6863      	ldr	r3, [r4, #4]
 8008f9a:	1ac0      	subs	r0, r0, r3
 8008f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f9e:	b10b      	cbz	r3, 8008fa4 <__sflush_r+0x48>
 8008fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fa2:	1ac0      	subs	r0, r0, r3
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008faa:	6a21      	ldr	r1, [r4, #32]
 8008fac:	4628      	mov	r0, r5
 8008fae:	47b0      	blx	r6
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	d106      	bne.n	8008fc4 <__sflush_r+0x68>
 8008fb6:	6829      	ldr	r1, [r5, #0]
 8008fb8:	291d      	cmp	r1, #29
 8008fba:	d82b      	bhi.n	8009014 <__sflush_r+0xb8>
 8008fbc:	4a29      	ldr	r2, [pc, #164]	; (8009064 <__sflush_r+0x108>)
 8008fbe:	410a      	asrs	r2, r1
 8008fc0:	07d6      	lsls	r6, r2, #31
 8008fc2:	d427      	bmi.n	8009014 <__sflush_r+0xb8>
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	6062      	str	r2, [r4, #4]
 8008fc8:	04d9      	lsls	r1, r3, #19
 8008fca:	6922      	ldr	r2, [r4, #16]
 8008fcc:	6022      	str	r2, [r4, #0]
 8008fce:	d504      	bpl.n	8008fda <__sflush_r+0x7e>
 8008fd0:	1c42      	adds	r2, r0, #1
 8008fd2:	d101      	bne.n	8008fd8 <__sflush_r+0x7c>
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	b903      	cbnz	r3, 8008fda <__sflush_r+0x7e>
 8008fd8:	6560      	str	r0, [r4, #84]	; 0x54
 8008fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fdc:	602f      	str	r7, [r5, #0]
 8008fde:	2900      	cmp	r1, #0
 8008fe0:	d0c9      	beq.n	8008f76 <__sflush_r+0x1a>
 8008fe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	d002      	beq.n	8008ff0 <__sflush_r+0x94>
 8008fea:	4628      	mov	r0, r5
 8008fec:	f7ff f9e2 	bl	80083b4 <_free_r>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ff4:	e7c0      	b.n	8008f78 <__sflush_r+0x1c>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b0      	blx	r6
 8008ffc:	1c41      	adds	r1, r0, #1
 8008ffe:	d1c8      	bne.n	8008f92 <__sflush_r+0x36>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0c5      	beq.n	8008f92 <__sflush_r+0x36>
 8009006:	2b1d      	cmp	r3, #29
 8009008:	d001      	beq.n	800900e <__sflush_r+0xb2>
 800900a:	2b16      	cmp	r3, #22
 800900c:	d101      	bne.n	8009012 <__sflush_r+0xb6>
 800900e:	602f      	str	r7, [r5, #0]
 8009010:	e7b1      	b.n	8008f76 <__sflush_r+0x1a>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	e7ad      	b.n	8008f78 <__sflush_r+0x1c>
 800901c:	690f      	ldr	r7, [r1, #16]
 800901e:	2f00      	cmp	r7, #0
 8009020:	d0a9      	beq.n	8008f76 <__sflush_r+0x1a>
 8009022:	0793      	lsls	r3, r2, #30
 8009024:	680e      	ldr	r6, [r1, #0]
 8009026:	bf08      	it	eq
 8009028:	694b      	ldreq	r3, [r1, #20]
 800902a:	600f      	str	r7, [r1, #0]
 800902c:	bf18      	it	ne
 800902e:	2300      	movne	r3, #0
 8009030:	eba6 0807 	sub.w	r8, r6, r7
 8009034:	608b      	str	r3, [r1, #8]
 8009036:	f1b8 0f00 	cmp.w	r8, #0
 800903a:	dd9c      	ble.n	8008f76 <__sflush_r+0x1a>
 800903c:	6a21      	ldr	r1, [r4, #32]
 800903e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009040:	4643      	mov	r3, r8
 8009042:	463a      	mov	r2, r7
 8009044:	4628      	mov	r0, r5
 8009046:	47b0      	blx	r6
 8009048:	2800      	cmp	r0, #0
 800904a:	dc06      	bgt.n	800905a <__sflush_r+0xfe>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	e78e      	b.n	8008f78 <__sflush_r+0x1c>
 800905a:	4407      	add	r7, r0
 800905c:	eba8 0800 	sub.w	r8, r8, r0
 8009060:	e7e9      	b.n	8009036 <__sflush_r+0xda>
 8009062:	bf00      	nop
 8009064:	dfbffffe 	.word	0xdfbffffe

08009068 <_fflush_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	690b      	ldr	r3, [r1, #16]
 800906c:	4605      	mov	r5, r0
 800906e:	460c      	mov	r4, r1
 8009070:	b913      	cbnz	r3, 8009078 <_fflush_r+0x10>
 8009072:	2500      	movs	r5, #0
 8009074:	4628      	mov	r0, r5
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	b118      	cbz	r0, 8009082 <_fflush_r+0x1a>
 800907a:	6a03      	ldr	r3, [r0, #32]
 800907c:	b90b      	cbnz	r3, 8009082 <_fflush_r+0x1a>
 800907e:	f7fe f99f 	bl	80073c0 <__sinit>
 8009082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0f3      	beq.n	8009072 <_fflush_r+0xa>
 800908a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800908c:	07d0      	lsls	r0, r2, #31
 800908e:	d404      	bmi.n	800909a <_fflush_r+0x32>
 8009090:	0599      	lsls	r1, r3, #22
 8009092:	d402      	bmi.n	800909a <_fflush_r+0x32>
 8009094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009096:	f7fe fb00 	bl	800769a <__retarget_lock_acquire_recursive>
 800909a:	4628      	mov	r0, r5
 800909c:	4621      	mov	r1, r4
 800909e:	f7ff ff5d 	bl	8008f5c <__sflush_r>
 80090a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090a4:	07da      	lsls	r2, r3, #31
 80090a6:	4605      	mov	r5, r0
 80090a8:	d4e4      	bmi.n	8009074 <_fflush_r+0xc>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	059b      	lsls	r3, r3, #22
 80090ae:	d4e1      	bmi.n	8009074 <_fflush_r+0xc>
 80090b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b2:	f7fe faf3 	bl	800769c <__retarget_lock_release_recursive>
 80090b6:	e7dd      	b.n	8009074 <_fflush_r+0xc>

080090b8 <memmove>:
 80090b8:	4288      	cmp	r0, r1
 80090ba:	b510      	push	{r4, lr}
 80090bc:	eb01 0402 	add.w	r4, r1, r2
 80090c0:	d902      	bls.n	80090c8 <memmove+0x10>
 80090c2:	4284      	cmp	r4, r0
 80090c4:	4623      	mov	r3, r4
 80090c6:	d807      	bhi.n	80090d8 <memmove+0x20>
 80090c8:	1e43      	subs	r3, r0, #1
 80090ca:	42a1      	cmp	r1, r4
 80090cc:	d008      	beq.n	80090e0 <memmove+0x28>
 80090ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090d6:	e7f8      	b.n	80090ca <memmove+0x12>
 80090d8:	4402      	add	r2, r0
 80090da:	4601      	mov	r1, r0
 80090dc:	428a      	cmp	r2, r1
 80090de:	d100      	bne.n	80090e2 <memmove+0x2a>
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090ea:	e7f7      	b.n	80090dc <memmove+0x24>

080090ec <_sbrk_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d06      	ldr	r5, [pc, #24]	; (8009108 <_sbrk_r+0x1c>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	f7f8 ff58 	bl	8001fac <_sbrk>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_sbrk_r+0x1a>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_sbrk_r+0x1a>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	200044f0 	.word	0x200044f0

0800910c <__assert_func>:
 800910c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800910e:	4614      	mov	r4, r2
 8009110:	461a      	mov	r2, r3
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <__assert_func+0x2c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4605      	mov	r5, r0
 8009118:	68d8      	ldr	r0, [r3, #12]
 800911a:	b14c      	cbz	r4, 8009130 <__assert_func+0x24>
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <__assert_func+0x30>)
 800911e:	9100      	str	r1, [sp, #0]
 8009120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009124:	4906      	ldr	r1, [pc, #24]	; (8009140 <__assert_func+0x34>)
 8009126:	462b      	mov	r3, r5
 8009128:	f000 f872 	bl	8009210 <fiprintf>
 800912c:	f000 f882 	bl	8009234 <abort>
 8009130:	4b04      	ldr	r3, [pc, #16]	; (8009144 <__assert_func+0x38>)
 8009132:	461c      	mov	r4, r3
 8009134:	e7f3      	b.n	800911e <__assert_func+0x12>
 8009136:	bf00      	nop
 8009138:	20000070 	.word	0x20000070
 800913c:	08009d5f 	.word	0x08009d5f
 8009140:	08009d6c 	.word	0x08009d6c
 8009144:	08009d9a 	.word	0x08009d9a

08009148 <_calloc_r>:
 8009148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800914a:	fba1 2402 	umull	r2, r4, r1, r2
 800914e:	b94c      	cbnz	r4, 8009164 <_calloc_r+0x1c>
 8009150:	4611      	mov	r1, r2
 8009152:	9201      	str	r2, [sp, #4]
 8009154:	f7ff f9a2 	bl	800849c <_malloc_r>
 8009158:	9a01      	ldr	r2, [sp, #4]
 800915a:	4605      	mov	r5, r0
 800915c:	b930      	cbnz	r0, 800916c <_calloc_r+0x24>
 800915e:	4628      	mov	r0, r5
 8009160:	b003      	add	sp, #12
 8009162:	bd30      	pop	{r4, r5, pc}
 8009164:	220c      	movs	r2, #12
 8009166:	6002      	str	r2, [r0, #0]
 8009168:	2500      	movs	r5, #0
 800916a:	e7f8      	b.n	800915e <_calloc_r+0x16>
 800916c:	4621      	mov	r1, r4
 800916e:	f7fe f9c0 	bl	80074f2 <memset>
 8009172:	e7f4      	b.n	800915e <_calloc_r+0x16>

08009174 <__ascii_mbtowc>:
 8009174:	b082      	sub	sp, #8
 8009176:	b901      	cbnz	r1, 800917a <__ascii_mbtowc+0x6>
 8009178:	a901      	add	r1, sp, #4
 800917a:	b142      	cbz	r2, 800918e <__ascii_mbtowc+0x1a>
 800917c:	b14b      	cbz	r3, 8009192 <__ascii_mbtowc+0x1e>
 800917e:	7813      	ldrb	r3, [r2, #0]
 8009180:	600b      	str	r3, [r1, #0]
 8009182:	7812      	ldrb	r2, [r2, #0]
 8009184:	1e10      	subs	r0, r2, #0
 8009186:	bf18      	it	ne
 8009188:	2001      	movne	r0, #1
 800918a:	b002      	add	sp, #8
 800918c:	4770      	bx	lr
 800918e:	4610      	mov	r0, r2
 8009190:	e7fb      	b.n	800918a <__ascii_mbtowc+0x16>
 8009192:	f06f 0001 	mvn.w	r0, #1
 8009196:	e7f8      	b.n	800918a <__ascii_mbtowc+0x16>

08009198 <_realloc_r>:
 8009198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	4680      	mov	r8, r0
 800919e:	4614      	mov	r4, r2
 80091a0:	460e      	mov	r6, r1
 80091a2:	b921      	cbnz	r1, 80091ae <_realloc_r+0x16>
 80091a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091a8:	4611      	mov	r1, r2
 80091aa:	f7ff b977 	b.w	800849c <_malloc_r>
 80091ae:	b92a      	cbnz	r2, 80091bc <_realloc_r+0x24>
 80091b0:	f7ff f900 	bl	80083b4 <_free_r>
 80091b4:	4625      	mov	r5, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091bc:	f000 f841 	bl	8009242 <_malloc_usable_size_r>
 80091c0:	4284      	cmp	r4, r0
 80091c2:	4607      	mov	r7, r0
 80091c4:	d802      	bhi.n	80091cc <_realloc_r+0x34>
 80091c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091ca:	d812      	bhi.n	80091f2 <_realloc_r+0x5a>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4640      	mov	r0, r8
 80091d0:	f7ff f964 	bl	800849c <_malloc_r>
 80091d4:	4605      	mov	r5, r0
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d0ed      	beq.n	80091b6 <_realloc_r+0x1e>
 80091da:	42bc      	cmp	r4, r7
 80091dc:	4622      	mov	r2, r4
 80091de:	4631      	mov	r1, r6
 80091e0:	bf28      	it	cs
 80091e2:	463a      	movcs	r2, r7
 80091e4:	f7fe fa5b 	bl	800769e <memcpy>
 80091e8:	4631      	mov	r1, r6
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7ff f8e2 	bl	80083b4 <_free_r>
 80091f0:	e7e1      	b.n	80091b6 <_realloc_r+0x1e>
 80091f2:	4635      	mov	r5, r6
 80091f4:	e7df      	b.n	80091b6 <_realloc_r+0x1e>

080091f6 <__ascii_wctomb>:
 80091f6:	b149      	cbz	r1, 800920c <__ascii_wctomb+0x16>
 80091f8:	2aff      	cmp	r2, #255	; 0xff
 80091fa:	bf85      	ittet	hi
 80091fc:	238a      	movhi	r3, #138	; 0x8a
 80091fe:	6003      	strhi	r3, [r0, #0]
 8009200:	700a      	strbls	r2, [r1, #0]
 8009202:	f04f 30ff 	movhi.w	r0, #4294967295
 8009206:	bf98      	it	ls
 8009208:	2001      	movls	r0, #1
 800920a:	4770      	bx	lr
 800920c:	4608      	mov	r0, r1
 800920e:	4770      	bx	lr

08009210 <fiprintf>:
 8009210:	b40e      	push	{r1, r2, r3}
 8009212:	b503      	push	{r0, r1, lr}
 8009214:	4601      	mov	r1, r0
 8009216:	ab03      	add	r3, sp, #12
 8009218:	4805      	ldr	r0, [pc, #20]	; (8009230 <fiprintf+0x20>)
 800921a:	f853 2b04 	ldr.w	r2, [r3], #4
 800921e:	6800      	ldr	r0, [r0, #0]
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	f000 f83f 	bl	80092a4 <_vfiprintf_r>
 8009226:	b002      	add	sp, #8
 8009228:	f85d eb04 	ldr.w	lr, [sp], #4
 800922c:	b003      	add	sp, #12
 800922e:	4770      	bx	lr
 8009230:	20000070 	.word	0x20000070

08009234 <abort>:
 8009234:	b508      	push	{r3, lr}
 8009236:	2006      	movs	r0, #6
 8009238:	f000 fa0c 	bl	8009654 <raise>
 800923c:	2001      	movs	r0, #1
 800923e:	f7f8 fe3d 	bl	8001ebc <_exit>

08009242 <_malloc_usable_size_r>:
 8009242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009246:	1f18      	subs	r0, r3, #4
 8009248:	2b00      	cmp	r3, #0
 800924a:	bfbc      	itt	lt
 800924c:	580b      	ldrlt	r3, [r1, r0]
 800924e:	18c0      	addlt	r0, r0, r3
 8009250:	4770      	bx	lr

08009252 <__sfputc_r>:
 8009252:	6893      	ldr	r3, [r2, #8]
 8009254:	3b01      	subs	r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	b410      	push	{r4}
 800925a:	6093      	str	r3, [r2, #8]
 800925c:	da08      	bge.n	8009270 <__sfputc_r+0x1e>
 800925e:	6994      	ldr	r4, [r2, #24]
 8009260:	42a3      	cmp	r3, r4
 8009262:	db01      	blt.n	8009268 <__sfputc_r+0x16>
 8009264:	290a      	cmp	r1, #10
 8009266:	d103      	bne.n	8009270 <__sfputc_r+0x1e>
 8009268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800926c:	f000 b934 	b.w	80094d8 <__swbuf_r>
 8009270:	6813      	ldr	r3, [r2, #0]
 8009272:	1c58      	adds	r0, r3, #1
 8009274:	6010      	str	r0, [r2, #0]
 8009276:	7019      	strb	r1, [r3, #0]
 8009278:	4608      	mov	r0, r1
 800927a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800927e:	4770      	bx	lr

08009280 <__sfputs_r>:
 8009280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	4614      	mov	r4, r2
 8009288:	18d5      	adds	r5, r2, r3
 800928a:	42ac      	cmp	r4, r5
 800928c:	d101      	bne.n	8009292 <__sfputs_r+0x12>
 800928e:	2000      	movs	r0, #0
 8009290:	e007      	b.n	80092a2 <__sfputs_r+0x22>
 8009292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009296:	463a      	mov	r2, r7
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff ffda 	bl	8009252 <__sfputc_r>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d1f3      	bne.n	800928a <__sfputs_r+0xa>
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092a4 <_vfiprintf_r>:
 80092a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a8:	460d      	mov	r5, r1
 80092aa:	b09d      	sub	sp, #116	; 0x74
 80092ac:	4614      	mov	r4, r2
 80092ae:	4698      	mov	r8, r3
 80092b0:	4606      	mov	r6, r0
 80092b2:	b118      	cbz	r0, 80092bc <_vfiprintf_r+0x18>
 80092b4:	6a03      	ldr	r3, [r0, #32]
 80092b6:	b90b      	cbnz	r3, 80092bc <_vfiprintf_r+0x18>
 80092b8:	f7fe f882 	bl	80073c0 <__sinit>
 80092bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092be:	07d9      	lsls	r1, r3, #31
 80092c0:	d405      	bmi.n	80092ce <_vfiprintf_r+0x2a>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	059a      	lsls	r2, r3, #22
 80092c6:	d402      	bmi.n	80092ce <_vfiprintf_r+0x2a>
 80092c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ca:	f7fe f9e6 	bl	800769a <__retarget_lock_acquire_recursive>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	071b      	lsls	r3, r3, #28
 80092d2:	d501      	bpl.n	80092d8 <_vfiprintf_r+0x34>
 80092d4:	692b      	ldr	r3, [r5, #16]
 80092d6:	b99b      	cbnz	r3, 8009300 <_vfiprintf_r+0x5c>
 80092d8:	4629      	mov	r1, r5
 80092da:	4630      	mov	r0, r6
 80092dc:	f000 f93a 	bl	8009554 <__swsetup_r>
 80092e0:	b170      	cbz	r0, 8009300 <_vfiprintf_r+0x5c>
 80092e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092e4:	07dc      	lsls	r4, r3, #31
 80092e6:	d504      	bpl.n	80092f2 <_vfiprintf_r+0x4e>
 80092e8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ec:	b01d      	add	sp, #116	; 0x74
 80092ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f2:	89ab      	ldrh	r3, [r5, #12]
 80092f4:	0598      	lsls	r0, r3, #22
 80092f6:	d4f7      	bmi.n	80092e8 <_vfiprintf_r+0x44>
 80092f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092fa:	f7fe f9cf 	bl	800769c <__retarget_lock_release_recursive>
 80092fe:	e7f3      	b.n	80092e8 <_vfiprintf_r+0x44>
 8009300:	2300      	movs	r3, #0
 8009302:	9309      	str	r3, [sp, #36]	; 0x24
 8009304:	2320      	movs	r3, #32
 8009306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800930a:	f8cd 800c 	str.w	r8, [sp, #12]
 800930e:	2330      	movs	r3, #48	; 0x30
 8009310:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80094c4 <_vfiprintf_r+0x220>
 8009314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009318:	f04f 0901 	mov.w	r9, #1
 800931c:	4623      	mov	r3, r4
 800931e:	469a      	mov	sl, r3
 8009320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009324:	b10a      	cbz	r2, 800932a <_vfiprintf_r+0x86>
 8009326:	2a25      	cmp	r2, #37	; 0x25
 8009328:	d1f9      	bne.n	800931e <_vfiprintf_r+0x7a>
 800932a:	ebba 0b04 	subs.w	fp, sl, r4
 800932e:	d00b      	beq.n	8009348 <_vfiprintf_r+0xa4>
 8009330:	465b      	mov	r3, fp
 8009332:	4622      	mov	r2, r4
 8009334:	4629      	mov	r1, r5
 8009336:	4630      	mov	r0, r6
 8009338:	f7ff ffa2 	bl	8009280 <__sfputs_r>
 800933c:	3001      	adds	r0, #1
 800933e:	f000 80a9 	beq.w	8009494 <_vfiprintf_r+0x1f0>
 8009342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009344:	445a      	add	r2, fp
 8009346:	9209      	str	r2, [sp, #36]	; 0x24
 8009348:	f89a 3000 	ldrb.w	r3, [sl]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 80a1 	beq.w	8009494 <_vfiprintf_r+0x1f0>
 8009352:	2300      	movs	r3, #0
 8009354:	f04f 32ff 	mov.w	r2, #4294967295
 8009358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800935c:	f10a 0a01 	add.w	sl, sl, #1
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	9307      	str	r3, [sp, #28]
 8009364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009368:	931a      	str	r3, [sp, #104]	; 0x68
 800936a:	4654      	mov	r4, sl
 800936c:	2205      	movs	r2, #5
 800936e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009372:	4854      	ldr	r0, [pc, #336]	; (80094c4 <_vfiprintf_r+0x220>)
 8009374:	f7f6 ff34 	bl	80001e0 <memchr>
 8009378:	9a04      	ldr	r2, [sp, #16]
 800937a:	b9d8      	cbnz	r0, 80093b4 <_vfiprintf_r+0x110>
 800937c:	06d1      	lsls	r1, r2, #27
 800937e:	bf44      	itt	mi
 8009380:	2320      	movmi	r3, #32
 8009382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009386:	0713      	lsls	r3, r2, #28
 8009388:	bf44      	itt	mi
 800938a:	232b      	movmi	r3, #43	; 0x2b
 800938c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009390:	f89a 3000 	ldrb.w	r3, [sl]
 8009394:	2b2a      	cmp	r3, #42	; 0x2a
 8009396:	d015      	beq.n	80093c4 <_vfiprintf_r+0x120>
 8009398:	9a07      	ldr	r2, [sp, #28]
 800939a:	4654      	mov	r4, sl
 800939c:	2000      	movs	r0, #0
 800939e:	f04f 0c0a 	mov.w	ip, #10
 80093a2:	4621      	mov	r1, r4
 80093a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093a8:	3b30      	subs	r3, #48	; 0x30
 80093aa:	2b09      	cmp	r3, #9
 80093ac:	d94d      	bls.n	800944a <_vfiprintf_r+0x1a6>
 80093ae:	b1b0      	cbz	r0, 80093de <_vfiprintf_r+0x13a>
 80093b0:	9207      	str	r2, [sp, #28]
 80093b2:	e014      	b.n	80093de <_vfiprintf_r+0x13a>
 80093b4:	eba0 0308 	sub.w	r3, r0, r8
 80093b8:	fa09 f303 	lsl.w	r3, r9, r3
 80093bc:	4313      	orrs	r3, r2
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	46a2      	mov	sl, r4
 80093c2:	e7d2      	b.n	800936a <_vfiprintf_r+0xc6>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	1d19      	adds	r1, r3, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	9103      	str	r1, [sp, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bfbb      	ittet	lt
 80093d0:	425b      	neglt	r3, r3
 80093d2:	f042 0202 	orrlt.w	r2, r2, #2
 80093d6:	9307      	strge	r3, [sp, #28]
 80093d8:	9307      	strlt	r3, [sp, #28]
 80093da:	bfb8      	it	lt
 80093dc:	9204      	strlt	r2, [sp, #16]
 80093de:	7823      	ldrb	r3, [r4, #0]
 80093e0:	2b2e      	cmp	r3, #46	; 0x2e
 80093e2:	d10c      	bne.n	80093fe <_vfiprintf_r+0x15a>
 80093e4:	7863      	ldrb	r3, [r4, #1]
 80093e6:	2b2a      	cmp	r3, #42	; 0x2a
 80093e8:	d134      	bne.n	8009454 <_vfiprintf_r+0x1b0>
 80093ea:	9b03      	ldr	r3, [sp, #12]
 80093ec:	1d1a      	adds	r2, r3, #4
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	9203      	str	r2, [sp, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bfb8      	it	lt
 80093f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80093fa:	3402      	adds	r4, #2
 80093fc:	9305      	str	r3, [sp, #20]
 80093fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80094d4 <_vfiprintf_r+0x230>
 8009402:	7821      	ldrb	r1, [r4, #0]
 8009404:	2203      	movs	r2, #3
 8009406:	4650      	mov	r0, sl
 8009408:	f7f6 feea 	bl	80001e0 <memchr>
 800940c:	b138      	cbz	r0, 800941e <_vfiprintf_r+0x17a>
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	eba0 000a 	sub.w	r0, r0, sl
 8009414:	2240      	movs	r2, #64	; 0x40
 8009416:	4082      	lsls	r2, r0
 8009418:	4313      	orrs	r3, r2
 800941a:	3401      	adds	r4, #1
 800941c:	9304      	str	r3, [sp, #16]
 800941e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009422:	4829      	ldr	r0, [pc, #164]	; (80094c8 <_vfiprintf_r+0x224>)
 8009424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009428:	2206      	movs	r2, #6
 800942a:	f7f6 fed9 	bl	80001e0 <memchr>
 800942e:	2800      	cmp	r0, #0
 8009430:	d03f      	beq.n	80094b2 <_vfiprintf_r+0x20e>
 8009432:	4b26      	ldr	r3, [pc, #152]	; (80094cc <_vfiprintf_r+0x228>)
 8009434:	bb1b      	cbnz	r3, 800947e <_vfiprintf_r+0x1da>
 8009436:	9b03      	ldr	r3, [sp, #12]
 8009438:	3307      	adds	r3, #7
 800943a:	f023 0307 	bic.w	r3, r3, #7
 800943e:	3308      	adds	r3, #8
 8009440:	9303      	str	r3, [sp, #12]
 8009442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009444:	443b      	add	r3, r7
 8009446:	9309      	str	r3, [sp, #36]	; 0x24
 8009448:	e768      	b.n	800931c <_vfiprintf_r+0x78>
 800944a:	fb0c 3202 	mla	r2, ip, r2, r3
 800944e:	460c      	mov	r4, r1
 8009450:	2001      	movs	r0, #1
 8009452:	e7a6      	b.n	80093a2 <_vfiprintf_r+0xfe>
 8009454:	2300      	movs	r3, #0
 8009456:	3401      	adds	r4, #1
 8009458:	9305      	str	r3, [sp, #20]
 800945a:	4619      	mov	r1, r3
 800945c:	f04f 0c0a 	mov.w	ip, #10
 8009460:	4620      	mov	r0, r4
 8009462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009466:	3a30      	subs	r2, #48	; 0x30
 8009468:	2a09      	cmp	r2, #9
 800946a:	d903      	bls.n	8009474 <_vfiprintf_r+0x1d0>
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0c6      	beq.n	80093fe <_vfiprintf_r+0x15a>
 8009470:	9105      	str	r1, [sp, #20]
 8009472:	e7c4      	b.n	80093fe <_vfiprintf_r+0x15a>
 8009474:	fb0c 2101 	mla	r1, ip, r1, r2
 8009478:	4604      	mov	r4, r0
 800947a:	2301      	movs	r3, #1
 800947c:	e7f0      	b.n	8009460 <_vfiprintf_r+0x1bc>
 800947e:	ab03      	add	r3, sp, #12
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	462a      	mov	r2, r5
 8009484:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <_vfiprintf_r+0x22c>)
 8009486:	a904      	add	r1, sp, #16
 8009488:	4630      	mov	r0, r6
 800948a:	f7fd fb47 	bl	8006b1c <_printf_float>
 800948e:	4607      	mov	r7, r0
 8009490:	1c78      	adds	r0, r7, #1
 8009492:	d1d6      	bne.n	8009442 <_vfiprintf_r+0x19e>
 8009494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009496:	07d9      	lsls	r1, r3, #31
 8009498:	d405      	bmi.n	80094a6 <_vfiprintf_r+0x202>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	059a      	lsls	r2, r3, #22
 800949e:	d402      	bmi.n	80094a6 <_vfiprintf_r+0x202>
 80094a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094a2:	f7fe f8fb 	bl	800769c <__retarget_lock_release_recursive>
 80094a6:	89ab      	ldrh	r3, [r5, #12]
 80094a8:	065b      	lsls	r3, r3, #25
 80094aa:	f53f af1d 	bmi.w	80092e8 <_vfiprintf_r+0x44>
 80094ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094b0:	e71c      	b.n	80092ec <_vfiprintf_r+0x48>
 80094b2:	ab03      	add	r3, sp, #12
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	462a      	mov	r2, r5
 80094b8:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <_vfiprintf_r+0x22c>)
 80094ba:	a904      	add	r1, sp, #16
 80094bc:	4630      	mov	r0, r6
 80094be:	f7fd fdd1 	bl	8007064 <_printf_i>
 80094c2:	e7e4      	b.n	800948e <_vfiprintf_r+0x1ea>
 80094c4:	08009d44 	.word	0x08009d44
 80094c8:	08009d4e 	.word	0x08009d4e
 80094cc:	08006b1d 	.word	0x08006b1d
 80094d0:	08009281 	.word	0x08009281
 80094d4:	08009d4a 	.word	0x08009d4a

080094d8 <__swbuf_r>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	460e      	mov	r6, r1
 80094dc:	4614      	mov	r4, r2
 80094de:	4605      	mov	r5, r0
 80094e0:	b118      	cbz	r0, 80094ea <__swbuf_r+0x12>
 80094e2:	6a03      	ldr	r3, [r0, #32]
 80094e4:	b90b      	cbnz	r3, 80094ea <__swbuf_r+0x12>
 80094e6:	f7fd ff6b 	bl	80073c0 <__sinit>
 80094ea:	69a3      	ldr	r3, [r4, #24]
 80094ec:	60a3      	str	r3, [r4, #8]
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	071a      	lsls	r2, r3, #28
 80094f2:	d525      	bpl.n	8009540 <__swbuf_r+0x68>
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	b31b      	cbz	r3, 8009540 <__swbuf_r+0x68>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	6922      	ldr	r2, [r4, #16]
 80094fc:	1a98      	subs	r0, r3, r2
 80094fe:	6963      	ldr	r3, [r4, #20]
 8009500:	b2f6      	uxtb	r6, r6
 8009502:	4283      	cmp	r3, r0
 8009504:	4637      	mov	r7, r6
 8009506:	dc04      	bgt.n	8009512 <__swbuf_r+0x3a>
 8009508:	4621      	mov	r1, r4
 800950a:	4628      	mov	r0, r5
 800950c:	f7ff fdac 	bl	8009068 <_fflush_r>
 8009510:	b9e0      	cbnz	r0, 800954c <__swbuf_r+0x74>
 8009512:	68a3      	ldr	r3, [r4, #8]
 8009514:	3b01      	subs	r3, #1
 8009516:	60a3      	str	r3, [r4, #8]
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	6022      	str	r2, [r4, #0]
 800951e:	701e      	strb	r6, [r3, #0]
 8009520:	6962      	ldr	r2, [r4, #20]
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	429a      	cmp	r2, r3
 8009526:	d004      	beq.n	8009532 <__swbuf_r+0x5a>
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	07db      	lsls	r3, r3, #31
 800952c:	d506      	bpl.n	800953c <__swbuf_r+0x64>
 800952e:	2e0a      	cmp	r6, #10
 8009530:	d104      	bne.n	800953c <__swbuf_r+0x64>
 8009532:	4621      	mov	r1, r4
 8009534:	4628      	mov	r0, r5
 8009536:	f7ff fd97 	bl	8009068 <_fflush_r>
 800953a:	b938      	cbnz	r0, 800954c <__swbuf_r+0x74>
 800953c:	4638      	mov	r0, r7
 800953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009540:	4621      	mov	r1, r4
 8009542:	4628      	mov	r0, r5
 8009544:	f000 f806 	bl	8009554 <__swsetup_r>
 8009548:	2800      	cmp	r0, #0
 800954a:	d0d5      	beq.n	80094f8 <__swbuf_r+0x20>
 800954c:	f04f 37ff 	mov.w	r7, #4294967295
 8009550:	e7f4      	b.n	800953c <__swbuf_r+0x64>
	...

08009554 <__swsetup_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4b2a      	ldr	r3, [pc, #168]	; (8009600 <__swsetup_r+0xac>)
 8009558:	4605      	mov	r5, r0
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	460c      	mov	r4, r1
 800955e:	b118      	cbz	r0, 8009568 <__swsetup_r+0x14>
 8009560:	6a03      	ldr	r3, [r0, #32]
 8009562:	b90b      	cbnz	r3, 8009568 <__swsetup_r+0x14>
 8009564:	f7fd ff2c 	bl	80073c0 <__sinit>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800956e:	0718      	lsls	r0, r3, #28
 8009570:	d422      	bmi.n	80095b8 <__swsetup_r+0x64>
 8009572:	06d9      	lsls	r1, r3, #27
 8009574:	d407      	bmi.n	8009586 <__swsetup_r+0x32>
 8009576:	2309      	movs	r3, #9
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	e034      	b.n	80095f0 <__swsetup_r+0x9c>
 8009586:	0758      	lsls	r0, r3, #29
 8009588:	d512      	bpl.n	80095b0 <__swsetup_r+0x5c>
 800958a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800958c:	b141      	cbz	r1, 80095a0 <__swsetup_r+0x4c>
 800958e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009592:	4299      	cmp	r1, r3
 8009594:	d002      	beq.n	800959c <__swsetup_r+0x48>
 8009596:	4628      	mov	r0, r5
 8009598:	f7fe ff0c 	bl	80083b4 <_free_r>
 800959c:	2300      	movs	r3, #0
 800959e:	6363      	str	r3, [r4, #52]	; 0x34
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095a6:	81a3      	strh	r3, [r4, #12]
 80095a8:	2300      	movs	r3, #0
 80095aa:	6063      	str	r3, [r4, #4]
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	f043 0308 	orr.w	r3, r3, #8
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	b94b      	cbnz	r3, 80095d0 <__swsetup_r+0x7c>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c6:	d003      	beq.n	80095d0 <__swsetup_r+0x7c>
 80095c8:	4621      	mov	r1, r4
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f884 	bl	80096d8 <__smakebuf_r>
 80095d0:	89a0      	ldrh	r0, [r4, #12]
 80095d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095d6:	f010 0301 	ands.w	r3, r0, #1
 80095da:	d00a      	beq.n	80095f2 <__swsetup_r+0x9e>
 80095dc:	2300      	movs	r3, #0
 80095de:	60a3      	str	r3, [r4, #8]
 80095e0:	6963      	ldr	r3, [r4, #20]
 80095e2:	425b      	negs	r3, r3
 80095e4:	61a3      	str	r3, [r4, #24]
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	b943      	cbnz	r3, 80095fc <__swsetup_r+0xa8>
 80095ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095ee:	d1c4      	bne.n	800957a <__swsetup_r+0x26>
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	0781      	lsls	r1, r0, #30
 80095f4:	bf58      	it	pl
 80095f6:	6963      	ldrpl	r3, [r4, #20]
 80095f8:	60a3      	str	r3, [r4, #8]
 80095fa:	e7f4      	b.n	80095e6 <__swsetup_r+0x92>
 80095fc:	2000      	movs	r0, #0
 80095fe:	e7f7      	b.n	80095f0 <__swsetup_r+0x9c>
 8009600:	20000070 	.word	0x20000070

08009604 <_raise_r>:
 8009604:	291f      	cmp	r1, #31
 8009606:	b538      	push	{r3, r4, r5, lr}
 8009608:	4604      	mov	r4, r0
 800960a:	460d      	mov	r5, r1
 800960c:	d904      	bls.n	8009618 <_raise_r+0x14>
 800960e:	2316      	movs	r3, #22
 8009610:	6003      	str	r3, [r0, #0]
 8009612:	f04f 30ff 	mov.w	r0, #4294967295
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800961a:	b112      	cbz	r2, 8009622 <_raise_r+0x1e>
 800961c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009620:	b94b      	cbnz	r3, 8009636 <_raise_r+0x32>
 8009622:	4620      	mov	r0, r4
 8009624:	f000 f830 	bl	8009688 <_getpid_r>
 8009628:	462a      	mov	r2, r5
 800962a:	4601      	mov	r1, r0
 800962c:	4620      	mov	r0, r4
 800962e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009632:	f000 b817 	b.w	8009664 <_kill_r>
 8009636:	2b01      	cmp	r3, #1
 8009638:	d00a      	beq.n	8009650 <_raise_r+0x4c>
 800963a:	1c59      	adds	r1, r3, #1
 800963c:	d103      	bne.n	8009646 <_raise_r+0x42>
 800963e:	2316      	movs	r3, #22
 8009640:	6003      	str	r3, [r0, #0]
 8009642:	2001      	movs	r0, #1
 8009644:	e7e7      	b.n	8009616 <_raise_r+0x12>
 8009646:	2400      	movs	r4, #0
 8009648:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800964c:	4628      	mov	r0, r5
 800964e:	4798      	blx	r3
 8009650:	2000      	movs	r0, #0
 8009652:	e7e0      	b.n	8009616 <_raise_r+0x12>

08009654 <raise>:
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <raise+0xc>)
 8009656:	4601      	mov	r1, r0
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	f7ff bfd3 	b.w	8009604 <_raise_r>
 800965e:	bf00      	nop
 8009660:	20000070 	.word	0x20000070

08009664 <_kill_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d07      	ldr	r5, [pc, #28]	; (8009684 <_kill_r+0x20>)
 8009668:	2300      	movs	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	4611      	mov	r1, r2
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	f7f8 fc13 	bl	8001e9c <_kill>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d102      	bne.n	8009680 <_kill_r+0x1c>
 800967a:	682b      	ldr	r3, [r5, #0]
 800967c:	b103      	cbz	r3, 8009680 <_kill_r+0x1c>
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	bd38      	pop	{r3, r4, r5, pc}
 8009682:	bf00      	nop
 8009684:	200044f0 	.word	0x200044f0

08009688 <_getpid_r>:
 8009688:	f7f8 bc00 	b.w	8001e8c <_getpid>

0800968c <__swhatbuf_r>:
 800968c:	b570      	push	{r4, r5, r6, lr}
 800968e:	460c      	mov	r4, r1
 8009690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009694:	2900      	cmp	r1, #0
 8009696:	b096      	sub	sp, #88	; 0x58
 8009698:	4615      	mov	r5, r2
 800969a:	461e      	mov	r6, r3
 800969c:	da0d      	bge.n	80096ba <__swhatbuf_r+0x2e>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096a4:	f04f 0100 	mov.w	r1, #0
 80096a8:	bf0c      	ite	eq
 80096aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096ae:	2340      	movne	r3, #64	; 0x40
 80096b0:	2000      	movs	r0, #0
 80096b2:	6031      	str	r1, [r6, #0]
 80096b4:	602b      	str	r3, [r5, #0]
 80096b6:	b016      	add	sp, #88	; 0x58
 80096b8:	bd70      	pop	{r4, r5, r6, pc}
 80096ba:	466a      	mov	r2, sp
 80096bc:	f000 f848 	bl	8009750 <_fstat_r>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	dbec      	blt.n	800969e <__swhatbuf_r+0x12>
 80096c4:	9901      	ldr	r1, [sp, #4]
 80096c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096ce:	4259      	negs	r1, r3
 80096d0:	4159      	adcs	r1, r3
 80096d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d6:	e7eb      	b.n	80096b0 <__swhatbuf_r+0x24>

080096d8 <__smakebuf_r>:
 80096d8:	898b      	ldrh	r3, [r1, #12]
 80096da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096dc:	079d      	lsls	r5, r3, #30
 80096de:	4606      	mov	r6, r0
 80096e0:	460c      	mov	r4, r1
 80096e2:	d507      	bpl.n	80096f4 <__smakebuf_r+0x1c>
 80096e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	6123      	str	r3, [r4, #16]
 80096ec:	2301      	movs	r3, #1
 80096ee:	6163      	str	r3, [r4, #20]
 80096f0:	b002      	add	sp, #8
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	ab01      	add	r3, sp, #4
 80096f6:	466a      	mov	r2, sp
 80096f8:	f7ff ffc8 	bl	800968c <__swhatbuf_r>
 80096fc:	9900      	ldr	r1, [sp, #0]
 80096fe:	4605      	mov	r5, r0
 8009700:	4630      	mov	r0, r6
 8009702:	f7fe fecb 	bl	800849c <_malloc_r>
 8009706:	b948      	cbnz	r0, 800971c <__smakebuf_r+0x44>
 8009708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970c:	059a      	lsls	r2, r3, #22
 800970e:	d4ef      	bmi.n	80096f0 <__smakebuf_r+0x18>
 8009710:	f023 0303 	bic.w	r3, r3, #3
 8009714:	f043 0302 	orr.w	r3, r3, #2
 8009718:	81a3      	strh	r3, [r4, #12]
 800971a:	e7e3      	b.n	80096e4 <__smakebuf_r+0xc>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	6020      	str	r0, [r4, #0]
 8009720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	9b00      	ldr	r3, [sp, #0]
 8009728:	6163      	str	r3, [r4, #20]
 800972a:	9b01      	ldr	r3, [sp, #4]
 800972c:	6120      	str	r0, [r4, #16]
 800972e:	b15b      	cbz	r3, 8009748 <__smakebuf_r+0x70>
 8009730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009734:	4630      	mov	r0, r6
 8009736:	f000 f81d 	bl	8009774 <_isatty_r>
 800973a:	b128      	cbz	r0, 8009748 <__smakebuf_r+0x70>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	431d      	orrs	r5, r3
 800974c:	81a5      	strh	r5, [r4, #12]
 800974e:	e7cf      	b.n	80096f0 <__smakebuf_r+0x18>

08009750 <_fstat_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d07      	ldr	r5, [pc, #28]	; (8009770 <_fstat_r+0x20>)
 8009754:	2300      	movs	r3, #0
 8009756:	4604      	mov	r4, r0
 8009758:	4608      	mov	r0, r1
 800975a:	4611      	mov	r1, r2
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	f7f8 fbfc 	bl	8001f5a <_fstat>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	d102      	bne.n	800976c <_fstat_r+0x1c>
 8009766:	682b      	ldr	r3, [r5, #0]
 8009768:	b103      	cbz	r3, 800976c <_fstat_r+0x1c>
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	bd38      	pop	{r3, r4, r5, pc}
 800976e:	bf00      	nop
 8009770:	200044f0 	.word	0x200044f0

08009774 <_isatty_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d06      	ldr	r5, [pc, #24]	; (8009790 <_isatty_r+0x1c>)
 8009778:	2300      	movs	r3, #0
 800977a:	4604      	mov	r4, r0
 800977c:	4608      	mov	r0, r1
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	f7f8 fbfb 	bl	8001f7a <_isatty>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d102      	bne.n	800978e <_isatty_r+0x1a>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	b103      	cbz	r3, 800978e <_isatty_r+0x1a>
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	200044f0 	.word	0x200044f0

08009794 <logf>:
 8009794:	b508      	push	{r3, lr}
 8009796:	ed2d 8b02 	vpush	{d8}
 800979a:	eeb0 8a40 	vmov.f32	s16, s0
 800979e:	f000 f82d 	bl	80097fc <__ieee754_logf>
 80097a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80097a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097aa:	d60f      	bvs.n	80097cc <logf+0x38>
 80097ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80097b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b4:	dc0a      	bgt.n	80097cc <logf+0x38>
 80097b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80097ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097be:	d108      	bne.n	80097d2 <logf+0x3e>
 80097c0:	f7fd ff40 	bl	8007644 <__errno>
 80097c4:	2322      	movs	r3, #34	; 0x22
 80097c6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80097e8 <logf+0x54>
 80097ca:	6003      	str	r3, [r0, #0]
 80097cc:	ecbd 8b02 	vpop	{d8}
 80097d0:	bd08      	pop	{r3, pc}
 80097d2:	f7fd ff37 	bl	8007644 <__errno>
 80097d6:	ecbd 8b02 	vpop	{d8}
 80097da:	2321      	movs	r3, #33	; 0x21
 80097dc:	6003      	str	r3, [r0, #0]
 80097de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097e2:	4802      	ldr	r0, [pc, #8]	; (80097ec <logf+0x58>)
 80097e4:	f000 b804 	b.w	80097f0 <nanf>
 80097e8:	ff800000 	.word	0xff800000
 80097ec:	08009d9a 	.word	0x08009d9a

080097f0 <nanf>:
 80097f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80097f8 <nanf+0x8>
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	7fc00000 	.word	0x7fc00000

080097fc <__ieee754_logf>:
 80097fc:	ee10 3a10 	vmov	r3, s0
 8009800:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009804:	d106      	bne.n	8009814 <__ieee754_logf+0x18>
 8009806:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80099a0 <__ieee754_logf+0x1a4>
 800980a:	eddf 7a66 	vldr	s15, [pc, #408]	; 80099a4 <__ieee754_logf+0x1a8>
 800980e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009812:	4770      	bx	lr
 8009814:	2b00      	cmp	r3, #0
 8009816:	da02      	bge.n	800981e <__ieee754_logf+0x22>
 8009818:	ee30 7a40 	vsub.f32	s14, s0, s0
 800981c:	e7f5      	b.n	800980a <__ieee754_logf+0xe>
 800981e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009822:	db02      	blt.n	800982a <__ieee754_logf+0x2e>
 8009824:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009828:	4770      	bx	lr
 800982a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800982e:	bfb8      	it	lt
 8009830:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 80099a8 <__ieee754_logf+0x1ac>
 8009834:	485d      	ldr	r0, [pc, #372]	; (80099ac <__ieee754_logf+0x1b0>)
 8009836:	bfbe      	ittt	lt
 8009838:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800983c:	f06f 0118 	mvnlt.w	r1, #24
 8009840:	ee17 3a90 	vmovlt	r3, s15
 8009844:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8009848:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800984c:	4418      	add	r0, r3
 800984e:	bfa8      	it	ge
 8009850:	2100      	movge	r1, #0
 8009852:	3a7f      	subs	r2, #127	; 0x7f
 8009854:	440a      	add	r2, r1
 8009856:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800985a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800985e:	4319      	orrs	r1, r3
 8009860:	ee00 1a10 	vmov	s0, r1
 8009864:	4952      	ldr	r1, [pc, #328]	; (80099b0 <__ieee754_logf+0x1b4>)
 8009866:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800986a:	f103 000f 	add.w	r0, r3, #15
 800986e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009872:	4001      	ands	r1, r0
 8009874:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009878:	bb89      	cbnz	r1, 80098de <__ieee754_logf+0xe2>
 800987a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800987e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009882:	d10f      	bne.n	80098a4 <__ieee754_logf+0xa8>
 8009884:	2a00      	cmp	r2, #0
 8009886:	f000 8087 	beq.w	8009998 <__ieee754_logf+0x19c>
 800988a:	ee07 2a90 	vmov	s15, r2
 800988e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80099b4 <__ieee754_logf+0x1b8>
 8009892:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80099b8 <__ieee754_logf+0x1bc>
 8009896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800989a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800989e:	eea7 0a87 	vfma.f32	s0, s15, s14
 80098a2:	4770      	bx	lr
 80098a4:	eddf 6a45 	vldr	s13, [pc, #276]	; 80099bc <__ieee754_logf+0x1c0>
 80098a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80098ac:	eee0 7a66 	vfms.f32	s15, s0, s13
 80098b0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80098b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098b8:	b912      	cbnz	r2, 80098c0 <__ieee754_logf+0xc4>
 80098ba:	ee30 0a47 	vsub.f32	s0, s0, s14
 80098be:	4770      	bx	lr
 80098c0:	ee07 2a90 	vmov	s15, r2
 80098c4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80099b4 <__ieee754_logf+0x1b8>
 80098c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098cc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80098d0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80098d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80099b8 <__ieee754_logf+0x1bc>
 80098d8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80098dc:	4770      	bx	lr
 80098de:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80098e2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80098e6:	eddf 5a36 	vldr	s11, [pc, #216]	; 80099c0 <__ieee754_logf+0x1c4>
 80098ea:	eddf 4a36 	vldr	s9, [pc, #216]	; 80099c4 <__ieee754_logf+0x1c8>
 80098ee:	4936      	ldr	r1, [pc, #216]	; (80099c8 <__ieee754_logf+0x1cc>)
 80098f0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80098f4:	4419      	add	r1, r3
 80098f6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80098fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80098fe:	430b      	orrs	r3, r1
 8009900:	2b00      	cmp	r3, #0
 8009902:	ee07 2a90 	vmov	s15, r2
 8009906:	ee26 5a06 	vmul.f32	s10, s12, s12
 800990a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800990e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009912:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80099cc <__ieee754_logf+0x1d0>
 8009916:	eee7 7a25 	vfma.f32	s15, s14, s11
 800991a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80099d0 <__ieee754_logf+0x1d4>
 800991e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009922:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80099d4 <__ieee754_logf+0x1d8>
 8009926:	eee7 7a24 	vfma.f32	s15, s14, s9
 800992a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 80099d8 <__ieee754_logf+0x1dc>
 800992e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8009932:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80099dc <__ieee754_logf+0x1e0>
 8009936:	eee4 7a87 	vfma.f32	s15, s9, s14
 800993a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800993e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009942:	dd1a      	ble.n	800997a <__ieee754_logf+0x17e>
 8009944:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009948:	ee20 7a07 	vmul.f32	s14, s0, s14
 800994c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009954:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009958:	b912      	cbnz	r2, 8009960 <__ieee754_logf+0x164>
 800995a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800995e:	e7ac      	b.n	80098ba <__ieee754_logf+0xbe>
 8009960:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80099b4 <__ieee754_logf+0x1b8>
 8009964:	eee6 7a86 	vfma.f32	s15, s13, s12
 8009968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800996c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009970:	eddf 7a11 	vldr	s15, [pc, #68]	; 80099b8 <__ieee754_logf+0x1bc>
 8009974:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8009978:	4770      	bx	lr
 800997a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800997e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009982:	b912      	cbnz	r2, 800998a <__ieee754_logf+0x18e>
 8009984:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009988:	4770      	bx	lr
 800998a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80099b4 <__ieee754_logf+0x1b8>
 800998e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8009992:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009996:	e7eb      	b.n	8009970 <__ieee754_logf+0x174>
 8009998:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80099a4 <__ieee754_logf+0x1a8>
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	cc000000 	.word	0xcc000000
 80099a4:	00000000 	.word	0x00000000
 80099a8:	4c000000 	.word	0x4c000000
 80099ac:	004afb20 	.word	0x004afb20
 80099b0:	007ffff0 	.word	0x007ffff0
 80099b4:	3717f7d1 	.word	0x3717f7d1
 80099b8:	3f317180 	.word	0x3f317180
 80099bc:	3eaaaaab 	.word	0x3eaaaaab
 80099c0:	3e1cd04f 	.word	0x3e1cd04f
 80099c4:	3e178897 	.word	0x3e178897
 80099c8:	ffcf5c30 	.word	0xffcf5c30
 80099cc:	3e638e29 	.word	0x3e638e29
 80099d0:	3ecccccd 	.word	0x3ecccccd
 80099d4:	3e3a3325 	.word	0x3e3a3325
 80099d8:	3e924925 	.word	0x3e924925
 80099dc:	3f2aaaab 	.word	0x3f2aaaab

080099e0 <_init>:
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	bf00      	nop
 80099e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099e6:	bc08      	pop	{r3}
 80099e8:	469e      	mov	lr, r3
 80099ea:	4770      	bx	lr

080099ec <_fini>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	bf00      	nop
 80099f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f2:	bc08      	pop	{r3}
 80099f4:	469e      	mov	lr, r3
 80099f6:	4770      	bx	lr
