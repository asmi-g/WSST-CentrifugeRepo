
WSST_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009184  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08009328  08009328  0000a328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009788  08009788  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009788  08009788  0000a788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009790  08009790  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009790  08009790  0000a790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009794  08009794  0000a794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009798  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c8  200001d8  08009970  0000b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200044a0  08009970  0000b4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bc9  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a7  00000000  00000000  00020dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00024078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecf  00000000  00000000  00025390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a56c  00000000  00000000  0002625f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fe8  00000000  00000000  000407cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3e92  00000000  00000000  000567b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa645  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f0  00000000  00000000  000fa688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00100778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800930c 	.word	0x0800930c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800930c 	.word	0x0800930c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <vApplicationGetIdleTaskMemory+0x30>)
 8000efe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2280      	movs	r2, #128	@ 0x80
 8000f04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200001f4 	.word	0x200001f4
 8000f18:	200002a4 	.word	0x200002a4

08000f1c <set_setpoint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_setpoint(uint32_t new_setpoint)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	temp_setpoint = new_setpoint;
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <set_setpoint+0x1c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000590 	.word	0x20000590

08000f3c <reset_setpoint>:

void reset_setpoint(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	temp_setpoint = 0;
 8000f40:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <reset_setpoint+0x14>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000590 	.word	0x20000590

08000f54 <cycle_heater_state>:

void cycle_heater_state(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  switch(heater_state)
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <cycle_heater_state+0x4c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d016      	beq.n	8000f8e <cycle_heater_state+0x3a>
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	dc1a      	bgt.n	8000f9a <cycle_heater_state+0x46>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <cycle_heater_state+0x1a>
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d008      	beq.n	8000f7e <cycle_heater_state+0x2a>
	case FULL_HEAT:
		heater_state = OFF;
		reset_setpoint();
		break;
  }
}
 8000f6c:	e015      	b.n	8000f9a <cycle_heater_state+0x46>
		heater_state = PRE_HEAT;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <cycle_heater_state+0x4c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
		set_setpoint(PRE_HEAT_SETPOINT);
 8000f74:	f640 401c 	movw	r0, #3100	@ 0xc1c
 8000f78:	f7ff ffd0 	bl	8000f1c <set_setpoint>
		break;
 8000f7c:	e00d      	b.n	8000f9a <cycle_heater_state+0x46>
		heater_state = FULL_HEAT;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <cycle_heater_state+0x4c>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	701a      	strb	r2, [r3, #0]
		set_setpoint(FULL_HEAT_STOPPOINT);
 8000f84:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f88:	f7ff ffc8 	bl	8000f1c <set_setpoint>
		break;
 8000f8c:	e005      	b.n	8000f9a <cycle_heater_state+0x46>
		heater_state = OFF;
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <cycle_heater_state+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
		reset_setpoint();
 8000f94:	f7ff ffd2 	bl	8000f3c <reset_setpoint>
		break;
 8000f98:	bf00      	nop
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000598 	.word	0x20000598

08000fa4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fb4:	d102      	bne.n	8000fbc <HAL_GPIO_EXTI_Callback+0x18>
  {
	  cycle_heater_state();
 8000fb6:	f7ff ffcd 	bl	8000f54 <cycle_heater_state>
  }
  else if(GPIO_Pin == GPIO_PIN_7)
  {
	  IR_RPM_interrupt_count++;
  }
}
 8000fba:	e007      	b.n	8000fcc <HAL_GPIO_EXTI_Callback+0x28>
  else if(GPIO_Pin == GPIO_PIN_7)
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	2b80      	cmp	r3, #128	@ 0x80
 8000fc0:	d104      	bne.n	8000fcc <HAL_GPIO_EXTI_Callback+0x28>
	  IR_RPM_interrupt_count++;
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4a02      	ldr	r2, [pc, #8]	@ (8000fd4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200005a0 	.word	0x200005a0

08000fd8 <read_adc_channel>:
			break;
	}
}

uint32_t read_adc_channel()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint32_t return_value = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000fe2:	4808      	ldr	r0, [pc, #32]	@ (8001004 <read_adc_channel+0x2c>)
 8000fe4:	f000 fef4 	bl	8001dd0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <read_adc_channel+0x2c>)
 8000fee:	f000 ffa3 	bl	8001f38 <HAL_ADC_PollForConversion>
	return_value = HAL_ADC_GetValue(&hadc1);
 8000ff2:	4804      	ldr	r0, [pc, #16]	@ (8001004 <read_adc_channel+0x2c>)
 8000ff4:	f001 f82b 	bl	800204e <HAL_ADC_GetValue>
 8000ff8:	6078      	str	r0, [r7, #4]

	return return_value;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200004a4 	.word	0x200004a4

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b09c      	sub	sp, #112	@ 0x70
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f000 fe59 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f86b 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 f9a9 	bl	800136c <MX_GPIO_Init>
  MX_ADC1_Init();
 800101a:	f000 f8d1 	bl	80011c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800101e:	f000 f97b 	bl	8001318 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001022:	f000 f921 	bl	8001268 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001026:	4828      	ldr	r0, [pc, #160]	@ (80010c8 <main+0xc0>)
 8001028:	f000 fed2 	bl	8001dd0 <HAL_ADC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800102c:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <main+0xc4>)
 800102e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001032:	461d      	mov	r5, r3
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001040:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 f857 	bl	80050fa <osThreadCreate>
 800104c:	4603      	mov	r3, r0
 800104e:	4a20      	ldr	r2, [pc, #128]	@ (80010d0 <main+0xc8>)
 8001050:	6013      	str	r3, [r2, #0]

  /* definition and creation of readSensors */
  osThreadDef(readSensors, startReadSensors, osPriorityNormal, 0, 128);
 8001052:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <main+0xcc>)
 8001054:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001058:	461d      	mov	r5, r3
 800105a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001062:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorsHandle = osThreadCreate(osThread(readSensors), NULL);
 8001066:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f004 f844 	bl	80050fa <osThreadCreate>
 8001072:	4603      	mov	r3, r0
 8001074:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <main+0xd0>)
 8001076:	6013      	str	r3, [r2, #0]

  /* definition and creation of bangBangControl */
  osThreadDef(bangBangControl, StartBangBangControl, osPriorityRealtime, 0, 128);
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <main+0xd4>)
 800107a:	f107 041c 	add.w	r4, r7, #28
 800107e:	461d      	mov	r5, r3
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bangBangControlHandle = osThreadCreate(osThread(bangBangControl), NULL);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f004 f831 	bl	80050fa <osThreadCreate>
 8001098:	4603      	mov	r3, r0
 800109a:	4a11      	ldr	r2, [pc, #68]	@ (80010e0 <main+0xd8>)
 800109c:	6013      	str	r3, [r2, #0]

  /* definition and creation of communicationTa */
  osThreadDef(communicationTa, StartComTask, osPriorityNormal, 0, 128);
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <main+0xdc>)
 80010a0:	463c      	mov	r4, r7
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  communicationTaHandle = osThreadCreate(osThread(communicationTa), NULL);
 80010b0:	463b      	mov	r3, r7
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f004 f820 	bl	80050fa <osThreadCreate>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <main+0xe0>)
 80010be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010c0:	f004 f814 	bl	80050ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <main+0xbc>
 80010c8:	200004a4 	.word	0x200004a4
 80010cc:	08009334 	.word	0x08009334
 80010d0:	2000057c 	.word	0x2000057c
 80010d4:	0800935c 	.word	0x0800935c
 80010d8:	20000580 	.word	0x20000580
 80010dc:	08009388 	.word	0x08009388
 80010e0:	20000584 	.word	0x20000584
 80010e4:	080093b4 	.word	0x080093b4
 80010e8:	20000588 	.word	0x20000588

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	@ 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	@ 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 ffe7 	bl	80070ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <SystemClock_Config+0xcc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	4a27      	ldr	r2, [pc, #156]	@ (80011b8 <SystemClock_Config+0xcc>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <SystemClock_Config+0xcc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <SystemClock_Config+0xd0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001138:	4a20      	ldr	r2, [pc, #128]	@ (80011bc <SystemClock_Config+0xd0>)
 800113a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <SystemClock_Config+0xd0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	2301      	movs	r3, #1
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001154:	2310      	movs	r3, #16
 8001156:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115c:	2300      	movs	r3, #0
 800115e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001160:	2308      	movs	r3, #8
 8001162:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001164:	2348      	movs	r3, #72	@ 0x48
 8001166:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001168:	2302      	movs	r3, #2
 800116a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800116c:	2304      	movs	r3, #4
 800116e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fcbf 	bl	8002af8 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001180:	f000 fac0 	bl	8001704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001184:	230f      	movs	r3, #15
 8001186:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001188:	2302      	movs	r3, #2
 800118a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001194:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2102      	movs	r1, #2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 ff21 	bl	8002fe8 <HAL_RCC_ClockConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011ac:	f000 faaa 	bl	8001704 <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3750      	adds	r7, #80	@ 0x50
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011d2:	4b22      	ldr	r3, [pc, #136]	@ (800125c <MX_ADC1_Init+0x9c>)
 80011d4:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <MX_ADC1_Init+0xa0>)
 80011d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011d8:	4b20      	ldr	r3, [pc, #128]	@ (800125c <MX_ADC1_Init+0x9c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011de:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_ADC1_Init+0x9c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_ADC1_Init+0x9c>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_ADC1_Init+0x9c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_ADC1_Init+0x9c>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <MX_ADC1_Init+0x9c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_ADC1_Init+0x9c>)
 8001200:	2200      	movs	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_ADC1_Init+0x9c>)
 8001206:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <MX_ADC1_Init+0xa4>)
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_ADC1_Init+0x9c>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_ADC1_Init+0x9c>)
 8001212:	2201      	movs	r2, #1
 8001214:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_ADC1_Init+0x9c>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_ADC1_Init+0x9c>)
 8001220:	2201      	movs	r2, #1
 8001222:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001224:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_ADC1_Init+0x9c>)
 8001226:	f000 fd8f 	bl	8001d48 <HAL_ADC_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001230:	f000 fa68 	bl	8001704 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_ADC1_Init+0x9c>)
 8001246:	f000 ff0f 	bl	8002068 <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001250:	f000 fa58 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200004a4 	.word	0x200004a4
 8001260:	40012000 	.word	0x40012000
 8001264:	0f000001 	.word	0x0f000001

08001268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	@ 0x28
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128a:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <MX_TIM2_Init+0xac>)
 800128c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001290:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001292:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <MX_TIM2_Init+0xac>)
 8001294:	2247      	movs	r2, #71	@ 0x47
 8001296:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1e      	ldr	r3, [pc, #120]	@ (8001314 <MX_TIM2_Init+0xac>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800129e:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <MX_TIM2_Init+0xac>)
 80012a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <MX_TIM2_Init+0xac>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <MX_TIM2_Init+0xac>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012b2:	4818      	ldr	r0, [pc, #96]	@ (8001314 <MX_TIM2_Init+0xac>)
 80012b4:	f002 f966 	bl	8003584 <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012be:	f000 fa21 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	4619      	mov	r1, r3
 80012d0:	4810      	ldr	r0, [pc, #64]	@ (8001314 <MX_TIM2_Init+0xac>)
 80012d2:	f002 fe6f 	bl	8003fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012dc:	f000 fa12 	bl	8001704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	@ 0x60
 80012e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	@ (8001314 <MX_TIM2_Init+0xac>)
 80012f8:	f002 fb34 	bl	8003964 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001302:	f000 f9ff 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001306:	4803      	ldr	r0, [pc, #12]	@ (8001314 <MX_TIM2_Init+0xac>)
 8001308:	f000 faa8 	bl	800185c <HAL_TIM_MspPostInit>

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	@ 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200004ec 	.word	0x200004ec

08001318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 800131e:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <MX_USART2_UART_Init+0x50>)
 8001320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001350:	f002 feb2 	bl	80040b8 <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800135a:	f000 f9d3 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000534 	.word	0x20000534
 8001368:	40004400 	.word	0x40004400

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b3f      	ldr	r3, [pc, #252]	@ (8001484 <MX_GPIO_Init+0x118>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a3e      	ldr	r2, [pc, #248]	@ (8001484 <MX_GPIO_Init+0x118>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b3c      	ldr	r3, [pc, #240]	@ (8001484 <MX_GPIO_Init+0x118>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <MX_GPIO_Init+0x118>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a37      	ldr	r2, [pc, #220]	@ (8001484 <MX_GPIO_Init+0x118>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b35      	ldr	r3, [pc, #212]	@ (8001484 <MX_GPIO_Init+0x118>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b31      	ldr	r3, [pc, #196]	@ (8001484 <MX_GPIO_Init+0x118>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a30      	ldr	r2, [pc, #192]	@ (8001484 <MX_GPIO_Init+0x118>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001484 <MX_GPIO_Init+0x118>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80013dc:	482a      	ldr	r0, [pc, #168]	@ (8001488 <MX_GPIO_Init+0x11c>)
 80013de:	f001 fb59 	bl	8002a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 80013e8:	4828      	ldr	r0, [pc, #160]	@ (800148c <MX_GPIO_Init+0x120>)
 80013ea:	f001 fb53 	bl	8002a94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	4827      	ldr	r0, [pc, #156]	@ (8001490 <MX_GPIO_Init+0x124>)
 80013f4:	f001 fb4e 	bl	8002a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Interrupt_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Interrupt_Pin;
 80013f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4619      	mov	r1, r3
 800140e:	4820      	ldr	r0, [pc, #128]	@ (8001490 <MX_GPIO_Init+0x124>)
 8001410:	f001 f9bc 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001414:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	4619      	mov	r1, r3
 800142c:	4816      	ldr	r0, [pc, #88]	@ (8001488 <MX_GPIO_Init+0x11c>)
 800142e:	f001 f9ad 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001432:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 8001436:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	4810      	ldr	r0, [pc, #64]	@ (800148c <MX_GPIO_Init+0x120>)
 800144c:	f001 f99e 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4619      	mov	r1, r3
 8001466:	480a      	ldr	r0, [pc, #40]	@ (8001490 <MX_GPIO_Init+0x124>)
 8001468:	f001 f990 	bl	800278c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2105      	movs	r1, #5
 8001470:	2028      	movs	r0, #40	@ 0x28
 8001472:	f001 f8cf 	bl	8002614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001476:	2028      	movs	r0, #40	@ 0x28
 8001478:	f001 f8e8 	bl	800264c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020400 	.word	0x40020400
 8001490:	40020800 	.word	0x40020800

08001494 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  reset_setpoint();
 800149c:	f7ff fd4e 	bl	8000f3c <reset_setpoint>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 80014a0:	200a      	movs	r0, #10
 80014a2:	f003 fe76 	bl	8005192 <osDelay>
 80014a6:	e7fb      	b.n	80014a0 <StartDefaultTask+0xc>

080014a8 <startReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadSensors */
void startReadSensors(void const * argument)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b09a      	sub	sp, #104	@ 0x68
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadSensors */
  int accumulator_temp = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	667b      	str	r3, [r7, #100]	@ 0x64
  int accumulator_pot = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	663b      	str	r3, [r7, #96]	@ 0x60
  int oversample_count_max = 10;
 80014b8:	230a      	movs	r3, #10
 80014ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  int oversample_count = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	65fb      	str	r3, [r7, #92]	@ 0x5c

  uint32_t rpm_time = HAL_GetTick();
 80014c0:	f000 fc36 	bl	8001d30 <HAL_GetTick>
 80014c4:	6578      	str	r0, [r7, #84]	@ 0x54
  uint32_t prev_rpm_time = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	653b      	str	r3, [r7, #80]	@ 0x50
  for(;;)
  {
//	HAL_ADC_Start(&hadc1);
//	select_adc_channel(0);
//	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	accumulator_temp += read_adc_channel();
 80014ca:	f7ff fd85 	bl	8000fd8 <read_adc_channel>
 80014ce:	4602      	mov	r2, r0
 80014d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014d2:	4413      	add	r3, r2
 80014d4:	667b      	str	r3, [r7, #100]	@ 0x64
	accumulator_pot += read_adc_channel();
 80014d6:	f7ff fd7f 	bl	8000fd8 <read_adc_channel>
 80014da:	4602      	mov	r2, r0
 80014dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014de:	4413      	add	r3, r2
 80014e0:	663b      	str	r3, [r7, #96]	@ 0x60

	oversample_count++;
 80014e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014e4:	3301      	adds	r3, #1
 80014e6:	65fb      	str	r3, [r7, #92]	@ 0x5c

	if(oversample_count == oversample_count_max)
 80014e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80014ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d113      	bne.n	8001518 <startReadSensors+0x70>
	{
		oversample_count = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		thermistor_sensor_adc = accumulator_temp/oversample_count_max;
 80014f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80014f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <startReadSensors+0x120>)
 8001500:	601a      	str	r2, [r3, #0]
		potentiometer_val_adc = accumulator_pot/oversample_count_max;
 8001502:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001506:	fb92 f3f3 	sdiv	r3, r2, r3
 800150a:	461a      	mov	r2, r3
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <startReadSensors+0x124>)
 800150e:	601a      	str	r2, [r3, #0]
		accumulator_temp = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	667b      	str	r3, [r7, #100]	@ 0x64
		accumulator_pot = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	663b      	str	r3, [r7, #96]	@ 0x60
//		char buf2[64];
//		sprintf(buf2, "Value of PWM: %ld\r\n", Motor_PWM_Val);
//		HAL_UART_Transmit(&huart2, buf2, strlen(buf2), HAL_MAX_DELAY);
	}

	IR_RPM_accumulator += IR_RPM_interrupt_count;
 8001518:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <startReadSensors+0x128>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <startReadSensors+0x12c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4413      	add	r3, r2
 8001522:	4a2b      	ldr	r2, [pc, #172]	@ (80015d0 <startReadSensors+0x128>)
 8001524:	6013      	str	r3, [r2, #0]

	if(IR_RPM_accumulator >= oversample_count_max)
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <startReadSensors+0x128>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800152c:	429a      	cmp	r2, r3
 800152e:	d346      	bcc.n	80015be <startReadSensors+0x116>
	{
		rpm_time = HAL_GetTick();
 8001530:	f000 fbfe 	bl	8001d30 <HAL_GetTick>
 8001534:	6578      	str	r0, [r7, #84]	@ 0x54
		double time_delta = (rpm_time - prev_rpm_time)/1000;
 8001536:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	4a26      	ldr	r2, [pc, #152]	@ (80015d8 <startReadSensors+0x130>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	099b      	lsrs	r3, r3, #6
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffe5 	bl	8000514 <__aeabi_ui2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		centrifuge_RPM = (IR_RPM_accumulator/time_delta)*60;
 8001552:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <startReadSensors+0x128>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffdc 	bl	8000514 <__aeabi_ui2d>
 800155c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001560:	f7ff f97c 	bl	800085c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <startReadSensors+0x134>)
 8001572:	f7ff f849 	bl	8000608 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4919      	ldr	r1, [pc, #100]	@ (80015e0 <startReadSensors+0x138>)
 800157c:	e9c1 2300 	strd	r2, r3, [r1]
		IR_RPM_accumulator = 0;
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <startReadSensors+0x128>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
		char buf[64];
		sprintf(buf, "Value of sensor: %ld\r\n", (uint32_t) centrifuge_RPM);
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <startReadSensors+0x138>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb12 	bl	8000bb8 <__aeabi_d2uiz>
 8001594:	4602      	mov	r2, r0
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4912      	ldr	r1, [pc, #72]	@ (80015e4 <startReadSensors+0x13c>)
 800159c:	4618      	mov	r0, r3
 800159e:	f005 fd33 	bl	8007008 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fe6a 	bl	8000280 <strlen>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f107 0108 	add.w	r1, r7, #8
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <startReadSensors+0x140>)
 80015ba:	f002 fdcd 	bl	8004158 <HAL_UART_Transmit>
	}

    osDelay(1);
 80015be:	2001      	movs	r0, #1
 80015c0:	f003 fde7 	bl	8005192 <osDelay>
	accumulator_temp += read_adc_channel();
 80015c4:	e781      	b.n	80014ca <startReadSensors+0x22>
 80015c6:	bf00      	nop
 80015c8:	20000594 	.word	0x20000594
 80015cc:	2000058c 	.word	0x2000058c
 80015d0:	2000059c 	.word	0x2000059c
 80015d4:	200005a0 	.word	0x200005a0
 80015d8:	10624dd3 	.word	0x10624dd3
 80015dc:	404e0000 	.word	0x404e0000
 80015e0:	200005a8 	.word	0x200005a8
 80015e4:	080093d0 	.word	0x080093d0
 80015e8:	20000534 	.word	0x20000534

080015ec <StartBangBangControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBangBangControl */
void StartBangBangControl(void const * argument)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBangBangControl */
  TIM2->CCR1 = 500; // Divide by 1000 to get PWM Duty Cycle
 80015f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015fc:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015fe:	2100      	movs	r1, #0
 8001600:	482d      	ldr	r0, [pc, #180]	@ (80016b8 <StartBangBangControl+0xcc>)
 8001602:	f002 f80f 	bl	8003624 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800160c:	482b      	ldr	r0, [pc, #172]	@ (80016bc <StartBangBangControl+0xd0>)
 800160e:	f001 fa41 	bl	8002a94 <HAL_GPIO_WritePin>
  for(;;)
  {
//	HAL_ADC_Start(&hadc1);
//	select_adc_channel(1);
//	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	if(heater_state == PRE_HEAT)
 8001612:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <StartBangBangControl+0xd4>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d11d      	bne.n	8001656 <StartBangBangControl+0x6a>
	{
		if(thermistor_sensor_adc < temp_setpoint - PRE_HEAT_DEADBAND)
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <StartBangBangControl+0xd8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8001622:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <StartBangBangControl+0xdc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d90a      	bls.n	8001640 <StartBangBangControl+0x54>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2120      	movs	r1, #32
 800162e:	4823      	ldr	r0, [pc, #140]	@ (80016bc <StartBangBangControl+0xd0>)
 8001630:	f001 fa30 	bl	8002a94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // D12 on board
 8001634:	2201      	movs	r2, #1
 8001636:	2140      	movs	r1, #64	@ 0x40
 8001638:	4820      	ldr	r0, [pc, #128]	@ (80016bc <StartBangBangControl+0xd0>)
 800163a:	f001 fa2b 	bl	8002a94 <HAL_GPIO_WritePin>
 800163e:	e037      	b.n	80016b0 <StartBangBangControl+0xc4>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2120      	movs	r1, #32
 8001644:	481d      	ldr	r0, [pc, #116]	@ (80016bc <StartBangBangControl+0xd0>)
 8001646:	f001 fa25 	bl	8002a94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2140      	movs	r1, #64	@ 0x40
 800164e:	481b      	ldr	r0, [pc, #108]	@ (80016bc <StartBangBangControl+0xd0>)
 8001650:	f001 fa20 	bl	8002a94 <HAL_GPIO_WritePin>
 8001654:	e02c      	b.n	80016b0 <StartBangBangControl+0xc4>
		}
	}
	else if(heater_state == FULL_HEAT)
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <StartBangBangControl+0xd4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d11e      	bne.n	800169c <StartBangBangControl+0xb0>
	{
		if(thermistor_sensor_adc < FULL_HEAT_STOPPOINT)
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <StartBangBangControl+0xdc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001666:	4293      	cmp	r3, r2
 8001668:	d80a      	bhi.n	8001680 <StartBangBangControl+0x94>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
 800166c:	2120      	movs	r1, #32
 800166e:	4813      	ldr	r0, [pc, #76]	@ (80016bc <StartBangBangControl+0xd0>)
 8001670:	f001 fa10 	bl	8002a94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // D12 on board
 8001674:	2201      	movs	r2, #1
 8001676:	2140      	movs	r1, #64	@ 0x40
 8001678:	4810      	ldr	r0, [pc, #64]	@ (80016bc <StartBangBangControl+0xd0>)
 800167a:	f001 fa0b 	bl	8002a94 <HAL_GPIO_WritePin>
 800167e:	e017      	b.n	80016b0 <StartBangBangControl+0xc4>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2120      	movs	r1, #32
 8001684:	480d      	ldr	r0, [pc, #52]	@ (80016bc <StartBangBangControl+0xd0>)
 8001686:	f001 fa05 	bl	8002a94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2140      	movs	r1, #64	@ 0x40
 800168e:	480b      	ldr	r0, [pc, #44]	@ (80016bc <StartBangBangControl+0xd0>)
 8001690:	f001 fa00 	bl	8002a94 <HAL_GPIO_WritePin>
			heater_state = OFF;
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <StartBangBangControl+0xd4>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e009      	b.n	80016b0 <StartBangBangControl+0xc4>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2120      	movs	r1, #32
 80016a0:	4806      	ldr	r0, [pc, #24]	@ (80016bc <StartBangBangControl+0xd0>)
 80016a2:	f001 f9f7 	bl	8002a94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2140      	movs	r1, #64	@ 0x40
 80016aa:	4804      	ldr	r0, [pc, #16]	@ (80016bc <StartBangBangControl+0xd0>)
 80016ac:	f001 f9f2 	bl	8002a94 <HAL_GPIO_WritePin>
	}
	osDelay(100);
 80016b0:	2064      	movs	r0, #100	@ 0x64
 80016b2:	f003 fd6e 	bl	8005192 <osDelay>
	if(heater_state == PRE_HEAT)
 80016b6:	e7ac      	b.n	8001612 <StartBangBangControl+0x26>
 80016b8:	200004ec 	.word	0x200004ec
 80016bc:	40020000 	.word	0x40020000
 80016c0:	20000598 	.word	0x20000598
 80016c4:	20000590 	.word	0x20000590
 80016c8:	20000594 	.word	0x20000594

080016cc <StartComTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartComTask */
void StartComTask(void const * argument)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartComTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80016d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016d8:	f003 fd5b 	bl	8005192 <osDelay>
 80016dc:	e7fa      	b.n	80016d4 <StartComTask+0x8>
	...

080016e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016f2:	f000 fb09 	bl	8001d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40010000 	.word	0x40010000

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b090      	sub	sp, #64	@ 0x40
 8001708:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170a:	b672      	cpsid	i
}
 800170c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char buf[64];
  sprintf(buf, "BRUH MOMENT");
 800170e:	463b      	mov	r3, r7
 8001710:	4908      	ldr	r1, [pc, #32]	@ (8001734 <Error_Handler+0x30>)
 8001712:	4618      	mov	r0, r3
 8001714:	f005 fc78 	bl	8007008 <siprintf>

  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8001718:	463b      	mov	r3, r7
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fdb0 	bl	8000280 <strlen>
 8001720:	4603      	mov	r3, r0
 8001722:	b29a      	uxth	r2, r3
 8001724:	4639      	mov	r1, r7
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	4803      	ldr	r0, [pc, #12]	@ (8001738 <Error_Handler+0x34>)
 800172c:	f002 fd14 	bl	8004158 <HAL_UART_Transmit>
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <Error_Handler+0x2c>
 8001734:	080093e8 	.word	0x080093e8
 8001738:	20000534 	.word	0x20000534

0800173c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_MspInit+0x54>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <HAL_MspInit+0x54>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001750:	6453      	str	r3, [r2, #68]	@ 0x44
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_MspInit+0x54>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_MspInit+0x54>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <HAL_MspInit+0x54>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_MspInit+0x54>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	210f      	movs	r1, #15
 800177e:	f06f 0001 	mvn.w	r0, #1
 8001782:	f000 ff47 	bl	8002614 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a17      	ldr	r2, [pc, #92]	@ (8001810 <HAL_ADC_MspInit+0x7c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d127      	bne.n	8001806 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	4a15      	ldr	r2, [pc, #84]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c6:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <HAL_ADC_MspInit+0x80>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f2:	2303      	movs	r3, #3
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	@ (8001818 <HAL_ADC_MspInit+0x84>)
 8001802:	f000 ffc3 	bl	800278c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	@ 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40012000 	.word	0x40012000
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000

0800181c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800182c:	d10d      	bne.n	800184a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_TIM_PWM_MspInit+0x3c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_TIM_PWM_MspInit+0x3c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_TIM_PWM_MspInit+0x3c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187c:	d11e      	bne.n	80018bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <HAL_TIM_MspPostInit+0x68>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a0f      	ldr	r2, [pc, #60]	@ (80018c4 <HAL_TIM_MspPostInit+0x68>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <HAL_TIM_MspPostInit+0x68>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800189a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800189e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ac:	2301      	movs	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <HAL_TIM_MspPostInit+0x6c>)
 80018b8:	f000 ff68 	bl	800278c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001960 <HAL_UART_MspInit+0x94>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d133      	bne.n	8001956 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001964 <HAL_UART_MspInit+0x98>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001964 <HAL_UART_MspInit+0x98>)
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_UART_MspInit+0x98>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_UART_MspInit+0x98>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <HAL_UART_MspInit+0x98>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_UART_MspInit+0x98>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001926:	230c      	movs	r3, #12
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001936:	2307      	movs	r3, #7
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4809      	ldr	r0, [pc, #36]	@ (8001968 <HAL_UART_MspInit+0x9c>)
 8001942:	f000 ff23 	bl	800278c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2105      	movs	r1, #5
 800194a:	2026      	movs	r0, #38	@ 0x26
 800194c:	f000 fe62 	bl	8002614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001950:	2026      	movs	r0, #38	@ 0x26
 8001952:	f000 fe7b 	bl	800264c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	@ 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40004400 	.word	0x40004400
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000

0800196c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <HAL_InitTick+0xd0>)
 8001982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001984:	4a2d      	ldr	r2, [pc, #180]	@ (8001a3c <HAL_InitTick+0xd0>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6453      	str	r3, [r2, #68]	@ 0x44
 800198c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a3c <HAL_InitTick+0xd0>)
 800198e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001998:	f107 020c 	add.w	r2, r7, #12
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 fd00 	bl	80033a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019a8:	f001 fcea 	bl	8003380 <HAL_RCC_GetPCLK2Freq>
 80019ac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b0:	4a23      	ldr	r2, [pc, #140]	@ (8001a40 <HAL_InitTick+0xd4>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0c9b      	lsrs	r3, r3, #18
 80019b8:	3b01      	subs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <HAL_InitTick+0xd8>)
 80019be:	4a22      	ldr	r2, [pc, #136]	@ (8001a48 <HAL_InitTick+0xdc>)
 80019c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019c2:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <HAL_InitTick+0xd8>)
 80019c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001a44 <HAL_InitTick+0xd8>)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <HAL_InitTick+0xd8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <HAL_InitTick+0xd8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <HAL_InitTick+0xd8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80019e2:	4818      	ldr	r0, [pc, #96]	@ (8001a44 <HAL_InitTick+0xd8>)
 80019e4:	f001 fd12 	bl	800340c <HAL_TIM_Base_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80019ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d11b      	bne.n	8001a2e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80019f6:	4813      	ldr	r0, [pc, #76]	@ (8001a44 <HAL_InitTick+0xd8>)
 80019f8:	f001 fd62 	bl	80034c0 <HAL_TIM_Base_Start_IT>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d111      	bne.n	8001a2e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a0a:	2019      	movs	r0, #25
 8001a0c:	f000 fe1e 	bl	800264c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	d808      	bhi.n	8001a28 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001a16:	2200      	movs	r2, #0
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	2019      	movs	r0, #25
 8001a1c:	f000 fdfa 	bl	8002614 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <HAL_InitTick+0xe0>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e002      	b.n	8001a2e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3730      	adds	r7, #48	@ 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	431bde83 	.word	0x431bde83
 8001a44:	200005b0 	.word	0x200005b0
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	20000004 	.word	0x20000004

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <NMI_Handler+0x4>

08001a58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <MemManage_Handler+0x4>

08001a68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a8e:	f001 fe79 	bl	8003784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200005b0 	.word	0x200005b0

08001a9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <USART2_IRQHandler+0x10>)
 8001aa2:	f002 fbe5 	bl	8004270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000534 	.word	0x20000534

08001ab0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Interrupt_Pin);
 8001ab4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ab8:	f001 f806 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ada:	f005 fba1 	bl	8007220 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b02:	bf00      	nop
 8001b04:	e7fd      	b.n	8001b02 <_exit+0x12>

08001b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e00a      	b.n	8001b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b18:	f3af 8000 	nop.w
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	60ba      	str	r2, [r7, #8]
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbf0      	blt.n	8001b18 <_read+0x12>
  }

  return len;
 8001b36:	687b      	ldr	r3, [r7, #4]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e009      	b.n	8001b66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dbf1      	blt.n	8001b52 <_write+0x12>
  }
  return len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_close>:

int _close(int file)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_isatty>:

int _isatty(int file)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f005 fb06 	bl	8007220 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20018000 	.word	0x20018000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	200005f8 	.word	0x200005f8
 8001c48:	200044a0 	.word	0x200044a0

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c74:	f7ff ffea 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7a:	490d      	ldr	r1, [pc, #52]	@ (8001cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c90:	4c0a      	ldr	r4, [pc, #40]	@ (8001cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f005 fac5 	bl	800722c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7ff f9b1 	bl	8001008 <main>
  bx  lr    
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001cb4:	08009798 	.word	0x08009798
  ldr r2, =_sbss
 8001cb8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001cbc:	200044a0 	.word	0x200044a0

08001cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d04 <HAL_Init+0x40>)
 8001cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <HAL_Init+0x40>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <HAL_Init+0x40>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 fc86 	bl	80025fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f7ff fe3a 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fd20 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	200005fc 	.word	0x200005fc

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200005fc 	.word	0x200005fc

08001d48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e033      	b.n	8001dc6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fd14 	bl	8001794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d118      	bne.n	8001db8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d8e:	f023 0302 	bic.w	r3, r3, #2
 8001d92:	f043 0202 	orr.w	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fa86 	bl	80022ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	f023 0303 	bic.w	r3, r3, #3
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001db6:	e001      	b.n	8001dbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Start+0x1a>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e097      	b.n	8001f1a <HAL_ADC_Start+0x14a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d018      	beq.n	8001e32 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e10:	4b45      	ldr	r3, [pc, #276]	@ (8001f28 <HAL_ADC_Start+0x158>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a45      	ldr	r2, [pc, #276]	@ (8001f2c <HAL_ADC_Start+0x15c>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9a      	lsrs	r2, r3, #18
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e24:	e002      	b.n	8001e2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f9      	bne.n	8001e26 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d15f      	bne.n	8001f00 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e6a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e7e:	d106      	bne.n	8001e8e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e84:	f023 0206 	bic.w	r2, r3, #6
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <HAL_ADC_Start+0x160>)
 8001e9e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d129      	bne.n	8001f18 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	e020      	b.n	8001f18 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a16      	ldr	r2, [pc, #88]	@ (8001f34 <HAL_ADC_Start+0x164>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d11b      	bne.n	8001f18 <HAL_ADC_Start+0x148>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d114      	bne.n	8001f18 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	e00b      	b.n	8001f18 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f043 0210 	orr.w	r2, r3, #16
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	431bde83 	.word	0x431bde83
 8001f30:	40012300 	.word	0x40012300
 8001f34:	40012000 	.word	0x40012000

08001f38 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f54:	d113      	bne.n	8001f7e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f64:	d10b      	bne.n	8001f7e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f043 0220 	orr.w	r2, r3, #32
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e063      	b.n	8002046 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f7e:	f7ff fed7 	bl	8001d30 <HAL_GetTick>
 8001f82:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f84:	e021      	b.n	8001fca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d01d      	beq.n	8001fca <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_ADC_PollForConversion+0x6c>
 8001f94:	f7ff fecc 	bl	8001d30 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d212      	bcs.n	8001fca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d00b      	beq.n	8001fca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f043 0204 	orr.w	r2, r3, #4
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e03d      	b.n	8002046 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d1d6      	bne.n	8001f86 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0212 	mvn.w	r2, #18
 8001fe0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d123      	bne.n	8002044 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11f      	bne.n	8002044 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800201c:	2b00      	cmp	r3, #0
 800201e:	d111      	bne.n	8002044 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1c>
 8002080:	2302      	movs	r3, #2
 8002082:	e105      	b.n	8002290 <HAL_ADC_ConfigChannel+0x228>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b09      	cmp	r3, #9
 8002092:	d925      	bls.n	80020e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68d9      	ldr	r1, [r3, #12]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	3b1e      	subs	r3, #30
 80020aa:	2207      	movs	r2, #7
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43da      	mvns	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	400a      	ands	r2, r1
 80020b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68d9      	ldr	r1, [r3, #12]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	4603      	mov	r3, r0
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4403      	add	r3, r0
 80020d2:	3b1e      	subs	r3, #30
 80020d4:	409a      	lsls	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	e022      	b.n	8002126 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	2207      	movs	r2, #7
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	400a      	ands	r2, r1
 8002102:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6919      	ldr	r1, [r3, #16]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4618      	mov	r0, r3
 8002116:	4603      	mov	r3, r0
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4403      	add	r3, r0
 800211c:	409a      	lsls	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b06      	cmp	r3, #6
 800212c:	d824      	bhi.n	8002178 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b05      	subs	r3, #5
 8002140:	221f      	movs	r2, #31
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	400a      	ands	r2, r1
 800214e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3b05      	subs	r3, #5
 800216a:	fa00 f203 	lsl.w	r2, r0, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
 8002176:	e04c      	b.n	8002212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d824      	bhi.n	80021ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3b23      	subs	r3, #35	@ 0x23
 8002192:	221f      	movs	r2, #31
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43da      	mvns	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	400a      	ands	r2, r1
 80021a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	3b23      	subs	r3, #35	@ 0x23
 80021bc:	fa00 f203 	lsl.w	r2, r0, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021c8:	e023      	b.n	8002212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	3b41      	subs	r3, #65	@ 0x41
 80021dc:	221f      	movs	r2, #31
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	400a      	ands	r2, r1
 80021ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b41      	subs	r3, #65	@ 0x41
 8002206:	fa00 f203 	lsl.w	r2, r0, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002212:	4b22      	ldr	r3, [pc, #136]	@ (800229c <HAL_ADC_ConfigChannel+0x234>)
 8002214:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <HAL_ADC_ConfigChannel+0x238>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d109      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1cc>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b12      	cmp	r3, #18
 8002226:	d105      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a19      	ldr	r2, [pc, #100]	@ (80022a0 <HAL_ADC_ConfigChannel+0x238>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d123      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x21e>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b10      	cmp	r3, #16
 8002244:	d003      	beq.n	800224e <HAL_ADC_ConfigChannel+0x1e6>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b11      	cmp	r3, #17
 800224c:	d11b      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b10      	cmp	r3, #16
 8002260:	d111      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <HAL_ADC_ConfigChannel+0x23c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_ADC_ConfigChannel+0x240>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	0c9a      	lsrs	r2, r3, #18
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002278:	e002      	b.n	8002280 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3b01      	subs	r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f9      	bne.n	800227a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40012300 	.word	0x40012300
 80022a0:	40012000 	.word	0x40012000
 80022a4:	20000000 	.word	0x20000000
 80022a8:	431bde83 	.word	0x431bde83

080022ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022b4:	4b79      	ldr	r3, [pc, #484]	@ (800249c <ADC_Init+0x1f0>)
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	021a      	lsls	r2, r3, #8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	4a58      	ldr	r2, [pc, #352]	@ (80024a0 <ADC_Init+0x1f4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d022      	beq.n	800238a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6899      	ldr	r1, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6899      	ldr	r1, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	e00f      	b.n	80023aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0202 	bic.w	r2, r2, #2
 80023b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7e1b      	ldrb	r3, [r3, #24]
 80023c4:	005a      	lsls	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01b      	beq.n	8002410 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	3b01      	subs	r3, #1
 8002404:	035a      	lsls	r2, r3, #13
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	e007      	b.n	8002420 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800241e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800242e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	3b01      	subs	r3, #1
 800243c:	051a      	lsls	r2, r3, #20
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002462:	025a      	lsls	r2, r3, #9
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800247a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	029a      	lsls	r2, r3, #10
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40012300 	.word	0x40012300
 80024a0:	0f000001 	.word	0x0f000001

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	@ (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4907      	ldr	r1, [pc, #28]	@ (8002540 <__NVIC_EnableIRQ+0x38>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	@ (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	@ (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	@ 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	@ 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff4c 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002626:	f7ff ff61 	bl	80024ec <__NVIC_GetPriorityGrouping>
 800262a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	6978      	ldr	r0, [r7, #20]
 8002632:	f7ff ffb1 	bl	8002598 <NVIC_EncodePriority>
 8002636:	4602      	mov	r2, r0
 8002638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff80 	bl	8002544 <__NVIC_SetPriority>
}
 8002644:	bf00      	nop
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff54 	bl	8002508 <__NVIC_EnableIRQ>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002676:	f7ff fb5b 	bl	8001d30 <HAL_GetTick>
 800267a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d008      	beq.n	800269a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2280      	movs	r2, #128	@ 0x80
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e052      	b.n	8002740 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0216 	bic.w	r2, r2, #22
 80026a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <HAL_DMA_Abort+0x62>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0208 	bic.w	r2, r2, #8
 80026d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ea:	e013      	b.n	8002714 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ec:	f7ff fb20 	bl	8001d30 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d90c      	bls.n	8002714 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2203      	movs	r2, #3
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e015      	b.n	8002740 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e4      	bne.n	80026ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002726:	223f      	movs	r2, #63	@ 0x3f
 8002728:	409a      	lsls	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d004      	beq.n	8002766 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2280      	movs	r2, #128	@ 0x80
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e00c      	b.n	8002780 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2205      	movs	r2, #5
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b089      	sub	sp, #36	@ 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e159      	b.n	8002a5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f040 8148 	bne.w	8002a56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d005      	beq.n	80027de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d130      	bne.n	8002840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002814:	2201      	movs	r2, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 0201 	and.w	r2, r3, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b03      	cmp	r3, #3
 800284a:	d017      	beq.n	800287c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d123      	bne.n	80028d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	08da      	lsrs	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3208      	adds	r2, #8
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80a2 	beq.w	8002a56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b57      	ldr	r3, [pc, #348]	@ (8002a74 <HAL_GPIO_Init+0x2e8>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291a:	4a56      	ldr	r2, [pc, #344]	@ (8002a74 <HAL_GPIO_Init+0x2e8>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002920:	6453      	str	r3, [r2, #68]	@ 0x44
 8002922:	4b54      	ldr	r3, [pc, #336]	@ (8002a74 <HAL_GPIO_Init+0x2e8>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292e:	4a52      	ldr	r2, [pc, #328]	@ (8002a78 <HAL_GPIO_Init+0x2ec>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	220f      	movs	r2, #15
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a49      	ldr	r2, [pc, #292]	@ (8002a7c <HAL_GPIO_Init+0x2f0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d019      	beq.n	800298e <HAL_GPIO_Init+0x202>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a48      	ldr	r2, [pc, #288]	@ (8002a80 <HAL_GPIO_Init+0x2f4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_GPIO_Init+0x1fe>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a47      	ldr	r2, [pc, #284]	@ (8002a84 <HAL_GPIO_Init+0x2f8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00d      	beq.n	8002986 <HAL_GPIO_Init+0x1fa>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a46      	ldr	r2, [pc, #280]	@ (8002a88 <HAL_GPIO_Init+0x2fc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <HAL_GPIO_Init+0x1f6>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a45      	ldr	r2, [pc, #276]	@ (8002a8c <HAL_GPIO_Init+0x300>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_GPIO_Init+0x1f2>
 800297a:	2304      	movs	r3, #4
 800297c:	e008      	b.n	8002990 <HAL_GPIO_Init+0x204>
 800297e:	2307      	movs	r3, #7
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x204>
 8002982:	2303      	movs	r3, #3
 8002984:	e004      	b.n	8002990 <HAL_GPIO_Init+0x204>
 8002986:	2302      	movs	r3, #2
 8002988:	e002      	b.n	8002990 <HAL_GPIO_Init+0x204>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_GPIO_Init+0x204>
 800298e:	2300      	movs	r3, #0
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f002 0203 	and.w	r2, r2, #3
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	4093      	lsls	r3, r2
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a0:	4935      	ldr	r1, [pc, #212]	@ (8002a78 <HAL_GPIO_Init+0x2ec>)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ae:	4b38      	ldr	r3, [pc, #224]	@ (8002a90 <HAL_GPIO_Init+0x304>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a90 <HAL_GPIO_Init+0x304>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a90 <HAL_GPIO_Init+0x304>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029fc:	4a24      	ldr	r2, [pc, #144]	@ (8002a90 <HAL_GPIO_Init+0x304>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a02:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <HAL_GPIO_Init+0x304>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a26:	4a1a      	ldr	r2, [pc, #104]	@ (8002a90 <HAL_GPIO_Init+0x304>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <HAL_GPIO_Init+0x304>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a50:	4a0f      	ldr	r2, [pc, #60]	@ (8002a90 <HAL_GPIO_Init+0x304>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	f67f aea2 	bls.w	80027a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3724      	adds	r7, #36	@ 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40013800 	.word	0x40013800
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40020400 	.word	0x40020400
 8002a84:	40020800 	.word	0x40020800
 8002a88:	40020c00 	.word	0x40020c00
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40013c00 	.word	0x40013c00

08002a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa4:	787b      	ldrb	r3, [r7, #1]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ab0:	e003      	b.n	8002aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	041a      	lsls	r2, r3, #16
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	619a      	str	r2, [r3, #24]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ad2:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ade:	4a05      	ldr	r2, [pc, #20]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fa5c 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40013c00 	.word	0x40013c00

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e267      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d075      	beq.n	8002c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	4b88      	ldr	r3, [pc, #544]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d00c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b22:	4b85      	ldr	r3, [pc, #532]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d112      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4b82      	ldr	r3, [pc, #520]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05b      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d157      	bne.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e242      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x74>
 8002b5e:	4b76      	ldr	r3, [pc, #472]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a75      	ldr	r2, [pc, #468]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e01d      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x98>
 8002b76:	4b70      	ldr	r3, [pc, #448]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6d      	ldr	r3, [pc, #436]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6c      	ldr	r2, [pc, #432]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b90:	4b69      	ldr	r3, [pc, #420]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a68      	ldr	r2, [pc, #416]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b66      	ldr	r3, [pc, #408]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a65      	ldr	r2, [pc, #404]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7ff f8be 	bl	8001d30 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7ff f8ba 	bl	8001d30 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	@ 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e207      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b5b      	ldr	r3, [pc, #364]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7ff f8aa 	bl	8001d30 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7ff f8a6 	bl	8001d30 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	@ 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1f3      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	4b51      	ldr	r3, [pc, #324]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d063      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1a:	4b47      	ldr	r3, [pc, #284]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d11c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b44      	ldr	r3, [pc, #272]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d116      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	4b41      	ldr	r3, [pc, #260]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1c7      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4937      	ldr	r1, [pc, #220]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	e03a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c68:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7ff f85f 	bl	8001d30 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c76:	f7ff f85b 	bl	8001d30 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1a8      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	4b2b      	ldr	r3, [pc, #172]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4925      	ldr	r1, [pc, #148]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002caa:	4b24      	ldr	r3, [pc, #144]	@ (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7ff f83e 	bl	8001d30 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7ff f83a 	bl	8001d30 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e187      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d036      	beq.n	8002d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7ff f81e 	bl	8001d30 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7ff f81a 	bl	8001d30 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e167      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x200>
 8002d16:	e01b      	b.n	8002d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d18:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7ff f807 	bl	8001d30 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	e00e      	b.n	8002d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7ff f803 	bl	8001d30 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d907      	bls.n	8002d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e150      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	42470000 	.word	0x42470000
 8002d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b88      	ldr	r3, [pc, #544]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ea      	bne.n	8002d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8097 	beq.w	8002e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d62:	4b81      	ldr	r3, [pc, #516]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b7d      	ldr	r3, [pc, #500]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	4a7c      	ldr	r2, [pc, #496]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b77      	ldr	r3, [pc, #476]	@ (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b74      	ldr	r3, [pc, #464]	@ (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a73      	ldr	r2, [pc, #460]	@ (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe ffc3 	bl	8001d30 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fe ffbf 	bl	8001d30 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e10c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2ea>
 8002dd4:	4b64      	ldr	r3, [pc, #400]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd8:	4a63      	ldr	r2, [pc, #396]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x30c>
 8002dea:	4b5f      	ldr	r3, [pc, #380]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dee:	4a5e      	ldr	r2, [pc, #376]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002e04:	4b58      	ldr	r3, [pc, #352]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e08:	4a57      	ldr	r2, [pc, #348]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e10:	4b55      	ldr	r3, [pc, #340]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e14:	4a54      	ldr	r2, [pc, #336]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d015      	beq.n	8002e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe ff84 	bl	8001d30 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe ff80 	bl	8001d30 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0cb      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	4b49      	ldr	r3, [pc, #292]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ee      	beq.n	8002e2c <HAL_RCC_OscConfig+0x334>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7fe ff6e 	bl	8001d30 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7fe ff6a 	bl	8001d30 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0b5      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ee      	bne.n	8002e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b39      	ldr	r3, [pc, #228]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	4a38      	ldr	r2, [pc, #224]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a1 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e96:	4b34      	ldr	r3, [pc, #208]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d05c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d141      	bne.n	8002f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe ff3e 	bl	8001d30 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe ff3a 	bl	8001d30 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e087      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b27      	ldr	r3, [pc, #156]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	491b      	ldr	r1, [pc, #108]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fe ff13 	bl	8001d30 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe ff0f 	bl	8001d30 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e05c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f20:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x416>
 8002f2c:	e054      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fefc 	bl	8001d30 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fef8 	bl	8001d30 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e045      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x444>
 8002f5a:	e03d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e038      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d121      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cc      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b68      	ldr	r3, [pc, #416]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d90c      	bls.n	8003024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b65      	ldr	r3, [pc, #404]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b63      	ldr	r3, [pc, #396]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b59      	ldr	r3, [pc, #356]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a58      	ldr	r2, [pc, #352]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4b53      	ldr	r3, [pc, #332]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a52      	ldr	r2, [pc, #328]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800305e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b50      	ldr	r3, [pc, #320]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	494d      	ldr	r1, [pc, #308]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d044      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d119      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b3f      	ldr	r3, [pc, #252]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e067      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b37      	ldr	r3, [pc, #220]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4934      	ldr	r1, [pc, #208]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fe fe2a 	bl	8001d30 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fe fe26 	bl	8001d30 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2b      	ldr	r3, [pc, #172]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b25      	ldr	r3, [pc, #148]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d20c      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e032      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4916      	ldr	r1, [pc, #88]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	490e      	ldr	r1, [pc, #56]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316e:	f000 f821 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490a      	ldr	r1, [pc, #40]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a09      	ldr	r2, [pc, #36]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318a:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fbec 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	40023800 	.word	0x40023800
 80031a8:	080093fc 	.word	0x080093fc
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b090      	sub	sp, #64	@ 0x40
 80031ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c0:	2300      	movs	r3, #0
 80031c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c4:	2300      	movs	r3, #0
 80031c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031cc:	4b59      	ldr	r3, [pc, #356]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d00d      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x40>
 80031d8:	2b08      	cmp	r3, #8
 80031da:	f200 80a1 	bhi.w	8003320 <HAL_RCC_GetSysClockFreq+0x16c>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x3a>
 80031e6:	e09b      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x184>)
 80031ea:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80031ec:	e09b      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4b53      	ldr	r3, [pc, #332]	@ (800333c <HAL_RCC_GetSysClockFreq+0x188>)
 80031f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031f2:	e098      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x180>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x180>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d028      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4b4a      	ldr	r3, [pc, #296]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x180>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	2200      	movs	r2, #0
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	627a      	str	r2, [r7, #36]	@ 0x24
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800321c:	2100      	movs	r1, #0
 800321e:	4b47      	ldr	r3, [pc, #284]	@ (800333c <HAL_RCC_GetSysClockFreq+0x188>)
 8003220:	fb03 f201 	mul.w	r2, r3, r1
 8003224:	2300      	movs	r3, #0
 8003226:	fb00 f303 	mul.w	r3, r0, r3
 800322a:	4413      	add	r3, r2
 800322c:	4a43      	ldr	r2, [pc, #268]	@ (800333c <HAL_RCC_GetSysClockFreq+0x188>)
 800322e:	fba0 1202 	umull	r1, r2, r0, r2
 8003232:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003234:	460a      	mov	r2, r1
 8003236:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003238:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800323a:	4413      	add	r3, r2
 800323c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800323e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003240:	2200      	movs	r2, #0
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	61fa      	str	r2, [r7, #28]
 8003246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800324e:	f7fd fcd3 	bl	8000bf8 <__aeabi_uldivmod>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4613      	mov	r3, r2
 8003258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800325a:	e053      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325c:	4b35      	ldr	r3, [pc, #212]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x180>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	2200      	movs	r2, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	617a      	str	r2, [r7, #20]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800326e:	f04f 0b00 	mov.w	fp, #0
 8003272:	4652      	mov	r2, sl
 8003274:	465b      	mov	r3, fp
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	0159      	lsls	r1, r3, #5
 8003280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003284:	0150      	lsls	r0, r2, #5
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	ebb2 080a 	subs.w	r8, r2, sl
 800328e:	eb63 090b 	sbc.w	r9, r3, fp
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800329e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032a6:	ebb2 0408 	subs.w	r4, r2, r8
 80032aa:	eb63 0509 	sbc.w	r5, r3, r9
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	00eb      	lsls	r3, r5, #3
 80032b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032bc:	00e2      	lsls	r2, r4, #3
 80032be:	4614      	mov	r4, r2
 80032c0:	461d      	mov	r5, r3
 80032c2:	eb14 030a 	adds.w	r3, r4, sl
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	eb45 030b 	adc.w	r3, r5, fp
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032da:	4629      	mov	r1, r5
 80032dc:	028b      	lsls	r3, r1, #10
 80032de:	4621      	mov	r1, r4
 80032e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032e4:	4621      	mov	r1, r4
 80032e6:	028a      	lsls	r2, r1, #10
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ee:	2200      	movs	r2, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	60fa      	str	r2, [r7, #12]
 80032f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f8:	f7fd fc7e 	bl	8000bf8 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4613      	mov	r3, r2
 8003302:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x180>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	3301      	adds	r3, #1
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003314:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800331e:	e002      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003320:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x184>)
 8003322:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003328:	4618      	mov	r0, r3
 800332a:	3740      	adds	r7, #64	@ 0x40
 800332c:	46bd      	mov	sp, r7
 800332e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	00f42400 	.word	0x00f42400
 800333c:	017d7840 	.word	0x017d7840

08003340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003344:	4b03      	ldr	r3, [pc, #12]	@ (8003354 <HAL_RCC_GetHCLKFreq+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000

08003358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800335c:	f7ff fff0 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0a9b      	lsrs	r3, r3, #10
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	@ (800337c <HAL_RCC_GetPCLK1Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	0800940c 	.word	0x0800940c

08003380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003384:	f7ff ffdc 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	0b5b      	lsrs	r3, r3, #13
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4903      	ldr	r1, [pc, #12]	@ (80033a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40023800 	.word	0x40023800
 80033a4:	0800940c 	.word	0x0800940c

080033a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	220f      	movs	r2, #15
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033b8:	4b12      	ldr	r3, [pc, #72]	@ (8003404 <HAL_RCC_GetClockConfig+0x5c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0203 	and.w	r2, r3, #3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <HAL_RCC_GetClockConfig+0x5c>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <HAL_RCC_GetClockConfig+0x5c>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033dc:	4b09      	ldr	r3, [pc, #36]	@ (8003404 <HAL_RCC_GetClockConfig+0x5c>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033ea:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <HAL_RCC_GetClockConfig+0x60>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0207 	and.w	r2, r3, #7
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40023c00 	.word	0x40023c00

0800340c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e041      	b.n	80034a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f839 	bl	80034aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4610      	mov	r0, r2
 800344c:	f000 fb74 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d001      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e044      	b.n	8003562 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003570 <HAL_TIM_Base_Start_IT+0xb0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d018      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x6c>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003502:	d013      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x6c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1a      	ldr	r2, [pc, #104]	@ (8003574 <HAL_TIM_Base_Start_IT+0xb4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00e      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x6c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <HAL_TIM_Base_Start_IT+0xb8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x6c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a17      	ldr	r2, [pc, #92]	@ (800357c <HAL_TIM_Base_Start_IT+0xbc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x6c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a16      	ldr	r2, [pc, #88]	@ (8003580 <HAL_TIM_Base_Start_IT+0xc0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d111      	bne.n	8003550 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d010      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	e007      	b.n	8003560 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40010000 	.word	0x40010000
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800
 800357c:	40000c00 	.word	0x40000c00
 8003580:	40014000 	.word	0x40014000

08003584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e041      	b.n	800361a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe f936 	bl	800181c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f000 fab8 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d109      	bne.n	8003648 <HAL_TIM_PWM_Start+0x24>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e022      	b.n	800368e <HAL_TIM_PWM_Start+0x6a>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b04      	cmp	r3, #4
 800364c:	d109      	bne.n	8003662 <HAL_TIM_PWM_Start+0x3e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	e015      	b.n	800368e <HAL_TIM_PWM_Start+0x6a>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d109      	bne.n	800367c <HAL_TIM_PWM_Start+0x58>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e008      	b.n	800368e <HAL_TIM_PWM_Start+0x6a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e068      	b.n	8003768 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_PWM_Start+0x82>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036a4:	e013      	b.n	80036ce <HAL_TIM_PWM_Start+0xaa>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d104      	bne.n	80036b6 <HAL_TIM_PWM_Start+0x92>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b4:	e00b      	b.n	80036ce <HAL_TIM_PWM_Start+0xaa>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d104      	bne.n	80036c6 <HAL_TIM_PWM_Start+0xa2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036c4:	e003      	b.n	80036ce <HAL_TIM_PWM_Start+0xaa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2201      	movs	r2, #1
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fc46 	bl	8003f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a23      	ldr	r2, [pc, #140]	@ (8003770 <HAL_TIM_PWM_Start+0x14c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d107      	bne.n	80036f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <HAL_TIM_PWM_Start+0x14c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d018      	beq.n	8003732 <HAL_TIM_PWM_Start+0x10e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003708:	d013      	beq.n	8003732 <HAL_TIM_PWM_Start+0x10e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a19      	ldr	r2, [pc, #100]	@ (8003774 <HAL_TIM_PWM_Start+0x150>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_TIM_PWM_Start+0x10e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a17      	ldr	r2, [pc, #92]	@ (8003778 <HAL_TIM_PWM_Start+0x154>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_TIM_PWM_Start+0x10e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a16      	ldr	r2, [pc, #88]	@ (800377c <HAL_TIM_PWM_Start+0x158>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_TIM_PWM_Start+0x10e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a14      	ldr	r2, [pc, #80]	@ (8003780 <HAL_TIM_PWM_Start+0x15c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d111      	bne.n	8003756 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b06      	cmp	r3, #6
 8003742:	d010      	beq.n	8003766 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003754:	e007      	b.n	8003766 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0201 	orr.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40010000 	.word	0x40010000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40014000 	.word	0x40014000

08003784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d020      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0202 	mvn.w	r2, #2
 80037b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f994 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f986 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f997 	bl	8003b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d020      	beq.n	8003834 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01b      	beq.n	8003834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0204 	mvn.w	r2, #4
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f96e 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f960 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f971 	bl	8003b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d020      	beq.n	8003880 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01b      	beq.n	8003880 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0208 	mvn.w	r2, #8
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2204      	movs	r2, #4
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f948 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f93a 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f94b 	bl	8003b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d020      	beq.n	80038cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01b      	beq.n	80038cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0210 	mvn.w	r2, #16
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2208      	movs	r2, #8
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f922 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f914 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f925 	bl	8003b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0201 	mvn.w	r2, #1
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fef8 	bl	80016e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00c      	beq.n	8003914 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fbc8 	bl	80040a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8f6 	bl	8003b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0220 	mvn.w	r2, #32
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fb9a 	bl	8004090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800397e:	2302      	movs	r3, #2
 8003980:	e0ae      	b.n	8003ae0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	f200 809f 	bhi.w	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003992:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039cd 	.word	0x080039cd
 800399c:	08003ad1 	.word	0x08003ad1
 80039a0:	08003ad1 	.word	0x08003ad1
 80039a4:	08003ad1 	.word	0x08003ad1
 80039a8:	08003a0d 	.word	0x08003a0d
 80039ac:	08003ad1 	.word	0x08003ad1
 80039b0:	08003ad1 	.word	0x08003ad1
 80039b4:	08003ad1 	.word	0x08003ad1
 80039b8:	08003a4f 	.word	0x08003a4f
 80039bc:	08003ad1 	.word	0x08003ad1
 80039c0:	08003ad1 	.word	0x08003ad1
 80039c4:	08003ad1 	.word	0x08003ad1
 80039c8:	08003a8f 	.word	0x08003a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f93c 	bl	8003c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0208 	orr.w	r2, r2, #8
 80039e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0204 	bic.w	r2, r2, #4
 80039f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6999      	ldr	r1, [r3, #24]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	619a      	str	r2, [r3, #24]
      break;
 8003a0a:	e064      	b.n	8003ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f982 	bl	8003d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	619a      	str	r2, [r3, #24]
      break;
 8003a4c:	e043      	b.n	8003ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f9cd 	bl	8003df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0208 	orr.w	r2, r2, #8
 8003a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0204 	bic.w	r2, r2, #4
 8003a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69d9      	ldr	r1, [r3, #28]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	61da      	str	r2, [r3, #28]
      break;
 8003a8c:	e023      	b.n	8003ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fa17 	bl	8003ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69d9      	ldr	r1, [r3, #28]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	021a      	lsls	r2, r3, #8
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	61da      	str	r2, [r3, #28]
      break;
 8003ace:	e002      	b.n	8003ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3a      	ldr	r2, [pc, #232]	@ (8003c34 <TIM_Base_SetConfig+0xfc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00f      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b56:	d00b      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a37      	ldr	r2, [pc, #220]	@ (8003c38 <TIM_Base_SetConfig+0x100>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d007      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a36      	ldr	r2, [pc, #216]	@ (8003c3c <TIM_Base_SetConfig+0x104>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a35      	ldr	r2, [pc, #212]	@ (8003c40 <TIM_Base_SetConfig+0x108>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d108      	bne.n	8003b82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2b      	ldr	r2, [pc, #172]	@ (8003c34 <TIM_Base_SetConfig+0xfc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b90:	d017      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a28      	ldr	r2, [pc, #160]	@ (8003c38 <TIM_Base_SetConfig+0x100>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a27      	ldr	r2, [pc, #156]	@ (8003c3c <TIM_Base_SetConfig+0x104>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00f      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a26      	ldr	r2, [pc, #152]	@ (8003c40 <TIM_Base_SetConfig+0x108>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a25      	ldr	r2, [pc, #148]	@ (8003c44 <TIM_Base_SetConfig+0x10c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a24      	ldr	r2, [pc, #144]	@ (8003c48 <TIM_Base_SetConfig+0x110>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	@ (8003c4c <TIM_Base_SetConfig+0x114>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8003c34 <TIM_Base_SetConfig+0xfc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	611a      	str	r2, [r3, #16]
  }
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800

08003c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f023 0201 	bic.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 0302 	bic.w	r3, r3, #2
 8003c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d18 <TIM_OC1_SetConfig+0xc8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10c      	bne.n	8003cc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0308 	bic.w	r3, r3, #8
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	@ (8003d18 <TIM_OC1_SetConfig+0xc8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d111      	bne.n	8003cf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	621a      	str	r2, [r3, #32]
}
 8003d0c:	bf00      	nop
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40010000 	.word	0x40010000

08003d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f023 0210 	bic.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0320 	bic.w	r3, r3, #32
 8003d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a1e      	ldr	r2, [pc, #120]	@ (8003df0 <TIM_OC2_SetConfig+0xd4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10d      	bne.n	8003d98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a15      	ldr	r2, [pc, #84]	@ (8003df0 <TIM_OC2_SetConfig+0xd4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d113      	bne.n	8003dc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000

08003df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec4 <TIM_OC3_SetConfig+0xd0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10d      	bne.n	8003e6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <TIM_OC3_SetConfig+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d113      	bne.n	8003e9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	621a      	str	r2, [r3, #32]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40010000 	.word	0x40010000

08003ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a10      	ldr	r2, [pc, #64]	@ (8003f64 <TIM_OC4_SetConfig+0x9c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40010000 	.word	0x40010000

08003f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1a      	ldr	r2, [r3, #32]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a1a      	ldr	r2, [r3, #32]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e050      	b.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004018:	d013      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a16      	ldr	r2, [pc, #88]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a15      	ldr	r2, [pc, #84]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a13      	ldr	r2, [pc, #76]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10c      	bne.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4313      	orrs	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40010000 	.word	0x40010000
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40014000 	.word	0x40014000

08004090 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e042      	b.n	8004150 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fbf4 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	@ 0x24
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fd69 	bl	8004bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	@ 0x28
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b20      	cmp	r3, #32
 8004176:	d175      	bne.n	8004264 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_UART_Transmit+0x2c>
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e06e      	b.n	8004266 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2221      	movs	r2, #33	@ 0x21
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004196:	f7fd fdcb 	bl	8001d30 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b0:	d108      	bne.n	80041c4 <HAL_UART_Transmit+0x6c>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	e003      	b.n	80041cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041cc:	e02e      	b.n	800422c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	@ 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fb05 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e03a      	b.n	8004266 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	3302      	adds	r3, #2
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e007      	b.n	800421e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3301      	adds	r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1cb      	bne.n	80041ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	2140      	movs	r1, #64	@ 0x40
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fad1 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e006      	b.n	8004266 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e000      	b.n	8004266 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b0ba      	sub	sp, #232	@ 0xe8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800429c:	2300      	movs	r3, #0
 800429e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10f      	bne.n	80042d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_UART_IRQHandler+0x66>
 80042c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fbc2 	bl	8004a58 <UART_Receive_IT>
      return;
 80042d4:	e25b      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80de 	beq.w	800449c <HAL_UART_IRQHandler+0x22c>
 80042e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80d1 	beq.w	800449c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_UART_IRQHandler+0xae>
 8004306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800430a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	f043 0201 	orr.w	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_UART_IRQHandler+0xd2>
 800432a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_UART_IRQHandler+0xf6>
 800434e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435e:	f043 0204 	orr.w	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <HAL_UART_IRQHandler+0x126>
 8004372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	f043 0208 	orr.w	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 81f2 	beq.w	8004784 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_UART_IRQHandler+0x14e>
 80043ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fb4d 	bl	8004a58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c8:	2b40      	cmp	r3, #64	@ 0x40
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_UART_IRQHandler+0x17a>
 80043e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d04f      	beq.n	800448a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa55 	bl	800489a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fa:	2b40      	cmp	r3, #64	@ 0x40
 80043fc:	d141      	bne.n	8004482 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800441c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800442a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800442e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1d9      	bne.n	80043fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d013      	beq.n	800447a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004456:	4a7e      	ldr	r2, [pc, #504]	@ (8004650 <HAL_UART_IRQHandler+0x3e0>)
 8004458:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe f972 	bl	8002748 <HAL_DMA_Abort_IT>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004474:	4610      	mov	r0, r2
 8004476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	e00e      	b.n	8004498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f99e 	bl	80047bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	e00a      	b.n	8004498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f99a 	bl	80047bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	e006      	b.n	8004498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f996 	bl	80047bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004496:	e175      	b.n	8004784 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	bf00      	nop
    return;
 800449a:	e173      	b.n	8004784 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 814f 	bne.w	8004744 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8148 	beq.w	8004744 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8141 	beq.w	8004744 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e2:	2b40      	cmp	r3, #64	@ 0x40
 80044e4:	f040 80b6 	bne.w	8004654 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8145 	beq.w	8004788 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004506:	429a      	cmp	r2, r3
 8004508:	f080 813e 	bcs.w	8004788 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004512:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800451e:	f000 8088 	beq.w	8004632 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	330c      	adds	r3, #12
 8004528:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004538:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800453c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800454e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800455a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1d9      	bne.n	8004522 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3314      	adds	r3, #20
 8004574:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800457e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3314      	adds	r3, #20
 800458e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004592:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004596:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800459a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e1      	bne.n	800456e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3314      	adds	r3, #20
 80045b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e3      	bne.n	80045aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004602:	f023 0310 	bic.w	r3, r3, #16
 8004606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004614:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004616:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800461a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e3      	bne.n	80045f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe f81b 	bl	8002668 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004640:	b29b      	uxth	r3, r3
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	b29b      	uxth	r3, r3
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8c1 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800464e:	e09b      	b.n	8004788 <HAL_UART_IRQHandler+0x518>
 8004650:	08004961 	.word	0x08004961
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800465c:	b29b      	uxth	r3, r3
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 808e 	beq.w	800478c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8089 	beq.w	800478c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800468a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800468c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004690:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800469e:	647a      	str	r2, [r7, #68]	@ 0x44
 80046a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e3      	bne.n	800467a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3314      	adds	r3, #20
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	623b      	str	r3, [r7, #32]
   return(result);
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e3      	bne.n	80046b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60fb      	str	r3, [r7, #12]
   return(result);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800471c:	61fa      	str	r2, [r7, #28]
 800471e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	617b      	str	r3, [r7, #20]
   return(result);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e3      	bne.n	80046f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004736:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f847 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004742:	e023      	b.n	800478c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <HAL_UART_IRQHandler+0x4f4>
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f913 	bl	8004988 <UART_Transmit_IT>
    return;
 8004762:	e014      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00e      	beq.n	800478e <HAL_UART_IRQHandler+0x51e>
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f953 	bl	8004a28 <UART_EndTransmit_IT>
    return;
 8004782:	e004      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
    return;
 8004784:	bf00      	nop
 8004786:	e002      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
      return;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_UART_IRQHandler+0x51e>
      return;
 800478c:	bf00      	nop
  }
}
 800478e:	37e8      	adds	r7, #232	@ 0xe8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f8:	e03b      	b.n	8004872 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d037      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fd fa95 	bl	8001d30 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <UART_WaitOnFlagUntilTimeout+0x30>
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e03a      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d023      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0x8a>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b80      	cmp	r3, #128	@ 0x80
 800482e:	d020      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b40      	cmp	r3, #64	@ 0x40
 8004834:	d01d      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d116      	bne.n	8004872 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f81d 	bl	800489a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2208      	movs	r2, #8
 8004864:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e00f      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4013      	ands	r3, r2
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	429a      	cmp	r2, r3
 8004880:	bf0c      	ite	eq
 8004882:	2301      	moveq	r3, #1
 8004884:	2300      	movne	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	429a      	cmp	r2, r3
 800488e:	d0b4      	beq.n	80047fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489a:	b480      	push	{r7}
 800489c:	b095      	sub	sp, #84	@ 0x54
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80048c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3314      	adds	r3, #20
 80048dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3314      	adds	r3, #20
 80048f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e5      	bne.n	80048d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	2b01      	cmp	r3, #1
 8004910:	d119      	bne.n	8004946 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	330c      	adds	r3, #12
 8004918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	60bb      	str	r3, [r7, #8]
   return(result);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f023 0310 	bic.w	r3, r3, #16
 8004928:	647b      	str	r3, [r7, #68]	@ 0x44
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004932:	61ba      	str	r2, [r7, #24]
 8004934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6979      	ldr	r1, [r7, #20]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	613b      	str	r3, [r7, #16]
   return(result);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004954:	bf00      	nop
 8004956:	3754      	adds	r7, #84	@ 0x54
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7ff ff1e 	bl	80047bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b21      	cmp	r3, #33	@ 0x21
 800499a:	d13e      	bne.n	8004a1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a4:	d114      	bne.n	80049d0 <UART_Transmit_IT+0x48>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d110      	bne.n	80049d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	1c9a      	adds	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	621a      	str	r2, [r3, #32]
 80049ce:	e008      	b.n	80049e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	1c59      	adds	r1, r3, #1
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6211      	str	r1, [r2, #32]
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4619      	mov	r1, r3
 80049f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10f      	bne.n	8004a16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff fea3 	bl	8004794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	@ 0x30
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b22      	cmp	r3, #34	@ 0x22
 8004a6a:	f040 80ae 	bne.w	8004bca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a76:	d117      	bne.n	8004aa8 <UART_Receive_IT+0x50>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d113      	bne.n	8004aa8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa0:	1c9a      	adds	r2, r3, #2
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004aa6:	e026      	b.n	8004af6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aba:	d007      	beq.n	8004acc <UART_Receive_IT+0x74>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <UART_Receive_IT+0x82>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e008      	b.n	8004aec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4619      	mov	r1, r3
 8004b04:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d15d      	bne.n	8004bc6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0220 	bic.w	r2, r2, #32
 8004b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0201 	bic.w	r2, r2, #1
 8004b38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d135      	bne.n	8004bbc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	613b      	str	r3, [r7, #16]
   return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b76:	623a      	str	r2, [r7, #32]
 8004b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	69f9      	ldr	r1, [r7, #28]
 8004b7c:	6a3a      	ldr	r2, [r7, #32]
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e5      	bne.n	8004b56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d10a      	bne.n	8004bae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fe0b 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
 8004bba:	e002      	b.n	8004bc2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fdf3 	bl	80047a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e002      	b.n	8004bcc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e000      	b.n	8004bcc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bca:	2302      	movs	r3, #2
  }
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3730      	adds	r7, #48	@ 0x30
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd8:	b0c0      	sub	sp, #256	@ 0x100
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	68d9      	ldr	r1, [r3, #12]
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	ea40 0301 	orr.w	r3, r0, r1
 8004bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c2c:	f021 010c 	bic.w	r1, r1, #12
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4e:	6999      	ldr	r1, [r3, #24]
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	ea40 0301 	orr.w	r3, r0, r1
 8004c5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4b8f      	ldr	r3, [pc, #572]	@ (8004ea0 <UART_SetConfig+0x2cc>)
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d005      	beq.n	8004c74 <UART_SetConfig+0xa0>
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8004ea4 <UART_SetConfig+0x2d0>)
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d104      	bne.n	8004c7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c74:	f7fe fb84 	bl	8003380 <HAL_RCC_GetPCLK2Freq>
 8004c78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c7c:	e003      	b.n	8004c86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c7e:	f7fe fb6b 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8004c82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c90:	f040 810c 	bne.w	8004eac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ca2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	462b      	mov	r3, r5
 8004caa:	1891      	adds	r1, r2, r2
 8004cac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cae:	415b      	adcs	r3, r3
 8004cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	eb12 0801 	adds.w	r8, r2, r1
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	eb43 0901 	adc.w	r9, r3, r1
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cd6:	4690      	mov	r8, r2
 8004cd8:	4699      	mov	r9, r3
 8004cda:	4623      	mov	r3, r4
 8004cdc:	eb18 0303 	adds.w	r3, r8, r3
 8004ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	eb49 0303 	adc.w	r3, r9, r3
 8004cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d02:	460b      	mov	r3, r1
 8004d04:	18db      	adds	r3, r3, r3
 8004d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d08:	4613      	mov	r3, r2
 8004d0a:	eb42 0303 	adc.w	r3, r2, r3
 8004d0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d18:	f7fb ff6e 	bl	8000bf8 <__aeabi_uldivmod>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4b61      	ldr	r3, [pc, #388]	@ (8004ea8 <UART_SetConfig+0x2d4>)
 8004d22:	fba3 2302 	umull	r2, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	011c      	lsls	r4, r3, #4
 8004d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d44:	415b      	adcs	r3, r3
 8004d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d52:	4649      	mov	r1, r9
 8004d54:	eb43 0b01 	adc.w	fp, r3, r1
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d6c:	4692      	mov	sl, r2
 8004d6e:	469b      	mov	fp, r3
 8004d70:	4643      	mov	r3, r8
 8004d72:	eb1a 0303 	adds.w	r3, sl, r3
 8004d76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	18db      	adds	r3, r3, r3
 8004d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d9e:	4613      	mov	r3, r2
 8004da0:	eb42 0303 	adc.w	r3, r2, r3
 8004da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004daa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004dae:	f7fb ff23 	bl	8000bf8 <__aeabi_uldivmod>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea8 <UART_SetConfig+0x2d4>)
 8004dba:	fba3 2301 	umull	r2, r3, r3, r1
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2264      	movs	r2, #100	@ 0x64
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	1acb      	subs	r3, r1, r3
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dce:	4b36      	ldr	r3, [pc, #216]	@ (8004ea8 <UART_SetConfig+0x2d4>)
 8004dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ddc:	441c      	add	r4, r3
 8004dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004de8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004df0:	4642      	mov	r2, r8
 8004df2:	464b      	mov	r3, r9
 8004df4:	1891      	adds	r1, r2, r2
 8004df6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004df8:	415b      	adcs	r3, r3
 8004dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e00:	4641      	mov	r1, r8
 8004e02:	1851      	adds	r1, r2, r1
 8004e04:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e06:	4649      	mov	r1, r9
 8004e08:	414b      	adcs	r3, r1
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e18:	4659      	mov	r1, fp
 8004e1a:	00cb      	lsls	r3, r1, #3
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e22:	4651      	mov	r1, sl
 8004e24:	00ca      	lsls	r2, r1, #3
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	189b      	adds	r3, r3, r2
 8004e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e34:	464b      	mov	r3, r9
 8004e36:	460a      	mov	r2, r1
 8004e38:	eb42 0303 	adc.w	r3, r2, r3
 8004e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e54:	460b      	mov	r3, r1
 8004e56:	18db      	adds	r3, r3, r3
 8004e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	eb42 0303 	adc.w	r3, r2, r3
 8004e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e6a:	f7fb fec5 	bl	8000bf8 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <UART_SetConfig+0x2d4>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	@ 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	3332      	adds	r3, #50	@ 0x32
 8004e86:	4a08      	ldr	r2, [pc, #32]	@ (8004ea8 <UART_SetConfig+0x2d4>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 0207 	and.w	r2, r3, #7
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4422      	add	r2, r4
 8004e9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e9c:	e106      	b.n	80050ac <UART_SetConfig+0x4d8>
 8004e9e:	bf00      	nop
 8004ea0:	40011000 	.word	0x40011000
 8004ea4:	40011400 	.word	0x40011400
 8004ea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004eb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004eba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ebe:	4642      	mov	r2, r8
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	1891      	adds	r1, r2, r2
 8004ec4:	6239      	str	r1, [r7, #32]
 8004ec6:	415b      	adcs	r3, r3
 8004ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ece:	4641      	mov	r1, r8
 8004ed0:	1854      	adds	r4, r2, r1
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	eb43 0501 	adc.w	r5, r3, r1
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	00eb      	lsls	r3, r5, #3
 8004ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee6:	00e2      	lsls	r2, r4, #3
 8004ee8:	4614      	mov	r4, r2
 8004eea:	461d      	mov	r5, r3
 8004eec:	4643      	mov	r3, r8
 8004eee:	18e3      	adds	r3, r4, r3
 8004ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	eb45 0303 	adc.w	r3, r5, r3
 8004efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	008b      	lsls	r3, r1, #2
 8004f1e:	4621      	mov	r1, r4
 8004f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f24:	4621      	mov	r1, r4
 8004f26:	008a      	lsls	r2, r1, #2
 8004f28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f2c:	f7fb fe64 	bl	8000bf8 <__aeabi_uldivmod>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4b60      	ldr	r3, [pc, #384]	@ (80050b8 <UART_SetConfig+0x4e4>)
 8004f36:	fba3 2302 	umull	r2, r3, r3, r2
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	011c      	lsls	r4, r3, #4
 8004f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f50:	4642      	mov	r2, r8
 8004f52:	464b      	mov	r3, r9
 8004f54:	1891      	adds	r1, r2, r2
 8004f56:	61b9      	str	r1, [r7, #24]
 8004f58:	415b      	adcs	r3, r3
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f60:	4641      	mov	r1, r8
 8004f62:	1851      	adds	r1, r2, r1
 8004f64:	6139      	str	r1, [r7, #16]
 8004f66:	4649      	mov	r1, r9
 8004f68:	414b      	adcs	r3, r1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f78:	4659      	mov	r1, fp
 8004f7a:	00cb      	lsls	r3, r1, #3
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f82:	4651      	mov	r1, sl
 8004f84:	00ca      	lsls	r2, r1, #3
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f94:	464b      	mov	r3, r9
 8004f96:	460a      	mov	r2, r1
 8004f98:	eb42 0303 	adc.w	r3, r2, r3
 8004f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004faa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fb8:	4649      	mov	r1, r9
 8004fba:	008b      	lsls	r3, r1, #2
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	008a      	lsls	r2, r1, #2
 8004fc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fca:	f7fb fe15 	bl	8000bf8 <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4b38      	ldr	r3, [pc, #224]	@ (80050b8 <UART_SetConfig+0x4e4>)
 8004fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2264      	movs	r2, #100	@ 0x64
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	1acb      	subs	r3, r1, r3
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	3332      	adds	r3, #50	@ 0x32
 8004fe8:	4a33      	ldr	r2, [pc, #204]	@ (80050b8 <UART_SetConfig+0x4e4>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ff4:	441c      	add	r4, r3
 8004ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ffe:	677a      	str	r2, [r7, #116]	@ 0x74
 8005000:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005004:	4642      	mov	r2, r8
 8005006:	464b      	mov	r3, r9
 8005008:	1891      	adds	r1, r2, r2
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	415b      	adcs	r3, r3
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005014:	4641      	mov	r1, r8
 8005016:	1851      	adds	r1, r2, r1
 8005018:	6039      	str	r1, [r7, #0]
 800501a:	4649      	mov	r1, r9
 800501c:	414b      	adcs	r3, r1
 800501e:	607b      	str	r3, [r7, #4]
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800502c:	4659      	mov	r1, fp
 800502e:	00cb      	lsls	r3, r1, #3
 8005030:	4651      	mov	r1, sl
 8005032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005036:	4651      	mov	r1, sl
 8005038:	00ca      	lsls	r2, r1, #3
 800503a:	4610      	mov	r0, r2
 800503c:	4619      	mov	r1, r3
 800503e:	4603      	mov	r3, r0
 8005040:	4642      	mov	r2, r8
 8005042:	189b      	adds	r3, r3, r2
 8005044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005046:	464b      	mov	r3, r9
 8005048:	460a      	mov	r2, r1
 800504a:	eb42 0303 	adc.w	r3, r2, r3
 800504e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	663b      	str	r3, [r7, #96]	@ 0x60
 800505a:	667a      	str	r2, [r7, #100]	@ 0x64
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005068:	4649      	mov	r1, r9
 800506a:	008b      	lsls	r3, r1, #2
 800506c:	4641      	mov	r1, r8
 800506e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005072:	4641      	mov	r1, r8
 8005074:	008a      	lsls	r2, r1, #2
 8005076:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800507a:	f7fb fdbd 	bl	8000bf8 <__aeabi_uldivmod>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <UART_SetConfig+0x4e4>)
 8005084:	fba3 1302 	umull	r1, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	2164      	movs	r1, #100	@ 0x64
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	3332      	adds	r3, #50	@ 0x32
 8005096:	4a08      	ldr	r2, [pc, #32]	@ (80050b8 <UART_SetConfig+0x4e4>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	f003 020f 	and.w	r2, r3, #15
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4422      	add	r2, r4
 80050aa:	609a      	str	r2, [r3, #8]
}
 80050ac:	bf00      	nop
 80050ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050b2:	46bd      	mov	sp, r7
 80050b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050b8:	51eb851f 	.word	0x51eb851f

080050bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050ce:	2b84      	cmp	r3, #132	@ 0x84
 80050d0:	d005      	beq.n	80050de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	3303      	adds	r3, #3
 80050dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050de:	68fb      	ldr	r3, [r7, #12]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050f0:	f000 fafc 	bl	80056ec <vTaskStartScheduler>
  
  return osOK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	bd80      	pop	{r7, pc}

080050fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fc:	b089      	sub	sp, #36	@ 0x24
 80050fe:	af04      	add	r7, sp, #16
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d020      	beq.n	800514e <osThreadCreate+0x54>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01c      	beq.n	800514e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685c      	ldr	r4, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691e      	ldr	r6, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff ffc8 	bl	80050bc <makeFreeRtosPriority>
 800512c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005136:	9202      	str	r2, [sp, #8]
 8005138:	9301      	str	r3, [sp, #4]
 800513a:	9100      	str	r1, [sp, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	4632      	mov	r2, r6
 8005140:	4629      	mov	r1, r5
 8005142:	4620      	mov	r0, r4
 8005144:	f000 f8ed 	bl	8005322 <xTaskCreateStatic>
 8005148:	4603      	mov	r3, r0
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e01c      	b.n	8005188 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685c      	ldr	r4, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800515a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff ffaa 	bl	80050bc <makeFreeRtosPriority>
 8005168:	4602      	mov	r2, r0
 800516a:	f107 030c 	add.w	r3, r7, #12
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	9200      	str	r2, [sp, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	4632      	mov	r2, r6
 8005176:	4629      	mov	r1, r5
 8005178:	4620      	mov	r0, r4
 800517a:	f000 f932 	bl	80053e2 <xTaskCreate>
 800517e:	4603      	mov	r3, r0
 8005180:	2b01      	cmp	r3, #1
 8005182:	d001      	beq.n	8005188 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005188:	68fb      	ldr	r3, [r7, #12]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005192 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <osDelay+0x16>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	e000      	b.n	80051aa <osDelay+0x18>
 80051a8:	2301      	movs	r3, #1
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fa68 	bl	8005680 <vTaskDelay>
  
  return osOK;
 80051b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f103 0208 	add.w	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f04f 32ff 	mov.w	r2, #4294967295
 80051d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f103 0208 	add.w	r2, r3, #8
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f103 0208 	add.w	r2, r3, #8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]
}
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d103      	bne.n	800527c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e00c      	b.n	8005296 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3308      	adds	r3, #8
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	e002      	b.n	800528a <vListInsert+0x2e>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	d2f6      	bcs.n	8005284 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6892      	ldr	r2, [r2, #8]
 80052e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6852      	ldr	r2, [r2, #4]
 80052ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d103      	bne.n	8005302 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	1e5a      	subs	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005322:	b580      	push	{r7, lr}
 8005324:	b08e      	sub	sp, #56	@ 0x38
 8005326:	af04      	add	r7, sp, #16
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e7fd      	b.n	800534a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800534e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	61fb      	str	r3, [r7, #28]
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800536c:	23b0      	movs	r3, #176	@ 0xb0
 800536e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2bb0      	cmp	r3, #176	@ 0xb0
 8005374:	d00b      	beq.n	800538e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	61bb      	str	r3, [r7, #24]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800538e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01e      	beq.n	80053d4 <xTaskCreateStatic+0xb2>
 8005396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01b      	beq.n	80053d4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053a4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053ae:	2300      	movs	r3, #0
 80053b0:	9303      	str	r3, [sp, #12]
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	9302      	str	r3, [sp, #8]
 80053b6:	f107 0314 	add.w	r3, r7, #20
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f850 	bl	800546c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053ce:	f000 f8ed 	bl	80055ac <prvAddNewTaskToReadyList>
 80053d2:	e001      	b.n	80053d8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053d8:	697b      	ldr	r3, [r7, #20]
	}
 80053da:	4618      	mov	r0, r3
 80053dc:	3728      	adds	r7, #40	@ 0x28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b08c      	sub	sp, #48	@ 0x30
 80053e6:	af04      	add	r7, sp, #16
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fefe 	bl	80061f8 <pvPortMalloc>
 80053fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00e      	beq.n	8005422 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005404:	20b0      	movs	r0, #176	@ 0xb0
 8005406:	f000 fef7 	bl	80061f8 <pvPortMalloc>
 800540a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
 8005418:	e005      	b.n	8005426 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	f000 ffba 	bl	8006394 <vPortFree>
 8005420:	e001      	b.n	8005426 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d017      	beq.n	800545c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005434:	88fa      	ldrh	r2, [r7, #6]
 8005436:	2300      	movs	r3, #0
 8005438:	9303      	str	r3, [sp, #12]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	9302      	str	r3, [sp, #8]
 800543e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f80e 	bl	800546c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005450:	69f8      	ldr	r0, [r7, #28]
 8005452:	f000 f8ab 	bl	80055ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005456:	2301      	movs	r3, #1
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e002      	b.n	8005462 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800545c:	f04f 33ff 	mov.w	r3, #4294967295
 8005460:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005462:	69bb      	ldr	r3, [r7, #24]
	}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005484:	3b01      	subs	r3, #1
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	f023 0307 	bic.w	r3, r3, #7
 8005492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	617b      	str	r3, [r7, #20]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01f      	beq.n	80054fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054bc:	2300      	movs	r3, #0
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	e012      	b.n	80054e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	7819      	ldrb	r1, [r3, #0]
 80054ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	3334      	adds	r3, #52	@ 0x34
 80054d2:	460a      	mov	r2, r1
 80054d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	4413      	add	r3, r2
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3301      	adds	r3, #1
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b1f      	cmp	r3, #31
 80054ec:	d9e9      	bls.n	80054c2 <prvInitialiseNewTask+0x56>
 80054ee:	e000      	b.n	80054f2 <prvInitialiseNewTask+0x86>
			{
				break;
 80054f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80054fa:	e003      	b.n	8005504 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	2b06      	cmp	r3, #6
 8005508:	d901      	bls.n	800550e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800550a:	2306      	movs	r3, #6
 800550c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005512:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005518:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	2200      	movs	r2, #0
 800551e:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005522:	3304      	adds	r3, #4
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fe68 	bl	80051fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	3318      	adds	r3, #24
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fe63 	bl	80051fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005538:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553c:	f1c3 0207 	rsb	r2, r3, #7
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005548:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	2200      	movs	r2, #0
 800554e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	2200      	movs	r2, #0
 8005556:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	335c      	adds	r3, #92	@ 0x5c
 800555e:	224c      	movs	r2, #76	@ 0x4c
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f001 fdb3 	bl	80070ce <memset>
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	4a0d      	ldr	r2, [pc, #52]	@ (80055a0 <prvInitialiseNewTask+0x134>)
 800556c:	661a      	str	r2, [r3, #96]	@ 0x60
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	4a0c      	ldr	r2, [pc, #48]	@ (80055a4 <prvInitialiseNewTask+0x138>)
 8005572:	665a      	str	r2, [r3, #100]	@ 0x64
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	4a0c      	ldr	r2, [pc, #48]	@ (80055a8 <prvInitialiseNewTask+0x13c>)
 8005578:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	68f9      	ldr	r1, [r7, #12]
 800557e:	69b8      	ldr	r0, [r7, #24]
 8005580:	f000 fc2a 	bl	8005dd8 <pxPortInitialiseStack>
 8005584:	4602      	mov	r2, r0
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005596:	bf00      	nop
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20004354 	.word	0x20004354
 80055a4:	200043bc 	.word	0x200043bc
 80055a8:	20004424 	.word	0x20004424

080055ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055b4:	f000 fd40 	bl	8006038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005664 <prvAddNewTaskToReadyList+0xb8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	4a29      	ldr	r2, [pc, #164]	@ (8005664 <prvAddNewTaskToReadyList+0xb8>)
 80055c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055c2:	4b29      	ldr	r3, [pc, #164]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ca:	4a27      	ldr	r2, [pc, #156]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055d0:	4b24      	ldr	r3, [pc, #144]	@ (8005664 <prvAddNewTaskToReadyList+0xb8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d110      	bne.n	80055fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055d8:	f000 fad4 	bl	8005b84 <prvInitialiseTaskLists>
 80055dc:	e00d      	b.n	80055fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055de:	4b23      	ldr	r3, [pc, #140]	@ (800566c <prvAddNewTaskToReadyList+0xc0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055e6:	4b20      	ldr	r3, [pc, #128]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d802      	bhi.n	80055fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <prvAddNewTaskToReadyList+0xc4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <prvAddNewTaskToReadyList+0xc4>)
 8005602:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	2201      	movs	r2, #1
 800560a:	409a      	lsls	r2, r3
 800560c:	4b19      	ldr	r3, [pc, #100]	@ (8005674 <prvAddNewTaskToReadyList+0xc8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4313      	orrs	r3, r2
 8005612:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <prvAddNewTaskToReadyList+0xc8>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a15      	ldr	r2, [pc, #84]	@ (8005678 <prvAddNewTaskToReadyList+0xcc>)
 8005624:	441a      	add	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f7ff fdf1 	bl	8005214 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005632:	f000 fd33 	bl	800609c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <prvAddNewTaskToReadyList+0xc0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00e      	beq.n	800565c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800563e:	4b0a      	ldr	r3, [pc, #40]	@ (8005668 <prvAddNewTaskToReadyList+0xbc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d207      	bcs.n	800565c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <prvAddNewTaskToReadyList+0xd0>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20000700 	.word	0x20000700
 8005668:	20000600 	.word	0x20000600
 800566c:	2000070c 	.word	0x2000070c
 8005670:	2000071c 	.word	0x2000071c
 8005674:	20000708 	.word	0x20000708
 8005678:	20000604 	.word	0x20000604
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005692:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <vTaskDelay+0x64>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <vTaskDelay+0x32>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	60bb      	str	r3, [r7, #8]
}
 80056ac:	bf00      	nop
 80056ae:	bf00      	nop
 80056b0:	e7fd      	b.n	80056ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056b2:	f000 f885 	bl	80057c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056b6:	2100      	movs	r1, #0
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fb27 	bl	8005d0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056be:	f000 f88d 	bl	80057dc <xTaskResumeAll>
 80056c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d107      	bne.n	80056da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80056ca:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <vTaskDelay+0x68>)
 80056cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000728 	.word	0x20000728
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	@ 0x28
 80056f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056fa:	463a      	mov	r2, r7
 80056fc:	1d39      	adds	r1, r7, #4
 80056fe:	f107 0308 	add.w	r3, r7, #8
 8005702:	4618      	mov	r0, r3
 8005704:	f7fb fbf0 	bl	8000ee8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	9202      	str	r2, [sp, #8]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	2300      	movs	r3, #0
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	2300      	movs	r3, #0
 8005718:	460a      	mov	r2, r1
 800571a:	4921      	ldr	r1, [pc, #132]	@ (80057a0 <vTaskStartScheduler+0xb4>)
 800571c:	4821      	ldr	r0, [pc, #132]	@ (80057a4 <vTaskStartScheduler+0xb8>)
 800571e:	f7ff fe00 	bl	8005322 <xTaskCreateStatic>
 8005722:	4603      	mov	r3, r0
 8005724:	4a20      	ldr	r2, [pc, #128]	@ (80057a8 <vTaskStartScheduler+0xbc>)
 8005726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005728:	4b1f      	ldr	r3, [pc, #124]	@ (80057a8 <vTaskStartScheduler+0xbc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005730:	2301      	movs	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e001      	b.n	800573a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d11b      	bne.n	8005778 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	613b      	str	r3, [r7, #16]
}
 8005752:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005754:	4b15      	ldr	r3, [pc, #84]	@ (80057ac <vTaskStartScheduler+0xc0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	335c      	adds	r3, #92	@ 0x5c
 800575a:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <vTaskStartScheduler+0xc4>)
 800575c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800575e:	4b15      	ldr	r3, [pc, #84]	@ (80057b4 <vTaskStartScheduler+0xc8>)
 8005760:	f04f 32ff 	mov.w	r2, #4294967295
 8005764:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005766:	4b14      	ldr	r3, [pc, #80]	@ (80057b8 <vTaskStartScheduler+0xcc>)
 8005768:	2201      	movs	r2, #1
 800576a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800576c:	4b13      	ldr	r3, [pc, #76]	@ (80057bc <vTaskStartScheduler+0xd0>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005772:	f000 fbbd 	bl	8005ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005776:	e00f      	b.n	8005798 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d10b      	bne.n	8005798 <vTaskStartScheduler+0xac>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60fb      	str	r3, [r7, #12]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <vTaskStartScheduler+0xa8>
}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	080093f4 	.word	0x080093f4
 80057a4:	08005b55 	.word	0x08005b55
 80057a8:	20000724 	.word	0x20000724
 80057ac:	20000600 	.word	0x20000600
 80057b0:	2000001c 	.word	0x2000001c
 80057b4:	20000720 	.word	0x20000720
 80057b8:	2000070c 	.word	0x2000070c
 80057bc:	20000704 	.word	0x20000704

080057c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057c4:	4b04      	ldr	r3, [pc, #16]	@ (80057d8 <vTaskSuspendAll+0x18>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3301      	adds	r3, #1
 80057ca:	4a03      	ldr	r2, [pc, #12]	@ (80057d8 <vTaskSuspendAll+0x18>)
 80057cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057ce:	bf00      	nop
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	20000728 	.word	0x20000728

080057dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057ea:	4b42      	ldr	r3, [pc, #264]	@ (80058f4 <xTaskResumeAll+0x118>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <xTaskResumeAll+0x2e>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	603b      	str	r3, [r7, #0]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800580a:	f000 fc15 	bl	8006038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800580e:	4b39      	ldr	r3, [pc, #228]	@ (80058f4 <xTaskResumeAll+0x118>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3b01      	subs	r3, #1
 8005814:	4a37      	ldr	r2, [pc, #220]	@ (80058f4 <xTaskResumeAll+0x118>)
 8005816:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005818:	4b36      	ldr	r3, [pc, #216]	@ (80058f4 <xTaskResumeAll+0x118>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d161      	bne.n	80058e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005820:	4b35      	ldr	r3, [pc, #212]	@ (80058f8 <xTaskResumeAll+0x11c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d05d      	beq.n	80058e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005828:	e02e      	b.n	8005888 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582a:	4b34      	ldr	r3, [pc, #208]	@ (80058fc <xTaskResumeAll+0x120>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3318      	adds	r3, #24
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fd49 	bl	80052ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3304      	adds	r3, #4
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff fd44 	bl	80052ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584a:	2201      	movs	r2, #1
 800584c:	409a      	lsls	r2, r3
 800584e:	4b2c      	ldr	r3, [pc, #176]	@ (8005900 <xTaskResumeAll+0x124>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	4a2a      	ldr	r2, [pc, #168]	@ (8005900 <xTaskResumeAll+0x124>)
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4a27      	ldr	r2, [pc, #156]	@ (8005904 <xTaskResumeAll+0x128>)
 8005866:	441a      	add	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f7ff fcd0 	bl	8005214 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005878:	4b23      	ldr	r3, [pc, #140]	@ (8005908 <xTaskResumeAll+0x12c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005882:	4b22      	ldr	r3, [pc, #136]	@ (800590c <xTaskResumeAll+0x130>)
 8005884:	2201      	movs	r2, #1
 8005886:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005888:	4b1c      	ldr	r3, [pc, #112]	@ (80058fc <xTaskResumeAll+0x120>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1cc      	bne.n	800582a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005896:	f000 fa19 	bl	8005ccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800589a:	4b1d      	ldr	r3, [pc, #116]	@ (8005910 <xTaskResumeAll+0x134>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d010      	beq.n	80058c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058a6:	f000 f837 	bl	8005918 <xTaskIncrementTick>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058b0:	4b16      	ldr	r3, [pc, #88]	@ (800590c <xTaskResumeAll+0x130>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f1      	bne.n	80058a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058c2:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <xTaskResumeAll+0x134>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058c8:	4b10      	ldr	r3, [pc, #64]	@ (800590c <xTaskResumeAll+0x130>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d009      	beq.n	80058e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058d0:	2301      	movs	r3, #1
 80058d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005914 <xTaskResumeAll+0x138>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058e4:	f000 fbda 	bl	800609c <vPortExitCritical>

	return xAlreadyYielded;
 80058e8:	68bb      	ldr	r3, [r7, #8]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000728 	.word	0x20000728
 80058f8:	20000700 	.word	0x20000700
 80058fc:	200006c0 	.word	0x200006c0
 8005900:	20000708 	.word	0x20000708
 8005904:	20000604 	.word	0x20000604
 8005908:	20000600 	.word	0x20000600
 800590c:	20000714 	.word	0x20000714
 8005910:	20000710 	.word	0x20000710
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005922:	4b4f      	ldr	r3, [pc, #316]	@ (8005a60 <xTaskIncrementTick+0x148>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 808f 	bne.w	8005a4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800592c:	4b4d      	ldr	r3, [pc, #308]	@ (8005a64 <xTaskIncrementTick+0x14c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005934:	4a4b      	ldr	r2, [pc, #300]	@ (8005a64 <xTaskIncrementTick+0x14c>)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d121      	bne.n	8005984 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005940:	4b49      	ldr	r3, [pc, #292]	@ (8005a68 <xTaskIncrementTick+0x150>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <xTaskIncrementTick+0x4a>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	603b      	str	r3, [r7, #0]
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	e7fd      	b.n	800595e <xTaskIncrementTick+0x46>
 8005962:	4b41      	ldr	r3, [pc, #260]	@ (8005a68 <xTaskIncrementTick+0x150>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	4b40      	ldr	r3, [pc, #256]	@ (8005a6c <xTaskIncrementTick+0x154>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a3e      	ldr	r2, [pc, #248]	@ (8005a68 <xTaskIncrementTick+0x150>)
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	4a3e      	ldr	r2, [pc, #248]	@ (8005a6c <xTaskIncrementTick+0x154>)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	4b3e      	ldr	r3, [pc, #248]	@ (8005a70 <xTaskIncrementTick+0x158>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a70 <xTaskIncrementTick+0x158>)
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	f000 f9a4 	bl	8005ccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005984:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <xTaskIncrementTick+0x15c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	429a      	cmp	r2, r3
 800598c:	d348      	bcc.n	8005a20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800598e:	4b36      	ldr	r3, [pc, #216]	@ (8005a68 <xTaskIncrementTick+0x150>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005998:	4b36      	ldr	r3, [pc, #216]	@ (8005a74 <xTaskIncrementTick+0x15c>)
 800599a:	f04f 32ff 	mov.w	r2, #4294967295
 800599e:	601a      	str	r2, [r3, #0]
					break;
 80059a0:	e03e      	b.n	8005a20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a2:	4b31      	ldr	r3, [pc, #196]	@ (8005a68 <xTaskIncrementTick+0x150>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d203      	bcs.n	80059c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005a74 <xTaskIncrementTick+0x15c>)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059c0:	e02e      	b.n	8005a20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fc81 	bl	80052ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	3318      	adds	r3, #24
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff fc78 	bl	80052ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	2201      	movs	r2, #1
 80059e4:	409a      	lsls	r2, r3
 80059e6:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <xTaskIncrementTick+0x160>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	4a22      	ldr	r2, [pc, #136]	@ (8005a78 <xTaskIncrementTick+0x160>)
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a7c <xTaskIncrementTick+0x164>)
 80059fe:	441a      	add	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f7ff fc04 	bl	8005214 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a10:	4b1b      	ldr	r3, [pc, #108]	@ (8005a80 <xTaskIncrementTick+0x168>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d3b9      	bcc.n	800598e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a1e:	e7b6      	b.n	800598e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a20:	4b17      	ldr	r3, [pc, #92]	@ (8005a80 <xTaskIncrementTick+0x168>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a26:	4915      	ldr	r1, [pc, #84]	@ (8005a7c <xTaskIncrementTick+0x164>)
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d901      	bls.n	8005a3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a3c:	4b11      	ldr	r3, [pc, #68]	@ (8005a84 <xTaskIncrementTick+0x16c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e004      	b.n	8005a54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a88 <xTaskIncrementTick+0x170>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	4a0d      	ldr	r2, [pc, #52]	@ (8005a88 <xTaskIncrementTick+0x170>)
 8005a52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a54:	697b      	ldr	r3, [r7, #20]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000728 	.word	0x20000728
 8005a64:	20000704 	.word	0x20000704
 8005a68:	200006b8 	.word	0x200006b8
 8005a6c:	200006bc 	.word	0x200006bc
 8005a70:	20000718 	.word	0x20000718
 8005a74:	20000720 	.word	0x20000720
 8005a78:	20000708 	.word	0x20000708
 8005a7c:	20000604 	.word	0x20000604
 8005a80:	20000600 	.word	0x20000600
 8005a84:	20000714 	.word	0x20000714
 8005a88:	20000710 	.word	0x20000710

08005a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a92:	4b2a      	ldr	r3, [pc, #168]	@ (8005b3c <vTaskSwitchContext+0xb0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a9a:	4b29      	ldr	r3, [pc, #164]	@ (8005b40 <vTaskSwitchContext+0xb4>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005aa0:	e045      	b.n	8005b2e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005aa2:	4b27      	ldr	r3, [pc, #156]	@ (8005b40 <vTaskSwitchContext+0xb4>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa8:	4b26      	ldr	r3, [pc, #152]	@ (8005b44 <vTaskSwitchContext+0xb8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	fab3 f383 	clz	r3, r3
 8005ab4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
 8005ab8:	f1c3 031f 	rsb	r3, r3, #31
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	4922      	ldr	r1, [pc, #136]	@ (8005b48 <vTaskSwitchContext+0xbc>)
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <vTaskSwitchContext+0x5e>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	607b      	str	r3, [r7, #4]
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	e7fd      	b.n	8005ae6 <vTaskSwitchContext+0x5a>
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4a14      	ldr	r2, [pc, #80]	@ (8005b48 <vTaskSwitchContext+0xbc>)
 8005af6:	4413      	add	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d104      	bne.n	8005b1a <vTaskSwitchContext+0x8e>
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	@ (8005b4c <vTaskSwitchContext+0xc0>)
 8005b22:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b24:	4b09      	ldr	r3, [pc, #36]	@ (8005b4c <vTaskSwitchContext+0xc0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	335c      	adds	r3, #92	@ 0x5c
 8005b2a:	4a09      	ldr	r2, [pc, #36]	@ (8005b50 <vTaskSwitchContext+0xc4>)
 8005b2c:	6013      	str	r3, [r2, #0]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000728 	.word	0x20000728
 8005b40:	20000714 	.word	0x20000714
 8005b44:	20000708 	.word	0x20000708
 8005b48:	20000604 	.word	0x20000604
 8005b4c:	20000600 	.word	0x20000600
 8005b50:	2000001c 	.word	0x2000001c

08005b54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b5c:	f000 f852 	bl	8005c04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b60:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <prvIdleTask+0x28>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d9f9      	bls.n	8005b5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b68:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <prvIdleTask+0x2c>)
 8005b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b78:	e7f0      	b.n	8005b5c <prvIdleTask+0x8>
 8005b7a:	bf00      	nop
 8005b7c:	20000604 	.word	0x20000604
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	607b      	str	r3, [r7, #4]
 8005b8e:	e00c      	b.n	8005baa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4a12      	ldr	r2, [pc, #72]	@ (8005be4 <prvInitialiseTaskLists+0x60>)
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fb0b 	bl	80051ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b06      	cmp	r3, #6
 8005bae:	d9ef      	bls.n	8005b90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bb0:	480d      	ldr	r0, [pc, #52]	@ (8005be8 <prvInitialiseTaskLists+0x64>)
 8005bb2:	f7ff fb02 	bl	80051ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bb6:	480d      	ldr	r0, [pc, #52]	@ (8005bec <prvInitialiseTaskLists+0x68>)
 8005bb8:	f7ff faff 	bl	80051ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bbc:	480c      	ldr	r0, [pc, #48]	@ (8005bf0 <prvInitialiseTaskLists+0x6c>)
 8005bbe:	f7ff fafc 	bl	80051ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bc2:	480c      	ldr	r0, [pc, #48]	@ (8005bf4 <prvInitialiseTaskLists+0x70>)
 8005bc4:	f7ff faf9 	bl	80051ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bc8:	480b      	ldr	r0, [pc, #44]	@ (8005bf8 <prvInitialiseTaskLists+0x74>)
 8005bca:	f7ff faf6 	bl	80051ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bce:	4b0b      	ldr	r3, [pc, #44]	@ (8005bfc <prvInitialiseTaskLists+0x78>)
 8005bd0:	4a05      	ldr	r2, [pc, #20]	@ (8005be8 <prvInitialiseTaskLists+0x64>)
 8005bd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <prvInitialiseTaskLists+0x7c>)
 8005bd6:	4a05      	ldr	r2, [pc, #20]	@ (8005bec <prvInitialiseTaskLists+0x68>)
 8005bd8:	601a      	str	r2, [r3, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000604 	.word	0x20000604
 8005be8:	20000690 	.word	0x20000690
 8005bec:	200006a4 	.word	0x200006a4
 8005bf0:	200006c0 	.word	0x200006c0
 8005bf4:	200006d4 	.word	0x200006d4
 8005bf8:	200006ec 	.word	0x200006ec
 8005bfc:	200006b8 	.word	0x200006b8
 8005c00:	200006bc 	.word	0x200006bc

08005c04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c0a:	e019      	b.n	8005c40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c0c:	f000 fa14 	bl	8006038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c10:	4b10      	ldr	r3, [pc, #64]	@ (8005c54 <prvCheckTasksWaitingTermination+0x50>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fb56 	bl	80052ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c22:	4b0d      	ldr	r3, [pc, #52]	@ (8005c58 <prvCheckTasksWaitingTermination+0x54>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	4a0b      	ldr	r2, [pc, #44]	@ (8005c58 <prvCheckTasksWaitingTermination+0x54>)
 8005c2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <prvCheckTasksWaitingTermination+0x58>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	4a0a      	ldr	r2, [pc, #40]	@ (8005c5c <prvCheckTasksWaitingTermination+0x58>)
 8005c34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c36:	f000 fa31 	bl	800609c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f810 	bl	8005c60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c40:	4b06      	ldr	r3, [pc, #24]	@ (8005c5c <prvCheckTasksWaitingTermination+0x58>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e1      	bne.n	8005c0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	200006d4 	.word	0x200006d4
 8005c58:	20000700 	.word	0x20000700
 8005c5c:	200006e8 	.word	0x200006e8

08005c60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	335c      	adds	r3, #92	@ 0x5c
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fa4b 	bl	8007108 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d108      	bne.n	8005c8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fb87 	bl	8006394 <vPortFree>
				vPortFree( pxTCB );
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fb84 	bl	8006394 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c8c:	e019      	b.n	8005cc2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d103      	bne.n	8005ca0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fb7b 	bl	8006394 <vPortFree>
	}
 8005c9e:	e010      	b.n	8005cc2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d00b      	beq.n	8005cc2 <prvDeleteTCB+0x62>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	60fb      	str	r3, [r7, #12]
}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	e7fd      	b.n	8005cbe <prvDeleteTCB+0x5e>
	}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <prvResetNextTaskUnblockTime+0x38>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <prvResetNextTaskUnblockTime+0x3c>)
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ce4:	e008      	b.n	8005cf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ce6:	4b07      	ldr	r3, [pc, #28]	@ (8005d04 <prvResetNextTaskUnblockTime+0x38>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a04      	ldr	r2, [pc, #16]	@ (8005d08 <prvResetNextTaskUnblockTime+0x3c>)
 8005cf6:	6013      	str	r3, [r2, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	200006b8 	.word	0x200006b8
 8005d08:	20000720 	.word	0x20000720

08005d0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d16:	4b29      	ldr	r3, [pc, #164]	@ (8005dbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d1c:	4b28      	ldr	r3, [pc, #160]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fad3 	bl	80052ce <uxListRemove>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d2e:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	2201      	movs	r2, #1
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	43da      	mvns	r2, r3
 8005d3c:	4b21      	ldr	r3, [pc, #132]	@ (8005dc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4013      	ands	r3, r2
 8005d42:	4a20      	ldr	r2, [pc, #128]	@ (8005dc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d10a      	bne.n	8005d64 <prvAddCurrentTaskToDelayedList+0x58>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d007      	beq.n	8005d64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d54:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	481a      	ldr	r0, [pc, #104]	@ (8005dc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d5e:	f7ff fa59 	bl	8005214 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d62:	e026      	b.n	8005db2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4413      	add	r3, r2
 8005d6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d6c:	4b14      	ldr	r3, [pc, #80]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d209      	bcs.n	8005d90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d7c:	4b13      	ldr	r3, [pc, #76]	@ (8005dcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4619      	mov	r1, r3
 8005d88:	4610      	mov	r0, r2
 8005d8a:	f7ff fa67 	bl	800525c <vListInsert>
}
 8005d8e:	e010      	b.n	8005db2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d90:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f7ff fa5d 	bl	800525c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005da2:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d202      	bcs.n	8005db2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005dac:	4a09      	ldr	r2, [pc, #36]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6013      	str	r3, [r2, #0]
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000704 	.word	0x20000704
 8005dc0:	20000600 	.word	0x20000600
 8005dc4:	20000708 	.word	0x20000708
 8005dc8:	200006ec 	.word	0x200006ec
 8005dcc:	200006bc 	.word	0x200006bc
 8005dd0:	200006b8 	.word	0x200006b8
 8005dd4:	20000720 	.word	0x20000720

08005dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3b04      	subs	r3, #4
 8005de8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3b04      	subs	r3, #4
 8005df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f023 0201 	bic.w	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b04      	subs	r3, #4
 8005e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e08:	4a0c      	ldr	r2, [pc, #48]	@ (8005e3c <pxPortInitialiseStack+0x64>)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3b14      	subs	r3, #20
 8005e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3b04      	subs	r3, #4
 8005e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f06f 0202 	mvn.w	r2, #2
 8005e26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3b20      	subs	r3, #32
 8005e2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	08005e41 	.word	0x08005e41

08005e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e4a:	4b13      	ldr	r3, [pc, #76]	@ (8005e98 <prvTaskExitError+0x58>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d00b      	beq.n	8005e6c <prvTaskExitError+0x2c>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	60fb      	str	r3, [r7, #12]
}
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	e7fd      	b.n	8005e68 <prvTaskExitError+0x28>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60bb      	str	r3, [r7, #8]
}
 8005e7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e80:	bf00      	nop
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0fc      	beq.n	8005e82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	2000000c 	.word	0x2000000c
 8005e9c:	00000000 	.word	0x00000000

08005ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ea0:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <pxCurrentTCBConst2>)
 8005ea2:	6819      	ldr	r1, [r3, #0]
 8005ea4:	6808      	ldr	r0, [r1, #0]
 8005ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eaa:	f380 8809 	msr	PSP, r0
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f380 8811 	msr	BASEPRI, r0
 8005eba:	4770      	bx	lr
 8005ebc:	f3af 8000 	nop.w

08005ec0 <pxCurrentTCBConst2>:
 8005ec0:	20000600 	.word	0x20000600
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ec8:	4808      	ldr	r0, [pc, #32]	@ (8005eec <prvPortStartFirstTask+0x24>)
 8005eca:	6800      	ldr	r0, [r0, #0]
 8005ecc:	6800      	ldr	r0, [r0, #0]
 8005ece:	f380 8808 	msr	MSP, r0
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	f380 8814 	msr	CONTROL, r0
 8005eda:	b662      	cpsie	i
 8005edc:	b661      	cpsie	f
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	df00      	svc	0
 8005ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eea:	bf00      	nop
 8005eec:	e000ed08 	.word	0xe000ed08

08005ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ef6:	4b47      	ldr	r3, [pc, #284]	@ (8006014 <xPortStartScheduler+0x124>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a47      	ldr	r2, [pc, #284]	@ (8006018 <xPortStartScheduler+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10b      	bne.n	8005f18 <xPortStartScheduler+0x28>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	613b      	str	r3, [r7, #16]
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	e7fd      	b.n	8005f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f18:	4b3e      	ldr	r3, [pc, #248]	@ (8006014 <xPortStartScheduler+0x124>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800601c <xPortStartScheduler+0x12c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10b      	bne.n	8005f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60fb      	str	r3, [r7, #12]
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	e7fd      	b.n	8005f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f3a:	4b39      	ldr	r3, [pc, #228]	@ (8006020 <xPortStartScheduler+0x130>)
 8005f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	22ff      	movs	r2, #255	@ 0xff
 8005f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	4b31      	ldr	r3, [pc, #196]	@ (8006024 <xPortStartScheduler+0x134>)
 8005f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f62:	4b31      	ldr	r3, [pc, #196]	@ (8006028 <xPortStartScheduler+0x138>)
 8005f64:	2207      	movs	r2, #7
 8005f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f68:	e009      	b.n	8005f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006028 <xPortStartScheduler+0x138>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	4a2d      	ldr	r2, [pc, #180]	@ (8006028 <xPortStartScheduler+0x138>)
 8005f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f86:	2b80      	cmp	r3, #128	@ 0x80
 8005f88:	d0ef      	beq.n	8005f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f8a:	4b27      	ldr	r3, [pc, #156]	@ (8006028 <xPortStartScheduler+0x138>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f1c3 0307 	rsb	r3, r3, #7
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d00b      	beq.n	8005fae <xPortStartScheduler+0xbe>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	60bb      	str	r3, [r7, #8]
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fae:	4b1e      	ldr	r3, [pc, #120]	@ (8006028 <xPortStartScheduler+0x138>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006028 <xPortStartScheduler+0x138>)
 8005fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006028 <xPortStartScheduler+0x138>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fc0:	4a19      	ldr	r2, [pc, #100]	@ (8006028 <xPortStartScheduler+0x138>)
 8005fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fcc:	4b17      	ldr	r3, [pc, #92]	@ (800602c <xPortStartScheduler+0x13c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a16      	ldr	r2, [pc, #88]	@ (800602c <xPortStartScheduler+0x13c>)
 8005fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fd8:	4b14      	ldr	r3, [pc, #80]	@ (800602c <xPortStartScheduler+0x13c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a13      	ldr	r2, [pc, #76]	@ (800602c <xPortStartScheduler+0x13c>)
 8005fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fe4:	f000 f8da 	bl	800619c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fe8:	4b11      	ldr	r3, [pc, #68]	@ (8006030 <xPortStartScheduler+0x140>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fee:	f000 f8f9 	bl	80061e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ff2:	4b10      	ldr	r3, [pc, #64]	@ (8006034 <xPortStartScheduler+0x144>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8006034 <xPortStartScheduler+0x144>)
 8005ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ffe:	f7ff ff63 	bl	8005ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006002:	f7ff fd43 	bl	8005a8c <vTaskSwitchContext>
	prvTaskExitError();
 8006006:	f7ff ff1b 	bl	8005e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	e000ed00 	.word	0xe000ed00
 8006018:	410fc271 	.word	0x410fc271
 800601c:	410fc270 	.word	0x410fc270
 8006020:	e000e400 	.word	0xe000e400
 8006024:	2000072c 	.word	0x2000072c
 8006028:	20000730 	.word	0x20000730
 800602c:	e000ed20 	.word	0xe000ed20
 8006030:	2000000c 	.word	0x2000000c
 8006034:	e000ef34 	.word	0xe000ef34

08006038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	607b      	str	r3, [r7, #4]
}
 8006050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006052:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <vPortEnterCritical+0x5c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3301      	adds	r3, #1
 8006058:	4a0e      	ldr	r2, [pc, #56]	@ (8006094 <vPortEnterCritical+0x5c>)
 800605a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800605c:	4b0d      	ldr	r3, [pc, #52]	@ (8006094 <vPortEnterCritical+0x5c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d110      	bne.n	8006086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006064:	4b0c      	ldr	r3, [pc, #48]	@ (8006098 <vPortEnterCritical+0x60>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <vPortEnterCritical+0x4e>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	603b      	str	r3, [r7, #0]
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <vPortEnterCritical+0x4a>
	}
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	2000000c 	.word	0x2000000c
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060a2:	4b12      	ldr	r3, [pc, #72]	@ (80060ec <vPortExitCritical+0x50>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <vPortExitCritical+0x26>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	607b      	str	r3, [r7, #4]
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	e7fd      	b.n	80060be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060c2:	4b0a      	ldr	r3, [pc, #40]	@ (80060ec <vPortExitCritical+0x50>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	4a08      	ldr	r2, [pc, #32]	@ (80060ec <vPortExitCritical+0x50>)
 80060ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060cc:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <vPortExitCritical+0x50>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d105      	bne.n	80060e0 <vPortExitCritical+0x44>
 80060d4:	2300      	movs	r3, #0
 80060d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	2000000c 	.word	0x2000000c

080060f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060f0:	f3ef 8009 	mrs	r0, PSP
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	4b15      	ldr	r3, [pc, #84]	@ (8006150 <pxCurrentTCBConst>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	f01e 0f10 	tst.w	lr, #16
 8006100:	bf08      	it	eq
 8006102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610a:	6010      	str	r0, [r2, #0]
 800610c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006114:	f380 8811 	msr	BASEPRI, r0
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f7ff fcb4 	bl	8005a8c <vTaskSwitchContext>
 8006124:	f04f 0000 	mov.w	r0, #0
 8006128:	f380 8811 	msr	BASEPRI, r0
 800612c:	bc09      	pop	{r0, r3}
 800612e:	6819      	ldr	r1, [r3, #0]
 8006130:	6808      	ldr	r0, [r1, #0]
 8006132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006136:	f01e 0f10 	tst.w	lr, #16
 800613a:	bf08      	it	eq
 800613c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006140:	f380 8809 	msr	PSP, r0
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	f3af 8000 	nop.w

08006150 <pxCurrentTCBConst>:
 8006150:	20000600 	.word	0x20000600
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop

08006158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	607b      	str	r3, [r7, #4]
}
 8006170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006172:	f7ff fbd1 	bl	8005918 <xTaskIncrementTick>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800617c:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <SysTick_Handler+0x40>)
 800617e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	2300      	movs	r3, #0
 8006186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	f383 8811 	msr	BASEPRI, r3
}
 800618e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061a0:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <vPortSetupTimerInterrupt+0x34>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061a6:	4b0b      	ldr	r3, [pc, #44]	@ (80061d4 <vPortSetupTimerInterrupt+0x38>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061ac:	4b0a      	ldr	r3, [pc, #40]	@ (80061d8 <vPortSetupTimerInterrupt+0x3c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0a      	ldr	r2, [pc, #40]	@ (80061dc <vPortSetupTimerInterrupt+0x40>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	099b      	lsrs	r3, r3, #6
 80061b8:	4a09      	ldr	r2, [pc, #36]	@ (80061e0 <vPortSetupTimerInterrupt+0x44>)
 80061ba:	3b01      	subs	r3, #1
 80061bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061be:	4b04      	ldr	r3, [pc, #16]	@ (80061d0 <vPortSetupTimerInterrupt+0x34>)
 80061c0:	2207      	movs	r2, #7
 80061c2:	601a      	str	r2, [r3, #0]
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	e000e010 	.word	0xe000e010
 80061d4:	e000e018 	.word	0xe000e018
 80061d8:	20000000 	.word	0x20000000
 80061dc:	10624dd3 	.word	0x10624dd3
 80061e0:	e000e014 	.word	0xe000e014

080061e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80061f4 <vPortEnableVFP+0x10>
 80061e8:	6801      	ldr	r1, [r0, #0]
 80061ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80061ee:	6001      	str	r1, [r0, #0]
 80061f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061f2:	bf00      	nop
 80061f4:	e000ed88 	.word	0xe000ed88

080061f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	@ 0x28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006204:	f7ff fadc 	bl	80057c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006208:	4b5c      	ldr	r3, [pc, #368]	@ (800637c <pvPortMalloc+0x184>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006210:	f000 f924 	bl	800645c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006214:	4b5a      	ldr	r3, [pc, #360]	@ (8006380 <pvPortMalloc+0x188>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 8095 	bne.w	800634c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01e      	beq.n	8006266 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006228:	2208      	movs	r2, #8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	2b00      	cmp	r3, #0
 8006238:	d015      	beq.n	8006266 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f023 0307 	bic.w	r3, r3, #7
 8006240:	3308      	adds	r3, #8
 8006242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <pvPortMalloc+0x6e>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	617b      	str	r3, [r7, #20]
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d06f      	beq.n	800634c <pvPortMalloc+0x154>
 800626c:	4b45      	ldr	r3, [pc, #276]	@ (8006384 <pvPortMalloc+0x18c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d86a      	bhi.n	800634c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006276:	4b44      	ldr	r3, [pc, #272]	@ (8006388 <pvPortMalloc+0x190>)
 8006278:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800627a:	4b43      	ldr	r3, [pc, #268]	@ (8006388 <pvPortMalloc+0x190>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006280:	e004      	b.n	800628c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	429a      	cmp	r2, r3
 8006294:	d903      	bls.n	800629e <pvPortMalloc+0xa6>
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f1      	bne.n	8006282 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800629e:	4b37      	ldr	r3, [pc, #220]	@ (800637c <pvPortMalloc+0x184>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d051      	beq.n	800634c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2208      	movs	r2, #8
 80062ae:	4413      	add	r3, r2
 80062b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	1ad2      	subs	r2, r2, r3
 80062c2:	2308      	movs	r3, #8
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d920      	bls.n	800630c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4413      	add	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00b      	beq.n	80062f4 <pvPortMalloc+0xfc>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	613b      	str	r3, [r7, #16]
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	1ad2      	subs	r2, r2, r3
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006306:	69b8      	ldr	r0, [r7, #24]
 8006308:	f000 f90a 	bl	8006520 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800630c:	4b1d      	ldr	r3, [pc, #116]	@ (8006384 <pvPortMalloc+0x18c>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	4a1b      	ldr	r2, [pc, #108]	@ (8006384 <pvPortMalloc+0x18c>)
 8006318:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800631a:	4b1a      	ldr	r3, [pc, #104]	@ (8006384 <pvPortMalloc+0x18c>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b1b      	ldr	r3, [pc, #108]	@ (800638c <pvPortMalloc+0x194>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d203      	bcs.n	800632e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006326:	4b17      	ldr	r3, [pc, #92]	@ (8006384 <pvPortMalloc+0x18c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a18      	ldr	r2, [pc, #96]	@ (800638c <pvPortMalloc+0x194>)
 800632c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	4b13      	ldr	r3, [pc, #76]	@ (8006380 <pvPortMalloc+0x188>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	431a      	orrs	r2, r3
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006342:	4b13      	ldr	r3, [pc, #76]	@ (8006390 <pvPortMalloc+0x198>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	4a11      	ldr	r2, [pc, #68]	@ (8006390 <pvPortMalloc+0x198>)
 800634a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800634c:	f7ff fa46 	bl	80057dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <pvPortMalloc+0x17a>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	60fb      	str	r3, [r7, #12]
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	e7fd      	b.n	800636e <pvPortMalloc+0x176>
	return pvReturn;
 8006372:	69fb      	ldr	r3, [r7, #28]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3728      	adds	r7, #40	@ 0x28
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	2000433c 	.word	0x2000433c
 8006380:	20004350 	.word	0x20004350
 8006384:	20004340 	.word	0x20004340
 8006388:	20004334 	.word	0x20004334
 800638c:	20004344 	.word	0x20004344
 8006390:	20004348 	.word	0x20004348

08006394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d04f      	beq.n	8006446 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063a6:	2308      	movs	r3, #8
 80063a8:	425b      	negs	r3, r3
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4413      	add	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	4b25      	ldr	r3, [pc, #148]	@ (8006450 <vPortFree+0xbc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4013      	ands	r3, r2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <vPortFree+0x46>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60fb      	str	r3, [r7, #12]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <vPortFree+0x66>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60bb      	str	r3, [r7, #8]
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	e7fd      	b.n	80063f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	4b14      	ldr	r3, [pc, #80]	@ (8006450 <vPortFree+0xbc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01e      	beq.n	8006446 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d11a      	bne.n	8006446 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	4b0e      	ldr	r3, [pc, #56]	@ (8006450 <vPortFree+0xbc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	43db      	mvns	r3, r3
 800641a:	401a      	ands	r2, r3
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006420:	f7ff f9ce 	bl	80057c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	4b0a      	ldr	r3, [pc, #40]	@ (8006454 <vPortFree+0xc0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4413      	add	r3, r2
 800642e:	4a09      	ldr	r2, [pc, #36]	@ (8006454 <vPortFree+0xc0>)
 8006430:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006432:	6938      	ldr	r0, [r7, #16]
 8006434:	f000 f874 	bl	8006520 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006438:	4b07      	ldr	r3, [pc, #28]	@ (8006458 <vPortFree+0xc4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	4a06      	ldr	r2, [pc, #24]	@ (8006458 <vPortFree+0xc4>)
 8006440:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006442:	f7ff f9cb 	bl	80057dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006446:	bf00      	nop
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20004350 	.word	0x20004350
 8006454:	20004340 	.word	0x20004340
 8006458:	2000434c 	.word	0x2000434c

0800645c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006462:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006466:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006468:	4b27      	ldr	r3, [pc, #156]	@ (8006508 <prvHeapInit+0xac>)
 800646a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3307      	adds	r3, #7
 800647a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0307 	bic.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	4a1f      	ldr	r2, [pc, #124]	@ (8006508 <prvHeapInit+0xac>)
 800648c:	4413      	add	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006494:	4a1d      	ldr	r2, [pc, #116]	@ (800650c <prvHeapInit+0xb0>)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800649a:	4b1c      	ldr	r3, [pc, #112]	@ (800650c <prvHeapInit+0xb0>)
 800649c:	2200      	movs	r2, #0
 800649e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	4413      	add	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064a8:	2208      	movs	r2, #8
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0307 	bic.w	r3, r3, #7
 80064b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a15      	ldr	r2, [pc, #84]	@ (8006510 <prvHeapInit+0xb4>)
 80064bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064be:	4b14      	ldr	r3, [pc, #80]	@ (8006510 <prvHeapInit+0xb4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2200      	movs	r2, #0
 80064c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064c6:	4b12      	ldr	r3, [pc, #72]	@ (8006510 <prvHeapInit+0xb4>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <prvHeapInit+0xb4>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006514 <prvHeapInit+0xb8>)
 80064ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	4a09      	ldr	r2, [pc, #36]	@ (8006518 <prvHeapInit+0xbc>)
 80064f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064f4:	4b09      	ldr	r3, [pc, #36]	@ (800651c <prvHeapInit+0xc0>)
 80064f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064fa:	601a      	str	r2, [r3, #0]
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	20000734 	.word	0x20000734
 800650c:	20004334 	.word	0x20004334
 8006510:	2000433c 	.word	0x2000433c
 8006514:	20004344 	.word	0x20004344
 8006518:	20004340 	.word	0x20004340
 800651c:	20004350 	.word	0x20004350

08006520 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006528:	4b28      	ldr	r3, [pc, #160]	@ (80065cc <prvInsertBlockIntoFreeList+0xac>)
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e002      	b.n	8006534 <prvInsertBlockIntoFreeList+0x14>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	d8f7      	bhi.n	800652e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4413      	add	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	429a      	cmp	r2, r3
 800654e:	d108      	bne.n	8006562 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	441a      	add	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	441a      	add	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d118      	bne.n	80065a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b15      	ldr	r3, [pc, #84]	@ (80065d0 <prvInsertBlockIntoFreeList+0xb0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d00d      	beq.n	800659e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	441a      	add	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e008      	b.n	80065b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800659e:	4b0c      	ldr	r3, [pc, #48]	@ (80065d0 <prvInsertBlockIntoFreeList+0xb0>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e003      	b.n	80065b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d002      	beq.n	80065be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065be:	bf00      	nop
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20004334 	.word	0x20004334
 80065d0:	2000433c 	.word	0x2000433c

080065d4 <__cvt>:
 80065d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	ec57 6b10 	vmov	r6, r7, d0
 80065dc:	2f00      	cmp	r7, #0
 80065de:	460c      	mov	r4, r1
 80065e0:	4619      	mov	r1, r3
 80065e2:	463b      	mov	r3, r7
 80065e4:	bfbb      	ittet	lt
 80065e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80065ea:	461f      	movlt	r7, r3
 80065ec:	2300      	movge	r3, #0
 80065ee:	232d      	movlt	r3, #45	@ 0x2d
 80065f0:	700b      	strb	r3, [r1, #0]
 80065f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065f8:	4691      	mov	r9, r2
 80065fa:	f023 0820 	bic.w	r8, r3, #32
 80065fe:	bfbc      	itt	lt
 8006600:	4632      	movlt	r2, r6
 8006602:	4616      	movlt	r6, r2
 8006604:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006608:	d005      	beq.n	8006616 <__cvt+0x42>
 800660a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800660e:	d100      	bne.n	8006612 <__cvt+0x3e>
 8006610:	3401      	adds	r4, #1
 8006612:	2102      	movs	r1, #2
 8006614:	e000      	b.n	8006618 <__cvt+0x44>
 8006616:	2103      	movs	r1, #3
 8006618:	ab03      	add	r3, sp, #12
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	ab02      	add	r3, sp, #8
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	ec47 6b10 	vmov	d0, r6, r7
 8006624:	4653      	mov	r3, sl
 8006626:	4622      	mov	r2, r4
 8006628:	f000 febe 	bl	80073a8 <_dtoa_r>
 800662c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006630:	4605      	mov	r5, r0
 8006632:	d119      	bne.n	8006668 <__cvt+0x94>
 8006634:	f019 0f01 	tst.w	r9, #1
 8006638:	d00e      	beq.n	8006658 <__cvt+0x84>
 800663a:	eb00 0904 	add.w	r9, r0, r4
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	4630      	mov	r0, r6
 8006644:	4639      	mov	r1, r7
 8006646:	f7fa fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800664a:	b108      	cbz	r0, 8006650 <__cvt+0x7c>
 800664c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006650:	2230      	movs	r2, #48	@ 0x30
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	454b      	cmp	r3, r9
 8006656:	d31e      	bcc.n	8006696 <__cvt+0xc2>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800665c:	1b5b      	subs	r3, r3, r5
 800665e:	4628      	mov	r0, r5
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	b004      	add	sp, #16
 8006664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006668:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800666c:	eb00 0904 	add.w	r9, r0, r4
 8006670:	d1e5      	bne.n	800663e <__cvt+0x6a>
 8006672:	7803      	ldrb	r3, [r0, #0]
 8006674:	2b30      	cmp	r3, #48	@ 0x30
 8006676:	d10a      	bne.n	800668e <__cvt+0xba>
 8006678:	2200      	movs	r2, #0
 800667a:	2300      	movs	r3, #0
 800667c:	4630      	mov	r0, r6
 800667e:	4639      	mov	r1, r7
 8006680:	f7fa fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006684:	b918      	cbnz	r0, 800668e <__cvt+0xba>
 8006686:	f1c4 0401 	rsb	r4, r4, #1
 800668a:	f8ca 4000 	str.w	r4, [sl]
 800668e:	f8da 3000 	ldr.w	r3, [sl]
 8006692:	4499      	add	r9, r3
 8006694:	e7d3      	b.n	800663e <__cvt+0x6a>
 8006696:	1c59      	adds	r1, r3, #1
 8006698:	9103      	str	r1, [sp, #12]
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e7d9      	b.n	8006652 <__cvt+0x7e>

0800669e <__exponent>:
 800669e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066a0:	2900      	cmp	r1, #0
 80066a2:	bfba      	itte	lt
 80066a4:	4249      	neglt	r1, r1
 80066a6:	232d      	movlt	r3, #45	@ 0x2d
 80066a8:	232b      	movge	r3, #43	@ 0x2b
 80066aa:	2909      	cmp	r1, #9
 80066ac:	7002      	strb	r2, [r0, #0]
 80066ae:	7043      	strb	r3, [r0, #1]
 80066b0:	dd29      	ble.n	8006706 <__exponent+0x68>
 80066b2:	f10d 0307 	add.w	r3, sp, #7
 80066b6:	461d      	mov	r5, r3
 80066b8:	270a      	movs	r7, #10
 80066ba:	461a      	mov	r2, r3
 80066bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80066c0:	fb07 1416 	mls	r4, r7, r6, r1
 80066c4:	3430      	adds	r4, #48	@ 0x30
 80066c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80066ca:	460c      	mov	r4, r1
 80066cc:	2c63      	cmp	r4, #99	@ 0x63
 80066ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80066d2:	4631      	mov	r1, r6
 80066d4:	dcf1      	bgt.n	80066ba <__exponent+0x1c>
 80066d6:	3130      	adds	r1, #48	@ 0x30
 80066d8:	1e94      	subs	r4, r2, #2
 80066da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066de:	1c41      	adds	r1, r0, #1
 80066e0:	4623      	mov	r3, r4
 80066e2:	42ab      	cmp	r3, r5
 80066e4:	d30a      	bcc.n	80066fc <__exponent+0x5e>
 80066e6:	f10d 0309 	add.w	r3, sp, #9
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	42ac      	cmp	r4, r5
 80066ee:	bf88      	it	hi
 80066f0:	2300      	movhi	r3, #0
 80066f2:	3302      	adds	r3, #2
 80066f4:	4403      	add	r3, r0
 80066f6:	1a18      	subs	r0, r3, r0
 80066f8:	b003      	add	sp, #12
 80066fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006700:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006704:	e7ed      	b.n	80066e2 <__exponent+0x44>
 8006706:	2330      	movs	r3, #48	@ 0x30
 8006708:	3130      	adds	r1, #48	@ 0x30
 800670a:	7083      	strb	r3, [r0, #2]
 800670c:	70c1      	strb	r1, [r0, #3]
 800670e:	1d03      	adds	r3, r0, #4
 8006710:	e7f1      	b.n	80066f6 <__exponent+0x58>
	...

08006714 <_printf_float>:
 8006714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006718:	b08d      	sub	sp, #52	@ 0x34
 800671a:	460c      	mov	r4, r1
 800671c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006720:	4616      	mov	r6, r2
 8006722:	461f      	mov	r7, r3
 8006724:	4605      	mov	r5, r0
 8006726:	f000 fcdb 	bl	80070e0 <_localeconv_r>
 800672a:	6803      	ldr	r3, [r0, #0]
 800672c:	9304      	str	r3, [sp, #16]
 800672e:	4618      	mov	r0, r3
 8006730:	f7f9 fda6 	bl	8000280 <strlen>
 8006734:	2300      	movs	r3, #0
 8006736:	930a      	str	r3, [sp, #40]	@ 0x28
 8006738:	f8d8 3000 	ldr.w	r3, [r8]
 800673c:	9005      	str	r0, [sp, #20]
 800673e:	3307      	adds	r3, #7
 8006740:	f023 0307 	bic.w	r3, r3, #7
 8006744:	f103 0208 	add.w	r2, r3, #8
 8006748:	f894 a018 	ldrb.w	sl, [r4, #24]
 800674c:	f8d4 b000 	ldr.w	fp, [r4]
 8006750:	f8c8 2000 	str.w	r2, [r8]
 8006754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006758:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800675c:	9307      	str	r3, [sp, #28]
 800675e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006762:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800676a:	4b9c      	ldr	r3, [pc, #624]	@ (80069dc <_printf_float+0x2c8>)
 800676c:	f04f 32ff 	mov.w	r2, #4294967295
 8006770:	f7fa f9e4 	bl	8000b3c <__aeabi_dcmpun>
 8006774:	bb70      	cbnz	r0, 80067d4 <_printf_float+0xc0>
 8006776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800677a:	4b98      	ldr	r3, [pc, #608]	@ (80069dc <_printf_float+0x2c8>)
 800677c:	f04f 32ff 	mov.w	r2, #4294967295
 8006780:	f7fa f9be 	bl	8000b00 <__aeabi_dcmple>
 8006784:	bb30      	cbnz	r0, 80067d4 <_printf_float+0xc0>
 8006786:	2200      	movs	r2, #0
 8006788:	2300      	movs	r3, #0
 800678a:	4640      	mov	r0, r8
 800678c:	4649      	mov	r1, r9
 800678e:	f7fa f9ad 	bl	8000aec <__aeabi_dcmplt>
 8006792:	b110      	cbz	r0, 800679a <_printf_float+0x86>
 8006794:	232d      	movs	r3, #45	@ 0x2d
 8006796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800679a:	4a91      	ldr	r2, [pc, #580]	@ (80069e0 <_printf_float+0x2cc>)
 800679c:	4b91      	ldr	r3, [pc, #580]	@ (80069e4 <_printf_float+0x2d0>)
 800679e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067a2:	bf94      	ite	ls
 80067a4:	4690      	movls	r8, r2
 80067a6:	4698      	movhi	r8, r3
 80067a8:	2303      	movs	r3, #3
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	f02b 0304 	bic.w	r3, fp, #4
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	f04f 0900 	mov.w	r9, #0
 80067b6:	9700      	str	r7, [sp, #0]
 80067b8:	4633      	mov	r3, r6
 80067ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067bc:	4621      	mov	r1, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	f000 f9d2 	bl	8006b68 <_printf_common>
 80067c4:	3001      	adds	r0, #1
 80067c6:	f040 808d 	bne.w	80068e4 <_printf_float+0x1d0>
 80067ca:	f04f 30ff 	mov.w	r0, #4294967295
 80067ce:	b00d      	add	sp, #52	@ 0x34
 80067d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	f7fa f9ae 	bl	8000b3c <__aeabi_dcmpun>
 80067e0:	b140      	cbz	r0, 80067f4 <_printf_float+0xe0>
 80067e2:	464b      	mov	r3, r9
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bfbc      	itt	lt
 80067e8:	232d      	movlt	r3, #45	@ 0x2d
 80067ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067ee:	4a7e      	ldr	r2, [pc, #504]	@ (80069e8 <_printf_float+0x2d4>)
 80067f0:	4b7e      	ldr	r3, [pc, #504]	@ (80069ec <_printf_float+0x2d8>)
 80067f2:	e7d4      	b.n	800679e <_printf_float+0x8a>
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067fa:	9206      	str	r2, [sp, #24]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	d13b      	bne.n	8006878 <_printf_float+0x164>
 8006800:	2306      	movs	r3, #6
 8006802:	6063      	str	r3, [r4, #4]
 8006804:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006808:	2300      	movs	r3, #0
 800680a:	6022      	str	r2, [r4, #0]
 800680c:	9303      	str	r3, [sp, #12]
 800680e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006810:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006814:	ab09      	add	r3, sp, #36	@ 0x24
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	6861      	ldr	r1, [r4, #4]
 800681a:	ec49 8b10 	vmov	d0, r8, r9
 800681e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006822:	4628      	mov	r0, r5
 8006824:	f7ff fed6 	bl	80065d4 <__cvt>
 8006828:	9b06      	ldr	r3, [sp, #24]
 800682a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800682c:	2b47      	cmp	r3, #71	@ 0x47
 800682e:	4680      	mov	r8, r0
 8006830:	d129      	bne.n	8006886 <_printf_float+0x172>
 8006832:	1cc8      	adds	r0, r1, #3
 8006834:	db02      	blt.n	800683c <_printf_float+0x128>
 8006836:	6863      	ldr	r3, [r4, #4]
 8006838:	4299      	cmp	r1, r3
 800683a:	dd41      	ble.n	80068c0 <_printf_float+0x1ac>
 800683c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006840:	fa5f fa8a 	uxtb.w	sl, sl
 8006844:	3901      	subs	r1, #1
 8006846:	4652      	mov	r2, sl
 8006848:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800684c:	9109      	str	r1, [sp, #36]	@ 0x24
 800684e:	f7ff ff26 	bl	800669e <__exponent>
 8006852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006854:	1813      	adds	r3, r2, r0
 8006856:	2a01      	cmp	r2, #1
 8006858:	4681      	mov	r9, r0
 800685a:	6123      	str	r3, [r4, #16]
 800685c:	dc02      	bgt.n	8006864 <_printf_float+0x150>
 800685e:	6822      	ldr	r2, [r4, #0]
 8006860:	07d2      	lsls	r2, r2, #31
 8006862:	d501      	bpl.n	8006868 <_printf_float+0x154>
 8006864:	3301      	adds	r3, #1
 8006866:	6123      	str	r3, [r4, #16]
 8006868:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0a2      	beq.n	80067b6 <_printf_float+0xa2>
 8006870:	232d      	movs	r3, #45	@ 0x2d
 8006872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006876:	e79e      	b.n	80067b6 <_printf_float+0xa2>
 8006878:	9a06      	ldr	r2, [sp, #24]
 800687a:	2a47      	cmp	r2, #71	@ 0x47
 800687c:	d1c2      	bne.n	8006804 <_printf_float+0xf0>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1c0      	bne.n	8006804 <_printf_float+0xf0>
 8006882:	2301      	movs	r3, #1
 8006884:	e7bd      	b.n	8006802 <_printf_float+0xee>
 8006886:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800688a:	d9db      	bls.n	8006844 <_printf_float+0x130>
 800688c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006890:	d118      	bne.n	80068c4 <_printf_float+0x1b0>
 8006892:	2900      	cmp	r1, #0
 8006894:	6863      	ldr	r3, [r4, #4]
 8006896:	dd0b      	ble.n	80068b0 <_printf_float+0x19c>
 8006898:	6121      	str	r1, [r4, #16]
 800689a:	b913      	cbnz	r3, 80068a2 <_printf_float+0x18e>
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	07d0      	lsls	r0, r2, #31
 80068a0:	d502      	bpl.n	80068a8 <_printf_float+0x194>
 80068a2:	3301      	adds	r3, #1
 80068a4:	440b      	add	r3, r1
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068aa:	f04f 0900 	mov.w	r9, #0
 80068ae:	e7db      	b.n	8006868 <_printf_float+0x154>
 80068b0:	b913      	cbnz	r3, 80068b8 <_printf_float+0x1a4>
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	07d2      	lsls	r2, r2, #31
 80068b6:	d501      	bpl.n	80068bc <_printf_float+0x1a8>
 80068b8:	3302      	adds	r3, #2
 80068ba:	e7f4      	b.n	80068a6 <_printf_float+0x192>
 80068bc:	2301      	movs	r3, #1
 80068be:	e7f2      	b.n	80068a6 <_printf_float+0x192>
 80068c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068c6:	4299      	cmp	r1, r3
 80068c8:	db05      	blt.n	80068d6 <_printf_float+0x1c2>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	6121      	str	r1, [r4, #16]
 80068ce:	07d8      	lsls	r0, r3, #31
 80068d0:	d5ea      	bpl.n	80068a8 <_printf_float+0x194>
 80068d2:	1c4b      	adds	r3, r1, #1
 80068d4:	e7e7      	b.n	80068a6 <_printf_float+0x192>
 80068d6:	2900      	cmp	r1, #0
 80068d8:	bfd4      	ite	le
 80068da:	f1c1 0202 	rsble	r2, r1, #2
 80068de:	2201      	movgt	r2, #1
 80068e0:	4413      	add	r3, r2
 80068e2:	e7e0      	b.n	80068a6 <_printf_float+0x192>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	055a      	lsls	r2, r3, #21
 80068e8:	d407      	bmi.n	80068fa <_printf_float+0x1e6>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	4642      	mov	r2, r8
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	d12b      	bne.n	8006950 <_printf_float+0x23c>
 80068f8:	e767      	b.n	80067ca <_printf_float+0xb6>
 80068fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068fe:	f240 80dd 	bls.w	8006abc <_printf_float+0x3a8>
 8006902:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006906:	2200      	movs	r2, #0
 8006908:	2300      	movs	r3, #0
 800690a:	f7fa f8e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800690e:	2800      	cmp	r0, #0
 8006910:	d033      	beq.n	800697a <_printf_float+0x266>
 8006912:	4a37      	ldr	r2, [pc, #220]	@ (80069f0 <_printf_float+0x2dc>)
 8006914:	2301      	movs	r3, #1
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	f43f af54 	beq.w	80067ca <_printf_float+0xb6>
 8006922:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006926:	4543      	cmp	r3, r8
 8006928:	db02      	blt.n	8006930 <_printf_float+0x21c>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	07d8      	lsls	r0, r3, #31
 800692e:	d50f      	bpl.n	8006950 <_printf_float+0x23c>
 8006930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af45 	beq.w	80067ca <_printf_float+0xb6>
 8006940:	f04f 0900 	mov.w	r9, #0
 8006944:	f108 38ff 	add.w	r8, r8, #4294967295
 8006948:	f104 0a1a 	add.w	sl, r4, #26
 800694c:	45c8      	cmp	r8, r9
 800694e:	dc09      	bgt.n	8006964 <_printf_float+0x250>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	079b      	lsls	r3, r3, #30
 8006954:	f100 8103 	bmi.w	8006b5e <_printf_float+0x44a>
 8006958:	68e0      	ldr	r0, [r4, #12]
 800695a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800695c:	4298      	cmp	r0, r3
 800695e:	bfb8      	it	lt
 8006960:	4618      	movlt	r0, r3
 8006962:	e734      	b.n	80067ce <_printf_float+0xba>
 8006964:	2301      	movs	r3, #1
 8006966:	4652      	mov	r2, sl
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af2b 	beq.w	80067ca <_printf_float+0xb6>
 8006974:	f109 0901 	add.w	r9, r9, #1
 8006978:	e7e8      	b.n	800694c <_printf_float+0x238>
 800697a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	dc39      	bgt.n	80069f4 <_printf_float+0x2e0>
 8006980:	4a1b      	ldr	r2, [pc, #108]	@ (80069f0 <_printf_float+0x2dc>)
 8006982:	2301      	movs	r3, #1
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af1d 	beq.w	80067ca <_printf_float+0xb6>
 8006990:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006994:	ea59 0303 	orrs.w	r3, r9, r3
 8006998:	d102      	bne.n	80069a0 <_printf_float+0x28c>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	07d9      	lsls	r1, r3, #31
 800699e:	d5d7      	bpl.n	8006950 <_printf_float+0x23c>
 80069a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f af0d 	beq.w	80067ca <_printf_float+0xb6>
 80069b0:	f04f 0a00 	mov.w	sl, #0
 80069b4:	f104 0b1a 	add.w	fp, r4, #26
 80069b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ba:	425b      	negs	r3, r3
 80069bc:	4553      	cmp	r3, sl
 80069be:	dc01      	bgt.n	80069c4 <_printf_float+0x2b0>
 80069c0:	464b      	mov	r3, r9
 80069c2:	e793      	b.n	80068ec <_printf_float+0x1d8>
 80069c4:	2301      	movs	r3, #1
 80069c6:	465a      	mov	r2, fp
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	f43f aefb 	beq.w	80067ca <_printf_float+0xb6>
 80069d4:	f10a 0a01 	add.w	sl, sl, #1
 80069d8:	e7ee      	b.n	80069b8 <_printf_float+0x2a4>
 80069da:	bf00      	nop
 80069dc:	7fefffff 	.word	0x7fefffff
 80069e0:	08009414 	.word	0x08009414
 80069e4:	08009418 	.word	0x08009418
 80069e8:	0800941c 	.word	0x0800941c
 80069ec:	08009420 	.word	0x08009420
 80069f0:	08009424 	.word	0x08009424
 80069f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069fa:	4553      	cmp	r3, sl
 80069fc:	bfa8      	it	ge
 80069fe:	4653      	movge	r3, sl
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	4699      	mov	r9, r3
 8006a04:	dc36      	bgt.n	8006a74 <_printf_float+0x360>
 8006a06:	f04f 0b00 	mov.w	fp, #0
 8006a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a0e:	f104 021a 	add.w	r2, r4, #26
 8006a12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a14:	9306      	str	r3, [sp, #24]
 8006a16:	eba3 0309 	sub.w	r3, r3, r9
 8006a1a:	455b      	cmp	r3, fp
 8006a1c:	dc31      	bgt.n	8006a82 <_printf_float+0x36e>
 8006a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a20:	459a      	cmp	sl, r3
 8006a22:	dc3a      	bgt.n	8006a9a <_printf_float+0x386>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	07da      	lsls	r2, r3, #31
 8006a28:	d437      	bmi.n	8006a9a <_printf_float+0x386>
 8006a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a2c:	ebaa 0903 	sub.w	r9, sl, r3
 8006a30:	9b06      	ldr	r3, [sp, #24]
 8006a32:	ebaa 0303 	sub.w	r3, sl, r3
 8006a36:	4599      	cmp	r9, r3
 8006a38:	bfa8      	it	ge
 8006a3a:	4699      	movge	r9, r3
 8006a3c:	f1b9 0f00 	cmp.w	r9, #0
 8006a40:	dc33      	bgt.n	8006aaa <_printf_float+0x396>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a4a:	f104 0b1a 	add.w	fp, r4, #26
 8006a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a50:	ebaa 0303 	sub.w	r3, sl, r3
 8006a54:	eba3 0309 	sub.w	r3, r3, r9
 8006a58:	4543      	cmp	r3, r8
 8006a5a:	f77f af79 	ble.w	8006950 <_printf_float+0x23c>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	465a      	mov	r2, fp
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f aeae 	beq.w	80067ca <_printf_float+0xb6>
 8006a6e:	f108 0801 	add.w	r8, r8, #1
 8006a72:	e7ec      	b.n	8006a4e <_printf_float+0x33a>
 8006a74:	4642      	mov	r2, r8
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d1c2      	bne.n	8006a06 <_printf_float+0x2f2>
 8006a80:	e6a3      	b.n	80067ca <_printf_float+0xb6>
 8006a82:	2301      	movs	r3, #1
 8006a84:	4631      	mov	r1, r6
 8006a86:	4628      	mov	r0, r5
 8006a88:	9206      	str	r2, [sp, #24]
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	f43f ae9c 	beq.w	80067ca <_printf_float+0xb6>
 8006a92:	9a06      	ldr	r2, [sp, #24]
 8006a94:	f10b 0b01 	add.w	fp, fp, #1
 8006a98:	e7bb      	b.n	8006a12 <_printf_float+0x2fe>
 8006a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d1c0      	bne.n	8006a2a <_printf_float+0x316>
 8006aa8:	e68f      	b.n	80067ca <_printf_float+0xb6>
 8006aaa:	9a06      	ldr	r2, [sp, #24]
 8006aac:	464b      	mov	r3, r9
 8006aae:	4442      	add	r2, r8
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d1c3      	bne.n	8006a42 <_printf_float+0x32e>
 8006aba:	e686      	b.n	80067ca <_printf_float+0xb6>
 8006abc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ac0:	f1ba 0f01 	cmp.w	sl, #1
 8006ac4:	dc01      	bgt.n	8006aca <_printf_float+0x3b6>
 8006ac6:	07db      	lsls	r3, r3, #31
 8006ac8:	d536      	bpl.n	8006b38 <_printf_float+0x424>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4642      	mov	r2, r8
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	f43f ae78 	beq.w	80067ca <_printf_float+0xb6>
 8006ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	f43f ae70 	beq.w	80067ca <_printf_float+0xb6>
 8006aea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aee:	2200      	movs	r2, #0
 8006af0:	2300      	movs	r3, #0
 8006af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006af6:	f7f9 ffef 	bl	8000ad8 <__aeabi_dcmpeq>
 8006afa:	b9c0      	cbnz	r0, 8006b2e <_printf_float+0x41a>
 8006afc:	4653      	mov	r3, sl
 8006afe:	f108 0201 	add.w	r2, r8, #1
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d10c      	bne.n	8006b26 <_printf_float+0x412>
 8006b0c:	e65d      	b.n	80067ca <_printf_float+0xb6>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	465a      	mov	r2, fp
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f ae56 	beq.w	80067ca <_printf_float+0xb6>
 8006b1e:	f108 0801 	add.w	r8, r8, #1
 8006b22:	45d0      	cmp	r8, sl
 8006b24:	dbf3      	blt.n	8006b0e <_printf_float+0x3fa>
 8006b26:	464b      	mov	r3, r9
 8006b28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b2c:	e6df      	b.n	80068ee <_printf_float+0x1da>
 8006b2e:	f04f 0800 	mov.w	r8, #0
 8006b32:	f104 0b1a 	add.w	fp, r4, #26
 8006b36:	e7f4      	b.n	8006b22 <_printf_float+0x40e>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4642      	mov	r2, r8
 8006b3c:	e7e1      	b.n	8006b02 <_printf_float+0x3ee>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	464a      	mov	r2, r9
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	f43f ae3e 	beq.w	80067ca <_printf_float+0xb6>
 8006b4e:	f108 0801 	add.w	r8, r8, #1
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b56:	1a5b      	subs	r3, r3, r1
 8006b58:	4543      	cmp	r3, r8
 8006b5a:	dcf0      	bgt.n	8006b3e <_printf_float+0x42a>
 8006b5c:	e6fc      	b.n	8006958 <_printf_float+0x244>
 8006b5e:	f04f 0800 	mov.w	r8, #0
 8006b62:	f104 0919 	add.w	r9, r4, #25
 8006b66:	e7f4      	b.n	8006b52 <_printf_float+0x43e>

08006b68 <_printf_common>:
 8006b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	4616      	mov	r6, r2
 8006b6e:	4698      	mov	r8, r3
 8006b70:	688a      	ldr	r2, [r1, #8]
 8006b72:	690b      	ldr	r3, [r1, #16]
 8006b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	bfb8      	it	lt
 8006b7c:	4613      	movlt	r3, r2
 8006b7e:	6033      	str	r3, [r6, #0]
 8006b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b84:	4607      	mov	r7, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	b10a      	cbz	r2, 8006b8e <_printf_common+0x26>
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	6033      	str	r3, [r6, #0]
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	0699      	lsls	r1, r3, #26
 8006b92:	bf42      	ittt	mi
 8006b94:	6833      	ldrmi	r3, [r6, #0]
 8006b96:	3302      	addmi	r3, #2
 8006b98:	6033      	strmi	r3, [r6, #0]
 8006b9a:	6825      	ldr	r5, [r4, #0]
 8006b9c:	f015 0506 	ands.w	r5, r5, #6
 8006ba0:	d106      	bne.n	8006bb0 <_printf_common+0x48>
 8006ba2:	f104 0a19 	add.w	sl, r4, #25
 8006ba6:	68e3      	ldr	r3, [r4, #12]
 8006ba8:	6832      	ldr	r2, [r6, #0]
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	42ab      	cmp	r3, r5
 8006bae:	dc26      	bgt.n	8006bfe <_printf_common+0x96>
 8006bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bb4:	6822      	ldr	r2, [r4, #0]
 8006bb6:	3b00      	subs	r3, #0
 8006bb8:	bf18      	it	ne
 8006bba:	2301      	movne	r3, #1
 8006bbc:	0692      	lsls	r2, r2, #26
 8006bbe:	d42b      	bmi.n	8006c18 <_printf_common+0xb0>
 8006bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bc4:	4641      	mov	r1, r8
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	47c8      	blx	r9
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d01e      	beq.n	8006c0c <_printf_common+0xa4>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	6922      	ldr	r2, [r4, #16]
 8006bd2:	f003 0306 	and.w	r3, r3, #6
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	bf02      	ittt	eq
 8006bda:	68e5      	ldreq	r5, [r4, #12]
 8006bdc:	6833      	ldreq	r3, [r6, #0]
 8006bde:	1aed      	subeq	r5, r5, r3
 8006be0:	68a3      	ldr	r3, [r4, #8]
 8006be2:	bf0c      	ite	eq
 8006be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be8:	2500      	movne	r5, #0
 8006bea:	4293      	cmp	r3, r2
 8006bec:	bfc4      	itt	gt
 8006bee:	1a9b      	subgt	r3, r3, r2
 8006bf0:	18ed      	addgt	r5, r5, r3
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	341a      	adds	r4, #26
 8006bf6:	42b5      	cmp	r5, r6
 8006bf8:	d11a      	bne.n	8006c30 <_printf_common+0xc8>
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	e008      	b.n	8006c10 <_printf_common+0xa8>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4652      	mov	r2, sl
 8006c02:	4641      	mov	r1, r8
 8006c04:	4638      	mov	r0, r7
 8006c06:	47c8      	blx	r9
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d103      	bne.n	8006c14 <_printf_common+0xac>
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c14:	3501      	adds	r5, #1
 8006c16:	e7c6      	b.n	8006ba6 <_printf_common+0x3e>
 8006c18:	18e1      	adds	r1, r4, r3
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	2030      	movs	r0, #48	@ 0x30
 8006c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c22:	4422      	add	r2, r4
 8006c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c2c:	3302      	adds	r3, #2
 8006c2e:	e7c7      	b.n	8006bc0 <_printf_common+0x58>
 8006c30:	2301      	movs	r3, #1
 8006c32:	4622      	mov	r2, r4
 8006c34:	4641      	mov	r1, r8
 8006c36:	4638      	mov	r0, r7
 8006c38:	47c8      	blx	r9
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d0e6      	beq.n	8006c0c <_printf_common+0xa4>
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7d9      	b.n	8006bf6 <_printf_common+0x8e>
	...

08006c44 <_printf_i>:
 8006c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c48:	7e0f      	ldrb	r7, [r1, #24]
 8006c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c4c:	2f78      	cmp	r7, #120	@ 0x78
 8006c4e:	4691      	mov	r9, r2
 8006c50:	4680      	mov	r8, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	469a      	mov	sl, r3
 8006c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c5a:	d807      	bhi.n	8006c6c <_printf_i+0x28>
 8006c5c:	2f62      	cmp	r7, #98	@ 0x62
 8006c5e:	d80a      	bhi.n	8006c76 <_printf_i+0x32>
 8006c60:	2f00      	cmp	r7, #0
 8006c62:	f000 80d2 	beq.w	8006e0a <_printf_i+0x1c6>
 8006c66:	2f58      	cmp	r7, #88	@ 0x58
 8006c68:	f000 80b9 	beq.w	8006dde <_printf_i+0x19a>
 8006c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c74:	e03a      	b.n	8006cec <_printf_i+0xa8>
 8006c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c7a:	2b15      	cmp	r3, #21
 8006c7c:	d8f6      	bhi.n	8006c6c <_printf_i+0x28>
 8006c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8006c84 <_printf_i+0x40>)
 8006c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c84:	08006cdd 	.word	0x08006cdd
 8006c88:	08006cf1 	.word	0x08006cf1
 8006c8c:	08006c6d 	.word	0x08006c6d
 8006c90:	08006c6d 	.word	0x08006c6d
 8006c94:	08006c6d 	.word	0x08006c6d
 8006c98:	08006c6d 	.word	0x08006c6d
 8006c9c:	08006cf1 	.word	0x08006cf1
 8006ca0:	08006c6d 	.word	0x08006c6d
 8006ca4:	08006c6d 	.word	0x08006c6d
 8006ca8:	08006c6d 	.word	0x08006c6d
 8006cac:	08006c6d 	.word	0x08006c6d
 8006cb0:	08006df1 	.word	0x08006df1
 8006cb4:	08006d1b 	.word	0x08006d1b
 8006cb8:	08006dab 	.word	0x08006dab
 8006cbc:	08006c6d 	.word	0x08006c6d
 8006cc0:	08006c6d 	.word	0x08006c6d
 8006cc4:	08006e13 	.word	0x08006e13
 8006cc8:	08006c6d 	.word	0x08006c6d
 8006ccc:	08006d1b 	.word	0x08006d1b
 8006cd0:	08006c6d 	.word	0x08006c6d
 8006cd4:	08006c6d 	.word	0x08006c6d
 8006cd8:	08006db3 	.word	0x08006db3
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	1d1a      	adds	r2, r3, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6032      	str	r2, [r6, #0]
 8006ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cec:	2301      	movs	r3, #1
 8006cee:	e09d      	b.n	8006e2c <_printf_i+0x1e8>
 8006cf0:	6833      	ldr	r3, [r6, #0]
 8006cf2:	6820      	ldr	r0, [r4, #0]
 8006cf4:	1d19      	adds	r1, r3, #4
 8006cf6:	6031      	str	r1, [r6, #0]
 8006cf8:	0606      	lsls	r6, r0, #24
 8006cfa:	d501      	bpl.n	8006d00 <_printf_i+0xbc>
 8006cfc:	681d      	ldr	r5, [r3, #0]
 8006cfe:	e003      	b.n	8006d08 <_printf_i+0xc4>
 8006d00:	0645      	lsls	r5, r0, #25
 8006d02:	d5fb      	bpl.n	8006cfc <_printf_i+0xb8>
 8006d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	da03      	bge.n	8006d14 <_printf_i+0xd0>
 8006d0c:	232d      	movs	r3, #45	@ 0x2d
 8006d0e:	426d      	negs	r5, r5
 8006d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d14:	4859      	ldr	r0, [pc, #356]	@ (8006e7c <_printf_i+0x238>)
 8006d16:	230a      	movs	r3, #10
 8006d18:	e011      	b.n	8006d3e <_printf_i+0xfa>
 8006d1a:	6821      	ldr	r1, [r4, #0]
 8006d1c:	6833      	ldr	r3, [r6, #0]
 8006d1e:	0608      	lsls	r0, r1, #24
 8006d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d24:	d402      	bmi.n	8006d2c <_printf_i+0xe8>
 8006d26:	0649      	lsls	r1, r1, #25
 8006d28:	bf48      	it	mi
 8006d2a:	b2ad      	uxthmi	r5, r5
 8006d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d2e:	4853      	ldr	r0, [pc, #332]	@ (8006e7c <_printf_i+0x238>)
 8006d30:	6033      	str	r3, [r6, #0]
 8006d32:	bf14      	ite	ne
 8006d34:	230a      	movne	r3, #10
 8006d36:	2308      	moveq	r3, #8
 8006d38:	2100      	movs	r1, #0
 8006d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d3e:	6866      	ldr	r6, [r4, #4]
 8006d40:	60a6      	str	r6, [r4, #8]
 8006d42:	2e00      	cmp	r6, #0
 8006d44:	bfa2      	ittt	ge
 8006d46:	6821      	ldrge	r1, [r4, #0]
 8006d48:	f021 0104 	bicge.w	r1, r1, #4
 8006d4c:	6021      	strge	r1, [r4, #0]
 8006d4e:	b90d      	cbnz	r5, 8006d54 <_printf_i+0x110>
 8006d50:	2e00      	cmp	r6, #0
 8006d52:	d04b      	beq.n	8006dec <_printf_i+0x1a8>
 8006d54:	4616      	mov	r6, r2
 8006d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8006d5e:	5dc7      	ldrb	r7, [r0, r7]
 8006d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d64:	462f      	mov	r7, r5
 8006d66:	42bb      	cmp	r3, r7
 8006d68:	460d      	mov	r5, r1
 8006d6a:	d9f4      	bls.n	8006d56 <_printf_i+0x112>
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d10b      	bne.n	8006d88 <_printf_i+0x144>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	07df      	lsls	r7, r3, #31
 8006d74:	d508      	bpl.n	8006d88 <_printf_i+0x144>
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	6861      	ldr	r1, [r4, #4]
 8006d7a:	4299      	cmp	r1, r3
 8006d7c:	bfde      	ittt	le
 8006d7e:	2330      	movle	r3, #48	@ 0x30
 8006d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d88:	1b92      	subs	r2, r2, r6
 8006d8a:	6122      	str	r2, [r4, #16]
 8006d8c:	f8cd a000 	str.w	sl, [sp]
 8006d90:	464b      	mov	r3, r9
 8006d92:	aa03      	add	r2, sp, #12
 8006d94:	4621      	mov	r1, r4
 8006d96:	4640      	mov	r0, r8
 8006d98:	f7ff fee6 	bl	8006b68 <_printf_common>
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d14a      	bne.n	8006e36 <_printf_i+0x1f2>
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	b004      	add	sp, #16
 8006da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	f043 0320 	orr.w	r3, r3, #32
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	4833      	ldr	r0, [pc, #204]	@ (8006e80 <_printf_i+0x23c>)
 8006db4:	2778      	movs	r7, #120	@ 0x78
 8006db6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	6831      	ldr	r1, [r6, #0]
 8006dbe:	061f      	lsls	r7, r3, #24
 8006dc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dc4:	d402      	bmi.n	8006dcc <_printf_i+0x188>
 8006dc6:	065f      	lsls	r7, r3, #25
 8006dc8:	bf48      	it	mi
 8006dca:	b2ad      	uxthmi	r5, r5
 8006dcc:	6031      	str	r1, [r6, #0]
 8006dce:	07d9      	lsls	r1, r3, #31
 8006dd0:	bf44      	itt	mi
 8006dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd6:	6023      	strmi	r3, [r4, #0]
 8006dd8:	b11d      	cbz	r5, 8006de2 <_printf_i+0x19e>
 8006dda:	2310      	movs	r3, #16
 8006ddc:	e7ac      	b.n	8006d38 <_printf_i+0xf4>
 8006dde:	4827      	ldr	r0, [pc, #156]	@ (8006e7c <_printf_i+0x238>)
 8006de0:	e7e9      	b.n	8006db6 <_printf_i+0x172>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	f023 0320 	bic.w	r3, r3, #32
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	e7f6      	b.n	8006dda <_printf_i+0x196>
 8006dec:	4616      	mov	r6, r2
 8006dee:	e7bd      	b.n	8006d6c <_printf_i+0x128>
 8006df0:	6833      	ldr	r3, [r6, #0]
 8006df2:	6825      	ldr	r5, [r4, #0]
 8006df4:	6961      	ldr	r1, [r4, #20]
 8006df6:	1d18      	adds	r0, r3, #4
 8006df8:	6030      	str	r0, [r6, #0]
 8006dfa:	062e      	lsls	r6, r5, #24
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	d501      	bpl.n	8006e04 <_printf_i+0x1c0>
 8006e00:	6019      	str	r1, [r3, #0]
 8006e02:	e002      	b.n	8006e0a <_printf_i+0x1c6>
 8006e04:	0668      	lsls	r0, r5, #25
 8006e06:	d5fb      	bpl.n	8006e00 <_printf_i+0x1bc>
 8006e08:	8019      	strh	r1, [r3, #0]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	6123      	str	r3, [r4, #16]
 8006e0e:	4616      	mov	r6, r2
 8006e10:	e7bc      	b.n	8006d8c <_printf_i+0x148>
 8006e12:	6833      	ldr	r3, [r6, #0]
 8006e14:	1d1a      	adds	r2, r3, #4
 8006e16:	6032      	str	r2, [r6, #0]
 8006e18:	681e      	ldr	r6, [r3, #0]
 8006e1a:	6862      	ldr	r2, [r4, #4]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f7f9 f9de 	bl	80001e0 <memchr>
 8006e24:	b108      	cbz	r0, 8006e2a <_printf_i+0x1e6>
 8006e26:	1b80      	subs	r0, r0, r6
 8006e28:	6060      	str	r0, [r4, #4]
 8006e2a:	6863      	ldr	r3, [r4, #4]
 8006e2c:	6123      	str	r3, [r4, #16]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e34:	e7aa      	b.n	8006d8c <_printf_i+0x148>
 8006e36:	6923      	ldr	r3, [r4, #16]
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	47d0      	blx	sl
 8006e40:	3001      	adds	r0, #1
 8006e42:	d0ad      	beq.n	8006da0 <_printf_i+0x15c>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	079b      	lsls	r3, r3, #30
 8006e48:	d413      	bmi.n	8006e72 <_printf_i+0x22e>
 8006e4a:	68e0      	ldr	r0, [r4, #12]
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	4298      	cmp	r0, r3
 8006e50:	bfb8      	it	lt
 8006e52:	4618      	movlt	r0, r3
 8006e54:	e7a6      	b.n	8006da4 <_printf_i+0x160>
 8006e56:	2301      	movs	r3, #1
 8006e58:	4632      	mov	r2, r6
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	47d0      	blx	sl
 8006e60:	3001      	adds	r0, #1
 8006e62:	d09d      	beq.n	8006da0 <_printf_i+0x15c>
 8006e64:	3501      	adds	r5, #1
 8006e66:	68e3      	ldr	r3, [r4, #12]
 8006e68:	9903      	ldr	r1, [sp, #12]
 8006e6a:	1a5b      	subs	r3, r3, r1
 8006e6c:	42ab      	cmp	r3, r5
 8006e6e:	dcf2      	bgt.n	8006e56 <_printf_i+0x212>
 8006e70:	e7eb      	b.n	8006e4a <_printf_i+0x206>
 8006e72:	2500      	movs	r5, #0
 8006e74:	f104 0619 	add.w	r6, r4, #25
 8006e78:	e7f5      	b.n	8006e66 <_printf_i+0x222>
 8006e7a:	bf00      	nop
 8006e7c:	08009426 	.word	0x08009426
 8006e80:	08009437 	.word	0x08009437

08006e84 <std>:
 8006e84:	2300      	movs	r3, #0
 8006e86:	b510      	push	{r4, lr}
 8006e88:	4604      	mov	r4, r0
 8006e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e92:	6083      	str	r3, [r0, #8]
 8006e94:	8181      	strh	r1, [r0, #12]
 8006e96:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e98:	81c2      	strh	r2, [r0, #14]
 8006e9a:	6183      	str	r3, [r0, #24]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	305c      	adds	r0, #92	@ 0x5c
 8006ea2:	f000 f914 	bl	80070ce <memset>
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <std+0x58>)
 8006ea8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <std+0x5c>)
 8006eac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006eae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <std+0x60>)
 8006eb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <std+0x64>)
 8006eb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006eec <std+0x68>)
 8006eb8:	6224      	str	r4, [r4, #32]
 8006eba:	429c      	cmp	r4, r3
 8006ebc:	d006      	beq.n	8006ecc <std+0x48>
 8006ebe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ec2:	4294      	cmp	r4, r2
 8006ec4:	d002      	beq.n	8006ecc <std+0x48>
 8006ec6:	33d0      	adds	r3, #208	@ 0xd0
 8006ec8:	429c      	cmp	r4, r3
 8006eca:	d105      	bne.n	8006ed8 <std+0x54>
 8006ecc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed4:	f000 b9ce 	b.w	8007274 <__retarget_lock_init_recursive>
 8006ed8:	bd10      	pop	{r4, pc}
 8006eda:	bf00      	nop
 8006edc:	08007049 	.word	0x08007049
 8006ee0:	0800706b 	.word	0x0800706b
 8006ee4:	080070a3 	.word	0x080070a3
 8006ee8:	080070c7 	.word	0x080070c7
 8006eec:	20004354 	.word	0x20004354

08006ef0 <stdio_exit_handler>:
 8006ef0:	4a02      	ldr	r2, [pc, #8]	@ (8006efc <stdio_exit_handler+0xc>)
 8006ef2:	4903      	ldr	r1, [pc, #12]	@ (8006f00 <stdio_exit_handler+0x10>)
 8006ef4:	4803      	ldr	r0, [pc, #12]	@ (8006f04 <stdio_exit_handler+0x14>)
 8006ef6:	f000 b869 	b.w	8006fcc <_fwalk_sglue>
 8006efa:	bf00      	nop
 8006efc:	20000010 	.word	0x20000010
 8006f00:	08008bed 	.word	0x08008bed
 8006f04:	20000020 	.word	0x20000020

08006f08 <cleanup_stdio>:
 8006f08:	6841      	ldr	r1, [r0, #4]
 8006f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <cleanup_stdio+0x34>)
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	4604      	mov	r4, r0
 8006f12:	d001      	beq.n	8006f18 <cleanup_stdio+0x10>
 8006f14:	f001 fe6a 	bl	8008bec <_fflush_r>
 8006f18:	68a1      	ldr	r1, [r4, #8]
 8006f1a:	4b09      	ldr	r3, [pc, #36]	@ (8006f40 <cleanup_stdio+0x38>)
 8006f1c:	4299      	cmp	r1, r3
 8006f1e:	d002      	beq.n	8006f26 <cleanup_stdio+0x1e>
 8006f20:	4620      	mov	r0, r4
 8006f22:	f001 fe63 	bl	8008bec <_fflush_r>
 8006f26:	68e1      	ldr	r1, [r4, #12]
 8006f28:	4b06      	ldr	r3, [pc, #24]	@ (8006f44 <cleanup_stdio+0x3c>)
 8006f2a:	4299      	cmp	r1, r3
 8006f2c:	d004      	beq.n	8006f38 <cleanup_stdio+0x30>
 8006f2e:	4620      	mov	r0, r4
 8006f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f34:	f001 be5a 	b.w	8008bec <_fflush_r>
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20004354 	.word	0x20004354
 8006f40:	200043bc 	.word	0x200043bc
 8006f44:	20004424 	.word	0x20004424

08006f48 <global_stdio_init.part.0>:
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <global_stdio_init.part.0+0x30>)
 8006f4c:	4c0b      	ldr	r4, [pc, #44]	@ (8006f7c <global_stdio_init.part.0+0x34>)
 8006f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f80 <global_stdio_init.part.0+0x38>)
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	4620      	mov	r0, r4
 8006f54:	2200      	movs	r2, #0
 8006f56:	2104      	movs	r1, #4
 8006f58:	f7ff ff94 	bl	8006e84 <std>
 8006f5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f60:	2201      	movs	r2, #1
 8006f62:	2109      	movs	r1, #9
 8006f64:	f7ff ff8e 	bl	8006e84 <std>
 8006f68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f72:	2112      	movs	r1, #18
 8006f74:	f7ff bf86 	b.w	8006e84 <std>
 8006f78:	2000448c 	.word	0x2000448c
 8006f7c:	20004354 	.word	0x20004354
 8006f80:	08006ef1 	.word	0x08006ef1

08006f84 <__sfp_lock_acquire>:
 8006f84:	4801      	ldr	r0, [pc, #4]	@ (8006f8c <__sfp_lock_acquire+0x8>)
 8006f86:	f000 b976 	b.w	8007276 <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	20004495 	.word	0x20004495

08006f90 <__sfp_lock_release>:
 8006f90:	4801      	ldr	r0, [pc, #4]	@ (8006f98 <__sfp_lock_release+0x8>)
 8006f92:	f000 b971 	b.w	8007278 <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	20004495 	.word	0x20004495

08006f9c <__sinit>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	f7ff fff0 	bl	8006f84 <__sfp_lock_acquire>
 8006fa4:	6a23      	ldr	r3, [r4, #32]
 8006fa6:	b11b      	cbz	r3, 8006fb0 <__sinit+0x14>
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f7ff bff0 	b.w	8006f90 <__sfp_lock_release>
 8006fb0:	4b04      	ldr	r3, [pc, #16]	@ (8006fc4 <__sinit+0x28>)
 8006fb2:	6223      	str	r3, [r4, #32]
 8006fb4:	4b04      	ldr	r3, [pc, #16]	@ (8006fc8 <__sinit+0x2c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f5      	bne.n	8006fa8 <__sinit+0xc>
 8006fbc:	f7ff ffc4 	bl	8006f48 <global_stdio_init.part.0>
 8006fc0:	e7f2      	b.n	8006fa8 <__sinit+0xc>
 8006fc2:	bf00      	nop
 8006fc4:	08006f09 	.word	0x08006f09
 8006fc8:	2000448c 	.word	0x2000448c

08006fcc <_fwalk_sglue>:
 8006fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	4688      	mov	r8, r1
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	2600      	movs	r6, #0
 8006fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8006fe0:	d505      	bpl.n	8006fee <_fwalk_sglue+0x22>
 8006fe2:	6824      	ldr	r4, [r4, #0]
 8006fe4:	2c00      	cmp	r4, #0
 8006fe6:	d1f7      	bne.n	8006fd8 <_fwalk_sglue+0xc>
 8006fe8:	4630      	mov	r0, r6
 8006fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fee:	89ab      	ldrh	r3, [r5, #12]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d907      	bls.n	8007004 <_fwalk_sglue+0x38>
 8006ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	d003      	beq.n	8007004 <_fwalk_sglue+0x38>
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	4638      	mov	r0, r7
 8007000:	47c0      	blx	r8
 8007002:	4306      	orrs	r6, r0
 8007004:	3568      	adds	r5, #104	@ 0x68
 8007006:	e7e9      	b.n	8006fdc <_fwalk_sglue+0x10>

08007008 <siprintf>:
 8007008:	b40e      	push	{r1, r2, r3}
 800700a:	b500      	push	{lr}
 800700c:	b09c      	sub	sp, #112	@ 0x70
 800700e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007010:	9002      	str	r0, [sp, #8]
 8007012:	9006      	str	r0, [sp, #24]
 8007014:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007018:	4809      	ldr	r0, [pc, #36]	@ (8007040 <siprintf+0x38>)
 800701a:	9107      	str	r1, [sp, #28]
 800701c:	9104      	str	r1, [sp, #16]
 800701e:	4909      	ldr	r1, [pc, #36]	@ (8007044 <siprintf+0x3c>)
 8007020:	f853 2b04 	ldr.w	r2, [r3], #4
 8007024:	9105      	str	r1, [sp, #20]
 8007026:	6800      	ldr	r0, [r0, #0]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	a902      	add	r1, sp, #8
 800702c:	f001 fc5e 	bl	80088ec <_svfiprintf_r>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	b01c      	add	sp, #112	@ 0x70
 8007038:	f85d eb04 	ldr.w	lr, [sp], #4
 800703c:	b003      	add	sp, #12
 800703e:	4770      	bx	lr
 8007040:	2000001c 	.word	0x2000001c
 8007044:	ffff0208 	.word	0xffff0208

08007048 <__sread>:
 8007048:	b510      	push	{r4, lr}
 800704a:	460c      	mov	r4, r1
 800704c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007050:	f000 f8c2 	bl	80071d8 <_read_r>
 8007054:	2800      	cmp	r0, #0
 8007056:	bfab      	itete	ge
 8007058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800705a:	89a3      	ldrhlt	r3, [r4, #12]
 800705c:	181b      	addge	r3, r3, r0
 800705e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007062:	bfac      	ite	ge
 8007064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007066:	81a3      	strhlt	r3, [r4, #12]
 8007068:	bd10      	pop	{r4, pc}

0800706a <__swrite>:
 800706a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706e:	461f      	mov	r7, r3
 8007070:	898b      	ldrh	r3, [r1, #12]
 8007072:	05db      	lsls	r3, r3, #23
 8007074:	4605      	mov	r5, r0
 8007076:	460c      	mov	r4, r1
 8007078:	4616      	mov	r6, r2
 800707a:	d505      	bpl.n	8007088 <__swrite+0x1e>
 800707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007080:	2302      	movs	r3, #2
 8007082:	2200      	movs	r2, #0
 8007084:	f000 f896 	bl	80071b4 <_lseek_r>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800708e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	4632      	mov	r2, r6
 8007096:	463b      	mov	r3, r7
 8007098:	4628      	mov	r0, r5
 800709a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800709e:	f000 b8ad 	b.w	80071fc <_write_r>

080070a2 <__sseek>:
 80070a2:	b510      	push	{r4, lr}
 80070a4:	460c      	mov	r4, r1
 80070a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070aa:	f000 f883 	bl	80071b4 <_lseek_r>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	bf15      	itete	ne
 80070b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070be:	81a3      	strheq	r3, [r4, #12]
 80070c0:	bf18      	it	ne
 80070c2:	81a3      	strhne	r3, [r4, #12]
 80070c4:	bd10      	pop	{r4, pc}

080070c6 <__sclose>:
 80070c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ca:	f000 b80d 	b.w	80070e8 <_close_r>

080070ce <memset>:
 80070ce:	4402      	add	r2, r0
 80070d0:	4603      	mov	r3, r0
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d100      	bne.n	80070d8 <memset+0xa>
 80070d6:	4770      	bx	lr
 80070d8:	f803 1b01 	strb.w	r1, [r3], #1
 80070dc:	e7f9      	b.n	80070d2 <memset+0x4>
	...

080070e0 <_localeconv_r>:
 80070e0:	4800      	ldr	r0, [pc, #0]	@ (80070e4 <_localeconv_r+0x4>)
 80070e2:	4770      	bx	lr
 80070e4:	2000015c 	.word	0x2000015c

080070e8 <_close_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d06      	ldr	r5, [pc, #24]	@ (8007104 <_close_r+0x1c>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	f7fa fd40 	bl	8001b78 <_close>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_close_r+0x1a>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_close_r+0x1a>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	20004490 	.word	0x20004490

08007108 <_reclaim_reent>:
 8007108:	4b29      	ldr	r3, [pc, #164]	@ (80071b0 <_reclaim_reent+0xa8>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4283      	cmp	r3, r0
 800710e:	b570      	push	{r4, r5, r6, lr}
 8007110:	4604      	mov	r4, r0
 8007112:	d04b      	beq.n	80071ac <_reclaim_reent+0xa4>
 8007114:	69c3      	ldr	r3, [r0, #28]
 8007116:	b1ab      	cbz	r3, 8007144 <_reclaim_reent+0x3c>
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	b16b      	cbz	r3, 8007138 <_reclaim_reent+0x30>
 800711c:	2500      	movs	r5, #0
 800711e:	69e3      	ldr	r3, [r4, #28]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	5959      	ldr	r1, [r3, r5]
 8007124:	2900      	cmp	r1, #0
 8007126:	d13b      	bne.n	80071a0 <_reclaim_reent+0x98>
 8007128:	3504      	adds	r5, #4
 800712a:	2d80      	cmp	r5, #128	@ 0x80
 800712c:	d1f7      	bne.n	800711e <_reclaim_reent+0x16>
 800712e:	69e3      	ldr	r3, [r4, #28]
 8007130:	4620      	mov	r0, r4
 8007132:	68d9      	ldr	r1, [r3, #12]
 8007134:	f000 fefc 	bl	8007f30 <_free_r>
 8007138:	69e3      	ldr	r3, [r4, #28]
 800713a:	6819      	ldr	r1, [r3, #0]
 800713c:	b111      	cbz	r1, 8007144 <_reclaim_reent+0x3c>
 800713e:	4620      	mov	r0, r4
 8007140:	f000 fef6 	bl	8007f30 <_free_r>
 8007144:	6961      	ldr	r1, [r4, #20]
 8007146:	b111      	cbz	r1, 800714e <_reclaim_reent+0x46>
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fef1 	bl	8007f30 <_free_r>
 800714e:	69e1      	ldr	r1, [r4, #28]
 8007150:	b111      	cbz	r1, 8007158 <_reclaim_reent+0x50>
 8007152:	4620      	mov	r0, r4
 8007154:	f000 feec 	bl	8007f30 <_free_r>
 8007158:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800715a:	b111      	cbz	r1, 8007162 <_reclaim_reent+0x5a>
 800715c:	4620      	mov	r0, r4
 800715e:	f000 fee7 	bl	8007f30 <_free_r>
 8007162:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007164:	b111      	cbz	r1, 800716c <_reclaim_reent+0x64>
 8007166:	4620      	mov	r0, r4
 8007168:	f000 fee2 	bl	8007f30 <_free_r>
 800716c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800716e:	b111      	cbz	r1, 8007176 <_reclaim_reent+0x6e>
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fedd 	bl	8007f30 <_free_r>
 8007176:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007178:	b111      	cbz	r1, 8007180 <_reclaim_reent+0x78>
 800717a:	4620      	mov	r0, r4
 800717c:	f000 fed8 	bl	8007f30 <_free_r>
 8007180:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007182:	b111      	cbz	r1, 800718a <_reclaim_reent+0x82>
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fed3 	bl	8007f30 <_free_r>
 800718a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800718c:	b111      	cbz	r1, 8007194 <_reclaim_reent+0x8c>
 800718e:	4620      	mov	r0, r4
 8007190:	f000 fece 	bl	8007f30 <_free_r>
 8007194:	6a23      	ldr	r3, [r4, #32]
 8007196:	b14b      	cbz	r3, 80071ac <_reclaim_reent+0xa4>
 8007198:	4620      	mov	r0, r4
 800719a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800719e:	4718      	bx	r3
 80071a0:	680e      	ldr	r6, [r1, #0]
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 fec4 	bl	8007f30 <_free_r>
 80071a8:	4631      	mov	r1, r6
 80071aa:	e7bb      	b.n	8007124 <_reclaim_reent+0x1c>
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
 80071ae:	bf00      	nop
 80071b0:	2000001c 	.word	0x2000001c

080071b4 <_lseek_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d07      	ldr	r5, [pc, #28]	@ (80071d4 <_lseek_r+0x20>)
 80071b8:	4604      	mov	r4, r0
 80071ba:	4608      	mov	r0, r1
 80071bc:	4611      	mov	r1, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	602a      	str	r2, [r5, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f7fa fcff 	bl	8001bc6 <_lseek>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_lseek_r+0x1e>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_lseek_r+0x1e>
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	20004490 	.word	0x20004490

080071d8 <_read_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4d07      	ldr	r5, [pc, #28]	@ (80071f8 <_read_r+0x20>)
 80071dc:	4604      	mov	r4, r0
 80071de:	4608      	mov	r0, r1
 80071e0:	4611      	mov	r1, r2
 80071e2:	2200      	movs	r2, #0
 80071e4:	602a      	str	r2, [r5, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f7fa fc8d 	bl	8001b06 <_read>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_read_r+0x1e>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_read_r+0x1e>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	20004490 	.word	0x20004490

080071fc <_write_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d07      	ldr	r5, [pc, #28]	@ (800721c <_write_r+0x20>)
 8007200:	4604      	mov	r4, r0
 8007202:	4608      	mov	r0, r1
 8007204:	4611      	mov	r1, r2
 8007206:	2200      	movs	r2, #0
 8007208:	602a      	str	r2, [r5, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	f7fa fc98 	bl	8001b40 <_write>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_write_r+0x1e>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_write_r+0x1e>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	20004490 	.word	0x20004490

08007220 <__errno>:
 8007220:	4b01      	ldr	r3, [pc, #4]	@ (8007228 <__errno+0x8>)
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	2000001c 	.word	0x2000001c

0800722c <__libc_init_array>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	4d0d      	ldr	r5, [pc, #52]	@ (8007264 <__libc_init_array+0x38>)
 8007230:	4c0d      	ldr	r4, [pc, #52]	@ (8007268 <__libc_init_array+0x3c>)
 8007232:	1b64      	subs	r4, r4, r5
 8007234:	10a4      	asrs	r4, r4, #2
 8007236:	2600      	movs	r6, #0
 8007238:	42a6      	cmp	r6, r4
 800723a:	d109      	bne.n	8007250 <__libc_init_array+0x24>
 800723c:	4d0b      	ldr	r5, [pc, #44]	@ (800726c <__libc_init_array+0x40>)
 800723e:	4c0c      	ldr	r4, [pc, #48]	@ (8007270 <__libc_init_array+0x44>)
 8007240:	f002 f864 	bl	800930c <_init>
 8007244:	1b64      	subs	r4, r4, r5
 8007246:	10a4      	asrs	r4, r4, #2
 8007248:	2600      	movs	r6, #0
 800724a:	42a6      	cmp	r6, r4
 800724c:	d105      	bne.n	800725a <__libc_init_array+0x2e>
 800724e:	bd70      	pop	{r4, r5, r6, pc}
 8007250:	f855 3b04 	ldr.w	r3, [r5], #4
 8007254:	4798      	blx	r3
 8007256:	3601      	adds	r6, #1
 8007258:	e7ee      	b.n	8007238 <__libc_init_array+0xc>
 800725a:	f855 3b04 	ldr.w	r3, [r5], #4
 800725e:	4798      	blx	r3
 8007260:	3601      	adds	r6, #1
 8007262:	e7f2      	b.n	800724a <__libc_init_array+0x1e>
 8007264:	08009790 	.word	0x08009790
 8007268:	08009790 	.word	0x08009790
 800726c:	08009790 	.word	0x08009790
 8007270:	08009794 	.word	0x08009794

08007274 <__retarget_lock_init_recursive>:
 8007274:	4770      	bx	lr

08007276 <__retarget_lock_acquire_recursive>:
 8007276:	4770      	bx	lr

08007278 <__retarget_lock_release_recursive>:
 8007278:	4770      	bx	lr

0800727a <memcpy>:
 800727a:	440a      	add	r2, r1
 800727c:	4291      	cmp	r1, r2
 800727e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007282:	d100      	bne.n	8007286 <memcpy+0xc>
 8007284:	4770      	bx	lr
 8007286:	b510      	push	{r4, lr}
 8007288:	f811 4b01 	ldrb.w	r4, [r1], #1
 800728c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007290:	4291      	cmp	r1, r2
 8007292:	d1f9      	bne.n	8007288 <memcpy+0xe>
 8007294:	bd10      	pop	{r4, pc}

08007296 <quorem>:
 8007296:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729a:	6903      	ldr	r3, [r0, #16]
 800729c:	690c      	ldr	r4, [r1, #16]
 800729e:	42a3      	cmp	r3, r4
 80072a0:	4607      	mov	r7, r0
 80072a2:	db7e      	blt.n	80073a2 <quorem+0x10c>
 80072a4:	3c01      	subs	r4, #1
 80072a6:	f101 0814 	add.w	r8, r1, #20
 80072aa:	00a3      	lsls	r3, r4, #2
 80072ac:	f100 0514 	add.w	r5, r0, #20
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072c0:	3301      	adds	r3, #1
 80072c2:	429a      	cmp	r2, r3
 80072c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80072cc:	d32e      	bcc.n	800732c <quorem+0x96>
 80072ce:	f04f 0a00 	mov.w	sl, #0
 80072d2:	46c4      	mov	ip, r8
 80072d4:	46ae      	mov	lr, r5
 80072d6:	46d3      	mov	fp, sl
 80072d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072dc:	b298      	uxth	r0, r3
 80072de:	fb06 a000 	mla	r0, r6, r0, sl
 80072e2:	0c02      	lsrs	r2, r0, #16
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	fb06 2303 	mla	r3, r6, r3, r2
 80072ea:	f8de 2000 	ldr.w	r2, [lr]
 80072ee:	b280      	uxth	r0, r0
 80072f0:	b292      	uxth	r2, r2
 80072f2:	1a12      	subs	r2, r2, r0
 80072f4:	445a      	add	r2, fp
 80072f6:	f8de 0000 	ldr.w	r0, [lr]
 80072fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007304:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007308:	b292      	uxth	r2, r2
 800730a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800730e:	45e1      	cmp	r9, ip
 8007310:	f84e 2b04 	str.w	r2, [lr], #4
 8007314:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007318:	d2de      	bcs.n	80072d8 <quorem+0x42>
 800731a:	9b00      	ldr	r3, [sp, #0]
 800731c:	58eb      	ldr	r3, [r5, r3]
 800731e:	b92b      	cbnz	r3, 800732c <quorem+0x96>
 8007320:	9b01      	ldr	r3, [sp, #4]
 8007322:	3b04      	subs	r3, #4
 8007324:	429d      	cmp	r5, r3
 8007326:	461a      	mov	r2, r3
 8007328:	d32f      	bcc.n	800738a <quorem+0xf4>
 800732a:	613c      	str	r4, [r7, #16]
 800732c:	4638      	mov	r0, r7
 800732e:	f001 f979 	bl	8008624 <__mcmp>
 8007332:	2800      	cmp	r0, #0
 8007334:	db25      	blt.n	8007382 <quorem+0xec>
 8007336:	4629      	mov	r1, r5
 8007338:	2000      	movs	r0, #0
 800733a:	f858 2b04 	ldr.w	r2, [r8], #4
 800733e:	f8d1 c000 	ldr.w	ip, [r1]
 8007342:	fa1f fe82 	uxth.w	lr, r2
 8007346:	fa1f f38c 	uxth.w	r3, ip
 800734a:	eba3 030e 	sub.w	r3, r3, lr
 800734e:	4403      	add	r3, r0
 8007350:	0c12      	lsrs	r2, r2, #16
 8007352:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007356:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800735a:	b29b      	uxth	r3, r3
 800735c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007360:	45c1      	cmp	r9, r8
 8007362:	f841 3b04 	str.w	r3, [r1], #4
 8007366:	ea4f 4022 	mov.w	r0, r2, asr #16
 800736a:	d2e6      	bcs.n	800733a <quorem+0xa4>
 800736c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007370:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007374:	b922      	cbnz	r2, 8007380 <quorem+0xea>
 8007376:	3b04      	subs	r3, #4
 8007378:	429d      	cmp	r5, r3
 800737a:	461a      	mov	r2, r3
 800737c:	d30b      	bcc.n	8007396 <quorem+0x100>
 800737e:	613c      	str	r4, [r7, #16]
 8007380:	3601      	adds	r6, #1
 8007382:	4630      	mov	r0, r6
 8007384:	b003      	add	sp, #12
 8007386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	3b04      	subs	r3, #4
 800738e:	2a00      	cmp	r2, #0
 8007390:	d1cb      	bne.n	800732a <quorem+0x94>
 8007392:	3c01      	subs	r4, #1
 8007394:	e7c6      	b.n	8007324 <quorem+0x8e>
 8007396:	6812      	ldr	r2, [r2, #0]
 8007398:	3b04      	subs	r3, #4
 800739a:	2a00      	cmp	r2, #0
 800739c:	d1ef      	bne.n	800737e <quorem+0xe8>
 800739e:	3c01      	subs	r4, #1
 80073a0:	e7ea      	b.n	8007378 <quorem+0xe2>
 80073a2:	2000      	movs	r0, #0
 80073a4:	e7ee      	b.n	8007384 <quorem+0xee>
	...

080073a8 <_dtoa_r>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	69c7      	ldr	r7, [r0, #28]
 80073ae:	b099      	sub	sp, #100	@ 0x64
 80073b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073b4:	ec55 4b10 	vmov	r4, r5, d0
 80073b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80073ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80073bc:	4683      	mov	fp, r0
 80073be:	920e      	str	r2, [sp, #56]	@ 0x38
 80073c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073c2:	b97f      	cbnz	r7, 80073e4 <_dtoa_r+0x3c>
 80073c4:	2010      	movs	r0, #16
 80073c6:	f000 fdfd 	bl	8007fc4 <malloc>
 80073ca:	4602      	mov	r2, r0
 80073cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80073d0:	b920      	cbnz	r0, 80073dc <_dtoa_r+0x34>
 80073d2:	4ba7      	ldr	r3, [pc, #668]	@ (8007670 <_dtoa_r+0x2c8>)
 80073d4:	21ef      	movs	r1, #239	@ 0xef
 80073d6:	48a7      	ldr	r0, [pc, #668]	@ (8007674 <_dtoa_r+0x2cc>)
 80073d8:	f001 fc5a 	bl	8008c90 <__assert_func>
 80073dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80073e0:	6007      	str	r7, [r0, #0]
 80073e2:	60c7      	str	r7, [r0, #12]
 80073e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073e8:	6819      	ldr	r1, [r3, #0]
 80073ea:	b159      	cbz	r1, 8007404 <_dtoa_r+0x5c>
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	604a      	str	r2, [r1, #4]
 80073f0:	2301      	movs	r3, #1
 80073f2:	4093      	lsls	r3, r2
 80073f4:	608b      	str	r3, [r1, #8]
 80073f6:	4658      	mov	r0, fp
 80073f8:	f000 feda 	bl	80081b0 <_Bfree>
 80073fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	1e2b      	subs	r3, r5, #0
 8007406:	bfb9      	ittee	lt
 8007408:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800740c:	9303      	strlt	r3, [sp, #12]
 800740e:	2300      	movge	r3, #0
 8007410:	6033      	strge	r3, [r6, #0]
 8007412:	9f03      	ldr	r7, [sp, #12]
 8007414:	4b98      	ldr	r3, [pc, #608]	@ (8007678 <_dtoa_r+0x2d0>)
 8007416:	bfbc      	itt	lt
 8007418:	2201      	movlt	r2, #1
 800741a:	6032      	strlt	r2, [r6, #0]
 800741c:	43bb      	bics	r3, r7
 800741e:	d112      	bne.n	8007446 <_dtoa_r+0x9e>
 8007420:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007422:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800742c:	4323      	orrs	r3, r4
 800742e:	f000 854d 	beq.w	8007ecc <_dtoa_r+0xb24>
 8007432:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007434:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800768c <_dtoa_r+0x2e4>
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 854f 	beq.w	8007edc <_dtoa_r+0xb34>
 800743e:	f10a 0303 	add.w	r3, sl, #3
 8007442:	f000 bd49 	b.w	8007ed8 <_dtoa_r+0xb30>
 8007446:	ed9d 7b02 	vldr	d7, [sp, #8]
 800744a:	2200      	movs	r2, #0
 800744c:	ec51 0b17 	vmov	r0, r1, d7
 8007450:	2300      	movs	r3, #0
 8007452:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007456:	f7f9 fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800745a:	4680      	mov	r8, r0
 800745c:	b158      	cbz	r0, 8007476 <_dtoa_r+0xce>
 800745e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007460:	2301      	movs	r3, #1
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007466:	b113      	cbz	r3, 800746e <_dtoa_r+0xc6>
 8007468:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800746a:	4b84      	ldr	r3, [pc, #528]	@ (800767c <_dtoa_r+0x2d4>)
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007690 <_dtoa_r+0x2e8>
 8007472:	f000 bd33 	b.w	8007edc <_dtoa_r+0xb34>
 8007476:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800747a:	aa16      	add	r2, sp, #88	@ 0x58
 800747c:	a917      	add	r1, sp, #92	@ 0x5c
 800747e:	4658      	mov	r0, fp
 8007480:	f001 f980 	bl	8008784 <__d2b>
 8007484:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007488:	4681      	mov	r9, r0
 800748a:	2e00      	cmp	r6, #0
 800748c:	d077      	beq.n	800757e <_dtoa_r+0x1d6>
 800748e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007490:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800749c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074a8:	4619      	mov	r1, r3
 80074aa:	2200      	movs	r2, #0
 80074ac:	4b74      	ldr	r3, [pc, #464]	@ (8007680 <_dtoa_r+0x2d8>)
 80074ae:	f7f8 fef3 	bl	8000298 <__aeabi_dsub>
 80074b2:	a369      	add	r3, pc, #420	@ (adr r3, 8007658 <_dtoa_r+0x2b0>)
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f7f9 f8a6 	bl	8000608 <__aeabi_dmul>
 80074bc:	a368      	add	r3, pc, #416	@ (adr r3, 8007660 <_dtoa_r+0x2b8>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f7f8 feeb 	bl	800029c <__adddf3>
 80074c6:	4604      	mov	r4, r0
 80074c8:	4630      	mov	r0, r6
 80074ca:	460d      	mov	r5, r1
 80074cc:	f7f9 f832 	bl	8000534 <__aeabi_i2d>
 80074d0:	a365      	add	r3, pc, #404	@ (adr r3, 8007668 <_dtoa_r+0x2c0>)
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	f7f9 f897 	bl	8000608 <__aeabi_dmul>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4620      	mov	r0, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	f7f8 fedb 	bl	800029c <__adddf3>
 80074e6:	4604      	mov	r4, r0
 80074e8:	460d      	mov	r5, r1
 80074ea:	f7f9 fb3d 	bl	8000b68 <__aeabi_d2iz>
 80074ee:	2200      	movs	r2, #0
 80074f0:	4607      	mov	r7, r0
 80074f2:	2300      	movs	r3, #0
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7f9 faf8 	bl	8000aec <__aeabi_dcmplt>
 80074fc:	b140      	cbz	r0, 8007510 <_dtoa_r+0x168>
 80074fe:	4638      	mov	r0, r7
 8007500:	f7f9 f818 	bl	8000534 <__aeabi_i2d>
 8007504:	4622      	mov	r2, r4
 8007506:	462b      	mov	r3, r5
 8007508:	f7f9 fae6 	bl	8000ad8 <__aeabi_dcmpeq>
 800750c:	b900      	cbnz	r0, 8007510 <_dtoa_r+0x168>
 800750e:	3f01      	subs	r7, #1
 8007510:	2f16      	cmp	r7, #22
 8007512:	d851      	bhi.n	80075b8 <_dtoa_r+0x210>
 8007514:	4b5b      	ldr	r3, [pc, #364]	@ (8007684 <_dtoa_r+0x2dc>)
 8007516:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007522:	f7f9 fae3 	bl	8000aec <__aeabi_dcmplt>
 8007526:	2800      	cmp	r0, #0
 8007528:	d048      	beq.n	80075bc <_dtoa_r+0x214>
 800752a:	3f01      	subs	r7, #1
 800752c:	2300      	movs	r3, #0
 800752e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007530:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007532:	1b9b      	subs	r3, r3, r6
 8007534:	1e5a      	subs	r2, r3, #1
 8007536:	bf44      	itt	mi
 8007538:	f1c3 0801 	rsbmi	r8, r3, #1
 800753c:	2300      	movmi	r3, #0
 800753e:	9208      	str	r2, [sp, #32]
 8007540:	bf54      	ite	pl
 8007542:	f04f 0800 	movpl.w	r8, #0
 8007546:	9308      	strmi	r3, [sp, #32]
 8007548:	2f00      	cmp	r7, #0
 800754a:	db39      	blt.n	80075c0 <_dtoa_r+0x218>
 800754c:	9b08      	ldr	r3, [sp, #32]
 800754e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007550:	443b      	add	r3, r7
 8007552:	9308      	str	r3, [sp, #32]
 8007554:	2300      	movs	r3, #0
 8007556:	930a      	str	r3, [sp, #40]	@ 0x28
 8007558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800755a:	2b09      	cmp	r3, #9
 800755c:	d864      	bhi.n	8007628 <_dtoa_r+0x280>
 800755e:	2b05      	cmp	r3, #5
 8007560:	bfc4      	itt	gt
 8007562:	3b04      	subgt	r3, #4
 8007564:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007568:	f1a3 0302 	sub.w	r3, r3, #2
 800756c:	bfcc      	ite	gt
 800756e:	2400      	movgt	r4, #0
 8007570:	2401      	movle	r4, #1
 8007572:	2b03      	cmp	r3, #3
 8007574:	d863      	bhi.n	800763e <_dtoa_r+0x296>
 8007576:	e8df f003 	tbb	[pc, r3]
 800757a:	372a      	.short	0x372a
 800757c:	5535      	.short	0x5535
 800757e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007582:	441e      	add	r6, r3
 8007584:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007588:	2b20      	cmp	r3, #32
 800758a:	bfc1      	itttt	gt
 800758c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007590:	409f      	lslgt	r7, r3
 8007592:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007596:	fa24 f303 	lsrgt.w	r3, r4, r3
 800759a:	bfd6      	itet	le
 800759c:	f1c3 0320 	rsble	r3, r3, #32
 80075a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80075a4:	fa04 f003 	lslle.w	r0, r4, r3
 80075a8:	f7f8 ffb4 	bl	8000514 <__aeabi_ui2d>
 80075ac:	2201      	movs	r2, #1
 80075ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075b2:	3e01      	subs	r6, #1
 80075b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80075b6:	e777      	b.n	80074a8 <_dtoa_r+0x100>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e7b8      	b.n	800752e <_dtoa_r+0x186>
 80075bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80075be:	e7b7      	b.n	8007530 <_dtoa_r+0x188>
 80075c0:	427b      	negs	r3, r7
 80075c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075c4:	2300      	movs	r3, #0
 80075c6:	eba8 0807 	sub.w	r8, r8, r7
 80075ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075cc:	e7c4      	b.n	8007558 <_dtoa_r+0x1b0>
 80075ce:	2300      	movs	r3, #0
 80075d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dc35      	bgt.n	8007644 <_dtoa_r+0x29c>
 80075d8:	2301      	movs	r3, #1
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	9307      	str	r3, [sp, #28]
 80075de:	461a      	mov	r2, r3
 80075e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80075e2:	e00b      	b.n	80075fc <_dtoa_r+0x254>
 80075e4:	2301      	movs	r3, #1
 80075e6:	e7f3      	b.n	80075d0 <_dtoa_r+0x228>
 80075e8:	2300      	movs	r3, #0
 80075ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	9307      	str	r3, [sp, #28]
 80075f8:	bfb8      	it	lt
 80075fa:	2301      	movlt	r3, #1
 80075fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007600:	2100      	movs	r1, #0
 8007602:	2204      	movs	r2, #4
 8007604:	f102 0514 	add.w	r5, r2, #20
 8007608:	429d      	cmp	r5, r3
 800760a:	d91f      	bls.n	800764c <_dtoa_r+0x2a4>
 800760c:	6041      	str	r1, [r0, #4]
 800760e:	4658      	mov	r0, fp
 8007610:	f000 fd8e 	bl	8008130 <_Balloc>
 8007614:	4682      	mov	sl, r0
 8007616:	2800      	cmp	r0, #0
 8007618:	d13c      	bne.n	8007694 <_dtoa_r+0x2ec>
 800761a:	4b1b      	ldr	r3, [pc, #108]	@ (8007688 <_dtoa_r+0x2e0>)
 800761c:	4602      	mov	r2, r0
 800761e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007622:	e6d8      	b.n	80073d6 <_dtoa_r+0x2e>
 8007624:	2301      	movs	r3, #1
 8007626:	e7e0      	b.n	80075ea <_dtoa_r+0x242>
 8007628:	2401      	movs	r4, #1
 800762a:	2300      	movs	r3, #0
 800762c:	9309      	str	r3, [sp, #36]	@ 0x24
 800762e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007630:	f04f 33ff 	mov.w	r3, #4294967295
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	9307      	str	r3, [sp, #28]
 8007638:	2200      	movs	r2, #0
 800763a:	2312      	movs	r3, #18
 800763c:	e7d0      	b.n	80075e0 <_dtoa_r+0x238>
 800763e:	2301      	movs	r3, #1
 8007640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007642:	e7f5      	b.n	8007630 <_dtoa_r+0x288>
 8007644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	9307      	str	r3, [sp, #28]
 800764a:	e7d7      	b.n	80075fc <_dtoa_r+0x254>
 800764c:	3101      	adds	r1, #1
 800764e:	0052      	lsls	r2, r2, #1
 8007650:	e7d8      	b.n	8007604 <_dtoa_r+0x25c>
 8007652:	bf00      	nop
 8007654:	f3af 8000 	nop.w
 8007658:	636f4361 	.word	0x636f4361
 800765c:	3fd287a7 	.word	0x3fd287a7
 8007660:	8b60c8b3 	.word	0x8b60c8b3
 8007664:	3fc68a28 	.word	0x3fc68a28
 8007668:	509f79fb 	.word	0x509f79fb
 800766c:	3fd34413 	.word	0x3fd34413
 8007670:	08009455 	.word	0x08009455
 8007674:	0800946c 	.word	0x0800946c
 8007678:	7ff00000 	.word	0x7ff00000
 800767c:	08009425 	.word	0x08009425
 8007680:	3ff80000 	.word	0x3ff80000
 8007684:	08009568 	.word	0x08009568
 8007688:	080094c4 	.word	0x080094c4
 800768c:	08009451 	.word	0x08009451
 8007690:	08009424 	.word	0x08009424
 8007694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007698:	6018      	str	r0, [r3, #0]
 800769a:	9b07      	ldr	r3, [sp, #28]
 800769c:	2b0e      	cmp	r3, #14
 800769e:	f200 80a4 	bhi.w	80077ea <_dtoa_r+0x442>
 80076a2:	2c00      	cmp	r4, #0
 80076a4:	f000 80a1 	beq.w	80077ea <_dtoa_r+0x442>
 80076a8:	2f00      	cmp	r7, #0
 80076aa:	dd33      	ble.n	8007714 <_dtoa_r+0x36c>
 80076ac:	4bad      	ldr	r3, [pc, #692]	@ (8007964 <_dtoa_r+0x5bc>)
 80076ae:	f007 020f 	and.w	r2, r7, #15
 80076b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076b6:	ed93 7b00 	vldr	d7, [r3]
 80076ba:	05f8      	lsls	r0, r7, #23
 80076bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076c4:	d516      	bpl.n	80076f4 <_dtoa_r+0x34c>
 80076c6:	4ba8      	ldr	r3, [pc, #672]	@ (8007968 <_dtoa_r+0x5c0>)
 80076c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076d0:	f7f9 f8c4 	bl	800085c <__aeabi_ddiv>
 80076d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076d8:	f004 040f 	and.w	r4, r4, #15
 80076dc:	2603      	movs	r6, #3
 80076de:	4da2      	ldr	r5, [pc, #648]	@ (8007968 <_dtoa_r+0x5c0>)
 80076e0:	b954      	cbnz	r4, 80076f8 <_dtoa_r+0x350>
 80076e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ea:	f7f9 f8b7 	bl	800085c <__aeabi_ddiv>
 80076ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f2:	e028      	b.n	8007746 <_dtoa_r+0x39e>
 80076f4:	2602      	movs	r6, #2
 80076f6:	e7f2      	b.n	80076de <_dtoa_r+0x336>
 80076f8:	07e1      	lsls	r1, r4, #31
 80076fa:	d508      	bpl.n	800770e <_dtoa_r+0x366>
 80076fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007700:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007704:	f7f8 ff80 	bl	8000608 <__aeabi_dmul>
 8007708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800770c:	3601      	adds	r6, #1
 800770e:	1064      	asrs	r4, r4, #1
 8007710:	3508      	adds	r5, #8
 8007712:	e7e5      	b.n	80076e0 <_dtoa_r+0x338>
 8007714:	f000 80d2 	beq.w	80078bc <_dtoa_r+0x514>
 8007718:	427c      	negs	r4, r7
 800771a:	4b92      	ldr	r3, [pc, #584]	@ (8007964 <_dtoa_r+0x5bc>)
 800771c:	4d92      	ldr	r5, [pc, #584]	@ (8007968 <_dtoa_r+0x5c0>)
 800771e:	f004 020f 	and.w	r2, r4, #15
 8007722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800772e:	f7f8 ff6b 	bl	8000608 <__aeabi_dmul>
 8007732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007736:	1124      	asrs	r4, r4, #4
 8007738:	2300      	movs	r3, #0
 800773a:	2602      	movs	r6, #2
 800773c:	2c00      	cmp	r4, #0
 800773e:	f040 80b2 	bne.w	80078a6 <_dtoa_r+0x4fe>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1d3      	bne.n	80076ee <_dtoa_r+0x346>
 8007746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007748:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 80b7 	beq.w	80078c0 <_dtoa_r+0x518>
 8007752:	4b86      	ldr	r3, [pc, #536]	@ (800796c <_dtoa_r+0x5c4>)
 8007754:	2200      	movs	r2, #0
 8007756:	4620      	mov	r0, r4
 8007758:	4629      	mov	r1, r5
 800775a:	f7f9 f9c7 	bl	8000aec <__aeabi_dcmplt>
 800775e:	2800      	cmp	r0, #0
 8007760:	f000 80ae 	beq.w	80078c0 <_dtoa_r+0x518>
 8007764:	9b07      	ldr	r3, [sp, #28]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 80aa 	beq.w	80078c0 <_dtoa_r+0x518>
 800776c:	9b00      	ldr	r3, [sp, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	dd37      	ble.n	80077e2 <_dtoa_r+0x43a>
 8007772:	1e7b      	subs	r3, r7, #1
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	4620      	mov	r0, r4
 8007778:	4b7d      	ldr	r3, [pc, #500]	@ (8007970 <_dtoa_r+0x5c8>)
 800777a:	2200      	movs	r2, #0
 800777c:	4629      	mov	r1, r5
 800777e:	f7f8 ff43 	bl	8000608 <__aeabi_dmul>
 8007782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007786:	9c00      	ldr	r4, [sp, #0]
 8007788:	3601      	adds	r6, #1
 800778a:	4630      	mov	r0, r6
 800778c:	f7f8 fed2 	bl	8000534 <__aeabi_i2d>
 8007790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007794:	f7f8 ff38 	bl	8000608 <__aeabi_dmul>
 8007798:	4b76      	ldr	r3, [pc, #472]	@ (8007974 <_dtoa_r+0x5cc>)
 800779a:	2200      	movs	r2, #0
 800779c:	f7f8 fd7e 	bl	800029c <__adddf3>
 80077a0:	4605      	mov	r5, r0
 80077a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077a6:	2c00      	cmp	r4, #0
 80077a8:	f040 808d 	bne.w	80078c6 <_dtoa_r+0x51e>
 80077ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b0:	4b71      	ldr	r3, [pc, #452]	@ (8007978 <_dtoa_r+0x5d0>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	f7f8 fd70 	bl	8000298 <__aeabi_dsub>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077c0:	462a      	mov	r2, r5
 80077c2:	4633      	mov	r3, r6
 80077c4:	f7f9 f9b0 	bl	8000b28 <__aeabi_dcmpgt>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	f040 828b 	bne.w	8007ce4 <_dtoa_r+0x93c>
 80077ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d2:	462a      	mov	r2, r5
 80077d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077d8:	f7f9 f988 	bl	8000aec <__aeabi_dcmplt>
 80077dc:	2800      	cmp	r0, #0
 80077de:	f040 8128 	bne.w	8007a32 <_dtoa_r+0x68a>
 80077e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80077e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80077ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f2c0 815a 	blt.w	8007aa6 <_dtoa_r+0x6fe>
 80077f2:	2f0e      	cmp	r7, #14
 80077f4:	f300 8157 	bgt.w	8007aa6 <_dtoa_r+0x6fe>
 80077f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007964 <_dtoa_r+0x5bc>)
 80077fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077fe:	ed93 7b00 	vldr	d7, [r3]
 8007802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007804:	2b00      	cmp	r3, #0
 8007806:	ed8d 7b00 	vstr	d7, [sp]
 800780a:	da03      	bge.n	8007814 <_dtoa_r+0x46c>
 800780c:	9b07      	ldr	r3, [sp, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f340 8101 	ble.w	8007a16 <_dtoa_r+0x66e>
 8007814:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007818:	4656      	mov	r6, sl
 800781a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f9 f81b 	bl	800085c <__aeabi_ddiv>
 8007826:	f7f9 f99f 	bl	8000b68 <__aeabi_d2iz>
 800782a:	4680      	mov	r8, r0
 800782c:	f7f8 fe82 	bl	8000534 <__aeabi_i2d>
 8007830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007834:	f7f8 fee8 	bl	8000608 <__aeabi_dmul>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007844:	f7f8 fd28 	bl	8000298 <__aeabi_dsub>
 8007848:	f806 4b01 	strb.w	r4, [r6], #1
 800784c:	9d07      	ldr	r5, [sp, #28]
 800784e:	eba6 040a 	sub.w	r4, r6, sl
 8007852:	42a5      	cmp	r5, r4
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	f040 8117 	bne.w	8007a8a <_dtoa_r+0x6e2>
 800785c:	f7f8 fd1e 	bl	800029c <__adddf3>
 8007860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007864:	4604      	mov	r4, r0
 8007866:	460d      	mov	r5, r1
 8007868:	f7f9 f95e 	bl	8000b28 <__aeabi_dcmpgt>
 800786c:	2800      	cmp	r0, #0
 800786e:	f040 80f9 	bne.w	8007a64 <_dtoa_r+0x6bc>
 8007872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007876:	4620      	mov	r0, r4
 8007878:	4629      	mov	r1, r5
 800787a:	f7f9 f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 800787e:	b118      	cbz	r0, 8007888 <_dtoa_r+0x4e0>
 8007880:	f018 0f01 	tst.w	r8, #1
 8007884:	f040 80ee 	bne.w	8007a64 <_dtoa_r+0x6bc>
 8007888:	4649      	mov	r1, r9
 800788a:	4658      	mov	r0, fp
 800788c:	f000 fc90 	bl	80081b0 <_Bfree>
 8007890:	2300      	movs	r3, #0
 8007892:	7033      	strb	r3, [r6, #0]
 8007894:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007896:	3701      	adds	r7, #1
 8007898:	601f      	str	r7, [r3, #0]
 800789a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 831d 	beq.w	8007edc <_dtoa_r+0xb34>
 80078a2:	601e      	str	r6, [r3, #0]
 80078a4:	e31a      	b.n	8007edc <_dtoa_r+0xb34>
 80078a6:	07e2      	lsls	r2, r4, #31
 80078a8:	d505      	bpl.n	80078b6 <_dtoa_r+0x50e>
 80078aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078ae:	f7f8 feab 	bl	8000608 <__aeabi_dmul>
 80078b2:	3601      	adds	r6, #1
 80078b4:	2301      	movs	r3, #1
 80078b6:	1064      	asrs	r4, r4, #1
 80078b8:	3508      	adds	r5, #8
 80078ba:	e73f      	b.n	800773c <_dtoa_r+0x394>
 80078bc:	2602      	movs	r6, #2
 80078be:	e742      	b.n	8007746 <_dtoa_r+0x39e>
 80078c0:	9c07      	ldr	r4, [sp, #28]
 80078c2:	9704      	str	r7, [sp, #16]
 80078c4:	e761      	b.n	800778a <_dtoa_r+0x3e2>
 80078c6:	4b27      	ldr	r3, [pc, #156]	@ (8007964 <_dtoa_r+0x5bc>)
 80078c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078d2:	4454      	add	r4, sl
 80078d4:	2900      	cmp	r1, #0
 80078d6:	d053      	beq.n	8007980 <_dtoa_r+0x5d8>
 80078d8:	4928      	ldr	r1, [pc, #160]	@ (800797c <_dtoa_r+0x5d4>)
 80078da:	2000      	movs	r0, #0
 80078dc:	f7f8 ffbe 	bl	800085c <__aeabi_ddiv>
 80078e0:	4633      	mov	r3, r6
 80078e2:	462a      	mov	r2, r5
 80078e4:	f7f8 fcd8 	bl	8000298 <__aeabi_dsub>
 80078e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078ec:	4656      	mov	r6, sl
 80078ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f2:	f7f9 f939 	bl	8000b68 <__aeabi_d2iz>
 80078f6:	4605      	mov	r5, r0
 80078f8:	f7f8 fe1c 	bl	8000534 <__aeabi_i2d>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007904:	f7f8 fcc8 	bl	8000298 <__aeabi_dsub>
 8007908:	3530      	adds	r5, #48	@ 0x30
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007912:	f806 5b01 	strb.w	r5, [r6], #1
 8007916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800791a:	f7f9 f8e7 	bl	8000aec <__aeabi_dcmplt>
 800791e:	2800      	cmp	r0, #0
 8007920:	d171      	bne.n	8007a06 <_dtoa_r+0x65e>
 8007922:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007926:	4911      	ldr	r1, [pc, #68]	@ (800796c <_dtoa_r+0x5c4>)
 8007928:	2000      	movs	r0, #0
 800792a:	f7f8 fcb5 	bl	8000298 <__aeabi_dsub>
 800792e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007932:	f7f9 f8db 	bl	8000aec <__aeabi_dcmplt>
 8007936:	2800      	cmp	r0, #0
 8007938:	f040 8095 	bne.w	8007a66 <_dtoa_r+0x6be>
 800793c:	42a6      	cmp	r6, r4
 800793e:	f43f af50 	beq.w	80077e2 <_dtoa_r+0x43a>
 8007942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007946:	4b0a      	ldr	r3, [pc, #40]	@ (8007970 <_dtoa_r+0x5c8>)
 8007948:	2200      	movs	r2, #0
 800794a:	f7f8 fe5d 	bl	8000608 <__aeabi_dmul>
 800794e:	4b08      	ldr	r3, [pc, #32]	@ (8007970 <_dtoa_r+0x5c8>)
 8007950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007954:	2200      	movs	r2, #0
 8007956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800795a:	f7f8 fe55 	bl	8000608 <__aeabi_dmul>
 800795e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007962:	e7c4      	b.n	80078ee <_dtoa_r+0x546>
 8007964:	08009568 	.word	0x08009568
 8007968:	08009540 	.word	0x08009540
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	40240000 	.word	0x40240000
 8007974:	401c0000 	.word	0x401c0000
 8007978:	40140000 	.word	0x40140000
 800797c:	3fe00000 	.word	0x3fe00000
 8007980:	4631      	mov	r1, r6
 8007982:	4628      	mov	r0, r5
 8007984:	f7f8 fe40 	bl	8000608 <__aeabi_dmul>
 8007988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800798c:	9415      	str	r4, [sp, #84]	@ 0x54
 800798e:	4656      	mov	r6, sl
 8007990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007994:	f7f9 f8e8 	bl	8000b68 <__aeabi_d2iz>
 8007998:	4605      	mov	r5, r0
 800799a:	f7f8 fdcb 	bl	8000534 <__aeabi_i2d>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079a6:	f7f8 fc77 	bl	8000298 <__aeabi_dsub>
 80079aa:	3530      	adds	r5, #48	@ 0x30
 80079ac:	f806 5b01 	strb.w	r5, [r6], #1
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	42a6      	cmp	r6, r4
 80079b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	d124      	bne.n	8007a0a <_dtoa_r+0x662>
 80079c0:	4bac      	ldr	r3, [pc, #688]	@ (8007c74 <_dtoa_r+0x8cc>)
 80079c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079c6:	f7f8 fc69 	bl	800029c <__adddf3>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079d2:	f7f9 f8a9 	bl	8000b28 <__aeabi_dcmpgt>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d145      	bne.n	8007a66 <_dtoa_r+0x6be>
 80079da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079de:	49a5      	ldr	r1, [pc, #660]	@ (8007c74 <_dtoa_r+0x8cc>)
 80079e0:	2000      	movs	r0, #0
 80079e2:	f7f8 fc59 	bl	8000298 <__aeabi_dsub>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ee:	f7f9 f87d 	bl	8000aec <__aeabi_dcmplt>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f43f aef5 	beq.w	80077e2 <_dtoa_r+0x43a>
 80079f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80079fa:	1e73      	subs	r3, r6, #1
 80079fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80079fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a02:	2b30      	cmp	r3, #48	@ 0x30
 8007a04:	d0f8      	beq.n	80079f8 <_dtoa_r+0x650>
 8007a06:	9f04      	ldr	r7, [sp, #16]
 8007a08:	e73e      	b.n	8007888 <_dtoa_r+0x4e0>
 8007a0a:	4b9b      	ldr	r3, [pc, #620]	@ (8007c78 <_dtoa_r+0x8d0>)
 8007a0c:	f7f8 fdfc 	bl	8000608 <__aeabi_dmul>
 8007a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a14:	e7bc      	b.n	8007990 <_dtoa_r+0x5e8>
 8007a16:	d10c      	bne.n	8007a32 <_dtoa_r+0x68a>
 8007a18:	4b98      	ldr	r3, [pc, #608]	@ (8007c7c <_dtoa_r+0x8d4>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a20:	f7f8 fdf2 	bl	8000608 <__aeabi_dmul>
 8007a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a28:	f7f9 f874 	bl	8000b14 <__aeabi_dcmpge>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f000 8157 	beq.w	8007ce0 <_dtoa_r+0x938>
 8007a32:	2400      	movs	r4, #0
 8007a34:	4625      	mov	r5, r4
 8007a36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	4656      	mov	r6, sl
 8007a3e:	2700      	movs	r7, #0
 8007a40:	4621      	mov	r1, r4
 8007a42:	4658      	mov	r0, fp
 8007a44:	f000 fbb4 	bl	80081b0 <_Bfree>
 8007a48:	2d00      	cmp	r5, #0
 8007a4a:	d0dc      	beq.n	8007a06 <_dtoa_r+0x65e>
 8007a4c:	b12f      	cbz	r7, 8007a5a <_dtoa_r+0x6b2>
 8007a4e:	42af      	cmp	r7, r5
 8007a50:	d003      	beq.n	8007a5a <_dtoa_r+0x6b2>
 8007a52:	4639      	mov	r1, r7
 8007a54:	4658      	mov	r0, fp
 8007a56:	f000 fbab 	bl	80081b0 <_Bfree>
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	4658      	mov	r0, fp
 8007a5e:	f000 fba7 	bl	80081b0 <_Bfree>
 8007a62:	e7d0      	b.n	8007a06 <_dtoa_r+0x65e>
 8007a64:	9704      	str	r7, [sp, #16]
 8007a66:	4633      	mov	r3, r6
 8007a68:	461e      	mov	r6, r3
 8007a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a6e:	2a39      	cmp	r2, #57	@ 0x39
 8007a70:	d107      	bne.n	8007a82 <_dtoa_r+0x6da>
 8007a72:	459a      	cmp	sl, r3
 8007a74:	d1f8      	bne.n	8007a68 <_dtoa_r+0x6c0>
 8007a76:	9a04      	ldr	r2, [sp, #16]
 8007a78:	3201      	adds	r2, #1
 8007a7a:	9204      	str	r2, [sp, #16]
 8007a7c:	2230      	movs	r2, #48	@ 0x30
 8007a7e:	f88a 2000 	strb.w	r2, [sl]
 8007a82:	781a      	ldrb	r2, [r3, #0]
 8007a84:	3201      	adds	r2, #1
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	e7bd      	b.n	8007a06 <_dtoa_r+0x65e>
 8007a8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007c78 <_dtoa_r+0x8d0>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f7f8 fdbb 	bl	8000608 <__aeabi_dmul>
 8007a92:	2200      	movs	r2, #0
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	460d      	mov	r5, r1
 8007a9a:	f7f9 f81d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f aebb 	beq.w	800781a <_dtoa_r+0x472>
 8007aa4:	e6f0      	b.n	8007888 <_dtoa_r+0x4e0>
 8007aa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007aa8:	2a00      	cmp	r2, #0
 8007aaa:	f000 80db 	beq.w	8007c64 <_dtoa_r+0x8bc>
 8007aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ab0:	2a01      	cmp	r2, #1
 8007ab2:	f300 80bf 	bgt.w	8007c34 <_dtoa_r+0x88c>
 8007ab6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	f000 80b7 	beq.w	8007c2c <_dtoa_r+0x884>
 8007abe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ac2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ac4:	4646      	mov	r6, r8
 8007ac6:	9a08      	ldr	r2, [sp, #32]
 8007ac8:	2101      	movs	r1, #1
 8007aca:	441a      	add	r2, r3
 8007acc:	4658      	mov	r0, fp
 8007ace:	4498      	add	r8, r3
 8007ad0:	9208      	str	r2, [sp, #32]
 8007ad2:	f000 fc21 	bl	8008318 <__i2b>
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	b15e      	cbz	r6, 8007af2 <_dtoa_r+0x74a>
 8007ada:	9b08      	ldr	r3, [sp, #32]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dd08      	ble.n	8007af2 <_dtoa_r+0x74a>
 8007ae0:	42b3      	cmp	r3, r6
 8007ae2:	9a08      	ldr	r2, [sp, #32]
 8007ae4:	bfa8      	it	ge
 8007ae6:	4633      	movge	r3, r6
 8007ae8:	eba8 0803 	sub.w	r8, r8, r3
 8007aec:	1af6      	subs	r6, r6, r3
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	9308      	str	r3, [sp, #32]
 8007af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af4:	b1f3      	cbz	r3, 8007b34 <_dtoa_r+0x78c>
 8007af6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80b7 	beq.w	8007c6c <_dtoa_r+0x8c4>
 8007afe:	b18c      	cbz	r4, 8007b24 <_dtoa_r+0x77c>
 8007b00:	4629      	mov	r1, r5
 8007b02:	4622      	mov	r2, r4
 8007b04:	4658      	mov	r0, fp
 8007b06:	f000 fcc7 	bl	8008498 <__pow5mult>
 8007b0a:	464a      	mov	r2, r9
 8007b0c:	4601      	mov	r1, r0
 8007b0e:	4605      	mov	r5, r0
 8007b10:	4658      	mov	r0, fp
 8007b12:	f000 fc17 	bl	8008344 <__multiply>
 8007b16:	4649      	mov	r1, r9
 8007b18:	9004      	str	r0, [sp, #16]
 8007b1a:	4658      	mov	r0, fp
 8007b1c:	f000 fb48 	bl	80081b0 <_Bfree>
 8007b20:	9b04      	ldr	r3, [sp, #16]
 8007b22:	4699      	mov	r9, r3
 8007b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b26:	1b1a      	subs	r2, r3, r4
 8007b28:	d004      	beq.n	8007b34 <_dtoa_r+0x78c>
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	4658      	mov	r0, fp
 8007b2e:	f000 fcb3 	bl	8008498 <__pow5mult>
 8007b32:	4681      	mov	r9, r0
 8007b34:	2101      	movs	r1, #1
 8007b36:	4658      	mov	r0, fp
 8007b38:	f000 fbee 	bl	8008318 <__i2b>
 8007b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b3e:	4604      	mov	r4, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 81cf 	beq.w	8007ee4 <_dtoa_r+0xb3c>
 8007b46:	461a      	mov	r2, r3
 8007b48:	4601      	mov	r1, r0
 8007b4a:	4658      	mov	r0, fp
 8007b4c:	f000 fca4 	bl	8008498 <__pow5mult>
 8007b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	4604      	mov	r4, r0
 8007b56:	f300 8095 	bgt.w	8007c84 <_dtoa_r+0x8dc>
 8007b5a:	9b02      	ldr	r3, [sp, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 8087 	bne.w	8007c70 <_dtoa_r+0x8c8>
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 8089 	bne.w	8007c80 <_dtoa_r+0x8d8>
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b74:	0d1b      	lsrs	r3, r3, #20
 8007b76:	051b      	lsls	r3, r3, #20
 8007b78:	b12b      	cbz	r3, 8007b86 <_dtoa_r+0x7de>
 8007b7a:	9b08      	ldr	r3, [sp, #32]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	9308      	str	r3, [sp, #32]
 8007b80:	f108 0801 	add.w	r8, r8, #1
 8007b84:	2301      	movs	r3, #1
 8007b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 81b0 	beq.w	8007ef0 <_dtoa_r+0xb48>
 8007b90:	6923      	ldr	r3, [r4, #16]
 8007b92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b96:	6918      	ldr	r0, [r3, #16]
 8007b98:	f000 fb72 	bl	8008280 <__hi0bits>
 8007b9c:	f1c0 0020 	rsb	r0, r0, #32
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	4418      	add	r0, r3
 8007ba4:	f010 001f 	ands.w	r0, r0, #31
 8007ba8:	d077      	beq.n	8007c9a <_dtoa_r+0x8f2>
 8007baa:	f1c0 0320 	rsb	r3, r0, #32
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	dd6b      	ble.n	8007c8a <_dtoa_r+0x8e2>
 8007bb2:	9b08      	ldr	r3, [sp, #32]
 8007bb4:	f1c0 001c 	rsb	r0, r0, #28
 8007bb8:	4403      	add	r3, r0
 8007bba:	4480      	add	r8, r0
 8007bbc:	4406      	add	r6, r0
 8007bbe:	9308      	str	r3, [sp, #32]
 8007bc0:	f1b8 0f00 	cmp.w	r8, #0
 8007bc4:	dd05      	ble.n	8007bd2 <_dtoa_r+0x82a>
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	4642      	mov	r2, r8
 8007bca:	4658      	mov	r0, fp
 8007bcc:	f000 fcbe 	bl	800854c <__lshift>
 8007bd0:	4681      	mov	r9, r0
 8007bd2:	9b08      	ldr	r3, [sp, #32]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd05      	ble.n	8007be4 <_dtoa_r+0x83c>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	461a      	mov	r2, r3
 8007bdc:	4658      	mov	r0, fp
 8007bde:	f000 fcb5 	bl	800854c <__lshift>
 8007be2:	4604      	mov	r4, r0
 8007be4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d059      	beq.n	8007c9e <_dtoa_r+0x8f6>
 8007bea:	4621      	mov	r1, r4
 8007bec:	4648      	mov	r0, r9
 8007bee:	f000 fd19 	bl	8008624 <__mcmp>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	da53      	bge.n	8007c9e <_dtoa_r+0x8f6>
 8007bf6:	1e7b      	subs	r3, r7, #1
 8007bf8:	9304      	str	r3, [sp, #16]
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	220a      	movs	r2, #10
 8007c00:	4658      	mov	r0, fp
 8007c02:	f000 faf7 	bl	80081f4 <__multadd>
 8007c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c08:	4681      	mov	r9, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 8172 	beq.w	8007ef4 <_dtoa_r+0xb4c>
 8007c10:	2300      	movs	r3, #0
 8007c12:	4629      	mov	r1, r5
 8007c14:	220a      	movs	r2, #10
 8007c16:	4658      	mov	r0, fp
 8007c18:	f000 faec 	bl	80081f4 <__multadd>
 8007c1c:	9b00      	ldr	r3, [sp, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	4605      	mov	r5, r0
 8007c22:	dc67      	bgt.n	8007cf4 <_dtoa_r+0x94c>
 8007c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	dc41      	bgt.n	8007cae <_dtoa_r+0x906>
 8007c2a:	e063      	b.n	8007cf4 <_dtoa_r+0x94c>
 8007c2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c32:	e746      	b.n	8007ac2 <_dtoa_r+0x71a>
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	1e5c      	subs	r4, r3, #1
 8007c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	bfbf      	itttt	lt
 8007c3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007c42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c44:	1ae3      	sublt	r3, r4, r3
 8007c46:	bfb4      	ite	lt
 8007c48:	18d2      	addlt	r2, r2, r3
 8007c4a:	1b1c      	subge	r4, r3, r4
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	bfbc      	itt	lt
 8007c50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007c52:	2400      	movlt	r4, #0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bfb5      	itete	lt
 8007c58:	eba8 0603 	sublt.w	r6, r8, r3
 8007c5c:	9b07      	ldrge	r3, [sp, #28]
 8007c5e:	2300      	movlt	r3, #0
 8007c60:	4646      	movge	r6, r8
 8007c62:	e730      	b.n	8007ac6 <_dtoa_r+0x71e>
 8007c64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c68:	4646      	mov	r6, r8
 8007c6a:	e735      	b.n	8007ad8 <_dtoa_r+0x730>
 8007c6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c6e:	e75c      	b.n	8007b2a <_dtoa_r+0x782>
 8007c70:	2300      	movs	r3, #0
 8007c72:	e788      	b.n	8007b86 <_dtoa_r+0x7de>
 8007c74:	3fe00000 	.word	0x3fe00000
 8007c78:	40240000 	.word	0x40240000
 8007c7c:	40140000 	.word	0x40140000
 8007c80:	9b02      	ldr	r3, [sp, #8]
 8007c82:	e780      	b.n	8007b86 <_dtoa_r+0x7de>
 8007c84:	2300      	movs	r3, #0
 8007c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c88:	e782      	b.n	8007b90 <_dtoa_r+0x7e8>
 8007c8a:	d099      	beq.n	8007bc0 <_dtoa_r+0x818>
 8007c8c:	9a08      	ldr	r2, [sp, #32]
 8007c8e:	331c      	adds	r3, #28
 8007c90:	441a      	add	r2, r3
 8007c92:	4498      	add	r8, r3
 8007c94:	441e      	add	r6, r3
 8007c96:	9208      	str	r2, [sp, #32]
 8007c98:	e792      	b.n	8007bc0 <_dtoa_r+0x818>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	e7f6      	b.n	8007c8c <_dtoa_r+0x8e4>
 8007c9e:	9b07      	ldr	r3, [sp, #28]
 8007ca0:	9704      	str	r7, [sp, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dc20      	bgt.n	8007ce8 <_dtoa_r+0x940>
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	dd1e      	ble.n	8007cec <_dtoa_r+0x944>
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f47f aec0 	bne.w	8007a36 <_dtoa_r+0x68e>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	2205      	movs	r2, #5
 8007cba:	4658      	mov	r0, fp
 8007cbc:	f000 fa9a 	bl	80081f4 <__multadd>
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4648      	mov	r0, r9
 8007cc6:	f000 fcad 	bl	8008624 <__mcmp>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	f77f aeb3 	ble.w	8007a36 <_dtoa_r+0x68e>
 8007cd0:	4656      	mov	r6, sl
 8007cd2:	2331      	movs	r3, #49	@ 0x31
 8007cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8007cd8:	9b04      	ldr	r3, [sp, #16]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	e6ae      	b.n	8007a3e <_dtoa_r+0x696>
 8007ce0:	9c07      	ldr	r4, [sp, #28]
 8007ce2:	9704      	str	r7, [sp, #16]
 8007ce4:	4625      	mov	r5, r4
 8007ce6:	e7f3      	b.n	8007cd0 <_dtoa_r+0x928>
 8007ce8:	9b07      	ldr	r3, [sp, #28]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8104 	beq.w	8007efc <_dtoa_r+0xb54>
 8007cf4:	2e00      	cmp	r6, #0
 8007cf6:	dd05      	ble.n	8007d04 <_dtoa_r+0x95c>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4632      	mov	r2, r6
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	f000 fc25 	bl	800854c <__lshift>
 8007d02:	4605      	mov	r5, r0
 8007d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d05a      	beq.n	8007dc0 <_dtoa_r+0xa18>
 8007d0a:	6869      	ldr	r1, [r5, #4]
 8007d0c:	4658      	mov	r0, fp
 8007d0e:	f000 fa0f 	bl	8008130 <_Balloc>
 8007d12:	4606      	mov	r6, r0
 8007d14:	b928      	cbnz	r0, 8007d22 <_dtoa_r+0x97a>
 8007d16:	4b84      	ldr	r3, [pc, #528]	@ (8007f28 <_dtoa_r+0xb80>)
 8007d18:	4602      	mov	r2, r0
 8007d1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d1e:	f7ff bb5a 	b.w	80073d6 <_dtoa_r+0x2e>
 8007d22:	692a      	ldr	r2, [r5, #16]
 8007d24:	3202      	adds	r2, #2
 8007d26:	0092      	lsls	r2, r2, #2
 8007d28:	f105 010c 	add.w	r1, r5, #12
 8007d2c:	300c      	adds	r0, #12
 8007d2e:	f7ff faa4 	bl	800727a <memcpy>
 8007d32:	2201      	movs	r2, #1
 8007d34:	4631      	mov	r1, r6
 8007d36:	4658      	mov	r0, fp
 8007d38:	f000 fc08 	bl	800854c <__lshift>
 8007d3c:	f10a 0301 	add.w	r3, sl, #1
 8007d40:	9307      	str	r3, [sp, #28]
 8007d42:	9b00      	ldr	r3, [sp, #0]
 8007d44:	4453      	add	r3, sl
 8007d46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	462f      	mov	r7, r5
 8007d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d52:	4605      	mov	r5, r0
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	4621      	mov	r1, r4
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	4648      	mov	r0, r9
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	f7ff fa9a 	bl	8007296 <quorem>
 8007d62:	4639      	mov	r1, r7
 8007d64:	9002      	str	r0, [sp, #8]
 8007d66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d6a:	4648      	mov	r0, r9
 8007d6c:	f000 fc5a 	bl	8008624 <__mcmp>
 8007d70:	462a      	mov	r2, r5
 8007d72:	9008      	str	r0, [sp, #32]
 8007d74:	4621      	mov	r1, r4
 8007d76:	4658      	mov	r0, fp
 8007d78:	f000 fc70 	bl	800865c <__mdiff>
 8007d7c:	68c2      	ldr	r2, [r0, #12]
 8007d7e:	4606      	mov	r6, r0
 8007d80:	bb02      	cbnz	r2, 8007dc4 <_dtoa_r+0xa1c>
 8007d82:	4601      	mov	r1, r0
 8007d84:	4648      	mov	r0, r9
 8007d86:	f000 fc4d 	bl	8008624 <__mcmp>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4658      	mov	r0, fp
 8007d90:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d92:	f000 fa0d 	bl	80081b0 <_Bfree>
 8007d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d9a:	9e07      	ldr	r6, [sp, #28]
 8007d9c:	ea43 0102 	orr.w	r1, r3, r2
 8007da0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007da2:	4319      	orrs	r1, r3
 8007da4:	d110      	bne.n	8007dc8 <_dtoa_r+0xa20>
 8007da6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007daa:	d029      	beq.n	8007e00 <_dtoa_r+0xa58>
 8007dac:	9b08      	ldr	r3, [sp, #32]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dd02      	ble.n	8007db8 <_dtoa_r+0xa10>
 8007db2:	9b02      	ldr	r3, [sp, #8]
 8007db4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007db8:	9b00      	ldr	r3, [sp, #0]
 8007dba:	f883 8000 	strb.w	r8, [r3]
 8007dbe:	e63f      	b.n	8007a40 <_dtoa_r+0x698>
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	e7bb      	b.n	8007d3c <_dtoa_r+0x994>
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	e7e1      	b.n	8007d8c <_dtoa_r+0x9e4>
 8007dc8:	9b08      	ldr	r3, [sp, #32]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	db04      	blt.n	8007dd8 <_dtoa_r+0xa30>
 8007dce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dd0:	430b      	orrs	r3, r1
 8007dd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007dd4:	430b      	orrs	r3, r1
 8007dd6:	d120      	bne.n	8007e1a <_dtoa_r+0xa72>
 8007dd8:	2a00      	cmp	r2, #0
 8007dda:	dded      	ble.n	8007db8 <_dtoa_r+0xa10>
 8007ddc:	4649      	mov	r1, r9
 8007dde:	2201      	movs	r2, #1
 8007de0:	4658      	mov	r0, fp
 8007de2:	f000 fbb3 	bl	800854c <__lshift>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4681      	mov	r9, r0
 8007dea:	f000 fc1b 	bl	8008624 <__mcmp>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	dc03      	bgt.n	8007dfa <_dtoa_r+0xa52>
 8007df2:	d1e1      	bne.n	8007db8 <_dtoa_r+0xa10>
 8007df4:	f018 0f01 	tst.w	r8, #1
 8007df8:	d0de      	beq.n	8007db8 <_dtoa_r+0xa10>
 8007dfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dfe:	d1d8      	bne.n	8007db2 <_dtoa_r+0xa0a>
 8007e00:	9a00      	ldr	r2, [sp, #0]
 8007e02:	2339      	movs	r3, #57	@ 0x39
 8007e04:	7013      	strb	r3, [r2, #0]
 8007e06:	4633      	mov	r3, r6
 8007e08:	461e      	mov	r6, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e10:	2a39      	cmp	r2, #57	@ 0x39
 8007e12:	d052      	beq.n	8007eba <_dtoa_r+0xb12>
 8007e14:	3201      	adds	r2, #1
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	e612      	b.n	8007a40 <_dtoa_r+0x698>
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	dd07      	ble.n	8007e2e <_dtoa_r+0xa86>
 8007e1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e22:	d0ed      	beq.n	8007e00 <_dtoa_r+0xa58>
 8007e24:	9a00      	ldr	r2, [sp, #0]
 8007e26:	f108 0301 	add.w	r3, r8, #1
 8007e2a:	7013      	strb	r3, [r2, #0]
 8007e2c:	e608      	b.n	8007a40 <_dtoa_r+0x698>
 8007e2e:	9b07      	ldr	r3, [sp, #28]
 8007e30:	9a07      	ldr	r2, [sp, #28]
 8007e32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d028      	beq.n	8007e8e <_dtoa_r+0xae6>
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	2300      	movs	r3, #0
 8007e40:	220a      	movs	r2, #10
 8007e42:	4658      	mov	r0, fp
 8007e44:	f000 f9d6 	bl	80081f4 <__multadd>
 8007e48:	42af      	cmp	r7, r5
 8007e4a:	4681      	mov	r9, r0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	f04f 020a 	mov.w	r2, #10
 8007e54:	4639      	mov	r1, r7
 8007e56:	4658      	mov	r0, fp
 8007e58:	d107      	bne.n	8007e6a <_dtoa_r+0xac2>
 8007e5a:	f000 f9cb 	bl	80081f4 <__multadd>
 8007e5e:	4607      	mov	r7, r0
 8007e60:	4605      	mov	r5, r0
 8007e62:	9b07      	ldr	r3, [sp, #28]
 8007e64:	3301      	adds	r3, #1
 8007e66:	9307      	str	r3, [sp, #28]
 8007e68:	e774      	b.n	8007d54 <_dtoa_r+0x9ac>
 8007e6a:	f000 f9c3 	bl	80081f4 <__multadd>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4607      	mov	r7, r0
 8007e72:	2300      	movs	r3, #0
 8007e74:	220a      	movs	r2, #10
 8007e76:	4658      	mov	r0, fp
 8007e78:	f000 f9bc 	bl	80081f4 <__multadd>
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	e7f0      	b.n	8007e62 <_dtoa_r+0xaba>
 8007e80:	9b00      	ldr	r3, [sp, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	bfcc      	ite	gt
 8007e86:	461e      	movgt	r6, r3
 8007e88:	2601      	movle	r6, #1
 8007e8a:	4456      	add	r6, sl
 8007e8c:	2700      	movs	r7, #0
 8007e8e:	4649      	mov	r1, r9
 8007e90:	2201      	movs	r2, #1
 8007e92:	4658      	mov	r0, fp
 8007e94:	f000 fb5a 	bl	800854c <__lshift>
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4681      	mov	r9, r0
 8007e9c:	f000 fbc2 	bl	8008624 <__mcmp>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	dcb0      	bgt.n	8007e06 <_dtoa_r+0xa5e>
 8007ea4:	d102      	bne.n	8007eac <_dtoa_r+0xb04>
 8007ea6:	f018 0f01 	tst.w	r8, #1
 8007eaa:	d1ac      	bne.n	8007e06 <_dtoa_r+0xa5e>
 8007eac:	4633      	mov	r3, r6
 8007eae:	461e      	mov	r6, r3
 8007eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eb4:	2a30      	cmp	r2, #48	@ 0x30
 8007eb6:	d0fa      	beq.n	8007eae <_dtoa_r+0xb06>
 8007eb8:	e5c2      	b.n	8007a40 <_dtoa_r+0x698>
 8007eba:	459a      	cmp	sl, r3
 8007ebc:	d1a4      	bne.n	8007e08 <_dtoa_r+0xa60>
 8007ebe:	9b04      	ldr	r3, [sp, #16]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	9304      	str	r3, [sp, #16]
 8007ec4:	2331      	movs	r3, #49	@ 0x31
 8007ec6:	f88a 3000 	strb.w	r3, [sl]
 8007eca:	e5b9      	b.n	8007a40 <_dtoa_r+0x698>
 8007ecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ece:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f2c <_dtoa_r+0xb84>
 8007ed2:	b11b      	cbz	r3, 8007edc <_dtoa_r+0xb34>
 8007ed4:	f10a 0308 	add.w	r3, sl, #8
 8007ed8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	4650      	mov	r0, sl
 8007ede:	b019      	add	sp, #100	@ 0x64
 8007ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	f77f ae37 	ble.w	8007b5a <_dtoa_r+0x7b2>
 8007eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	e655      	b.n	8007ba0 <_dtoa_r+0x7f8>
 8007ef4:	9b00      	ldr	r3, [sp, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f77f aed6 	ble.w	8007ca8 <_dtoa_r+0x900>
 8007efc:	4656      	mov	r6, sl
 8007efe:	4621      	mov	r1, r4
 8007f00:	4648      	mov	r0, r9
 8007f02:	f7ff f9c8 	bl	8007296 <quorem>
 8007f06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f0a:	f806 8b01 	strb.w	r8, [r6], #1
 8007f0e:	9b00      	ldr	r3, [sp, #0]
 8007f10:	eba6 020a 	sub.w	r2, r6, sl
 8007f14:	4293      	cmp	r3, r2
 8007f16:	ddb3      	ble.n	8007e80 <_dtoa_r+0xad8>
 8007f18:	4649      	mov	r1, r9
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	220a      	movs	r2, #10
 8007f1e:	4658      	mov	r0, fp
 8007f20:	f000 f968 	bl	80081f4 <__multadd>
 8007f24:	4681      	mov	r9, r0
 8007f26:	e7ea      	b.n	8007efe <_dtoa_r+0xb56>
 8007f28:	080094c4 	.word	0x080094c4
 8007f2c:	08009448 	.word	0x08009448

08007f30 <_free_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4605      	mov	r5, r0
 8007f34:	2900      	cmp	r1, #0
 8007f36:	d041      	beq.n	8007fbc <_free_r+0x8c>
 8007f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f3c:	1f0c      	subs	r4, r1, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bfb8      	it	lt
 8007f42:	18e4      	addlt	r4, r4, r3
 8007f44:	f000 f8e8 	bl	8008118 <__malloc_lock>
 8007f48:	4a1d      	ldr	r2, [pc, #116]	@ (8007fc0 <_free_r+0x90>)
 8007f4a:	6813      	ldr	r3, [r2, #0]
 8007f4c:	b933      	cbnz	r3, 8007f5c <_free_r+0x2c>
 8007f4e:	6063      	str	r3, [r4, #4]
 8007f50:	6014      	str	r4, [r2, #0]
 8007f52:	4628      	mov	r0, r5
 8007f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f58:	f000 b8e4 	b.w	8008124 <__malloc_unlock>
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	d908      	bls.n	8007f72 <_free_r+0x42>
 8007f60:	6820      	ldr	r0, [r4, #0]
 8007f62:	1821      	adds	r1, r4, r0
 8007f64:	428b      	cmp	r3, r1
 8007f66:	bf01      	itttt	eq
 8007f68:	6819      	ldreq	r1, [r3, #0]
 8007f6a:	685b      	ldreq	r3, [r3, #4]
 8007f6c:	1809      	addeq	r1, r1, r0
 8007f6e:	6021      	streq	r1, [r4, #0]
 8007f70:	e7ed      	b.n	8007f4e <_free_r+0x1e>
 8007f72:	461a      	mov	r2, r3
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	b10b      	cbz	r3, 8007f7c <_free_r+0x4c>
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	d9fa      	bls.n	8007f72 <_free_r+0x42>
 8007f7c:	6811      	ldr	r1, [r2, #0]
 8007f7e:	1850      	adds	r0, r2, r1
 8007f80:	42a0      	cmp	r0, r4
 8007f82:	d10b      	bne.n	8007f9c <_free_r+0x6c>
 8007f84:	6820      	ldr	r0, [r4, #0]
 8007f86:	4401      	add	r1, r0
 8007f88:	1850      	adds	r0, r2, r1
 8007f8a:	4283      	cmp	r3, r0
 8007f8c:	6011      	str	r1, [r2, #0]
 8007f8e:	d1e0      	bne.n	8007f52 <_free_r+0x22>
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	6053      	str	r3, [r2, #4]
 8007f96:	4408      	add	r0, r1
 8007f98:	6010      	str	r0, [r2, #0]
 8007f9a:	e7da      	b.n	8007f52 <_free_r+0x22>
 8007f9c:	d902      	bls.n	8007fa4 <_free_r+0x74>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	602b      	str	r3, [r5, #0]
 8007fa2:	e7d6      	b.n	8007f52 <_free_r+0x22>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	1821      	adds	r1, r4, r0
 8007fa8:	428b      	cmp	r3, r1
 8007faa:	bf04      	itt	eq
 8007fac:	6819      	ldreq	r1, [r3, #0]
 8007fae:	685b      	ldreq	r3, [r3, #4]
 8007fb0:	6063      	str	r3, [r4, #4]
 8007fb2:	bf04      	itt	eq
 8007fb4:	1809      	addeq	r1, r1, r0
 8007fb6:	6021      	streq	r1, [r4, #0]
 8007fb8:	6054      	str	r4, [r2, #4]
 8007fba:	e7ca      	b.n	8007f52 <_free_r+0x22>
 8007fbc:	bd38      	pop	{r3, r4, r5, pc}
 8007fbe:	bf00      	nop
 8007fc0:	2000449c 	.word	0x2000449c

08007fc4 <malloc>:
 8007fc4:	4b02      	ldr	r3, [pc, #8]	@ (8007fd0 <malloc+0xc>)
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	f000 b825 	b.w	8008018 <_malloc_r>
 8007fce:	bf00      	nop
 8007fd0:	2000001c 	.word	0x2000001c

08007fd4 <sbrk_aligned>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8008014 <sbrk_aligned+0x40>)
 8007fd8:	460c      	mov	r4, r1
 8007fda:	6831      	ldr	r1, [r6, #0]
 8007fdc:	4605      	mov	r5, r0
 8007fde:	b911      	cbnz	r1, 8007fe6 <sbrk_aligned+0x12>
 8007fe0:	f000 fe46 	bl	8008c70 <_sbrk_r>
 8007fe4:	6030      	str	r0, [r6, #0]
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f000 fe41 	bl	8008c70 <_sbrk_r>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d103      	bne.n	8007ffa <sbrk_aligned+0x26>
 8007ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	bd70      	pop	{r4, r5, r6, pc}
 8007ffa:	1cc4      	adds	r4, r0, #3
 8007ffc:	f024 0403 	bic.w	r4, r4, #3
 8008000:	42a0      	cmp	r0, r4
 8008002:	d0f8      	beq.n	8007ff6 <sbrk_aligned+0x22>
 8008004:	1a21      	subs	r1, r4, r0
 8008006:	4628      	mov	r0, r5
 8008008:	f000 fe32 	bl	8008c70 <_sbrk_r>
 800800c:	3001      	adds	r0, #1
 800800e:	d1f2      	bne.n	8007ff6 <sbrk_aligned+0x22>
 8008010:	e7ef      	b.n	8007ff2 <sbrk_aligned+0x1e>
 8008012:	bf00      	nop
 8008014:	20004498 	.word	0x20004498

08008018 <_malloc_r>:
 8008018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800801c:	1ccd      	adds	r5, r1, #3
 800801e:	f025 0503 	bic.w	r5, r5, #3
 8008022:	3508      	adds	r5, #8
 8008024:	2d0c      	cmp	r5, #12
 8008026:	bf38      	it	cc
 8008028:	250c      	movcc	r5, #12
 800802a:	2d00      	cmp	r5, #0
 800802c:	4606      	mov	r6, r0
 800802e:	db01      	blt.n	8008034 <_malloc_r+0x1c>
 8008030:	42a9      	cmp	r1, r5
 8008032:	d904      	bls.n	800803e <_malloc_r+0x26>
 8008034:	230c      	movs	r3, #12
 8008036:	6033      	str	r3, [r6, #0]
 8008038:	2000      	movs	r0, #0
 800803a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800803e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008114 <_malloc_r+0xfc>
 8008042:	f000 f869 	bl	8008118 <__malloc_lock>
 8008046:	f8d8 3000 	ldr.w	r3, [r8]
 800804a:	461c      	mov	r4, r3
 800804c:	bb44      	cbnz	r4, 80080a0 <_malloc_r+0x88>
 800804e:	4629      	mov	r1, r5
 8008050:	4630      	mov	r0, r6
 8008052:	f7ff ffbf 	bl	8007fd4 <sbrk_aligned>
 8008056:	1c43      	adds	r3, r0, #1
 8008058:	4604      	mov	r4, r0
 800805a:	d158      	bne.n	800810e <_malloc_r+0xf6>
 800805c:	f8d8 4000 	ldr.w	r4, [r8]
 8008060:	4627      	mov	r7, r4
 8008062:	2f00      	cmp	r7, #0
 8008064:	d143      	bne.n	80080ee <_malloc_r+0xd6>
 8008066:	2c00      	cmp	r4, #0
 8008068:	d04b      	beq.n	8008102 <_malloc_r+0xea>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	4639      	mov	r1, r7
 800806e:	4630      	mov	r0, r6
 8008070:	eb04 0903 	add.w	r9, r4, r3
 8008074:	f000 fdfc 	bl	8008c70 <_sbrk_r>
 8008078:	4581      	cmp	r9, r0
 800807a:	d142      	bne.n	8008102 <_malloc_r+0xea>
 800807c:	6821      	ldr	r1, [r4, #0]
 800807e:	1a6d      	subs	r5, r5, r1
 8008080:	4629      	mov	r1, r5
 8008082:	4630      	mov	r0, r6
 8008084:	f7ff ffa6 	bl	8007fd4 <sbrk_aligned>
 8008088:	3001      	adds	r0, #1
 800808a:	d03a      	beq.n	8008102 <_malloc_r+0xea>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	442b      	add	r3, r5
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	f8d8 3000 	ldr.w	r3, [r8]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	bb62      	cbnz	r2, 80080f4 <_malloc_r+0xdc>
 800809a:	f8c8 7000 	str.w	r7, [r8]
 800809e:	e00f      	b.n	80080c0 <_malloc_r+0xa8>
 80080a0:	6822      	ldr	r2, [r4, #0]
 80080a2:	1b52      	subs	r2, r2, r5
 80080a4:	d420      	bmi.n	80080e8 <_malloc_r+0xd0>
 80080a6:	2a0b      	cmp	r2, #11
 80080a8:	d917      	bls.n	80080da <_malloc_r+0xc2>
 80080aa:	1961      	adds	r1, r4, r5
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	6025      	str	r5, [r4, #0]
 80080b0:	bf18      	it	ne
 80080b2:	6059      	strne	r1, [r3, #4]
 80080b4:	6863      	ldr	r3, [r4, #4]
 80080b6:	bf08      	it	eq
 80080b8:	f8c8 1000 	streq.w	r1, [r8]
 80080bc:	5162      	str	r2, [r4, r5]
 80080be:	604b      	str	r3, [r1, #4]
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 f82f 	bl	8008124 <__malloc_unlock>
 80080c6:	f104 000b 	add.w	r0, r4, #11
 80080ca:	1d23      	adds	r3, r4, #4
 80080cc:	f020 0007 	bic.w	r0, r0, #7
 80080d0:	1ac2      	subs	r2, r0, r3
 80080d2:	bf1c      	itt	ne
 80080d4:	1a1b      	subne	r3, r3, r0
 80080d6:	50a3      	strne	r3, [r4, r2]
 80080d8:	e7af      	b.n	800803a <_malloc_r+0x22>
 80080da:	6862      	ldr	r2, [r4, #4]
 80080dc:	42a3      	cmp	r3, r4
 80080de:	bf0c      	ite	eq
 80080e0:	f8c8 2000 	streq.w	r2, [r8]
 80080e4:	605a      	strne	r2, [r3, #4]
 80080e6:	e7eb      	b.n	80080c0 <_malloc_r+0xa8>
 80080e8:	4623      	mov	r3, r4
 80080ea:	6864      	ldr	r4, [r4, #4]
 80080ec:	e7ae      	b.n	800804c <_malloc_r+0x34>
 80080ee:	463c      	mov	r4, r7
 80080f0:	687f      	ldr	r7, [r7, #4]
 80080f2:	e7b6      	b.n	8008062 <_malloc_r+0x4a>
 80080f4:	461a      	mov	r2, r3
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d1fb      	bne.n	80080f4 <_malloc_r+0xdc>
 80080fc:	2300      	movs	r3, #0
 80080fe:	6053      	str	r3, [r2, #4]
 8008100:	e7de      	b.n	80080c0 <_malloc_r+0xa8>
 8008102:	230c      	movs	r3, #12
 8008104:	6033      	str	r3, [r6, #0]
 8008106:	4630      	mov	r0, r6
 8008108:	f000 f80c 	bl	8008124 <__malloc_unlock>
 800810c:	e794      	b.n	8008038 <_malloc_r+0x20>
 800810e:	6005      	str	r5, [r0, #0]
 8008110:	e7d6      	b.n	80080c0 <_malloc_r+0xa8>
 8008112:	bf00      	nop
 8008114:	2000449c 	.word	0x2000449c

08008118 <__malloc_lock>:
 8008118:	4801      	ldr	r0, [pc, #4]	@ (8008120 <__malloc_lock+0x8>)
 800811a:	f7ff b8ac 	b.w	8007276 <__retarget_lock_acquire_recursive>
 800811e:	bf00      	nop
 8008120:	20004494 	.word	0x20004494

08008124 <__malloc_unlock>:
 8008124:	4801      	ldr	r0, [pc, #4]	@ (800812c <__malloc_unlock+0x8>)
 8008126:	f7ff b8a7 	b.w	8007278 <__retarget_lock_release_recursive>
 800812a:	bf00      	nop
 800812c:	20004494 	.word	0x20004494

08008130 <_Balloc>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	69c6      	ldr	r6, [r0, #28]
 8008134:	4604      	mov	r4, r0
 8008136:	460d      	mov	r5, r1
 8008138:	b976      	cbnz	r6, 8008158 <_Balloc+0x28>
 800813a:	2010      	movs	r0, #16
 800813c:	f7ff ff42 	bl	8007fc4 <malloc>
 8008140:	4602      	mov	r2, r0
 8008142:	61e0      	str	r0, [r4, #28]
 8008144:	b920      	cbnz	r0, 8008150 <_Balloc+0x20>
 8008146:	4b18      	ldr	r3, [pc, #96]	@ (80081a8 <_Balloc+0x78>)
 8008148:	4818      	ldr	r0, [pc, #96]	@ (80081ac <_Balloc+0x7c>)
 800814a:	216b      	movs	r1, #107	@ 0x6b
 800814c:	f000 fda0 	bl	8008c90 <__assert_func>
 8008150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008154:	6006      	str	r6, [r0, #0]
 8008156:	60c6      	str	r6, [r0, #12]
 8008158:	69e6      	ldr	r6, [r4, #28]
 800815a:	68f3      	ldr	r3, [r6, #12]
 800815c:	b183      	cbz	r3, 8008180 <_Balloc+0x50>
 800815e:	69e3      	ldr	r3, [r4, #28]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008166:	b9b8      	cbnz	r0, 8008198 <_Balloc+0x68>
 8008168:	2101      	movs	r1, #1
 800816a:	fa01 f605 	lsl.w	r6, r1, r5
 800816e:	1d72      	adds	r2, r6, #5
 8008170:	0092      	lsls	r2, r2, #2
 8008172:	4620      	mov	r0, r4
 8008174:	f000 fdaa 	bl	8008ccc <_calloc_r>
 8008178:	b160      	cbz	r0, 8008194 <_Balloc+0x64>
 800817a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800817e:	e00e      	b.n	800819e <_Balloc+0x6e>
 8008180:	2221      	movs	r2, #33	@ 0x21
 8008182:	2104      	movs	r1, #4
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fda1 	bl	8008ccc <_calloc_r>
 800818a:	69e3      	ldr	r3, [r4, #28]
 800818c:	60f0      	str	r0, [r6, #12]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e4      	bne.n	800815e <_Balloc+0x2e>
 8008194:	2000      	movs	r0, #0
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	6802      	ldr	r2, [r0, #0]
 800819a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800819e:	2300      	movs	r3, #0
 80081a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081a4:	e7f7      	b.n	8008196 <_Balloc+0x66>
 80081a6:	bf00      	nop
 80081a8:	08009455 	.word	0x08009455
 80081ac:	080094d5 	.word	0x080094d5

080081b0 <_Bfree>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	69c6      	ldr	r6, [r0, #28]
 80081b4:	4605      	mov	r5, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	b976      	cbnz	r6, 80081d8 <_Bfree+0x28>
 80081ba:	2010      	movs	r0, #16
 80081bc:	f7ff ff02 	bl	8007fc4 <malloc>
 80081c0:	4602      	mov	r2, r0
 80081c2:	61e8      	str	r0, [r5, #28]
 80081c4:	b920      	cbnz	r0, 80081d0 <_Bfree+0x20>
 80081c6:	4b09      	ldr	r3, [pc, #36]	@ (80081ec <_Bfree+0x3c>)
 80081c8:	4809      	ldr	r0, [pc, #36]	@ (80081f0 <_Bfree+0x40>)
 80081ca:	218f      	movs	r1, #143	@ 0x8f
 80081cc:	f000 fd60 	bl	8008c90 <__assert_func>
 80081d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081d4:	6006      	str	r6, [r0, #0]
 80081d6:	60c6      	str	r6, [r0, #12]
 80081d8:	b13c      	cbz	r4, 80081ea <_Bfree+0x3a>
 80081da:	69eb      	ldr	r3, [r5, #28]
 80081dc:	6862      	ldr	r2, [r4, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081e4:	6021      	str	r1, [r4, #0]
 80081e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	08009455 	.word	0x08009455
 80081f0:	080094d5 	.word	0x080094d5

080081f4 <__multadd>:
 80081f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f8:	690d      	ldr	r5, [r1, #16]
 80081fa:	4607      	mov	r7, r0
 80081fc:	460c      	mov	r4, r1
 80081fe:	461e      	mov	r6, r3
 8008200:	f101 0c14 	add.w	ip, r1, #20
 8008204:	2000      	movs	r0, #0
 8008206:	f8dc 3000 	ldr.w	r3, [ip]
 800820a:	b299      	uxth	r1, r3
 800820c:	fb02 6101 	mla	r1, r2, r1, r6
 8008210:	0c1e      	lsrs	r6, r3, #16
 8008212:	0c0b      	lsrs	r3, r1, #16
 8008214:	fb02 3306 	mla	r3, r2, r6, r3
 8008218:	b289      	uxth	r1, r1
 800821a:	3001      	adds	r0, #1
 800821c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008220:	4285      	cmp	r5, r0
 8008222:	f84c 1b04 	str.w	r1, [ip], #4
 8008226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800822a:	dcec      	bgt.n	8008206 <__multadd+0x12>
 800822c:	b30e      	cbz	r6, 8008272 <__multadd+0x7e>
 800822e:	68a3      	ldr	r3, [r4, #8]
 8008230:	42ab      	cmp	r3, r5
 8008232:	dc19      	bgt.n	8008268 <__multadd+0x74>
 8008234:	6861      	ldr	r1, [r4, #4]
 8008236:	4638      	mov	r0, r7
 8008238:	3101      	adds	r1, #1
 800823a:	f7ff ff79 	bl	8008130 <_Balloc>
 800823e:	4680      	mov	r8, r0
 8008240:	b928      	cbnz	r0, 800824e <__multadd+0x5a>
 8008242:	4602      	mov	r2, r0
 8008244:	4b0c      	ldr	r3, [pc, #48]	@ (8008278 <__multadd+0x84>)
 8008246:	480d      	ldr	r0, [pc, #52]	@ (800827c <__multadd+0x88>)
 8008248:	21ba      	movs	r1, #186	@ 0xba
 800824a:	f000 fd21 	bl	8008c90 <__assert_func>
 800824e:	6922      	ldr	r2, [r4, #16]
 8008250:	3202      	adds	r2, #2
 8008252:	f104 010c 	add.w	r1, r4, #12
 8008256:	0092      	lsls	r2, r2, #2
 8008258:	300c      	adds	r0, #12
 800825a:	f7ff f80e 	bl	800727a <memcpy>
 800825e:	4621      	mov	r1, r4
 8008260:	4638      	mov	r0, r7
 8008262:	f7ff ffa5 	bl	80081b0 <_Bfree>
 8008266:	4644      	mov	r4, r8
 8008268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800826c:	3501      	adds	r5, #1
 800826e:	615e      	str	r6, [r3, #20]
 8008270:	6125      	str	r5, [r4, #16]
 8008272:	4620      	mov	r0, r4
 8008274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008278:	080094c4 	.word	0x080094c4
 800827c:	080094d5 	.word	0x080094d5

08008280 <__hi0bits>:
 8008280:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008284:	4603      	mov	r3, r0
 8008286:	bf36      	itet	cc
 8008288:	0403      	lslcc	r3, r0, #16
 800828a:	2000      	movcs	r0, #0
 800828c:	2010      	movcc	r0, #16
 800828e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008292:	bf3c      	itt	cc
 8008294:	021b      	lslcc	r3, r3, #8
 8008296:	3008      	addcc	r0, #8
 8008298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800829c:	bf3c      	itt	cc
 800829e:	011b      	lslcc	r3, r3, #4
 80082a0:	3004      	addcc	r0, #4
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a6:	bf3c      	itt	cc
 80082a8:	009b      	lslcc	r3, r3, #2
 80082aa:	3002      	addcc	r0, #2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	db05      	blt.n	80082bc <__hi0bits+0x3c>
 80082b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082b4:	f100 0001 	add.w	r0, r0, #1
 80082b8:	bf08      	it	eq
 80082ba:	2020      	moveq	r0, #32
 80082bc:	4770      	bx	lr

080082be <__lo0bits>:
 80082be:	6803      	ldr	r3, [r0, #0]
 80082c0:	4602      	mov	r2, r0
 80082c2:	f013 0007 	ands.w	r0, r3, #7
 80082c6:	d00b      	beq.n	80082e0 <__lo0bits+0x22>
 80082c8:	07d9      	lsls	r1, r3, #31
 80082ca:	d421      	bmi.n	8008310 <__lo0bits+0x52>
 80082cc:	0798      	lsls	r0, r3, #30
 80082ce:	bf49      	itett	mi
 80082d0:	085b      	lsrmi	r3, r3, #1
 80082d2:	089b      	lsrpl	r3, r3, #2
 80082d4:	2001      	movmi	r0, #1
 80082d6:	6013      	strmi	r3, [r2, #0]
 80082d8:	bf5c      	itt	pl
 80082da:	6013      	strpl	r3, [r2, #0]
 80082dc:	2002      	movpl	r0, #2
 80082de:	4770      	bx	lr
 80082e0:	b299      	uxth	r1, r3
 80082e2:	b909      	cbnz	r1, 80082e8 <__lo0bits+0x2a>
 80082e4:	0c1b      	lsrs	r3, r3, #16
 80082e6:	2010      	movs	r0, #16
 80082e8:	b2d9      	uxtb	r1, r3
 80082ea:	b909      	cbnz	r1, 80082f0 <__lo0bits+0x32>
 80082ec:	3008      	adds	r0, #8
 80082ee:	0a1b      	lsrs	r3, r3, #8
 80082f0:	0719      	lsls	r1, r3, #28
 80082f2:	bf04      	itt	eq
 80082f4:	091b      	lsreq	r3, r3, #4
 80082f6:	3004      	addeq	r0, #4
 80082f8:	0799      	lsls	r1, r3, #30
 80082fa:	bf04      	itt	eq
 80082fc:	089b      	lsreq	r3, r3, #2
 80082fe:	3002      	addeq	r0, #2
 8008300:	07d9      	lsls	r1, r3, #31
 8008302:	d403      	bmi.n	800830c <__lo0bits+0x4e>
 8008304:	085b      	lsrs	r3, r3, #1
 8008306:	f100 0001 	add.w	r0, r0, #1
 800830a:	d003      	beq.n	8008314 <__lo0bits+0x56>
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	4770      	bx	lr
 8008310:	2000      	movs	r0, #0
 8008312:	4770      	bx	lr
 8008314:	2020      	movs	r0, #32
 8008316:	4770      	bx	lr

08008318 <__i2b>:
 8008318:	b510      	push	{r4, lr}
 800831a:	460c      	mov	r4, r1
 800831c:	2101      	movs	r1, #1
 800831e:	f7ff ff07 	bl	8008130 <_Balloc>
 8008322:	4602      	mov	r2, r0
 8008324:	b928      	cbnz	r0, 8008332 <__i2b+0x1a>
 8008326:	4b05      	ldr	r3, [pc, #20]	@ (800833c <__i2b+0x24>)
 8008328:	4805      	ldr	r0, [pc, #20]	@ (8008340 <__i2b+0x28>)
 800832a:	f240 1145 	movw	r1, #325	@ 0x145
 800832e:	f000 fcaf 	bl	8008c90 <__assert_func>
 8008332:	2301      	movs	r3, #1
 8008334:	6144      	str	r4, [r0, #20]
 8008336:	6103      	str	r3, [r0, #16]
 8008338:	bd10      	pop	{r4, pc}
 800833a:	bf00      	nop
 800833c:	080094c4 	.word	0x080094c4
 8008340:	080094d5 	.word	0x080094d5

08008344 <__multiply>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	4614      	mov	r4, r2
 800834a:	690a      	ldr	r2, [r1, #16]
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	429a      	cmp	r2, r3
 8008350:	bfa8      	it	ge
 8008352:	4623      	movge	r3, r4
 8008354:	460f      	mov	r7, r1
 8008356:	bfa4      	itt	ge
 8008358:	460c      	movge	r4, r1
 800835a:	461f      	movge	r7, r3
 800835c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008360:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008364:	68a3      	ldr	r3, [r4, #8]
 8008366:	6861      	ldr	r1, [r4, #4]
 8008368:	eb0a 0609 	add.w	r6, sl, r9
 800836c:	42b3      	cmp	r3, r6
 800836e:	b085      	sub	sp, #20
 8008370:	bfb8      	it	lt
 8008372:	3101      	addlt	r1, #1
 8008374:	f7ff fedc 	bl	8008130 <_Balloc>
 8008378:	b930      	cbnz	r0, 8008388 <__multiply+0x44>
 800837a:	4602      	mov	r2, r0
 800837c:	4b44      	ldr	r3, [pc, #272]	@ (8008490 <__multiply+0x14c>)
 800837e:	4845      	ldr	r0, [pc, #276]	@ (8008494 <__multiply+0x150>)
 8008380:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008384:	f000 fc84 	bl	8008c90 <__assert_func>
 8008388:	f100 0514 	add.w	r5, r0, #20
 800838c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008390:	462b      	mov	r3, r5
 8008392:	2200      	movs	r2, #0
 8008394:	4543      	cmp	r3, r8
 8008396:	d321      	bcc.n	80083dc <__multiply+0x98>
 8008398:	f107 0114 	add.w	r1, r7, #20
 800839c:	f104 0214 	add.w	r2, r4, #20
 80083a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083a8:	9302      	str	r3, [sp, #8]
 80083aa:	1b13      	subs	r3, r2, r4
 80083ac:	3b15      	subs	r3, #21
 80083ae:	f023 0303 	bic.w	r3, r3, #3
 80083b2:	3304      	adds	r3, #4
 80083b4:	f104 0715 	add.w	r7, r4, #21
 80083b8:	42ba      	cmp	r2, r7
 80083ba:	bf38      	it	cc
 80083bc:	2304      	movcc	r3, #4
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	9b02      	ldr	r3, [sp, #8]
 80083c2:	9103      	str	r1, [sp, #12]
 80083c4:	428b      	cmp	r3, r1
 80083c6:	d80c      	bhi.n	80083e2 <__multiply+0x9e>
 80083c8:	2e00      	cmp	r6, #0
 80083ca:	dd03      	ble.n	80083d4 <__multiply+0x90>
 80083cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d05b      	beq.n	800848c <__multiply+0x148>
 80083d4:	6106      	str	r6, [r0, #16]
 80083d6:	b005      	add	sp, #20
 80083d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083dc:	f843 2b04 	str.w	r2, [r3], #4
 80083e0:	e7d8      	b.n	8008394 <__multiply+0x50>
 80083e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80083e6:	f1ba 0f00 	cmp.w	sl, #0
 80083ea:	d024      	beq.n	8008436 <__multiply+0xf2>
 80083ec:	f104 0e14 	add.w	lr, r4, #20
 80083f0:	46a9      	mov	r9, r5
 80083f2:	f04f 0c00 	mov.w	ip, #0
 80083f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083fa:	f8d9 3000 	ldr.w	r3, [r9]
 80083fe:	fa1f fb87 	uxth.w	fp, r7
 8008402:	b29b      	uxth	r3, r3
 8008404:	fb0a 330b 	mla	r3, sl, fp, r3
 8008408:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800840c:	f8d9 7000 	ldr.w	r7, [r9]
 8008410:	4463      	add	r3, ip
 8008412:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008416:	fb0a c70b 	mla	r7, sl, fp, ip
 800841a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800841e:	b29b      	uxth	r3, r3
 8008420:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008424:	4572      	cmp	r2, lr
 8008426:	f849 3b04 	str.w	r3, [r9], #4
 800842a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800842e:	d8e2      	bhi.n	80083f6 <__multiply+0xb2>
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	f845 c003 	str.w	ip, [r5, r3]
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800843c:	3104      	adds	r1, #4
 800843e:	f1b9 0f00 	cmp.w	r9, #0
 8008442:	d021      	beq.n	8008488 <__multiply+0x144>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	f104 0c14 	add.w	ip, r4, #20
 800844a:	46ae      	mov	lr, r5
 800844c:	f04f 0a00 	mov.w	sl, #0
 8008450:	f8bc b000 	ldrh.w	fp, [ip]
 8008454:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008458:	fb09 770b 	mla	r7, r9, fp, r7
 800845c:	4457      	add	r7, sl
 800845e:	b29b      	uxth	r3, r3
 8008460:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008464:	f84e 3b04 	str.w	r3, [lr], #4
 8008468:	f85c 3b04 	ldr.w	r3, [ip], #4
 800846c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008470:	f8be 3000 	ldrh.w	r3, [lr]
 8008474:	fb09 330a 	mla	r3, r9, sl, r3
 8008478:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800847c:	4562      	cmp	r2, ip
 800847e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008482:	d8e5      	bhi.n	8008450 <__multiply+0x10c>
 8008484:	9f01      	ldr	r7, [sp, #4]
 8008486:	51eb      	str	r3, [r5, r7]
 8008488:	3504      	adds	r5, #4
 800848a:	e799      	b.n	80083c0 <__multiply+0x7c>
 800848c:	3e01      	subs	r6, #1
 800848e:	e79b      	b.n	80083c8 <__multiply+0x84>
 8008490:	080094c4 	.word	0x080094c4
 8008494:	080094d5 	.word	0x080094d5

08008498 <__pow5mult>:
 8008498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800849c:	4615      	mov	r5, r2
 800849e:	f012 0203 	ands.w	r2, r2, #3
 80084a2:	4607      	mov	r7, r0
 80084a4:	460e      	mov	r6, r1
 80084a6:	d007      	beq.n	80084b8 <__pow5mult+0x20>
 80084a8:	4c25      	ldr	r4, [pc, #148]	@ (8008540 <__pow5mult+0xa8>)
 80084aa:	3a01      	subs	r2, #1
 80084ac:	2300      	movs	r3, #0
 80084ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084b2:	f7ff fe9f 	bl	80081f4 <__multadd>
 80084b6:	4606      	mov	r6, r0
 80084b8:	10ad      	asrs	r5, r5, #2
 80084ba:	d03d      	beq.n	8008538 <__pow5mult+0xa0>
 80084bc:	69fc      	ldr	r4, [r7, #28]
 80084be:	b97c      	cbnz	r4, 80084e0 <__pow5mult+0x48>
 80084c0:	2010      	movs	r0, #16
 80084c2:	f7ff fd7f 	bl	8007fc4 <malloc>
 80084c6:	4602      	mov	r2, r0
 80084c8:	61f8      	str	r0, [r7, #28]
 80084ca:	b928      	cbnz	r0, 80084d8 <__pow5mult+0x40>
 80084cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008544 <__pow5mult+0xac>)
 80084ce:	481e      	ldr	r0, [pc, #120]	@ (8008548 <__pow5mult+0xb0>)
 80084d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084d4:	f000 fbdc 	bl	8008c90 <__assert_func>
 80084d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084dc:	6004      	str	r4, [r0, #0]
 80084de:	60c4      	str	r4, [r0, #12]
 80084e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084e8:	b94c      	cbnz	r4, 80084fe <__pow5mult+0x66>
 80084ea:	f240 2171 	movw	r1, #625	@ 0x271
 80084ee:	4638      	mov	r0, r7
 80084f0:	f7ff ff12 	bl	8008318 <__i2b>
 80084f4:	2300      	movs	r3, #0
 80084f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084fa:	4604      	mov	r4, r0
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	f04f 0900 	mov.w	r9, #0
 8008502:	07eb      	lsls	r3, r5, #31
 8008504:	d50a      	bpl.n	800851c <__pow5mult+0x84>
 8008506:	4631      	mov	r1, r6
 8008508:	4622      	mov	r2, r4
 800850a:	4638      	mov	r0, r7
 800850c:	f7ff ff1a 	bl	8008344 <__multiply>
 8008510:	4631      	mov	r1, r6
 8008512:	4680      	mov	r8, r0
 8008514:	4638      	mov	r0, r7
 8008516:	f7ff fe4b 	bl	80081b0 <_Bfree>
 800851a:	4646      	mov	r6, r8
 800851c:	106d      	asrs	r5, r5, #1
 800851e:	d00b      	beq.n	8008538 <__pow5mult+0xa0>
 8008520:	6820      	ldr	r0, [r4, #0]
 8008522:	b938      	cbnz	r0, 8008534 <__pow5mult+0x9c>
 8008524:	4622      	mov	r2, r4
 8008526:	4621      	mov	r1, r4
 8008528:	4638      	mov	r0, r7
 800852a:	f7ff ff0b 	bl	8008344 <__multiply>
 800852e:	6020      	str	r0, [r4, #0]
 8008530:	f8c0 9000 	str.w	r9, [r0]
 8008534:	4604      	mov	r4, r0
 8008536:	e7e4      	b.n	8008502 <__pow5mult+0x6a>
 8008538:	4630      	mov	r0, r6
 800853a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853e:	bf00      	nop
 8008540:	08009530 	.word	0x08009530
 8008544:	08009455 	.word	0x08009455
 8008548:	080094d5 	.word	0x080094d5

0800854c <__lshift>:
 800854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	460c      	mov	r4, r1
 8008552:	6849      	ldr	r1, [r1, #4]
 8008554:	6923      	ldr	r3, [r4, #16]
 8008556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	4607      	mov	r7, r0
 800855e:	4691      	mov	r9, r2
 8008560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008564:	f108 0601 	add.w	r6, r8, #1
 8008568:	42b3      	cmp	r3, r6
 800856a:	db0b      	blt.n	8008584 <__lshift+0x38>
 800856c:	4638      	mov	r0, r7
 800856e:	f7ff fddf 	bl	8008130 <_Balloc>
 8008572:	4605      	mov	r5, r0
 8008574:	b948      	cbnz	r0, 800858a <__lshift+0x3e>
 8008576:	4602      	mov	r2, r0
 8008578:	4b28      	ldr	r3, [pc, #160]	@ (800861c <__lshift+0xd0>)
 800857a:	4829      	ldr	r0, [pc, #164]	@ (8008620 <__lshift+0xd4>)
 800857c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008580:	f000 fb86 	bl	8008c90 <__assert_func>
 8008584:	3101      	adds	r1, #1
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	e7ee      	b.n	8008568 <__lshift+0x1c>
 800858a:	2300      	movs	r3, #0
 800858c:	f100 0114 	add.w	r1, r0, #20
 8008590:	f100 0210 	add.w	r2, r0, #16
 8008594:	4618      	mov	r0, r3
 8008596:	4553      	cmp	r3, sl
 8008598:	db33      	blt.n	8008602 <__lshift+0xb6>
 800859a:	6920      	ldr	r0, [r4, #16]
 800859c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085a0:	f104 0314 	add.w	r3, r4, #20
 80085a4:	f019 091f 	ands.w	r9, r9, #31
 80085a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085b0:	d02b      	beq.n	800860a <__lshift+0xbe>
 80085b2:	f1c9 0e20 	rsb	lr, r9, #32
 80085b6:	468a      	mov	sl, r1
 80085b8:	2200      	movs	r2, #0
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	fa00 f009 	lsl.w	r0, r0, r9
 80085c0:	4310      	orrs	r0, r2
 80085c2:	f84a 0b04 	str.w	r0, [sl], #4
 80085c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ca:	459c      	cmp	ip, r3
 80085cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80085d0:	d8f3      	bhi.n	80085ba <__lshift+0x6e>
 80085d2:	ebac 0304 	sub.w	r3, ip, r4
 80085d6:	3b15      	subs	r3, #21
 80085d8:	f023 0303 	bic.w	r3, r3, #3
 80085dc:	3304      	adds	r3, #4
 80085de:	f104 0015 	add.w	r0, r4, #21
 80085e2:	4584      	cmp	ip, r0
 80085e4:	bf38      	it	cc
 80085e6:	2304      	movcc	r3, #4
 80085e8:	50ca      	str	r2, [r1, r3]
 80085ea:	b10a      	cbz	r2, 80085f0 <__lshift+0xa4>
 80085ec:	f108 0602 	add.w	r6, r8, #2
 80085f0:	3e01      	subs	r6, #1
 80085f2:	4638      	mov	r0, r7
 80085f4:	612e      	str	r6, [r5, #16]
 80085f6:	4621      	mov	r1, r4
 80085f8:	f7ff fdda 	bl	80081b0 <_Bfree>
 80085fc:	4628      	mov	r0, r5
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008602:	f842 0f04 	str.w	r0, [r2, #4]!
 8008606:	3301      	adds	r3, #1
 8008608:	e7c5      	b.n	8008596 <__lshift+0x4a>
 800860a:	3904      	subs	r1, #4
 800860c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008610:	f841 2f04 	str.w	r2, [r1, #4]!
 8008614:	459c      	cmp	ip, r3
 8008616:	d8f9      	bhi.n	800860c <__lshift+0xc0>
 8008618:	e7ea      	b.n	80085f0 <__lshift+0xa4>
 800861a:	bf00      	nop
 800861c:	080094c4 	.word	0x080094c4
 8008620:	080094d5 	.word	0x080094d5

08008624 <__mcmp>:
 8008624:	690a      	ldr	r2, [r1, #16]
 8008626:	4603      	mov	r3, r0
 8008628:	6900      	ldr	r0, [r0, #16]
 800862a:	1a80      	subs	r0, r0, r2
 800862c:	b530      	push	{r4, r5, lr}
 800862e:	d10e      	bne.n	800864e <__mcmp+0x2a>
 8008630:	3314      	adds	r3, #20
 8008632:	3114      	adds	r1, #20
 8008634:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008638:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800863c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008644:	4295      	cmp	r5, r2
 8008646:	d003      	beq.n	8008650 <__mcmp+0x2c>
 8008648:	d205      	bcs.n	8008656 <__mcmp+0x32>
 800864a:	f04f 30ff 	mov.w	r0, #4294967295
 800864e:	bd30      	pop	{r4, r5, pc}
 8008650:	42a3      	cmp	r3, r4
 8008652:	d3f3      	bcc.n	800863c <__mcmp+0x18>
 8008654:	e7fb      	b.n	800864e <__mcmp+0x2a>
 8008656:	2001      	movs	r0, #1
 8008658:	e7f9      	b.n	800864e <__mcmp+0x2a>
	...

0800865c <__mdiff>:
 800865c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	4689      	mov	r9, r1
 8008662:	4606      	mov	r6, r0
 8008664:	4611      	mov	r1, r2
 8008666:	4648      	mov	r0, r9
 8008668:	4614      	mov	r4, r2
 800866a:	f7ff ffdb 	bl	8008624 <__mcmp>
 800866e:	1e05      	subs	r5, r0, #0
 8008670:	d112      	bne.n	8008698 <__mdiff+0x3c>
 8008672:	4629      	mov	r1, r5
 8008674:	4630      	mov	r0, r6
 8008676:	f7ff fd5b 	bl	8008130 <_Balloc>
 800867a:	4602      	mov	r2, r0
 800867c:	b928      	cbnz	r0, 800868a <__mdiff+0x2e>
 800867e:	4b3f      	ldr	r3, [pc, #252]	@ (800877c <__mdiff+0x120>)
 8008680:	f240 2137 	movw	r1, #567	@ 0x237
 8008684:	483e      	ldr	r0, [pc, #248]	@ (8008780 <__mdiff+0x124>)
 8008686:	f000 fb03 	bl	8008c90 <__assert_func>
 800868a:	2301      	movs	r3, #1
 800868c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008690:	4610      	mov	r0, r2
 8008692:	b003      	add	sp, #12
 8008694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008698:	bfbc      	itt	lt
 800869a:	464b      	movlt	r3, r9
 800869c:	46a1      	movlt	r9, r4
 800869e:	4630      	mov	r0, r6
 80086a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086a4:	bfba      	itte	lt
 80086a6:	461c      	movlt	r4, r3
 80086a8:	2501      	movlt	r5, #1
 80086aa:	2500      	movge	r5, #0
 80086ac:	f7ff fd40 	bl	8008130 <_Balloc>
 80086b0:	4602      	mov	r2, r0
 80086b2:	b918      	cbnz	r0, 80086bc <__mdiff+0x60>
 80086b4:	4b31      	ldr	r3, [pc, #196]	@ (800877c <__mdiff+0x120>)
 80086b6:	f240 2145 	movw	r1, #581	@ 0x245
 80086ba:	e7e3      	b.n	8008684 <__mdiff+0x28>
 80086bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086c0:	6926      	ldr	r6, [r4, #16]
 80086c2:	60c5      	str	r5, [r0, #12]
 80086c4:	f109 0310 	add.w	r3, r9, #16
 80086c8:	f109 0514 	add.w	r5, r9, #20
 80086cc:	f104 0e14 	add.w	lr, r4, #20
 80086d0:	f100 0b14 	add.w	fp, r0, #20
 80086d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	46d9      	mov	r9, fp
 80086e0:	f04f 0c00 	mov.w	ip, #0
 80086e4:	9b01      	ldr	r3, [sp, #4]
 80086e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086ee:	9301      	str	r3, [sp, #4]
 80086f0:	fa1f f38a 	uxth.w	r3, sl
 80086f4:	4619      	mov	r1, r3
 80086f6:	b283      	uxth	r3, r0
 80086f8:	1acb      	subs	r3, r1, r3
 80086fa:	0c00      	lsrs	r0, r0, #16
 80086fc:	4463      	add	r3, ip
 80086fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008702:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800870c:	4576      	cmp	r6, lr
 800870e:	f849 3b04 	str.w	r3, [r9], #4
 8008712:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008716:	d8e5      	bhi.n	80086e4 <__mdiff+0x88>
 8008718:	1b33      	subs	r3, r6, r4
 800871a:	3b15      	subs	r3, #21
 800871c:	f023 0303 	bic.w	r3, r3, #3
 8008720:	3415      	adds	r4, #21
 8008722:	3304      	adds	r3, #4
 8008724:	42a6      	cmp	r6, r4
 8008726:	bf38      	it	cc
 8008728:	2304      	movcc	r3, #4
 800872a:	441d      	add	r5, r3
 800872c:	445b      	add	r3, fp
 800872e:	461e      	mov	r6, r3
 8008730:	462c      	mov	r4, r5
 8008732:	4544      	cmp	r4, r8
 8008734:	d30e      	bcc.n	8008754 <__mdiff+0xf8>
 8008736:	f108 0103 	add.w	r1, r8, #3
 800873a:	1b49      	subs	r1, r1, r5
 800873c:	f021 0103 	bic.w	r1, r1, #3
 8008740:	3d03      	subs	r5, #3
 8008742:	45a8      	cmp	r8, r5
 8008744:	bf38      	it	cc
 8008746:	2100      	movcc	r1, #0
 8008748:	440b      	add	r3, r1
 800874a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800874e:	b191      	cbz	r1, 8008776 <__mdiff+0x11a>
 8008750:	6117      	str	r7, [r2, #16]
 8008752:	e79d      	b.n	8008690 <__mdiff+0x34>
 8008754:	f854 1b04 	ldr.w	r1, [r4], #4
 8008758:	46e6      	mov	lr, ip
 800875a:	0c08      	lsrs	r0, r1, #16
 800875c:	fa1c fc81 	uxtah	ip, ip, r1
 8008760:	4471      	add	r1, lr
 8008762:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008766:	b289      	uxth	r1, r1
 8008768:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800876c:	f846 1b04 	str.w	r1, [r6], #4
 8008770:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008774:	e7dd      	b.n	8008732 <__mdiff+0xd6>
 8008776:	3f01      	subs	r7, #1
 8008778:	e7e7      	b.n	800874a <__mdiff+0xee>
 800877a:	bf00      	nop
 800877c:	080094c4 	.word	0x080094c4
 8008780:	080094d5 	.word	0x080094d5

08008784 <__d2b>:
 8008784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008788:	460f      	mov	r7, r1
 800878a:	2101      	movs	r1, #1
 800878c:	ec59 8b10 	vmov	r8, r9, d0
 8008790:	4616      	mov	r6, r2
 8008792:	f7ff fccd 	bl	8008130 <_Balloc>
 8008796:	4604      	mov	r4, r0
 8008798:	b930      	cbnz	r0, 80087a8 <__d2b+0x24>
 800879a:	4602      	mov	r2, r0
 800879c:	4b23      	ldr	r3, [pc, #140]	@ (800882c <__d2b+0xa8>)
 800879e:	4824      	ldr	r0, [pc, #144]	@ (8008830 <__d2b+0xac>)
 80087a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80087a4:	f000 fa74 	bl	8008c90 <__assert_func>
 80087a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087b0:	b10d      	cbz	r5, 80087b6 <__d2b+0x32>
 80087b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087b6:	9301      	str	r3, [sp, #4]
 80087b8:	f1b8 0300 	subs.w	r3, r8, #0
 80087bc:	d023      	beq.n	8008806 <__d2b+0x82>
 80087be:	4668      	mov	r0, sp
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	f7ff fd7c 	bl	80082be <__lo0bits>
 80087c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087ca:	b1d0      	cbz	r0, 8008802 <__d2b+0x7e>
 80087cc:	f1c0 0320 	rsb	r3, r0, #32
 80087d0:	fa02 f303 	lsl.w	r3, r2, r3
 80087d4:	430b      	orrs	r3, r1
 80087d6:	40c2      	lsrs	r2, r0
 80087d8:	6163      	str	r3, [r4, #20]
 80087da:	9201      	str	r2, [sp, #4]
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	61a3      	str	r3, [r4, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bf0c      	ite	eq
 80087e4:	2201      	moveq	r2, #1
 80087e6:	2202      	movne	r2, #2
 80087e8:	6122      	str	r2, [r4, #16]
 80087ea:	b1a5      	cbz	r5, 8008816 <__d2b+0x92>
 80087ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087f0:	4405      	add	r5, r0
 80087f2:	603d      	str	r5, [r7, #0]
 80087f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80087f8:	6030      	str	r0, [r6, #0]
 80087fa:	4620      	mov	r0, r4
 80087fc:	b003      	add	sp, #12
 80087fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008802:	6161      	str	r1, [r4, #20]
 8008804:	e7ea      	b.n	80087dc <__d2b+0x58>
 8008806:	a801      	add	r0, sp, #4
 8008808:	f7ff fd59 	bl	80082be <__lo0bits>
 800880c:	9b01      	ldr	r3, [sp, #4]
 800880e:	6163      	str	r3, [r4, #20]
 8008810:	3020      	adds	r0, #32
 8008812:	2201      	movs	r2, #1
 8008814:	e7e8      	b.n	80087e8 <__d2b+0x64>
 8008816:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800881a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800881e:	6038      	str	r0, [r7, #0]
 8008820:	6918      	ldr	r0, [r3, #16]
 8008822:	f7ff fd2d 	bl	8008280 <__hi0bits>
 8008826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800882a:	e7e5      	b.n	80087f8 <__d2b+0x74>
 800882c:	080094c4 	.word	0x080094c4
 8008830:	080094d5 	.word	0x080094d5

08008834 <__ssputs_r>:
 8008834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008838:	688e      	ldr	r6, [r1, #8]
 800883a:	461f      	mov	r7, r3
 800883c:	42be      	cmp	r6, r7
 800883e:	680b      	ldr	r3, [r1, #0]
 8008840:	4682      	mov	sl, r0
 8008842:	460c      	mov	r4, r1
 8008844:	4690      	mov	r8, r2
 8008846:	d82d      	bhi.n	80088a4 <__ssputs_r+0x70>
 8008848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800884c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008850:	d026      	beq.n	80088a0 <__ssputs_r+0x6c>
 8008852:	6965      	ldr	r5, [r4, #20]
 8008854:	6909      	ldr	r1, [r1, #16]
 8008856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800885a:	eba3 0901 	sub.w	r9, r3, r1
 800885e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008862:	1c7b      	adds	r3, r7, #1
 8008864:	444b      	add	r3, r9
 8008866:	106d      	asrs	r5, r5, #1
 8008868:	429d      	cmp	r5, r3
 800886a:	bf38      	it	cc
 800886c:	461d      	movcc	r5, r3
 800886e:	0553      	lsls	r3, r2, #21
 8008870:	d527      	bpl.n	80088c2 <__ssputs_r+0x8e>
 8008872:	4629      	mov	r1, r5
 8008874:	f7ff fbd0 	bl	8008018 <_malloc_r>
 8008878:	4606      	mov	r6, r0
 800887a:	b360      	cbz	r0, 80088d6 <__ssputs_r+0xa2>
 800887c:	6921      	ldr	r1, [r4, #16]
 800887e:	464a      	mov	r2, r9
 8008880:	f7fe fcfb 	bl	800727a <memcpy>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800888a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	6126      	str	r6, [r4, #16]
 8008892:	6165      	str	r5, [r4, #20]
 8008894:	444e      	add	r6, r9
 8008896:	eba5 0509 	sub.w	r5, r5, r9
 800889a:	6026      	str	r6, [r4, #0]
 800889c:	60a5      	str	r5, [r4, #8]
 800889e:	463e      	mov	r6, r7
 80088a0:	42be      	cmp	r6, r7
 80088a2:	d900      	bls.n	80088a6 <__ssputs_r+0x72>
 80088a4:	463e      	mov	r6, r7
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	4632      	mov	r2, r6
 80088aa:	4641      	mov	r1, r8
 80088ac:	f000 f9c6 	bl	8008c3c <memmove>
 80088b0:	68a3      	ldr	r3, [r4, #8]
 80088b2:	1b9b      	subs	r3, r3, r6
 80088b4:	60a3      	str	r3, [r4, #8]
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	4433      	add	r3, r6
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	2000      	movs	r0, #0
 80088be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c2:	462a      	mov	r2, r5
 80088c4:	f000 fa28 	bl	8008d18 <_realloc_r>
 80088c8:	4606      	mov	r6, r0
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d1e0      	bne.n	8008890 <__ssputs_r+0x5c>
 80088ce:	6921      	ldr	r1, [r4, #16]
 80088d0:	4650      	mov	r0, sl
 80088d2:	f7ff fb2d 	bl	8007f30 <_free_r>
 80088d6:	230c      	movs	r3, #12
 80088d8:	f8ca 3000 	str.w	r3, [sl]
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e7e9      	b.n	80088be <__ssputs_r+0x8a>
	...

080088ec <_svfiprintf_r>:
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	4698      	mov	r8, r3
 80088f2:	898b      	ldrh	r3, [r1, #12]
 80088f4:	061b      	lsls	r3, r3, #24
 80088f6:	b09d      	sub	sp, #116	@ 0x74
 80088f8:	4607      	mov	r7, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	4614      	mov	r4, r2
 80088fe:	d510      	bpl.n	8008922 <_svfiprintf_r+0x36>
 8008900:	690b      	ldr	r3, [r1, #16]
 8008902:	b973      	cbnz	r3, 8008922 <_svfiprintf_r+0x36>
 8008904:	2140      	movs	r1, #64	@ 0x40
 8008906:	f7ff fb87 	bl	8008018 <_malloc_r>
 800890a:	6028      	str	r0, [r5, #0]
 800890c:	6128      	str	r0, [r5, #16]
 800890e:	b930      	cbnz	r0, 800891e <_svfiprintf_r+0x32>
 8008910:	230c      	movs	r3, #12
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	b01d      	add	sp, #116	@ 0x74
 800891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891e:	2340      	movs	r3, #64	@ 0x40
 8008920:	616b      	str	r3, [r5, #20]
 8008922:	2300      	movs	r3, #0
 8008924:	9309      	str	r3, [sp, #36]	@ 0x24
 8008926:	2320      	movs	r3, #32
 8008928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800892c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008930:	2330      	movs	r3, #48	@ 0x30
 8008932:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ad0 <_svfiprintf_r+0x1e4>
 8008936:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800893a:	f04f 0901 	mov.w	r9, #1
 800893e:	4623      	mov	r3, r4
 8008940:	469a      	mov	sl, r3
 8008942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008946:	b10a      	cbz	r2, 800894c <_svfiprintf_r+0x60>
 8008948:	2a25      	cmp	r2, #37	@ 0x25
 800894a:	d1f9      	bne.n	8008940 <_svfiprintf_r+0x54>
 800894c:	ebba 0b04 	subs.w	fp, sl, r4
 8008950:	d00b      	beq.n	800896a <_svfiprintf_r+0x7e>
 8008952:	465b      	mov	r3, fp
 8008954:	4622      	mov	r2, r4
 8008956:	4629      	mov	r1, r5
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ff6b 	bl	8008834 <__ssputs_r>
 800895e:	3001      	adds	r0, #1
 8008960:	f000 80a7 	beq.w	8008ab2 <_svfiprintf_r+0x1c6>
 8008964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008966:	445a      	add	r2, fp
 8008968:	9209      	str	r2, [sp, #36]	@ 0x24
 800896a:	f89a 3000 	ldrb.w	r3, [sl]
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 809f 	beq.w	8008ab2 <_svfiprintf_r+0x1c6>
 8008974:	2300      	movs	r3, #0
 8008976:	f04f 32ff 	mov.w	r2, #4294967295
 800897a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800897e:	f10a 0a01 	add.w	sl, sl, #1
 8008982:	9304      	str	r3, [sp, #16]
 8008984:	9307      	str	r3, [sp, #28]
 8008986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800898a:	931a      	str	r3, [sp, #104]	@ 0x68
 800898c:	4654      	mov	r4, sl
 800898e:	2205      	movs	r2, #5
 8008990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008994:	484e      	ldr	r0, [pc, #312]	@ (8008ad0 <_svfiprintf_r+0x1e4>)
 8008996:	f7f7 fc23 	bl	80001e0 <memchr>
 800899a:	9a04      	ldr	r2, [sp, #16]
 800899c:	b9d8      	cbnz	r0, 80089d6 <_svfiprintf_r+0xea>
 800899e:	06d0      	lsls	r0, r2, #27
 80089a0:	bf44      	itt	mi
 80089a2:	2320      	movmi	r3, #32
 80089a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089a8:	0711      	lsls	r1, r2, #28
 80089aa:	bf44      	itt	mi
 80089ac:	232b      	movmi	r3, #43	@ 0x2b
 80089ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b2:	f89a 3000 	ldrb.w	r3, [sl]
 80089b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b8:	d015      	beq.n	80089e6 <_svfiprintf_r+0xfa>
 80089ba:	9a07      	ldr	r2, [sp, #28]
 80089bc:	4654      	mov	r4, sl
 80089be:	2000      	movs	r0, #0
 80089c0:	f04f 0c0a 	mov.w	ip, #10
 80089c4:	4621      	mov	r1, r4
 80089c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ca:	3b30      	subs	r3, #48	@ 0x30
 80089cc:	2b09      	cmp	r3, #9
 80089ce:	d94b      	bls.n	8008a68 <_svfiprintf_r+0x17c>
 80089d0:	b1b0      	cbz	r0, 8008a00 <_svfiprintf_r+0x114>
 80089d2:	9207      	str	r2, [sp, #28]
 80089d4:	e014      	b.n	8008a00 <_svfiprintf_r+0x114>
 80089d6:	eba0 0308 	sub.w	r3, r0, r8
 80089da:	fa09 f303 	lsl.w	r3, r9, r3
 80089de:	4313      	orrs	r3, r2
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	46a2      	mov	sl, r4
 80089e4:	e7d2      	b.n	800898c <_svfiprintf_r+0xa0>
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	1d19      	adds	r1, r3, #4
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	9103      	str	r1, [sp, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	bfbb      	ittet	lt
 80089f2:	425b      	neglt	r3, r3
 80089f4:	f042 0202 	orrlt.w	r2, r2, #2
 80089f8:	9307      	strge	r3, [sp, #28]
 80089fa:	9307      	strlt	r3, [sp, #28]
 80089fc:	bfb8      	it	lt
 80089fe:	9204      	strlt	r2, [sp, #16]
 8008a00:	7823      	ldrb	r3, [r4, #0]
 8008a02:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a04:	d10a      	bne.n	8008a1c <_svfiprintf_r+0x130>
 8008a06:	7863      	ldrb	r3, [r4, #1]
 8008a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a0a:	d132      	bne.n	8008a72 <_svfiprintf_r+0x186>
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	1d1a      	adds	r2, r3, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	9203      	str	r2, [sp, #12]
 8008a14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a18:	3402      	adds	r4, #2
 8008a1a:	9305      	str	r3, [sp, #20]
 8008a1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ae0 <_svfiprintf_r+0x1f4>
 8008a20:	7821      	ldrb	r1, [r4, #0]
 8008a22:	2203      	movs	r2, #3
 8008a24:	4650      	mov	r0, sl
 8008a26:	f7f7 fbdb 	bl	80001e0 <memchr>
 8008a2a:	b138      	cbz	r0, 8008a3c <_svfiprintf_r+0x150>
 8008a2c:	9b04      	ldr	r3, [sp, #16]
 8008a2e:	eba0 000a 	sub.w	r0, r0, sl
 8008a32:	2240      	movs	r2, #64	@ 0x40
 8008a34:	4082      	lsls	r2, r0
 8008a36:	4313      	orrs	r3, r2
 8008a38:	3401      	adds	r4, #1
 8008a3a:	9304      	str	r3, [sp, #16]
 8008a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a40:	4824      	ldr	r0, [pc, #144]	@ (8008ad4 <_svfiprintf_r+0x1e8>)
 8008a42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a46:	2206      	movs	r2, #6
 8008a48:	f7f7 fbca 	bl	80001e0 <memchr>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d036      	beq.n	8008abe <_svfiprintf_r+0x1d2>
 8008a50:	4b21      	ldr	r3, [pc, #132]	@ (8008ad8 <_svfiprintf_r+0x1ec>)
 8008a52:	bb1b      	cbnz	r3, 8008a9c <_svfiprintf_r+0x1b0>
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	3307      	adds	r3, #7
 8008a58:	f023 0307 	bic.w	r3, r3, #7
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	9303      	str	r3, [sp, #12]
 8008a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a62:	4433      	add	r3, r6
 8008a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a66:	e76a      	b.n	800893e <_svfiprintf_r+0x52>
 8008a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	2001      	movs	r0, #1
 8008a70:	e7a8      	b.n	80089c4 <_svfiprintf_r+0xd8>
 8008a72:	2300      	movs	r3, #0
 8008a74:	3401      	adds	r4, #1
 8008a76:	9305      	str	r3, [sp, #20]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	f04f 0c0a 	mov.w	ip, #10
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a84:	3a30      	subs	r2, #48	@ 0x30
 8008a86:	2a09      	cmp	r2, #9
 8008a88:	d903      	bls.n	8008a92 <_svfiprintf_r+0x1a6>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0c6      	beq.n	8008a1c <_svfiprintf_r+0x130>
 8008a8e:	9105      	str	r1, [sp, #20]
 8008a90:	e7c4      	b.n	8008a1c <_svfiprintf_r+0x130>
 8008a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a96:	4604      	mov	r4, r0
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e7f0      	b.n	8008a7e <_svfiprintf_r+0x192>
 8008a9c:	ab03      	add	r3, sp, #12
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	462a      	mov	r2, r5
 8008aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8008adc <_svfiprintf_r+0x1f0>)
 8008aa4:	a904      	add	r1, sp, #16
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	f7fd fe34 	bl	8006714 <_printf_float>
 8008aac:	1c42      	adds	r2, r0, #1
 8008aae:	4606      	mov	r6, r0
 8008ab0:	d1d6      	bne.n	8008a60 <_svfiprintf_r+0x174>
 8008ab2:	89ab      	ldrh	r3, [r5, #12]
 8008ab4:	065b      	lsls	r3, r3, #25
 8008ab6:	f53f af2d 	bmi.w	8008914 <_svfiprintf_r+0x28>
 8008aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008abc:	e72c      	b.n	8008918 <_svfiprintf_r+0x2c>
 8008abe:	ab03      	add	r3, sp, #12
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	4b05      	ldr	r3, [pc, #20]	@ (8008adc <_svfiprintf_r+0x1f0>)
 8008ac6:	a904      	add	r1, sp, #16
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7fe f8bb 	bl	8006c44 <_printf_i>
 8008ace:	e7ed      	b.n	8008aac <_svfiprintf_r+0x1c0>
 8008ad0:	08009630 	.word	0x08009630
 8008ad4:	0800963a 	.word	0x0800963a
 8008ad8:	08006715 	.word	0x08006715
 8008adc:	08008835 	.word	0x08008835
 8008ae0:	08009636 	.word	0x08009636

08008ae4 <__sflush_r>:
 8008ae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aec:	0716      	lsls	r6, r2, #28
 8008aee:	4605      	mov	r5, r0
 8008af0:	460c      	mov	r4, r1
 8008af2:	d454      	bmi.n	8008b9e <__sflush_r+0xba>
 8008af4:	684b      	ldr	r3, [r1, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	dc02      	bgt.n	8008b00 <__sflush_r+0x1c>
 8008afa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dd48      	ble.n	8008b92 <__sflush_r+0xae>
 8008b00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	d045      	beq.n	8008b92 <__sflush_r+0xae>
 8008b06:	2300      	movs	r3, #0
 8008b08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b0c:	682f      	ldr	r7, [r5, #0]
 8008b0e:	6a21      	ldr	r1, [r4, #32]
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	d030      	beq.n	8008b76 <__sflush_r+0x92>
 8008b14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	0759      	lsls	r1, r3, #29
 8008b1a:	d505      	bpl.n	8008b28 <__sflush_r+0x44>
 8008b1c:	6863      	ldr	r3, [r4, #4]
 8008b1e:	1ad2      	subs	r2, r2, r3
 8008b20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b22:	b10b      	cbz	r3, 8008b28 <__sflush_r+0x44>
 8008b24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b26:	1ad2      	subs	r2, r2, r3
 8008b28:	2300      	movs	r3, #0
 8008b2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b2c:	6a21      	ldr	r1, [r4, #32]
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b0      	blx	r6
 8008b32:	1c43      	adds	r3, r0, #1
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	d106      	bne.n	8008b46 <__sflush_r+0x62>
 8008b38:	6829      	ldr	r1, [r5, #0]
 8008b3a:	291d      	cmp	r1, #29
 8008b3c:	d82b      	bhi.n	8008b96 <__sflush_r+0xb2>
 8008b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008be8 <__sflush_r+0x104>)
 8008b40:	410a      	asrs	r2, r1
 8008b42:	07d6      	lsls	r6, r2, #31
 8008b44:	d427      	bmi.n	8008b96 <__sflush_r+0xb2>
 8008b46:	2200      	movs	r2, #0
 8008b48:	6062      	str	r2, [r4, #4]
 8008b4a:	04d9      	lsls	r1, r3, #19
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	6022      	str	r2, [r4, #0]
 8008b50:	d504      	bpl.n	8008b5c <__sflush_r+0x78>
 8008b52:	1c42      	adds	r2, r0, #1
 8008b54:	d101      	bne.n	8008b5a <__sflush_r+0x76>
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	b903      	cbnz	r3, 8008b5c <__sflush_r+0x78>
 8008b5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b5e:	602f      	str	r7, [r5, #0]
 8008b60:	b1b9      	cbz	r1, 8008b92 <__sflush_r+0xae>
 8008b62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b66:	4299      	cmp	r1, r3
 8008b68:	d002      	beq.n	8008b70 <__sflush_r+0x8c>
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f7ff f9e0 	bl	8007f30 <_free_r>
 8008b70:	2300      	movs	r3, #0
 8008b72:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b74:	e00d      	b.n	8008b92 <__sflush_r+0xae>
 8008b76:	2301      	movs	r3, #1
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b0      	blx	r6
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	1c50      	adds	r0, r2, #1
 8008b80:	d1c9      	bne.n	8008b16 <__sflush_r+0x32>
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0c6      	beq.n	8008b16 <__sflush_r+0x32>
 8008b88:	2b1d      	cmp	r3, #29
 8008b8a:	d001      	beq.n	8008b90 <__sflush_r+0xac>
 8008b8c:	2b16      	cmp	r3, #22
 8008b8e:	d11e      	bne.n	8008bce <__sflush_r+0xea>
 8008b90:	602f      	str	r7, [r5, #0]
 8008b92:	2000      	movs	r0, #0
 8008b94:	e022      	b.n	8008bdc <__sflush_r+0xf8>
 8008b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b9a:	b21b      	sxth	r3, r3
 8008b9c:	e01b      	b.n	8008bd6 <__sflush_r+0xf2>
 8008b9e:	690f      	ldr	r7, [r1, #16]
 8008ba0:	2f00      	cmp	r7, #0
 8008ba2:	d0f6      	beq.n	8008b92 <__sflush_r+0xae>
 8008ba4:	0793      	lsls	r3, r2, #30
 8008ba6:	680e      	ldr	r6, [r1, #0]
 8008ba8:	bf08      	it	eq
 8008baa:	694b      	ldreq	r3, [r1, #20]
 8008bac:	600f      	str	r7, [r1, #0]
 8008bae:	bf18      	it	ne
 8008bb0:	2300      	movne	r3, #0
 8008bb2:	eba6 0807 	sub.w	r8, r6, r7
 8008bb6:	608b      	str	r3, [r1, #8]
 8008bb8:	f1b8 0f00 	cmp.w	r8, #0
 8008bbc:	dde9      	ble.n	8008b92 <__sflush_r+0xae>
 8008bbe:	6a21      	ldr	r1, [r4, #32]
 8008bc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bc2:	4643      	mov	r3, r8
 8008bc4:	463a      	mov	r2, r7
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	47b0      	blx	r6
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	dc08      	bgt.n	8008be0 <__sflush_r+0xfc>
 8008bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bd6:	81a3      	strh	r3, [r4, #12]
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be0:	4407      	add	r7, r0
 8008be2:	eba8 0800 	sub.w	r8, r8, r0
 8008be6:	e7e7      	b.n	8008bb8 <__sflush_r+0xd4>
 8008be8:	dfbffffe 	.word	0xdfbffffe

08008bec <_fflush_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	690b      	ldr	r3, [r1, #16]
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	b913      	cbnz	r3, 8008bfc <_fflush_r+0x10>
 8008bf6:	2500      	movs	r5, #0
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	b118      	cbz	r0, 8008c06 <_fflush_r+0x1a>
 8008bfe:	6a03      	ldr	r3, [r0, #32]
 8008c00:	b90b      	cbnz	r3, 8008c06 <_fflush_r+0x1a>
 8008c02:	f7fe f9cb 	bl	8006f9c <__sinit>
 8008c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f3      	beq.n	8008bf6 <_fflush_r+0xa>
 8008c0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c10:	07d0      	lsls	r0, r2, #31
 8008c12:	d404      	bmi.n	8008c1e <_fflush_r+0x32>
 8008c14:	0599      	lsls	r1, r3, #22
 8008c16:	d402      	bmi.n	8008c1e <_fflush_r+0x32>
 8008c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c1a:	f7fe fb2c 	bl	8007276 <__retarget_lock_acquire_recursive>
 8008c1e:	4628      	mov	r0, r5
 8008c20:	4621      	mov	r1, r4
 8008c22:	f7ff ff5f 	bl	8008ae4 <__sflush_r>
 8008c26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c28:	07da      	lsls	r2, r3, #31
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	d4e4      	bmi.n	8008bf8 <_fflush_r+0xc>
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	059b      	lsls	r3, r3, #22
 8008c32:	d4e1      	bmi.n	8008bf8 <_fflush_r+0xc>
 8008c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c36:	f7fe fb1f 	bl	8007278 <__retarget_lock_release_recursive>
 8008c3a:	e7dd      	b.n	8008bf8 <_fflush_r+0xc>

08008c3c <memmove>:
 8008c3c:	4288      	cmp	r0, r1
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	eb01 0402 	add.w	r4, r1, r2
 8008c44:	d902      	bls.n	8008c4c <memmove+0x10>
 8008c46:	4284      	cmp	r4, r0
 8008c48:	4623      	mov	r3, r4
 8008c4a:	d807      	bhi.n	8008c5c <memmove+0x20>
 8008c4c:	1e43      	subs	r3, r0, #1
 8008c4e:	42a1      	cmp	r1, r4
 8008c50:	d008      	beq.n	8008c64 <memmove+0x28>
 8008c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c5a:	e7f8      	b.n	8008c4e <memmove+0x12>
 8008c5c:	4402      	add	r2, r0
 8008c5e:	4601      	mov	r1, r0
 8008c60:	428a      	cmp	r2, r1
 8008c62:	d100      	bne.n	8008c66 <memmove+0x2a>
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c6e:	e7f7      	b.n	8008c60 <memmove+0x24>

08008c70 <_sbrk_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d06      	ldr	r5, [pc, #24]	@ (8008c8c <_sbrk_r+0x1c>)
 8008c74:	2300      	movs	r3, #0
 8008c76:	4604      	mov	r4, r0
 8008c78:	4608      	mov	r0, r1
 8008c7a:	602b      	str	r3, [r5, #0]
 8008c7c:	f7f8 ffb0 	bl	8001be0 <_sbrk>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_sbrk_r+0x1a>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_sbrk_r+0x1a>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	20004490 	.word	0x20004490

08008c90 <__assert_func>:
 8008c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c92:	4614      	mov	r4, r2
 8008c94:	461a      	mov	r2, r3
 8008c96:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <__assert_func+0x2c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	68d8      	ldr	r0, [r3, #12]
 8008c9e:	b954      	cbnz	r4, 8008cb6 <__assert_func+0x26>
 8008ca0:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <__assert_func+0x30>)
 8008ca2:	461c      	mov	r4, r3
 8008ca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ca8:	9100      	str	r1, [sp, #0]
 8008caa:	462b      	mov	r3, r5
 8008cac:	4905      	ldr	r1, [pc, #20]	@ (8008cc4 <__assert_func+0x34>)
 8008cae:	f000 f86f 	bl	8008d90 <fiprintf>
 8008cb2:	f000 f87f 	bl	8008db4 <abort>
 8008cb6:	4b04      	ldr	r3, [pc, #16]	@ (8008cc8 <__assert_func+0x38>)
 8008cb8:	e7f4      	b.n	8008ca4 <__assert_func+0x14>
 8008cba:	bf00      	nop
 8008cbc:	2000001c 	.word	0x2000001c
 8008cc0:	08009686 	.word	0x08009686
 8008cc4:	08009658 	.word	0x08009658
 8008cc8:	0800964b 	.word	0x0800964b

08008ccc <_calloc_r>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	fba1 5402 	umull	r5, r4, r1, r2
 8008cd2:	b93c      	cbnz	r4, 8008ce4 <_calloc_r+0x18>
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7ff f99f 	bl	8008018 <_malloc_r>
 8008cda:	4606      	mov	r6, r0
 8008cdc:	b928      	cbnz	r0, 8008cea <_calloc_r+0x1e>
 8008cde:	2600      	movs	r6, #0
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
 8008ce4:	220c      	movs	r2, #12
 8008ce6:	6002      	str	r2, [r0, #0]
 8008ce8:	e7f9      	b.n	8008cde <_calloc_r+0x12>
 8008cea:	462a      	mov	r2, r5
 8008cec:	4621      	mov	r1, r4
 8008cee:	f7fe f9ee 	bl	80070ce <memset>
 8008cf2:	e7f5      	b.n	8008ce0 <_calloc_r+0x14>

08008cf4 <__ascii_mbtowc>:
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	b901      	cbnz	r1, 8008cfa <__ascii_mbtowc+0x6>
 8008cf8:	a901      	add	r1, sp, #4
 8008cfa:	b142      	cbz	r2, 8008d0e <__ascii_mbtowc+0x1a>
 8008cfc:	b14b      	cbz	r3, 8008d12 <__ascii_mbtowc+0x1e>
 8008cfe:	7813      	ldrb	r3, [r2, #0]
 8008d00:	600b      	str	r3, [r1, #0]
 8008d02:	7812      	ldrb	r2, [r2, #0]
 8008d04:	1e10      	subs	r0, r2, #0
 8008d06:	bf18      	it	ne
 8008d08:	2001      	movne	r0, #1
 8008d0a:	b002      	add	sp, #8
 8008d0c:	4770      	bx	lr
 8008d0e:	4610      	mov	r0, r2
 8008d10:	e7fb      	b.n	8008d0a <__ascii_mbtowc+0x16>
 8008d12:	f06f 0001 	mvn.w	r0, #1
 8008d16:	e7f8      	b.n	8008d0a <__ascii_mbtowc+0x16>

08008d18 <_realloc_r>:
 8008d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	4615      	mov	r5, r2
 8008d20:	460c      	mov	r4, r1
 8008d22:	b921      	cbnz	r1, 8008d2e <_realloc_r+0x16>
 8008d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	4611      	mov	r1, r2
 8008d2a:	f7ff b975 	b.w	8008018 <_malloc_r>
 8008d2e:	b92a      	cbnz	r2, 8008d3c <_realloc_r+0x24>
 8008d30:	f7ff f8fe 	bl	8007f30 <_free_r>
 8008d34:	2400      	movs	r4, #0
 8008d36:	4620      	mov	r0, r4
 8008d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3c:	f000 f841 	bl	8008dc2 <_malloc_usable_size_r>
 8008d40:	4285      	cmp	r5, r0
 8008d42:	4606      	mov	r6, r0
 8008d44:	d802      	bhi.n	8008d4c <_realloc_r+0x34>
 8008d46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d4a:	d8f4      	bhi.n	8008d36 <_realloc_r+0x1e>
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f7ff f962 	bl	8008018 <_malloc_r>
 8008d54:	4607      	mov	r7, r0
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d0ec      	beq.n	8008d34 <_realloc_r+0x1c>
 8008d5a:	42b5      	cmp	r5, r6
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	4621      	mov	r1, r4
 8008d60:	bf28      	it	cs
 8008d62:	4632      	movcs	r2, r6
 8008d64:	f7fe fa89 	bl	800727a <memcpy>
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	f7ff f8e0 	bl	8007f30 <_free_r>
 8008d70:	463c      	mov	r4, r7
 8008d72:	e7e0      	b.n	8008d36 <_realloc_r+0x1e>

08008d74 <__ascii_wctomb>:
 8008d74:	4603      	mov	r3, r0
 8008d76:	4608      	mov	r0, r1
 8008d78:	b141      	cbz	r1, 8008d8c <__ascii_wctomb+0x18>
 8008d7a:	2aff      	cmp	r2, #255	@ 0xff
 8008d7c:	d904      	bls.n	8008d88 <__ascii_wctomb+0x14>
 8008d7e:	228a      	movs	r2, #138	@ 0x8a
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295
 8008d86:	4770      	bx	lr
 8008d88:	700a      	strb	r2, [r1, #0]
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	4770      	bx	lr
	...

08008d90 <fiprintf>:
 8008d90:	b40e      	push	{r1, r2, r3}
 8008d92:	b503      	push	{r0, r1, lr}
 8008d94:	4601      	mov	r1, r0
 8008d96:	ab03      	add	r3, sp, #12
 8008d98:	4805      	ldr	r0, [pc, #20]	@ (8008db0 <fiprintf+0x20>)
 8008d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d9e:	6800      	ldr	r0, [r0, #0]
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	f000 f83f 	bl	8008e24 <_vfiprintf_r>
 8008da6:	b002      	add	sp, #8
 8008da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dac:	b003      	add	sp, #12
 8008dae:	4770      	bx	lr
 8008db0:	2000001c 	.word	0x2000001c

08008db4 <abort>:
 8008db4:	b508      	push	{r3, lr}
 8008db6:	2006      	movs	r0, #6
 8008db8:	f000 fa08 	bl	80091cc <raise>
 8008dbc:	2001      	movs	r0, #1
 8008dbe:	f7f8 fe97 	bl	8001af0 <_exit>

08008dc2 <_malloc_usable_size_r>:
 8008dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc6:	1f18      	subs	r0, r3, #4
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	bfbc      	itt	lt
 8008dcc:	580b      	ldrlt	r3, [r1, r0]
 8008dce:	18c0      	addlt	r0, r0, r3
 8008dd0:	4770      	bx	lr

08008dd2 <__sfputc_r>:
 8008dd2:	6893      	ldr	r3, [r2, #8]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	b410      	push	{r4}
 8008dda:	6093      	str	r3, [r2, #8]
 8008ddc:	da08      	bge.n	8008df0 <__sfputc_r+0x1e>
 8008dde:	6994      	ldr	r4, [r2, #24]
 8008de0:	42a3      	cmp	r3, r4
 8008de2:	db01      	blt.n	8008de8 <__sfputc_r+0x16>
 8008de4:	290a      	cmp	r1, #10
 8008de6:	d103      	bne.n	8008df0 <__sfputc_r+0x1e>
 8008de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dec:	f000 b932 	b.w	8009054 <__swbuf_r>
 8008df0:	6813      	ldr	r3, [r2, #0]
 8008df2:	1c58      	adds	r0, r3, #1
 8008df4:	6010      	str	r0, [r2, #0]
 8008df6:	7019      	strb	r1, [r3, #0]
 8008df8:	4608      	mov	r0, r1
 8008dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <__sfputs_r>:
 8008e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e02:	4606      	mov	r6, r0
 8008e04:	460f      	mov	r7, r1
 8008e06:	4614      	mov	r4, r2
 8008e08:	18d5      	adds	r5, r2, r3
 8008e0a:	42ac      	cmp	r4, r5
 8008e0c:	d101      	bne.n	8008e12 <__sfputs_r+0x12>
 8008e0e:	2000      	movs	r0, #0
 8008e10:	e007      	b.n	8008e22 <__sfputs_r+0x22>
 8008e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e16:	463a      	mov	r2, r7
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f7ff ffda 	bl	8008dd2 <__sfputc_r>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	d1f3      	bne.n	8008e0a <__sfputs_r+0xa>
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e24 <_vfiprintf_r>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	460d      	mov	r5, r1
 8008e2a:	b09d      	sub	sp, #116	@ 0x74
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	4698      	mov	r8, r3
 8008e30:	4606      	mov	r6, r0
 8008e32:	b118      	cbz	r0, 8008e3c <_vfiprintf_r+0x18>
 8008e34:	6a03      	ldr	r3, [r0, #32]
 8008e36:	b90b      	cbnz	r3, 8008e3c <_vfiprintf_r+0x18>
 8008e38:	f7fe f8b0 	bl	8006f9c <__sinit>
 8008e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e3e:	07d9      	lsls	r1, r3, #31
 8008e40:	d405      	bmi.n	8008e4e <_vfiprintf_r+0x2a>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	059a      	lsls	r2, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_vfiprintf_r+0x2a>
 8008e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e4a:	f7fe fa14 	bl	8007276 <__retarget_lock_acquire_recursive>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	071b      	lsls	r3, r3, #28
 8008e52:	d501      	bpl.n	8008e58 <_vfiprintf_r+0x34>
 8008e54:	692b      	ldr	r3, [r5, #16]
 8008e56:	b99b      	cbnz	r3, 8008e80 <_vfiprintf_r+0x5c>
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f000 f938 	bl	80090d0 <__swsetup_r>
 8008e60:	b170      	cbz	r0, 8008e80 <_vfiprintf_r+0x5c>
 8008e62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e64:	07dc      	lsls	r4, r3, #31
 8008e66:	d504      	bpl.n	8008e72 <_vfiprintf_r+0x4e>
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	b01d      	add	sp, #116	@ 0x74
 8008e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	0598      	lsls	r0, r3, #22
 8008e76:	d4f7      	bmi.n	8008e68 <_vfiprintf_r+0x44>
 8008e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e7a:	f7fe f9fd 	bl	8007278 <__retarget_lock_release_recursive>
 8008e7e:	e7f3      	b.n	8008e68 <_vfiprintf_r+0x44>
 8008e80:	2300      	movs	r3, #0
 8008e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e84:	2320      	movs	r3, #32
 8008e86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e8e:	2330      	movs	r3, #48	@ 0x30
 8008e90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009040 <_vfiprintf_r+0x21c>
 8008e94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e98:	f04f 0901 	mov.w	r9, #1
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	469a      	mov	sl, r3
 8008ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea4:	b10a      	cbz	r2, 8008eaa <_vfiprintf_r+0x86>
 8008ea6:	2a25      	cmp	r2, #37	@ 0x25
 8008ea8:	d1f9      	bne.n	8008e9e <_vfiprintf_r+0x7a>
 8008eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8008eae:	d00b      	beq.n	8008ec8 <_vfiprintf_r+0xa4>
 8008eb0:	465b      	mov	r3, fp
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff ffa2 	bl	8008e00 <__sfputs_r>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	f000 80a7 	beq.w	8009010 <_vfiprintf_r+0x1ec>
 8008ec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ec4:	445a      	add	r2, fp
 8008ec6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 809f 	beq.w	8009010 <_vfiprintf_r+0x1ec>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008edc:	f10a 0a01 	add.w	sl, sl, #1
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	9307      	str	r3, [sp, #28]
 8008ee4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ee8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008eea:	4654      	mov	r4, sl
 8008eec:	2205      	movs	r2, #5
 8008eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef2:	4853      	ldr	r0, [pc, #332]	@ (8009040 <_vfiprintf_r+0x21c>)
 8008ef4:	f7f7 f974 	bl	80001e0 <memchr>
 8008ef8:	9a04      	ldr	r2, [sp, #16]
 8008efa:	b9d8      	cbnz	r0, 8008f34 <_vfiprintf_r+0x110>
 8008efc:	06d1      	lsls	r1, r2, #27
 8008efe:	bf44      	itt	mi
 8008f00:	2320      	movmi	r3, #32
 8008f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f06:	0713      	lsls	r3, r2, #28
 8008f08:	bf44      	itt	mi
 8008f0a:	232b      	movmi	r3, #43	@ 0x2b
 8008f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f10:	f89a 3000 	ldrb.w	r3, [sl]
 8008f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f16:	d015      	beq.n	8008f44 <_vfiprintf_r+0x120>
 8008f18:	9a07      	ldr	r2, [sp, #28]
 8008f1a:	4654      	mov	r4, sl
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	f04f 0c0a 	mov.w	ip, #10
 8008f22:	4621      	mov	r1, r4
 8008f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f28:	3b30      	subs	r3, #48	@ 0x30
 8008f2a:	2b09      	cmp	r3, #9
 8008f2c:	d94b      	bls.n	8008fc6 <_vfiprintf_r+0x1a2>
 8008f2e:	b1b0      	cbz	r0, 8008f5e <_vfiprintf_r+0x13a>
 8008f30:	9207      	str	r2, [sp, #28]
 8008f32:	e014      	b.n	8008f5e <_vfiprintf_r+0x13a>
 8008f34:	eba0 0308 	sub.w	r3, r0, r8
 8008f38:	fa09 f303 	lsl.w	r3, r9, r3
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	46a2      	mov	sl, r4
 8008f42:	e7d2      	b.n	8008eea <_vfiprintf_r+0xc6>
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	1d19      	adds	r1, r3, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	9103      	str	r1, [sp, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	bfbb      	ittet	lt
 8008f50:	425b      	neglt	r3, r3
 8008f52:	f042 0202 	orrlt.w	r2, r2, #2
 8008f56:	9307      	strge	r3, [sp, #28]
 8008f58:	9307      	strlt	r3, [sp, #28]
 8008f5a:	bfb8      	it	lt
 8008f5c:	9204      	strlt	r2, [sp, #16]
 8008f5e:	7823      	ldrb	r3, [r4, #0]
 8008f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f62:	d10a      	bne.n	8008f7a <_vfiprintf_r+0x156>
 8008f64:	7863      	ldrb	r3, [r4, #1]
 8008f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f68:	d132      	bne.n	8008fd0 <_vfiprintf_r+0x1ac>
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	1d1a      	adds	r2, r3, #4
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	9203      	str	r2, [sp, #12]
 8008f72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f76:	3402      	adds	r4, #2
 8008f78:	9305      	str	r3, [sp, #20]
 8008f7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009050 <_vfiprintf_r+0x22c>
 8008f7e:	7821      	ldrb	r1, [r4, #0]
 8008f80:	2203      	movs	r2, #3
 8008f82:	4650      	mov	r0, sl
 8008f84:	f7f7 f92c 	bl	80001e0 <memchr>
 8008f88:	b138      	cbz	r0, 8008f9a <_vfiprintf_r+0x176>
 8008f8a:	9b04      	ldr	r3, [sp, #16]
 8008f8c:	eba0 000a 	sub.w	r0, r0, sl
 8008f90:	2240      	movs	r2, #64	@ 0x40
 8008f92:	4082      	lsls	r2, r0
 8008f94:	4313      	orrs	r3, r2
 8008f96:	3401      	adds	r4, #1
 8008f98:	9304      	str	r3, [sp, #16]
 8008f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9e:	4829      	ldr	r0, [pc, #164]	@ (8009044 <_vfiprintf_r+0x220>)
 8008fa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fa4:	2206      	movs	r2, #6
 8008fa6:	f7f7 f91b 	bl	80001e0 <memchr>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d03f      	beq.n	800902e <_vfiprintf_r+0x20a>
 8008fae:	4b26      	ldr	r3, [pc, #152]	@ (8009048 <_vfiprintf_r+0x224>)
 8008fb0:	bb1b      	cbnz	r3, 8008ffa <_vfiprintf_r+0x1d6>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	3307      	adds	r3, #7
 8008fb6:	f023 0307 	bic.w	r3, r3, #7
 8008fba:	3308      	adds	r3, #8
 8008fbc:	9303      	str	r3, [sp, #12]
 8008fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc0:	443b      	add	r3, r7
 8008fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fc4:	e76a      	b.n	8008e9c <_vfiprintf_r+0x78>
 8008fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fca:	460c      	mov	r4, r1
 8008fcc:	2001      	movs	r0, #1
 8008fce:	e7a8      	b.n	8008f22 <_vfiprintf_r+0xfe>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	3401      	adds	r4, #1
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	f04f 0c0a 	mov.w	ip, #10
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe2:	3a30      	subs	r2, #48	@ 0x30
 8008fe4:	2a09      	cmp	r2, #9
 8008fe6:	d903      	bls.n	8008ff0 <_vfiprintf_r+0x1cc>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0c6      	beq.n	8008f7a <_vfiprintf_r+0x156>
 8008fec:	9105      	str	r1, [sp, #20]
 8008fee:	e7c4      	b.n	8008f7a <_vfiprintf_r+0x156>
 8008ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e7f0      	b.n	8008fdc <_vfiprintf_r+0x1b8>
 8008ffa:	ab03      	add	r3, sp, #12
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	462a      	mov	r2, r5
 8009000:	4b12      	ldr	r3, [pc, #72]	@ (800904c <_vfiprintf_r+0x228>)
 8009002:	a904      	add	r1, sp, #16
 8009004:	4630      	mov	r0, r6
 8009006:	f7fd fb85 	bl	8006714 <_printf_float>
 800900a:	4607      	mov	r7, r0
 800900c:	1c78      	adds	r0, r7, #1
 800900e:	d1d6      	bne.n	8008fbe <_vfiprintf_r+0x19a>
 8009010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009012:	07d9      	lsls	r1, r3, #31
 8009014:	d405      	bmi.n	8009022 <_vfiprintf_r+0x1fe>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	059a      	lsls	r2, r3, #22
 800901a:	d402      	bmi.n	8009022 <_vfiprintf_r+0x1fe>
 800901c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800901e:	f7fe f92b 	bl	8007278 <__retarget_lock_release_recursive>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	065b      	lsls	r3, r3, #25
 8009026:	f53f af1f 	bmi.w	8008e68 <_vfiprintf_r+0x44>
 800902a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800902c:	e71e      	b.n	8008e6c <_vfiprintf_r+0x48>
 800902e:	ab03      	add	r3, sp, #12
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	462a      	mov	r2, r5
 8009034:	4b05      	ldr	r3, [pc, #20]	@ (800904c <_vfiprintf_r+0x228>)
 8009036:	a904      	add	r1, sp, #16
 8009038:	4630      	mov	r0, r6
 800903a:	f7fd fe03 	bl	8006c44 <_printf_i>
 800903e:	e7e4      	b.n	800900a <_vfiprintf_r+0x1e6>
 8009040:	08009630 	.word	0x08009630
 8009044:	0800963a 	.word	0x0800963a
 8009048:	08006715 	.word	0x08006715
 800904c:	08008e01 	.word	0x08008e01
 8009050:	08009636 	.word	0x08009636

08009054 <__swbuf_r>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	460e      	mov	r6, r1
 8009058:	4614      	mov	r4, r2
 800905a:	4605      	mov	r5, r0
 800905c:	b118      	cbz	r0, 8009066 <__swbuf_r+0x12>
 800905e:	6a03      	ldr	r3, [r0, #32]
 8009060:	b90b      	cbnz	r3, 8009066 <__swbuf_r+0x12>
 8009062:	f7fd ff9b 	bl	8006f9c <__sinit>
 8009066:	69a3      	ldr	r3, [r4, #24]
 8009068:	60a3      	str	r3, [r4, #8]
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	071a      	lsls	r2, r3, #28
 800906e:	d501      	bpl.n	8009074 <__swbuf_r+0x20>
 8009070:	6923      	ldr	r3, [r4, #16]
 8009072:	b943      	cbnz	r3, 8009086 <__swbuf_r+0x32>
 8009074:	4621      	mov	r1, r4
 8009076:	4628      	mov	r0, r5
 8009078:	f000 f82a 	bl	80090d0 <__swsetup_r>
 800907c:	b118      	cbz	r0, 8009086 <__swbuf_r+0x32>
 800907e:	f04f 37ff 	mov.w	r7, #4294967295
 8009082:	4638      	mov	r0, r7
 8009084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	6922      	ldr	r2, [r4, #16]
 800908a:	1a98      	subs	r0, r3, r2
 800908c:	6963      	ldr	r3, [r4, #20]
 800908e:	b2f6      	uxtb	r6, r6
 8009090:	4283      	cmp	r3, r0
 8009092:	4637      	mov	r7, r6
 8009094:	dc05      	bgt.n	80090a2 <__swbuf_r+0x4e>
 8009096:	4621      	mov	r1, r4
 8009098:	4628      	mov	r0, r5
 800909a:	f7ff fda7 	bl	8008bec <_fflush_r>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d1ed      	bne.n	800907e <__swbuf_r+0x2a>
 80090a2:	68a3      	ldr	r3, [r4, #8]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	60a3      	str	r3, [r4, #8]
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	6022      	str	r2, [r4, #0]
 80090ae:	701e      	strb	r6, [r3, #0]
 80090b0:	6962      	ldr	r2, [r4, #20]
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d004      	beq.n	80090c2 <__swbuf_r+0x6e>
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	07db      	lsls	r3, r3, #31
 80090bc:	d5e1      	bpl.n	8009082 <__swbuf_r+0x2e>
 80090be:	2e0a      	cmp	r6, #10
 80090c0:	d1df      	bne.n	8009082 <__swbuf_r+0x2e>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	f7ff fd91 	bl	8008bec <_fflush_r>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d0d9      	beq.n	8009082 <__swbuf_r+0x2e>
 80090ce:	e7d6      	b.n	800907e <__swbuf_r+0x2a>

080090d0 <__swsetup_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4b29      	ldr	r3, [pc, #164]	@ (8009178 <__swsetup_r+0xa8>)
 80090d4:	4605      	mov	r5, r0
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	460c      	mov	r4, r1
 80090da:	b118      	cbz	r0, 80090e4 <__swsetup_r+0x14>
 80090dc:	6a03      	ldr	r3, [r0, #32]
 80090de:	b90b      	cbnz	r3, 80090e4 <__swsetup_r+0x14>
 80090e0:	f7fd ff5c 	bl	8006f9c <__sinit>
 80090e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e8:	0719      	lsls	r1, r3, #28
 80090ea:	d422      	bmi.n	8009132 <__swsetup_r+0x62>
 80090ec:	06da      	lsls	r2, r3, #27
 80090ee:	d407      	bmi.n	8009100 <__swsetup_r+0x30>
 80090f0:	2209      	movs	r2, #9
 80090f2:	602a      	str	r2, [r5, #0]
 80090f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090f8:	81a3      	strh	r3, [r4, #12]
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	e033      	b.n	8009168 <__swsetup_r+0x98>
 8009100:	0758      	lsls	r0, r3, #29
 8009102:	d512      	bpl.n	800912a <__swsetup_r+0x5a>
 8009104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009106:	b141      	cbz	r1, 800911a <__swsetup_r+0x4a>
 8009108:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800910c:	4299      	cmp	r1, r3
 800910e:	d002      	beq.n	8009116 <__swsetup_r+0x46>
 8009110:	4628      	mov	r0, r5
 8009112:	f7fe ff0d 	bl	8007f30 <_free_r>
 8009116:	2300      	movs	r3, #0
 8009118:	6363      	str	r3, [r4, #52]	@ 0x34
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009120:	81a3      	strh	r3, [r4, #12]
 8009122:	2300      	movs	r3, #0
 8009124:	6063      	str	r3, [r4, #4]
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f043 0308 	orr.w	r3, r3, #8
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	b94b      	cbnz	r3, 800914a <__swsetup_r+0x7a>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800913c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009140:	d003      	beq.n	800914a <__swsetup_r+0x7a>
 8009142:	4621      	mov	r1, r4
 8009144:	4628      	mov	r0, r5
 8009146:	f000 f883 	bl	8009250 <__smakebuf_r>
 800914a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914e:	f013 0201 	ands.w	r2, r3, #1
 8009152:	d00a      	beq.n	800916a <__swsetup_r+0x9a>
 8009154:	2200      	movs	r2, #0
 8009156:	60a2      	str	r2, [r4, #8]
 8009158:	6962      	ldr	r2, [r4, #20]
 800915a:	4252      	negs	r2, r2
 800915c:	61a2      	str	r2, [r4, #24]
 800915e:	6922      	ldr	r2, [r4, #16]
 8009160:	b942      	cbnz	r2, 8009174 <__swsetup_r+0xa4>
 8009162:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009166:	d1c5      	bne.n	80090f4 <__swsetup_r+0x24>
 8009168:	bd38      	pop	{r3, r4, r5, pc}
 800916a:	0799      	lsls	r1, r3, #30
 800916c:	bf58      	it	pl
 800916e:	6962      	ldrpl	r2, [r4, #20]
 8009170:	60a2      	str	r2, [r4, #8]
 8009172:	e7f4      	b.n	800915e <__swsetup_r+0x8e>
 8009174:	2000      	movs	r0, #0
 8009176:	e7f7      	b.n	8009168 <__swsetup_r+0x98>
 8009178:	2000001c 	.word	0x2000001c

0800917c <_raise_r>:
 800917c:	291f      	cmp	r1, #31
 800917e:	b538      	push	{r3, r4, r5, lr}
 8009180:	4605      	mov	r5, r0
 8009182:	460c      	mov	r4, r1
 8009184:	d904      	bls.n	8009190 <_raise_r+0x14>
 8009186:	2316      	movs	r3, #22
 8009188:	6003      	str	r3, [r0, #0]
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009192:	b112      	cbz	r2, 800919a <_raise_r+0x1e>
 8009194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009198:	b94b      	cbnz	r3, 80091ae <_raise_r+0x32>
 800919a:	4628      	mov	r0, r5
 800919c:	f000 f830 	bl	8009200 <_getpid_r>
 80091a0:	4622      	mov	r2, r4
 80091a2:	4601      	mov	r1, r0
 80091a4:	4628      	mov	r0, r5
 80091a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091aa:	f000 b817 	b.w	80091dc <_kill_r>
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d00a      	beq.n	80091c8 <_raise_r+0x4c>
 80091b2:	1c59      	adds	r1, r3, #1
 80091b4:	d103      	bne.n	80091be <_raise_r+0x42>
 80091b6:	2316      	movs	r3, #22
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	2001      	movs	r0, #1
 80091bc:	e7e7      	b.n	800918e <_raise_r+0x12>
 80091be:	2100      	movs	r1, #0
 80091c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091c4:	4620      	mov	r0, r4
 80091c6:	4798      	blx	r3
 80091c8:	2000      	movs	r0, #0
 80091ca:	e7e0      	b.n	800918e <_raise_r+0x12>

080091cc <raise>:
 80091cc:	4b02      	ldr	r3, [pc, #8]	@ (80091d8 <raise+0xc>)
 80091ce:	4601      	mov	r1, r0
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	f7ff bfd3 	b.w	800917c <_raise_r>
 80091d6:	bf00      	nop
 80091d8:	2000001c 	.word	0x2000001c

080091dc <_kill_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d07      	ldr	r5, [pc, #28]	@ (80091fc <_kill_r+0x20>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	f7f8 fc71 	bl	8001ad0 <_kill>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	d102      	bne.n	80091f8 <_kill_r+0x1c>
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	b103      	cbz	r3, 80091f8 <_kill_r+0x1c>
 80091f6:	6023      	str	r3, [r4, #0]
 80091f8:	bd38      	pop	{r3, r4, r5, pc}
 80091fa:	bf00      	nop
 80091fc:	20004490 	.word	0x20004490

08009200 <_getpid_r>:
 8009200:	f7f8 bc5e 	b.w	8001ac0 <_getpid>

08009204 <__swhatbuf_r>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	460c      	mov	r4, r1
 8009208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920c:	2900      	cmp	r1, #0
 800920e:	b096      	sub	sp, #88	@ 0x58
 8009210:	4615      	mov	r5, r2
 8009212:	461e      	mov	r6, r3
 8009214:	da0d      	bge.n	8009232 <__swhatbuf_r+0x2e>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800921c:	f04f 0100 	mov.w	r1, #0
 8009220:	bf14      	ite	ne
 8009222:	2340      	movne	r3, #64	@ 0x40
 8009224:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009228:	2000      	movs	r0, #0
 800922a:	6031      	str	r1, [r6, #0]
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	b016      	add	sp, #88	@ 0x58
 8009230:	bd70      	pop	{r4, r5, r6, pc}
 8009232:	466a      	mov	r2, sp
 8009234:	f000 f848 	bl	80092c8 <_fstat_r>
 8009238:	2800      	cmp	r0, #0
 800923a:	dbec      	blt.n	8009216 <__swhatbuf_r+0x12>
 800923c:	9901      	ldr	r1, [sp, #4]
 800923e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009242:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009246:	4259      	negs	r1, r3
 8009248:	4159      	adcs	r1, r3
 800924a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800924e:	e7eb      	b.n	8009228 <__swhatbuf_r+0x24>

08009250 <__smakebuf_r>:
 8009250:	898b      	ldrh	r3, [r1, #12]
 8009252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009254:	079d      	lsls	r5, r3, #30
 8009256:	4606      	mov	r6, r0
 8009258:	460c      	mov	r4, r1
 800925a:	d507      	bpl.n	800926c <__smakebuf_r+0x1c>
 800925c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	2301      	movs	r3, #1
 8009266:	6163      	str	r3, [r4, #20]
 8009268:	b003      	add	sp, #12
 800926a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926c:	ab01      	add	r3, sp, #4
 800926e:	466a      	mov	r2, sp
 8009270:	f7ff ffc8 	bl	8009204 <__swhatbuf_r>
 8009274:	9f00      	ldr	r7, [sp, #0]
 8009276:	4605      	mov	r5, r0
 8009278:	4639      	mov	r1, r7
 800927a:	4630      	mov	r0, r6
 800927c:	f7fe fecc 	bl	8008018 <_malloc_r>
 8009280:	b948      	cbnz	r0, 8009296 <__smakebuf_r+0x46>
 8009282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009286:	059a      	lsls	r2, r3, #22
 8009288:	d4ee      	bmi.n	8009268 <__smakebuf_r+0x18>
 800928a:	f023 0303 	bic.w	r3, r3, #3
 800928e:	f043 0302 	orr.w	r3, r3, #2
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	e7e2      	b.n	800925c <__smakebuf_r+0xc>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	6020      	str	r0, [r4, #0]
 800929a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	9b01      	ldr	r3, [sp, #4]
 80092a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092a6:	b15b      	cbz	r3, 80092c0 <__smakebuf_r+0x70>
 80092a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 f81d 	bl	80092ec <_isatty_r>
 80092b2:	b128      	cbz	r0, 80092c0 <__smakebuf_r+0x70>
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	f043 0301 	orr.w	r3, r3, #1
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	431d      	orrs	r5, r3
 80092c4:	81a5      	strh	r5, [r4, #12]
 80092c6:	e7cf      	b.n	8009268 <__smakebuf_r+0x18>

080092c8 <_fstat_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d07      	ldr	r5, [pc, #28]	@ (80092e8 <_fstat_r+0x20>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	4611      	mov	r1, r2
 80092d4:	602b      	str	r3, [r5, #0]
 80092d6:	f7f8 fc5b 	bl	8001b90 <_fstat>
 80092da:	1c43      	adds	r3, r0, #1
 80092dc:	d102      	bne.n	80092e4 <_fstat_r+0x1c>
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	b103      	cbz	r3, 80092e4 <_fstat_r+0x1c>
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	bd38      	pop	{r3, r4, r5, pc}
 80092e6:	bf00      	nop
 80092e8:	20004490 	.word	0x20004490

080092ec <_isatty_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d06      	ldr	r5, [pc, #24]	@ (8009308 <_isatty_r+0x1c>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	602b      	str	r3, [r5, #0]
 80092f8:	f7f8 fc5a 	bl	8001bb0 <_isatty>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_isatty_r+0x1a>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_isatty_r+0x1a>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	20004490 	.word	0x20004490

0800930c <_init>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	bf00      	nop
 8009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009312:	bc08      	pop	{r3}
 8009314:	469e      	mov	lr, r3
 8009316:	4770      	bx	lr

08009318 <_fini>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	bf00      	nop
 800931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931e:	bc08      	pop	{r3}
 8009320:	469e      	mov	lr, r3
 8009322:	4770      	bx	lr
