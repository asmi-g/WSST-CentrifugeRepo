
WSST_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000502c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080051cc  080051cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e0  080052e0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e8  080052e8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080052f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004268  20000060  08005350  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042c8  08005350  000242c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f80  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f17  00000000  00000000  00035053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  00037f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff6  00000000  00000000  000393c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019bc3  00000000  00000000  0003a3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018120  00000000  00000000  00053f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4296  00000000  00000000  0006c099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b2c  00000000  00000000  00110330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00115e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051b4 	.word	0x080051b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080051b4 	.word	0x080051b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000007c 	.word	0x2000007c
 80005bc:	200000e0 	.word	0x200000e0

080005c0 <reset_setpoint>:
{
	temp_setpoint = new_setpoint;
}

void reset_setpoint(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	temp_setpoint = PRE_HEAT_SETPOINT;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <reset_setpoint+0x18>)
 80005c6:	f640 42e4 	movw	r2, #3300	; 0xce4
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200003d4 	.word	0x200003d4

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b09c      	sub	sp, #112	; 0x70
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fc35 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f865 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f96d 	bl	80008c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ee:	f000 f8c1 	bl	8000774 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005f2:	f000 f911 	bl	8000818 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 f93d 	bl	8000874 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005fa:	4b26      	ldr	r3, [pc, #152]	; (8000694 <main+0xb8>)
 80005fc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800060e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fef8 	bl	800340a <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a1e      	ldr	r2, [pc, #120]	; (8000698 <main+0xbc>)
 800061e:	6013      	str	r3, [r2, #0]

  /* definition and creation of readSensors */
  osThreadDef(readSensors, startReadSensors, osPriorityNormal, 0, 128);
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <main+0xc0>)
 8000622:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorsHandle = osThreadCreate(osThread(readSensors), NULL);
 8000634:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fee5 	bl	800340a <osThreadCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <main+0xc4>)
 8000644:	6013      	str	r3, [r2, #0]

  /* definition and creation of bangBangControl */
  osThreadDef(bangBangControl, StartBangBangControl, osPriorityRealtime, 0, 128);
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <main+0xc8>)
 8000648:	f107 041c 	add.w	r4, r7, #28
 800064c:	461d      	mov	r5, r3
 800064e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bangBangControlHandle = osThreadCreate(osThread(bangBangControl), NULL);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fed2 	bl	800340a <osThreadCreate>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <main+0xcc>)
 800066a:	6013      	str	r3, [r2, #0]

  /* definition and creation of communicationTa */
  osThreadDef(communicationTa, StartComTask, osPriorityNormal, 0, 128);
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <main+0xd0>)
 800066e:	463c      	mov	r4, r7
 8000670:	461d      	mov	r5, r3
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  communicationTaHandle = osThreadCreate(osThread(communicationTa), NULL);
 800067e:	463b      	mov	r3, r7
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fec1 	bl	800340a <osThreadCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <main+0xd4>)
 800068c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800068e:	f002 feb5 	bl	80033fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0xb6>
 8000694:	080051d8 	.word	0x080051d8
 8000698:	200003c4 	.word	0x200003c4
 800069c:	08005200 	.word	0x08005200
 80006a0:	200003c8 	.word	0x200003c8
 80006a4:	0800522c 	.word	0x0800522c
 80006a8:	200003cc 	.word	0x200003cc
 80006ac:	08005258 	.word	0x08005258
 80006b0:	200003d0 	.word	0x200003d0

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f8f2 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <SystemClock_Config+0xb8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <SystemClock_Config+0xb8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <SystemClock_Config+0xb8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <SystemClock_Config+0xbc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <SystemClock_Config+0xbc>)
 8000702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <SystemClock_Config+0xbc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fb45 	bl	8001db8 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000734:	f000 f982 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fda8 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800075e:	f000 f96d 	bl	8000a3c <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC1_Init+0x98>)
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <MX_ADC1_Init+0x9c>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_ADC1_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_ADC1_Init+0x98>)
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_ADC1_Init+0xa0>)
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_ADC1_Init+0x98>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC1_Init+0x98>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_ADC1_Init+0x98>)
 80007d4:	f000 fb7e 	bl	8000ed4 <HAL_ADC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 f92d 	bl	8000a3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC1_Init+0x98>)
 80007f4:	f000 fcfe 	bl	80011f4 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007fe:	f000 f91d 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200002e0 	.word	0x200002e0
 8000810:	40012000 	.word	0x40012000
 8000814:	0f000001 	.word	0x0f000001

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_I2C1_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x50>)
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_I2C1_Init+0x58>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_I2C1_Init+0x50>)
 8000836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_I2C1_Init+0x50>)
 8000856:	f001 f96b 	bl	8001b30 <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 f8ec 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000328 	.word	0x20000328
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART2_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008ac:	f002 f982 	bl	8002bb4 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f8c1 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000037c 	.word	0x2000037c
 80008c4:	40004400 	.word	0x40004400

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_GPIO_Init+0x7c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <MX_GPIO_Init+0x7c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_GPIO_Init+0x7c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_GPIO_Init+0x7c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <MX_GPIO_Init+0x7c>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_GPIO_Init+0x7c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	480b      	ldr	r0, [pc, #44]	; (8000948 <MX_GPIO_Init+0x80>)
 800091c:	f001 f8ee 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000920:	2320      	movs	r3, #32
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_GPIO_Init+0x80>)
 8000938:	f000 ff5c 	bl	80017f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	reset_setpoint();
 8000954:	f7ff fe34 	bl	80005c0 <reset_setpoint>
    osDelay(10);
 8000958:	200a      	movs	r0, #10
 800095a:	f002 fda2 	bl	80034a2 <osDelay>
	reset_setpoint();
 800095e:	e7f9      	b.n	8000954 <StartDefaultTask+0x8>

08000960 <startReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadSensors */
void startReadSensors(void const * argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b092      	sub	sp, #72	; 0x48
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadSensors */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 8000968:	4813      	ldr	r0, [pc, #76]	; (80009b8 <startReadSensors+0x58>)
 800096a:	f000 faf7 	bl	8000f5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800096e:	f04f 31ff 	mov.w	r1, #4294967295
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <startReadSensors+0x58>)
 8000974:	f000 fba6 	bl	80010c4 <HAL_ADC_PollForConversion>
	thermistor_sensor_adc = HAL_ADC_GetValue(&hadc1);
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <startReadSensors+0x58>)
 800097a:	f000 fc2e 	bl	80011da <HAL_ADC_GetValue>
 800097e:	4603      	mov	r3, r0
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <startReadSensors+0x5c>)
 8000982:	6013      	str	r3, [r2, #0]

	char buf[64];
	sprintf(buf, "Value of sensor: %d\r\n", thermistor_sensor_adc);
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <startReadSensors+0x5c>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <startReadSensors+0x60>)
 800098e:	4618      	mov	r0, r3
 8000990:	f003 ff6c 	bl	800486c <siprintf>

	// change huartX to your initialized HAL UART peripheral
	HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fc21 	bl	80001e0 <strlen>
 800099e:	4603      	mov	r3, r0
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	f107 0108 	add.w	r1, r7, #8
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <startReadSensors+0x64>)
 80009ac:	f002 f952 	bl	8002c54 <HAL_UART_Transmit>

    osDelay(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f002 fd76 	bl	80034a2 <osDelay>
  {
 80009b6:	e7d7      	b.n	8000968 <startReadSensors+0x8>
 80009b8:	200002e0 	.word	0x200002e0
 80009bc:	200003d8 	.word	0x200003d8
 80009c0:	08005274 	.word	0x08005274
 80009c4:	2000037c 	.word	0x2000037c

080009c8 <StartBangBangControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBangBangControl */
void StartBangBangControl(void const * argument)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBangBangControl */
  /* Infinite loop */
  for(;;)
  {
	if(thermistor_sensor_adc < temp_setpoint)
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <StartBangBangControl+0x34>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <StartBangBangControl+0x38>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d205      	bcs.n	80009e8 <StartBangBangControl+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2120      	movs	r1, #32
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <StartBangBangControl+0x3c>)
 80009e2:	f001 f88b 	bl	8001afc <HAL_GPIO_WritePin>
 80009e6:	e004      	b.n	80009f2 <StartBangBangControl+0x2a>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2120      	movs	r1, #32
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <StartBangBangControl+0x3c>)
 80009ee:	f001 f885 	bl	8001afc <HAL_GPIO_WritePin>

	osDelay(100);
 80009f2:	2064      	movs	r0, #100	; 0x64
 80009f4:	f002 fd55 	bl	80034a2 <osDelay>
	if(thermistor_sensor_adc < temp_setpoint)
 80009f8:	e7ea      	b.n	80009d0 <StartBangBangControl+0x8>
 80009fa:	bf00      	nop
 80009fc:	200003d8 	.word	0x200003d8
 8000a00:	200003d4 	.word	0x200003d4
 8000a04:	40020000 	.word	0x40020000

08000a08 <StartComTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartComTask */
void StartComTask(void const * argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartComTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f002 fd46 	bl	80034a2 <osDelay>
 8000a16:	e7fb      	b.n	8000a10 <StartComTask+0x8>

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 fa33 	bl	8000e94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010000 	.word	0x40010000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_MspInit+0x54>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <HAL_MspInit+0x54>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_MspInit+0x54>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_MspInit+0x54>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	210f      	movs	r1, #15
 8000a8a:	f06f 0001 	mvn.w	r0, #1
 8000a8e:	f000 fe87 	bl	80017a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_ADC_MspInit+0x7c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d127      	bne.n	8000b12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000afa:	2301      	movs	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_ADC_MspInit+0x84>)
 8000b0e:	f000 fe71 	bl	80017f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40012000 	.word	0x40012000
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_I2C_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b66:	23c0      	movs	r3, #192	; 0xc0
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b76:	2304      	movs	r3, #4
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b82:	f000 fe37 	bl	80017f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c12:	230c      	movs	r3, #12
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_UART_MspInit+0x8c>)
 8000c2e:	f000 fde1 	bl	80017f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <HAL_InitTick+0xd0>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c60:	4a2d      	ldr	r2, [pc, #180]	; (8000d18 <HAL_InitTick+0xd0>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6453      	str	r3, [r2, #68]	; 0x44
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <HAL_InitTick+0xd0>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c74:	f107 020c 	add.w	r2, r7, #12
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fcf2 	bl	8002668 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c84:	f001 fcdc 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8000c88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8c:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <HAL_InitTick+0xd4>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9b      	lsrs	r3, r3, #18
 8000c94:	3b01      	subs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <HAL_InitTick+0xd8>)
 8000c9a:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <HAL_InitTick+0xdc>)
 8000c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_InitTick+0xd8>)
 8000ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_InitTick+0xd8>)
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <HAL_InitTick+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_InitTick+0xd8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_InitTick+0xd8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <HAL_InitTick+0xd8>)
 8000cc0:	f001 fd04 	bl	80026cc <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d11b      	bne.n	8000d0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cd2:	4813      	ldr	r0, [pc, #76]	; (8000d20 <HAL_InitTick+0xd8>)
 8000cd4:	f001 fd54 	bl	8002780 <HAL_TIM_Base_Start_IT>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d111      	bne.n	8000d0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ce6:	2019      	movs	r0, #25
 8000ce8:	f000 fd76 	bl	80017d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b0f      	cmp	r3, #15
 8000cf0:	d808      	bhi.n	8000d04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	2019      	movs	r0, #25
 8000cf8:	f000 fd52 	bl	80017a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_InitTick+0xe0>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e002      	b.n	8000d0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3730      	adds	r7, #48	; 0x30
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	431bde83 	.word	0x431bde83
 8000d20:	200003dc 	.word	0x200003dc
 8000d24:	40010000 	.word	0x40010000
 8000d28:	20000004 	.word	0x20000004

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d5e:	f001 fd71 	bl	8002844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200003dc 	.word	0x200003dc

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f003 fd8e 	bl	80048bc <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20018000 	.word	0x20018000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20000424 	.word	0x20000424
 8000dd4:	200042c8 	.word	0x200042c8

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e00:	f7ff ffea 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f003 fd4d 	bl	80048c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fbd5 	bl	80005dc <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e40:	080052f0 	.word	0x080052f0
  ldr r2, =_sbss
 8000e44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e48:	200042c8 	.word	0x200042c8

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_Init+0x40>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_Init+0x40>)
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x40>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fc86 	bl	800178a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f7ff fee2 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fde0 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000428 	.word	0x20000428

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000428 	.word	0x20000428

08000ed4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e033      	b.n	8000f52 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d109      	bne.n	8000f06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fdd4 	bl	8000aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d118      	bne.n	8000f44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f1a:	f023 0302 	bic.w	r3, r3, #2
 8000f1e:	f043 0202 	orr.w	r2, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fa86 	bl	8001438 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f023 0303 	bic.w	r3, r3, #3
 8000f3a:	f043 0201 	orr.w	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	641a      	str	r2, [r3, #64]	; 0x40
 8000f42:	e001      	b.n	8000f48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_Start+0x1a>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e097      	b.n	80010a6 <HAL_ADC_Start+0x14a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d018      	beq.n	8000fbe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0201 	orr.w	r2, r2, #1
 8000f9a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f9c:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <HAL_ADC_Start+0x158>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a45      	ldr	r2, [pc, #276]	; (80010b8 <HAL_ADC_Start+0x15c>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	0c9a      	lsrs	r2, r3, #18
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000fb0:	e002      	b.n	8000fb8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f9      	bne.n	8000fb2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d15f      	bne.n	800108c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ff6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800100a:	d106      	bne.n	800101a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001010:	f023 0206 	bic.w	r2, r3, #6
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	645a      	str	r2, [r3, #68]	; 0x44
 8001018:	e002      	b.n	8001020 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_ADC_Start+0x160>)
 800102a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001034:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10f      	bne.n	8001062 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d129      	bne.n	80010a4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	e020      	b.n	80010a4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <HAL_ADC_Start+0x164>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d11b      	bne.n	80010a4 <HAL_ADC_Start+0x148>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d114      	bne.n	80010a4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	e00b      	b.n	80010a4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f043 0210 	orr.w	r2, r3, #16
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f043 0201 	orr.w	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000000 	.word	0x20000000
 80010b8:	431bde83 	.word	0x431bde83
 80010bc:	40012300 	.word	0x40012300
 80010c0:	40012000 	.word	0x40012000

080010c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e0:	d113      	bne.n	800110a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010f0:	d10b      	bne.n	800110a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f043 0220 	orr.w	r2, r3, #32
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e063      	b.n	80011d2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800110a:	f7ff fed7 	bl	8000ebc <HAL_GetTick>
 800110e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001110:	e021      	b.n	8001156 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d01d      	beq.n	8001156 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_ADC_PollForConversion+0x6c>
 8001120:	f7ff fecc 	bl	8000ebc <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d212      	bcs.n	8001156 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b02      	cmp	r3, #2
 800113c:	d00b      	beq.n	8001156 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f043 0204 	orr.w	r2, r3, #4
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e03d      	b.n	80011d2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b02      	cmp	r3, #2
 8001162:	d1d6      	bne.n	8001112 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f06f 0212 	mvn.w	r2, #18
 800116c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d123      	bne.n	80011d0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800118c:	2b00      	cmp	r3, #0
 800118e:	d11f      	bne.n	80011d0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d111      	bne.n	80011d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f043 0201 	orr.w	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1c>
 800120c:	2302      	movs	r3, #2
 800120e:	e105      	b.n	800141c <HAL_ADC_ConfigChannel+0x228>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b09      	cmp	r3, #9
 800121e:	d925      	bls.n	800126c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68d9      	ldr	r1, [r3, #12]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	3b1e      	subs	r3, #30
 8001236:	2207      	movs	r2, #7
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43da      	mvns	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	400a      	ands	r2, r1
 8001244:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68d9      	ldr	r1, [r3, #12]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	4603      	mov	r3, r0
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4403      	add	r3, r0
 800125e:	3b1e      	subs	r3, #30
 8001260:	409a      	lsls	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	e022      	b.n	80012b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6919      	ldr	r1, [r3, #16]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	2207      	movs	r2, #7
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	400a      	ands	r2, r1
 800128e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6919      	ldr	r1, [r3, #16]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	4603      	mov	r3, r0
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4403      	add	r3, r0
 80012a8:	409a      	lsls	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d824      	bhi.n	8001304 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	3b05      	subs	r3, #5
 80012cc:	221f      	movs	r2, #31
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	400a      	ands	r2, r1
 80012da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	3b05      	subs	r3, #5
 80012f6:	fa00 f203 	lsl.w	r2, r0, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	635a      	str	r2, [r3, #52]	; 0x34
 8001302:	e04c      	b.n	800139e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b0c      	cmp	r3, #12
 800130a:	d824      	bhi.n	8001356 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	3b23      	subs	r3, #35	; 0x23
 800131e:	221f      	movs	r2, #31
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43da      	mvns	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	400a      	ands	r2, r1
 800132c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	3b23      	subs	r3, #35	; 0x23
 8001348:	fa00 f203 	lsl.w	r2, r0, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
 8001354:	e023      	b.n	800139e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	3b41      	subs	r3, #65	; 0x41
 8001368:	221f      	movs	r2, #31
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	3b41      	subs	r3, #65	; 0x41
 8001392:	fa00 f203 	lsl.w	r2, r0, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <HAL_ADC_ConfigChannel+0x234>)
 80013a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a21      	ldr	r2, [pc, #132]	; (800142c <HAL_ADC_ConfigChannel+0x238>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d109      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1cc>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b12      	cmp	r3, #18
 80013b2:	d105      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_ADC_ConfigChannel+0x238>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d123      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x21e>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d003      	beq.n	80013da <HAL_ADC_ConfigChannel+0x1e6>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b11      	cmp	r3, #17
 80013d8:	d11b      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b10      	cmp	r3, #16
 80013ec:	d111      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_ADC_ConfigChannel+0x23c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_ADC_ConfigChannel+0x240>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	0c9a      	lsrs	r2, r3, #18
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001404:	e002      	b.n	800140c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	3b01      	subs	r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f9      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40012300 	.word	0x40012300
 800142c:	40012000 	.word	0x40012000
 8001430:	20000000 	.word	0x20000000
 8001434:	431bde83 	.word	0x431bde83

08001438 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001440:	4b79      	ldr	r3, [pc, #484]	; (8001628 <ADC_Init+0x1f0>)
 8001442:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	431a      	orrs	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800146c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	021a      	lsls	r2, r3, #8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6899      	ldr	r1, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	4a58      	ldr	r2, [pc, #352]	; (800162c <ADC_Init+0x1f4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d022      	beq.n	8001516 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6899      	ldr	r1, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6899      	ldr	r1, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	e00f      	b.n	8001536 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001534:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0202 	bic.w	r2, r2, #2
 8001544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6899      	ldr	r1, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7e1b      	ldrb	r3, [r3, #24]
 8001550:	005a      	lsls	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01b      	beq.n	800159c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001572:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001582:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6859      	ldr	r1, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	3b01      	subs	r3, #1
 8001590:	035a      	lsls	r2, r3, #13
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	e007      	b.n	80015ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	051a      	lsls	r2, r3, #20
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6899      	ldr	r1, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015ee:	025a      	lsls	r2, r3, #9
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	029a      	lsls	r2, r3, #10
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	609a      	str	r2, [r3, #8]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40012300 	.word	0x40012300
 800162c:	0f000001 	.word	0x0f000001

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ff4c 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b2:	f7ff ff61 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	68b9      	ldr	r1, [r7, #8]
 80017bc:	6978      	ldr	r0, [r7, #20]
 80017be:	f7ff ffb1 	bl	8001724 <NVIC_EncodePriority>
 80017c2:	4602      	mov	r2, r0
 80017c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff80 	bl	80016d0 <__NVIC_SetPriority>
}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff54 	bl	8001694 <__NVIC_EnableIRQ>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e159      	b.n	8001ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8148 	bne.w	8001abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d005      	beq.n	8001846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	2b02      	cmp	r3, #2
 8001844:	d130      	bne.n	80018a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 0201 	and.w	r2, r3, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d017      	beq.n	80018e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d123      	bne.n	8001938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	69b9      	ldr	r1, [r7, #24]
 8001934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a2 	beq.w	8001abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b57      	ldr	r3, [pc, #348]	; (8001adc <HAL_GPIO_Init+0x2e8>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a56      	ldr	r2, [pc, #344]	; (8001adc <HAL_GPIO_Init+0x2e8>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b54      	ldr	r3, [pc, #336]	; (8001adc <HAL_GPIO_Init+0x2e8>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001996:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <HAL_GPIO_Init+0x2ec>)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <HAL_GPIO_Init+0x2f0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x202>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a48      	ldr	r2, [pc, #288]	; (8001ae8 <HAL_GPIO_Init+0x2f4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x1fe>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a47      	ldr	r2, [pc, #284]	; (8001aec <HAL_GPIO_Init+0x2f8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x1fa>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a46      	ldr	r2, [pc, #280]	; (8001af0 <HAL_GPIO_Init+0x2fc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x1f6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a45      	ldr	r2, [pc, #276]	; (8001af4 <HAL_GPIO_Init+0x300>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x1f2>
 80019e2:	2304      	movs	r3, #4
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019e6:	2307      	movs	r3, #7
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019f6:	2300      	movs	r3, #0
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a08:	4935      	ldr	r1, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x2ec>)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a2f      	ldr	r2, [pc, #188]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a24      	ldr	r2, [pc, #144]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	f67f aea2 	bls.w	8001810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40013c00 	.word	0x40013c00

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b18:	e003      	b.n	8001b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e12b      	b.n	8001d9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7fe ffe6 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2224      	movs	r2, #36	; 0x24
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b94:	f000 fd40 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001b98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a81      	ldr	r2, [pc, #516]	; (8001da4 <HAL_I2C_Init+0x274>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d807      	bhi.n	8001bb4 <HAL_I2C_Init+0x84>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a80      	ldr	r2, [pc, #512]	; (8001da8 <HAL_I2C_Init+0x278>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bf94      	ite	ls
 8001bac:	2301      	movls	r3, #1
 8001bae:	2300      	movhi	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e006      	b.n	8001bc2 <HAL_I2C_Init+0x92>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4a7d      	ldr	r2, [pc, #500]	; (8001dac <HAL_I2C_Init+0x27c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	bf94      	ite	ls
 8001bbc:	2301      	movls	r3, #1
 8001bbe:	2300      	movhi	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0e7      	b.n	8001d9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4a78      	ldr	r2, [pc, #480]	; (8001db0 <HAL_I2C_Init+0x280>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9b      	lsrs	r3, r3, #18
 8001bd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <HAL_I2C_Init+0x274>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d802      	bhi.n	8001c04 <HAL_I2C_Init+0xd4>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	3301      	adds	r3, #1
 8001c02:	e009      	b.n	8001c18 <HAL_I2C_Init+0xe8>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	4a69      	ldr	r2, [pc, #420]	; (8001db4 <HAL_I2C_Init+0x284>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	099b      	lsrs	r3, r3, #6
 8001c16:	3301      	adds	r3, #1
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	495c      	ldr	r1, [pc, #368]	; (8001da4 <HAL_I2C_Init+0x274>)
 8001c34:	428b      	cmp	r3, r1
 8001c36:	d819      	bhi.n	8001c6c <HAL_I2C_Init+0x13c>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e59      	subs	r1, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <HAL_I2C_Init+0x138>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1e59      	subs	r1, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c66:	e051      	b.n	8001d0c <HAL_I2C_Init+0x1dc>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e04f      	b.n	8001d0c <HAL_I2C_Init+0x1dc>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d111      	bne.n	8001c98 <HAL_I2C_Init+0x168>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1e58      	subs	r0, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e012      	b.n	8001cbe <HAL_I2C_Init+0x18e>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	0099      	lsls	r1, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Init+0x196>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e022      	b.n	8001d0c <HAL_I2C_Init+0x1dc>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10e      	bne.n	8001cec <HAL_I2C_Init+0x1bc>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1e58      	subs	r0, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cea:	e00f      	b.n	8001d0c <HAL_I2C_Init+0x1dc>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	0099      	lsls	r1, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	6809      	ldr	r1, [r1, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6911      	ldr	r1, [r2, #16]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68d2      	ldr	r2, [r2, #12]
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	000186a0 	.word	0x000186a0
 8001da8:	001e847f 	.word	0x001e847f
 8001dac:	003d08ff 	.word	0x003d08ff
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	10624dd3 	.word	0x10624dd3

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e267      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d075      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dd6:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d00c      	beq.n	8001dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de2:	4b85      	ldr	r3, [pc, #532]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d112      	bne.n	8001e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dee:	4b82      	ldr	r3, [pc, #520]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dfa:	d10b      	bne.n	8001e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	4b7e      	ldr	r3, [pc, #504]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d05b      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x108>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d157      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e242      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_OscConfig+0x74>
 8001e1e:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a75      	ldr	r2, [pc, #468]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e01d      	b.n	8001e68 <HAL_RCC_OscConfig+0xb0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x98>
 8001e36:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6f      	ldr	r2, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0xb0>
 8001e50:	4b69      	ldr	r3, [pc, #420]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a68      	ldr	r2, [pc, #416]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a65      	ldr	r2, [pc, #404]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff f824 	bl	8000ebc <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff f820 	bl	8000ebc <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e207      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0xc0>
 8001e96:	e014      	b.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff f810 	bl	8000ebc <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f80c 	bl	8000ebc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1f3      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	4b51      	ldr	r3, [pc, #324]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xe8>
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d063      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ece:	4b4a      	ldr	r3, [pc, #296]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d11c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b44      	ldr	r3, [pc, #272]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x152>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e1c7      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4937      	ldr	r1, [pc, #220]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	e03a      	b.n	8001f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f28:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_RCC_OscConfig+0x244>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7fe ffc5 	bl	8000ebc <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f36:	f7fe ffc1 	bl	8000ebc <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1a8      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4925      	ldr	r1, [pc, #148]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_OscConfig+0x244>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7fe ffa4 	bl	8000ebc <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f78:	f7fe ffa0 	bl	8000ebc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e187      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d036      	beq.n	8002010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_RCC_OscConfig+0x248>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7fe ff84 	bl	8000ebc <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7fe ff80 	bl	8000ebc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e167      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x200>
 8001fd6:	e01b      	b.n	8002010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_RCC_OscConfig+0x248>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7fe ff6d 	bl	8000ebc <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	e00e      	b.n	8002004 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7fe ff69 	bl	8000ebc <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d907      	bls.n	8002004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e150      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	42470000 	.word	0x42470000
 8002000:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b88      	ldr	r3, [pc, #544]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ea      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8097 	beq.w	800214c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b81      	ldr	r3, [pc, #516]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10f      	bne.n	800204e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a7c      	ldr	r2, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204a:	2301      	movs	r3, #1
 800204c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b77      	ldr	r3, [pc, #476]	; (800222c <HAL_RCC_OscConfig+0x474>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d118      	bne.n	800208c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205a:	4b74      	ldr	r3, [pc, #464]	; (800222c <HAL_RCC_OscConfig+0x474>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a73      	ldr	r2, [pc, #460]	; (800222c <HAL_RCC_OscConfig+0x474>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002066:	f7fe ff29 	bl	8000ebc <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206e:	f7fe ff25 	bl	8000ebc <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e10c      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCC_OscConfig+0x474>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x2ea>
 8002094:	4b64      	ldr	r3, [pc, #400]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002098:	4a63      	ldr	r2, [pc, #396]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6713      	str	r3, [r2, #112]	; 0x70
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x324>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x30c>
 80020aa:	4b5f      	ldr	r3, [pc, #380]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	4a5e      	ldr	r2, [pc, #376]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	6713      	str	r3, [r2, #112]	; 0x70
 80020b6:	4b5c      	ldr	r3, [pc, #368]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	4a5b      	ldr	r2, [pc, #364]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6713      	str	r3, [r2, #112]	; 0x70
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0x324>
 80020c4:	4b58      	ldr	r3, [pc, #352]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	; 0x70
 80020d0:	4b55      	ldr	r3, [pc, #340]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4a54      	ldr	r2, [pc, #336]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80020d6:	f023 0304 	bic.w	r3, r3, #4
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d015      	beq.n	8002110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7fe feea 	bl	8000ebc <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7fe fee6 	bl	8000ebc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e0cb      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002102:	4b49      	ldr	r3, [pc, #292]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0ee      	beq.n	80020ec <HAL_RCC_OscConfig+0x334>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7fe fed4 	bl	8000ebc <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe fed0 	bl	8000ebc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0b5      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212e:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ee      	bne.n	8002118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800213a:	7dfb      	ldrb	r3, [r7, #23]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a38      	ldr	r2, [pc, #224]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a1 	beq.w	8002298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b08      	cmp	r3, #8
 8002160:	d05c      	beq.n	800221c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d141      	bne.n	80021ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_RCC_OscConfig+0x478>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fea4 	bl	8000ebc <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fea0 	bl	8000ebc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e087      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	019b      	lsls	r3, r3, #6
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	3b01      	subs	r3, #1
 80021b0:	041b      	lsls	r3, r3, #16
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	491b      	ldr	r1, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x478>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fe79 	bl	8000ebc <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ce:	f7fe fe75 	bl	8000ebc <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e05c      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x416>
 80021ec:	e054      	b.n	8002298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_RCC_OscConfig+0x478>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fe62 	bl	8000ebc <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7fe fe5e 	bl	8000ebc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e045      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_OscConfig+0x470>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x444>
 800221a:	e03d      	b.n	8002298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e038      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000
 8002230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_RCC_OscConfig+0x4ec>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d028      	beq.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d121      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d11a      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800226a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226c:	4293      	cmp	r3, r2
 800226e:	d111      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d107      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0cc      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b68      	ldr	r3, [pc, #416]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d90c      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b65      	ldr	r3, [pc, #404]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b8      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022fc:	4b59      	ldr	r3, [pc, #356]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a58      	ldr	r2, [pc, #352]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800231e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	494d      	ldr	r1, [pc, #308]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d044      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d119      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e07f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d003      	beq.n	8002366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	2b03      	cmp	r3, #3
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e067      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4934      	ldr	r1, [pc, #208]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7fe fd90 	bl	8000ebc <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe fd8c 	bl	8000ebc <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e04f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d20c      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e032      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4916      	ldr	r1, [pc, #88]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	490e      	ldr	r1, [pc, #56]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800242e:	f000 f821 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002432:	4602      	mov	r2, r0
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	490a      	ldr	r1, [pc, #40]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	5ccb      	ldrb	r3, [r1, r3]
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fbfa 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00
 8002464:	40023800 	.word	0x40023800
 8002468:	08005294 	.word	0x08005294
 800246c:	20000000 	.word	0x20000000
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b090      	sub	sp, #64	; 0x40
 800247a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
 8002480:	2300      	movs	r3, #0
 8002482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248c:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d00d      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002498:	2b08      	cmp	r3, #8
 800249a:	f200 80a1 	bhi.w	80025e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x34>
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x3a>
 80024a6:	e09b      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80024ac:	e09b      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ae:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_GetSysClockFreq+0x188>)
 80024b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024b2:	e098      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b4:	4b4f      	ldr	r3, [pc, #316]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024be:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d028      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ca:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	2200      	movs	r2, #0
 80024d2:	623b      	str	r3, [r7, #32]
 80024d4:	627a      	str	r2, [r7, #36]	; 0x24
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024dc:	2100      	movs	r1, #0
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_GetSysClockFreq+0x188>)
 80024e0:	fb03 f201 	mul.w	r2, r3, r1
 80024e4:	2300      	movs	r3, #0
 80024e6:	fb00 f303 	mul.w	r3, r0, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	4a43      	ldr	r2, [pc, #268]	; (80025fc <HAL_RCC_GetSysClockFreq+0x188>)
 80024ee:	fba0 1202 	umull	r1, r2, r0, r2
 80024f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024f4:	460a      	mov	r2, r1
 80024f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80024f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024fa:	4413      	add	r3, r2
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002500:	2200      	movs	r2, #0
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	61fa      	str	r2, [r7, #28]
 8002506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800250e:	f7fd febf 	bl	8000290 <__aeabi_uldivmod>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4613      	mov	r3, r2
 8002518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800251a:	e053      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251c:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	2200      	movs	r2, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	617a      	str	r2, [r7, #20]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800252e:	f04f 0b00 	mov.w	fp, #0
 8002532:	4652      	mov	r2, sl
 8002534:	465b      	mov	r3, fp
 8002536:	f04f 0000 	mov.w	r0, #0
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	0159      	lsls	r1, r3, #5
 8002540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002544:	0150      	lsls	r0, r2, #5
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	ebb2 080a 	subs.w	r8, r2, sl
 800254e:	eb63 090b 	sbc.w	r9, r3, fp
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800255e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002562:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002566:	ebb2 0408 	subs.w	r4, r2, r8
 800256a:	eb63 0509 	sbc.w	r5, r3, r9
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	00eb      	lsls	r3, r5, #3
 8002578:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800257c:	00e2      	lsls	r2, r4, #3
 800257e:	4614      	mov	r4, r2
 8002580:	461d      	mov	r5, r3
 8002582:	eb14 030a 	adds.w	r3, r4, sl
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	eb45 030b 	adc.w	r3, r5, fp
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800259a:	4629      	mov	r1, r5
 800259c:	028b      	lsls	r3, r1, #10
 800259e:	4621      	mov	r1, r4
 80025a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025a4:	4621      	mov	r1, r4
 80025a6:	028a      	lsls	r2, r1, #10
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	2200      	movs	r2, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	60fa      	str	r2, [r7, #12]
 80025b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025b8:	f7fd fe6a 	bl	8000290 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4613      	mov	r3, r2
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	3301      	adds	r3, #1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025de:	e002      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3740      	adds	r7, #64	; 0x40
 80025ec:	46bd      	mov	sp, r7
 80025ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	017d7840 	.word	0x017d7840

08002600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a9b      	lsrs	r3, r3, #10
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	080052a4 	.word	0x080052a4

08002640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002644:	f7ff ffdc 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0b5b      	lsrs	r3, r3, #13
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	080052a4 	.word	0x080052a4

08002668 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	220f      	movs	r2, #15
 8002676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_RCC_GetClockConfig+0x5c>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_GetClockConfig+0x5c>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <HAL_RCC_GetClockConfig+0x60>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0207 	and.w	r2, r3, #7
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	601a      	str	r2, [r3, #0]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40023c00 	.word	0x40023c00

080026cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e041      	b.n	8002762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f839 	bl	800276a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f000 f9b2 	bl	8002a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d001      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e044      	b.n	8002822 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_TIM_Base_Start_IT+0xb0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d018      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0x6c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c2:	d013      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0x6c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1a      	ldr	r2, [pc, #104]	; (8002834 <HAL_TIM_Base_Start_IT+0xb4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00e      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0x6c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a19      	ldr	r2, [pc, #100]	; (8002838 <HAL_TIM_Base_Start_IT+0xb8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0x6c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_TIM_Base_Start_IT+0xbc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0x6c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a16      	ldr	r2, [pc, #88]	; (8002840 <HAL_TIM_Base_Start_IT+0xc0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d111      	bne.n	8002810 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d010      	beq.n	8002820 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280e:	e007      	b.n	8002820 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40010000 	.word	0x40010000
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800
 800283c:	40000c00 	.word	0x40000c00
 8002840:	40014000 	.word	0x40014000

08002844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d020      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0202 	mvn.w	r2, #2
 8002878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8d2 	bl	8002a38 <HAL_TIM_IC_CaptureCallback>
 8002894:	e005      	b.n	80028a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8c4 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f8d5 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d020      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0204 	mvn.w	r2, #4
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8ac 	bl	8002a38 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f89e 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f8af 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0208 	mvn.w	r2, #8
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f886 	bl	8002a38 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f878 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f889 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0210 	mvn.w	r2, #16
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2208      	movs	r2, #8
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f860 	bl	8002a38 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f852 	bl	8002a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f863 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00c      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0201 	mvn.w	r2, #1
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe f834 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00c      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f8e6 	bl	8002ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f834 	bl	8002a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0220 	mvn.w	r2, #32
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8b8 	bl	8002b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a3a      	ldr	r2, [pc, #232]	; (8002b70 <TIM_Base_SetConfig+0xfc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00f      	beq.n	8002aac <TIM_Base_SetConfig+0x38>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a92:	d00b      	beq.n	8002aac <TIM_Base_SetConfig+0x38>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a37      	ldr	r2, [pc, #220]	; (8002b74 <TIM_Base_SetConfig+0x100>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <TIM_Base_SetConfig+0x38>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a36      	ldr	r2, [pc, #216]	; (8002b78 <TIM_Base_SetConfig+0x104>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_Base_SetConfig+0x38>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a35      	ldr	r2, [pc, #212]	; (8002b7c <TIM_Base_SetConfig+0x108>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d108      	bne.n	8002abe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a2b      	ldr	r2, [pc, #172]	; (8002b70 <TIM_Base_SetConfig+0xfc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01b      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d017      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a28      	ldr	r2, [pc, #160]	; (8002b74 <TIM_Base_SetConfig+0x100>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a27      	ldr	r2, [pc, #156]	; (8002b78 <TIM_Base_SetConfig+0x104>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00f      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a26      	ldr	r2, [pc, #152]	; (8002b7c <TIM_Base_SetConfig+0x108>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00b      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a25      	ldr	r2, [pc, #148]	; (8002b80 <TIM_Base_SetConfig+0x10c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <TIM_Base_SetConfig+0x110>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d003      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <TIM_Base_SetConfig+0x114>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d108      	bne.n	8002b10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <TIM_Base_SetConfig+0xfc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d103      	bne.n	8002b44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	611a      	str	r2, [r3, #16]
  }
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40014000 	.word	0x40014000
 8002b84:	40014400 	.word	0x40014400
 8002b88:	40014800 	.word	0x40014800

08002b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e042      	b.n	8002c4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd ffec 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f973 	bl	8002ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d175      	bne.n	8002d60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_UART_Transmit+0x2c>
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e06e      	b.n	8002d62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2221      	movs	r2, #33	; 0x21
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c92:	f7fe f913 	bl	8000ebc <HAL_GetTick>
 8002c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cac:	d108      	bne.n	8002cc0 <HAL_UART_Transmit+0x6c>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	e003      	b.n	8002cc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cc8:	e02e      	b.n	8002d28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f848 	bl	8002d6a <UART_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e03a      	b.n	8002d62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3302      	adds	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e007      	b.n	8002d1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1cb      	bne.n	8002cca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f814 	bl	8002d6a <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e006      	b.n	8002d62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7a:	e03b      	b.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d037      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7fe f89a 	bl	8000ebc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	6a3a      	ldr	r2, [r7, #32]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e03a      	b.n	8002e14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d023      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	d020      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d01d      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d116      	bne.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f81d 	bl	8002e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2208      	movs	r2, #8
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e00f      	b.n	8002e14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d0b4      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b095      	sub	sp, #84	; 0x54
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2e:	e853 3f00 	ldrex	r3, [r3]
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e44:	643a      	str	r2, [r7, #64]	; 0x40
 8002e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e4c:	e841 2300 	strex	r3, r2, [r1]
 8002e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e5      	bne.n	8002e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3314      	adds	r3, #20
 8002e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3314      	adds	r3, #20
 8002e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e80:	e841 2300 	strex	r3, r2, [r1]
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1e5      	bne.n	8002e58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d119      	bne.n	8002ec8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 0310 	bic.w	r3, r3, #16
 8002eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eb4:	61ba      	str	r2, [r7, #24]
 8002eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb8:	6979      	ldr	r1, [r7, #20]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	e841 2300 	strex	r3, r2, [r1]
 8002ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e5      	bne.n	8002e94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ed6:	bf00      	nop
 8002ed8:	3754      	adds	r7, #84	; 0x54
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b0c0      	sub	sp, #256	; 0x100
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	ea40 0301 	orr.w	r3, r0, r1
 8002f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f3c:	f021 010c 	bic.w	r1, r1, #12
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	6999      	ldr	r1, [r3, #24]
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	ea40 0301 	orr.w	r3, r0, r1
 8002f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b8f      	ldr	r3, [pc, #572]	; (80031b0 <UART_SetConfig+0x2cc>)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d005      	beq.n	8002f84 <UART_SetConfig+0xa0>
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b8d      	ldr	r3, [pc, #564]	; (80031b4 <UART_SetConfig+0x2d0>)
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d104      	bne.n	8002f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff fb5c 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8002f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f8c:	e003      	b.n	8002f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f8e:	f7ff fb43 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8002f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa0:	f040 810c 	bne.w	80031bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	eb12 0801 	adds.w	r8, r2, r1
 8002fcc:	4629      	mov	r1, r5
 8002fce:	eb43 0901 	adc.w	r9, r3, r1
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe6:	4690      	mov	r8, r2
 8002fe8:	4699      	mov	r9, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	eb18 0303 	adds.w	r3, r8, r3
 8002ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb49 0303 	adc.w	r3, r9, r3
 8002ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800300e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003012:	460b      	mov	r3, r1
 8003014:	18db      	adds	r3, r3, r3
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
 8003018:	4613      	mov	r3, r2
 800301a:	eb42 0303 	adc.w	r3, r2, r3
 800301e:	657b      	str	r3, [r7, #84]	; 0x54
 8003020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003028:	f7fd f932 	bl	8000290 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	011c      	lsls	r4, r3, #4
 800303a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	64b9      	str	r1, [r7, #72]	; 0x48
 8003054:	415b      	adcs	r3, r3
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800305c:	4641      	mov	r1, r8
 800305e:	eb12 0a01 	adds.w	sl, r2, r1
 8003062:	4649      	mov	r1, r9
 8003064:	eb43 0b01 	adc.w	fp, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307c:	4692      	mov	sl, r2
 800307e:	469b      	mov	fp, r3
 8003080:	4643      	mov	r3, r8
 8003082:	eb1a 0303 	adds.w	r3, sl, r3
 8003086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800308a:	464b      	mov	r3, r9
 800308c:	eb4b 0303 	adc.w	r3, fp, r3
 8003090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
 80030b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030be:	f7fd f8e7 	bl	8000290 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <UART_SetConfig+0x2d4>)
 80030ca:	fba3 2301 	umull	r2, r3, r3, r1
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2264      	movs	r2, #100	; 0x64
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	1acb      	subs	r3, r1, r3
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <UART_SetConfig+0x2d4>)
 80030e0:	fba3 2302 	umull	r2, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030ec:	441c      	add	r4, r3
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	63b9      	str	r1, [r7, #56]	; 0x38
 8003108:	415b      	adcs	r3, r3
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6339      	str	r1, [r7, #48]	; 0x30
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003144:	464b      	mov	r3, r9
 8003146:	460a      	mov	r2, r1
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800315c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003164:	460b      	mov	r3, r1
 8003166:	18db      	adds	r3, r3, r3
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
 800316a:	4613      	mov	r3, r2
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800317a:	f7fd f889 	bl	8000290 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003184:	fba3 1302 	umull	r1, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2164      	movs	r1, #100	; 0x64
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	3332      	adds	r3, #50	; 0x32
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4422      	add	r2, r4
 80031aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ac:	e106      	b.n	80033bc <UART_SetConfig+0x4d8>
 80031ae:	bf00      	nop
 80031b0:	40011000 	.word	0x40011000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	1891      	adds	r1, r2, r2
 80031d4:	6239      	str	r1, [r7, #32]
 80031d6:	415b      	adcs	r3, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
 80031da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031de:	4641      	mov	r1, r8
 80031e0:	1854      	adds	r4, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb43 0501 	adc.w	r5, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	00eb      	lsls	r3, r5, #3
 80031f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f6:	00e2      	lsls	r2, r4, #3
 80031f8:	4614      	mov	r4, r2
 80031fa:	461d      	mov	r5, r3
 80031fc:	4643      	mov	r3, r8
 80031fe:	18e3      	adds	r3, r4, r3
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003204:	464b      	mov	r3, r9
 8003206:	eb45 0303 	adc.w	r3, r5, r3
 800320a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800321a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800322a:	4629      	mov	r1, r5
 800322c:	008b      	lsls	r3, r1, #2
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003234:	4621      	mov	r1, r4
 8003236:	008a      	lsls	r2, r1, #2
 8003238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800323c:	f7fd f828 	bl	8000290 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <UART_SetConfig+0x4e4>)
 8003246:	fba3 2302 	umull	r2, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	011c      	lsls	r4, r3, #4
 800324e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800325c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	61b9      	str	r1, [r7, #24]
 8003268:	415b      	adcs	r3, r3
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003270:	4641      	mov	r1, r8
 8003272:	1851      	adds	r1, r2, r1
 8003274:	6139      	str	r1, [r7, #16]
 8003276:	4649      	mov	r1, r9
 8003278:	414b      	adcs	r3, r1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003288:	4659      	mov	r1, fp
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4651      	mov	r1, sl
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4651      	mov	r1, sl
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4642      	mov	r2, r8
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032a4:	464b      	mov	r3, r9
 80032a6:	460a      	mov	r2, r1
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032c8:	4649      	mov	r1, r9
 80032ca:	008b      	lsls	r3, r1, #2
 80032cc:	4641      	mov	r1, r8
 80032ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d2:	4641      	mov	r1, r8
 80032d4:	008a      	lsls	r2, r1, #2
 80032d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032da:	f7fc ffd9 	bl	8000290 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <UART_SetConfig+0x4e4>)
 80032e6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2264      	movs	r2, #100	; 0x64
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	1acb      	subs	r3, r1, r3
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3332      	adds	r3, #50	; 0x32
 80032f8:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <UART_SetConfig+0x4e4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003304:	441c      	add	r4, r3
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	673b      	str	r3, [r7, #112]	; 0x70
 800330e:	677a      	str	r2, [r7, #116]	; 0x74
 8003310:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	415b      	adcs	r3, r3
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003324:	4641      	mov	r1, r8
 8003326:	1851      	adds	r1, r2, r1
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	4649      	mov	r1, r9
 800332c:	414b      	adcs	r3, r1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800333c:	4659      	mov	r1, fp
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4651      	mov	r1, sl
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4642      	mov	r2, r8
 8003352:	189b      	adds	r3, r3, r2
 8003354:	66bb      	str	r3, [r7, #104]	; 0x68
 8003356:	464b      	mov	r3, r9
 8003358:	460a      	mov	r2, r1
 800335a:	eb42 0303 	adc.w	r3, r2, r3
 800335e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	663b      	str	r3, [r7, #96]	; 0x60
 800336a:	667a      	str	r2, [r7, #100]	; 0x64
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003378:	4649      	mov	r1, r9
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	4641      	mov	r1, r8
 800337e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003382:	4641      	mov	r1, r8
 8003384:	008a      	lsls	r2, r1, #2
 8003386:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800338a:	f7fc ff81 	bl	8000290 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <UART_SetConfig+0x4e4>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	; 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	3332      	adds	r3, #50	; 0x32
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <UART_SetConfig+0x4e4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4422      	add	r2, r4
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033c2:	46bd      	mov	sp, r7
 80033c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c8:	51eb851f 	.word	0x51eb851f

080033cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033de:	2b84      	cmp	r3, #132	; 0x84
 80033e0:	d005      	beq.n	80033ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	3303      	adds	r3, #3
 80033ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003400:	f000 fade 	bl	80039c0 <vTaskStartScheduler>
  
  return osOK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	bd80      	pop	{r7, pc}

0800340a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800340a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340c:	b089      	sub	sp, #36	; 0x24
 800340e:	af04      	add	r7, sp, #16
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <osThreadCreate+0x54>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01c      	beq.n	800345e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685c      	ldr	r4, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691e      	ldr	r6, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ffc8 	bl	80033cc <makeFreeRtosPriority>
 800343c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003446:	9202      	str	r2, [sp, #8]
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	9100      	str	r1, [sp, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4632      	mov	r2, r6
 8003450:	4629      	mov	r1, r5
 8003452:	4620      	mov	r0, r4
 8003454:	f000 f8ed 	bl	8003632 <xTaskCreateStatic>
 8003458:	4603      	mov	r3, r0
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e01c      	b.n	8003498 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685c      	ldr	r4, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800346a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ffaa 	bl	80033cc <makeFreeRtosPriority>
 8003478:	4602      	mov	r2, r0
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	9200      	str	r2, [sp, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	4632      	mov	r2, r6
 8003486:	4629      	mov	r1, r5
 8003488:	4620      	mov	r0, r4
 800348a:	f000 f92f 	bl	80036ec <xTaskCreate>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	d001      	beq.n	8003498 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	e000      	b.n	800349a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003498:	68fb      	ldr	r3, [r7, #12]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <osDelay+0x16>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	e000      	b.n	80034ba <osDelay+0x18>
 80034b8:	2301      	movs	r3, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fa4c 	bl	8003958 <vTaskDelay>
  
  return osOK;
 80034c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f103 0208 	add.w	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f04f 32ff 	mov.w	r2, #4294967295
 80034e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f103 0208 	add.w	r2, r3, #8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f103 0208 	add.w	r2, r3, #8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	601a      	str	r2, [r3, #0]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d103      	bne.n	800358c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	e00c      	b.n	80035a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3308      	adds	r3, #8
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e002      	b.n	800359a <vListInsert+0x2e>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d2f6      	bcs.n	8003594 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6892      	ldr	r2, [r2, #8]
 80035f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6852      	ldr	r2, [r2, #4]
 80035fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d103      	bne.n	8003612 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	1e5a      	subs	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003632:	b580      	push	{r7, lr}
 8003634:	b08e      	sub	sp, #56	; 0x38
 8003636:	af04      	add	r7, sp, #16
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <xTaskCreateStatic+0x46>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	61fb      	str	r3, [r7, #28]
}
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003678:	2364      	movs	r3, #100	; 0x64
 800367a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d00a      	beq.n	8003698 <xTaskCreateStatic+0x66>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	61bb      	str	r3, [r7, #24]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003698:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01e      	beq.n	80036de <xTaskCreateStatic+0xac>
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01b      	beq.n	80036de <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036b8:	2300      	movs	r3, #0
 80036ba:	9303      	str	r3, [sp, #12]
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	9302      	str	r3, [sp, #8]
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f850 	bl	8003776 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d8:	f000 f8d4 	bl	8003884 <prvAddNewTaskToReadyList>
 80036dc:	e001      	b.n	80036e2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036e2:	697b      	ldr	r3, [r7, #20]
	}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08c      	sub	sp, #48	; 0x30
 80036f0:	af04      	add	r7, sp, #16
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fec9 	bl	8004498 <pvPortMalloc>
 8003706:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00e      	beq.n	800372c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800370e:	2064      	movs	r0, #100	; 0x64
 8003710:	f000 fec2 	bl	8004498 <pvPortMalloc>
 8003714:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
 8003722:	e005      	b.n	8003730 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003724:	6978      	ldr	r0, [r7, #20]
 8003726:	f000 ff83 	bl	8004630 <vPortFree>
 800372a:	e001      	b.n	8003730 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800372c:	2300      	movs	r3, #0
 800372e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d017      	beq.n	8003766 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	2300      	movs	r3, #0
 8003742:	9303      	str	r3, [sp, #12]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	9302      	str	r3, [sp, #8]
 8003748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f80e 	bl	8003776 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800375a:	69f8      	ldr	r0, [r7, #28]
 800375c:	f000 f892 	bl	8003884 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003760:	2301      	movs	r3, #1
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	e002      	b.n	800376c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800376c:	69bb      	ldr	r3, [r7, #24]
	}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800378e:	3b01      	subs	r3, #1
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f023 0307 	bic.w	r3, r3, #7
 800379c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <prvInitialiseNewTask+0x48>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	617b      	str	r3, [r7, #20]
}
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01f      	beq.n	8003804 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	e012      	b.n	80037f0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	7819      	ldrb	r1, [r3, #0]
 80037d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	3334      	adds	r3, #52	; 0x34
 80037da:	460a      	mov	r2, r1
 80037dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3301      	adds	r3, #1
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b1f      	cmp	r3, #31
 80037f4:	d9e9      	bls.n	80037ca <prvInitialiseNewTask+0x54>
 80037f6:	e000      	b.n	80037fa <prvInitialiseNewTask+0x84>
			{
				break;
 80037f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8003802:	e003      	b.n	800380c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	2b06      	cmp	r3, #6
 8003810:	d901      	bls.n	8003816 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003812:	2306      	movs	r3, #6
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2200      	movs	r2, #0
 8003826:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	3304      	adds	r3, #4
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fe6c 	bl	800350a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	3318      	adds	r3, #24
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fe67 	bl	800350a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003840:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	f1c3 0207 	rsb	r2, r3, #7
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	2200      	movs	r2, #0
 8003856:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	68f9      	ldr	r1, [r7, #12]
 8003864:	69b8      	ldr	r0, [r7, #24]
 8003866:	f000 fc05 	bl	8004074 <pxPortInitialiseStack>
 800386a:	4602      	mov	r2, r0
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800387c:	bf00      	nop
 800387e:	3720      	adds	r7, #32
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800388c:	f000 fd22 	bl	80042d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003890:	4b2a      	ldr	r3, [pc, #168]	; (800393c <prvAddNewTaskToReadyList+0xb8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	4a29      	ldr	r2, [pc, #164]	; (800393c <prvAddNewTaskToReadyList+0xb8>)
 8003898:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800389a:	4b29      	ldr	r3, [pc, #164]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038a2:	4a27      	ldr	r2, [pc, #156]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <prvAddNewTaskToReadyList+0xb8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d110      	bne.n	80038d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038b0:	f000 fabc 	bl	8003e2c <prvInitialiseTaskLists>
 80038b4:	e00d      	b.n	80038d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <prvAddNewTaskToReadyList+0xc0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d802      	bhi.n	80038d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <prvAddNewTaskToReadyList+0xc4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <prvAddNewTaskToReadyList+0xc4>)
 80038da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	2201      	movs	r2, #1
 80038e2:	409a      	lsls	r2, r3
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <prvAddNewTaskToReadyList+0xc8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <prvAddNewTaskToReadyList+0xc8>)
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4a15      	ldr	r2, [pc, #84]	; (8003950 <prvAddNewTaskToReadyList+0xcc>)
 80038fc:	441a      	add	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f7ff fe0d 	bl	8003524 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800390a:	f000 fd13 	bl	8004334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <prvAddNewTaskToReadyList+0xc0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00e      	beq.n	8003934 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <prvAddNewTaskToReadyList+0xbc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	429a      	cmp	r2, r3
 8003922:	d207      	bcs.n	8003934 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <prvAddNewTaskToReadyList+0xd0>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000052c 	.word	0x2000052c
 8003940:	2000042c 	.word	0x2000042c
 8003944:	20000538 	.word	0x20000538
 8003948:	20000548 	.word	0x20000548
 800394c:	20000534 	.word	0x20000534
 8003950:	20000430 	.word	0x20000430
 8003954:	e000ed04 	.word	0xe000ed04

08003958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d017      	beq.n	800399a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <vTaskDelay+0x60>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <vTaskDelay+0x30>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	60bb      	str	r3, [r7, #8]
}
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003988:	f000 f87a 	bl	8003a80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800398c:	2100      	movs	r1, #0
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fb0a 	bl	8003fa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003994:	f000 f882 	bl	8003a9c <xTaskResumeAll>
 8003998:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <vTaskDelay+0x64>)
 80039a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000554 	.word	0x20000554
 80039bc:	e000ed04 	.word	0xe000ed04

080039c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ce:	463a      	mov	r2, r7
 80039d0:	1d39      	adds	r1, r7, #4
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fdd8 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	9202      	str	r2, [sp, #8]
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	2300      	movs	r3, #0
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	460a      	mov	r2, r1
 80039ee:	491e      	ldr	r1, [pc, #120]	; (8003a68 <vTaskStartScheduler+0xa8>)
 80039f0:	481e      	ldr	r0, [pc, #120]	; (8003a6c <vTaskStartScheduler+0xac>)
 80039f2:	f7ff fe1e 	bl	8003632 <xTaskCreateStatic>
 80039f6:	4603      	mov	r3, r0
 80039f8:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <vTaskStartScheduler+0xb0>)
 80039fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039fc:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <vTaskStartScheduler+0xb0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a04:	2301      	movs	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e001      	b.n	8003a0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d116      	bne.n	8003a42 <vTaskStartScheduler+0x82>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	613b      	str	r3, [r7, #16]
}
 8003a26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <vTaskStartScheduler+0xb4>)
 8003a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <vTaskStartScheduler+0xb8>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <vTaskStartScheduler+0xbc>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a3c:	f000 fba8 	bl	8004190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a40:	e00e      	b.n	8003a60 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d10a      	bne.n	8003a60 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	60fb      	str	r3, [r7, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	e7fe      	b.n	8003a5e <vTaskStartScheduler+0x9e>
}
 8003a60:	bf00      	nop
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	0800528c 	.word	0x0800528c
 8003a6c:	08003dfd 	.word	0x08003dfd
 8003a70:	20000550 	.word	0x20000550
 8003a74:	2000054c 	.word	0x2000054c
 8003a78:	20000538 	.word	0x20000538
 8003a7c:	20000530 	.word	0x20000530

08003a80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <vTaskSuspendAll+0x18>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	4a03      	ldr	r2, [pc, #12]	; (8003a98 <vTaskSuspendAll+0x18>)
 8003a8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000554 	.word	0x20000554

08003a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aaa:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <xTaskResumeAll+0x114>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	603b      	str	r3, [r7, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	e7fe      	b.n	8003ac6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ac8:	f000 fc04 	bl	80042d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003acc:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <xTaskResumeAll+0x114>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	4a37      	ldr	r2, [pc, #220]	; (8003bb0 <xTaskResumeAll+0x114>)
 8003ad4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <xTaskResumeAll+0x114>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d161      	bne.n	8003ba2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ade:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <xTaskResumeAll+0x118>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d05d      	beq.n	8003ba2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ae6:	e02e      	b.n	8003b46 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae8:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <xTaskResumeAll+0x11c>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3318      	adds	r3, #24
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fd72 	bl	80035de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fd6d 	bl	80035de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	2201      	movs	r2, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <xTaskResumeAll+0x120>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <xTaskResumeAll+0x120>)
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <xTaskResumeAll+0x124>)
 8003b24:	441a      	add	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f7ff fcf9 	bl	8003524 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b36:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <xTaskResumeAll+0x128>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d302      	bcc.n	8003b46 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <xTaskResumeAll+0x12c>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b46:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <xTaskResumeAll+0x11c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1cc      	bne.n	8003ae8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b54:	f000 fa08 	bl	8003f68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b58:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <xTaskResumeAll+0x130>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b64:	f000 f836 	bl	8003bd4 <xTaskIncrementTick>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <xTaskResumeAll+0x12c>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f1      	bne.n	8003b64 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <xTaskResumeAll+0x130>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <xTaskResumeAll+0x12c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b92:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <xTaskResumeAll+0x134>)
 8003b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ba2:	f000 fbc7 	bl	8004334 <vPortExitCritical>

	return xAlreadyYielded;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000554 	.word	0x20000554
 8003bb4:	2000052c 	.word	0x2000052c
 8003bb8:	200004ec 	.word	0x200004ec
 8003bbc:	20000534 	.word	0x20000534
 8003bc0:	20000430 	.word	0x20000430
 8003bc4:	2000042c 	.word	0x2000042c
 8003bc8:	20000540 	.word	0x20000540
 8003bcc:	2000053c 	.word	0x2000053c
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bde:	4b4e      	ldr	r3, [pc, #312]	; (8003d18 <xTaskIncrementTick+0x144>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f040 808e 	bne.w	8003d04 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003be8:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <xTaskIncrementTick+0x148>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bf0:	4a4a      	ldr	r2, [pc, #296]	; (8003d1c <xTaskIncrementTick+0x148>)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d120      	bne.n	8003c3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bfc:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <xTaskIncrementTick+0x14c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <xTaskIncrementTick+0x48>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	603b      	str	r3, [r7, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	e7fe      	b.n	8003c1a <xTaskIncrementTick+0x46>
 8003c1c:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <xTaskIncrementTick+0x14c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b40      	ldr	r3, [pc, #256]	; (8003d24 <xTaskIncrementTick+0x150>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a3e      	ldr	r2, [pc, #248]	; (8003d20 <xTaskIncrementTick+0x14c>)
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4a3e      	ldr	r2, [pc, #248]	; (8003d24 <xTaskIncrementTick+0x150>)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b3d      	ldr	r3, [pc, #244]	; (8003d28 <xTaskIncrementTick+0x154>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	4a3c      	ldr	r2, [pc, #240]	; (8003d28 <xTaskIncrementTick+0x154>)
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	f000 f995 	bl	8003f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <xTaskIncrementTick+0x158>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d348      	bcc.n	8003cda <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c48:	4b35      	ldr	r3, [pc, #212]	; (8003d20 <xTaskIncrementTick+0x14c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d104      	bne.n	8003c5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <xTaskIncrementTick+0x158>)
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	601a      	str	r2, [r3, #0]
					break;
 8003c5a:	e03e      	b.n	8003cda <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5c:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <xTaskIncrementTick+0x14c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d203      	bcs.n	8003c7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c74:	4a2d      	ldr	r2, [pc, #180]	; (8003d2c <xTaskIncrementTick+0x158>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c7a:	e02e      	b.n	8003cda <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fcac 	bl	80035de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3318      	adds	r3, #24
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fca3 	bl	80035de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <xTaskIncrementTick+0x15c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <xTaskIncrementTick+0x15c>)
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <xTaskIncrementTick+0x160>)
 8003cb8:	441a      	add	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7ff fc2f 	bl	8003524 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <xTaskIncrementTick+0x164>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d3b9      	bcc.n	8003c48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd8:	e7b6      	b.n	8003c48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cda:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <xTaskIncrementTick+0x164>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	4914      	ldr	r1, [pc, #80]	; (8003d34 <xTaskIncrementTick+0x160>)
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d901      	bls.n	8003cf6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <xTaskIncrementTick+0x168>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e004      	b.n	8003d0e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d04:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <xTaskIncrementTick+0x16c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <xTaskIncrementTick+0x16c>)
 8003d0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d0e:	697b      	ldr	r3, [r7, #20]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000554 	.word	0x20000554
 8003d1c:	20000530 	.word	0x20000530
 8003d20:	200004e4 	.word	0x200004e4
 8003d24:	200004e8 	.word	0x200004e8
 8003d28:	20000544 	.word	0x20000544
 8003d2c:	2000054c 	.word	0x2000054c
 8003d30:	20000534 	.word	0x20000534
 8003d34:	20000430 	.word	0x20000430
 8003d38:	2000042c 	.word	0x2000042c
 8003d3c:	20000540 	.word	0x20000540
 8003d40:	2000053c 	.word	0x2000053c

08003d44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d4a:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <vTaskSwitchContext+0xa4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d52:	4b26      	ldr	r3, [pc, #152]	; (8003dec <vTaskSwitchContext+0xa8>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d58:	e03f      	b.n	8003dda <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <vTaskSwitchContext+0xa8>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d60:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <vTaskSwitchContext+0xac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
 8003d70:	f1c3 031f 	rsb	r3, r3, #31
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	491f      	ldr	r1, [pc, #124]	; (8003df4 <vTaskSwitchContext+0xb0>)
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	607b      	str	r3, [r7, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <vTaskSwitchContext+0x5a>
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <vTaskSwitchContext+0xb0>)
 8003dac:	4413      	add	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d104      	bne.n	8003dd0 <vTaskSwitchContext+0x8c>
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <vTaskSwitchContext+0xb4>)
 8003dd8:	6013      	str	r3, [r2, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000554 	.word	0x20000554
 8003dec:	20000540 	.word	0x20000540
 8003df0:	20000534 	.word	0x20000534
 8003df4:	20000430 	.word	0x20000430
 8003df8:	2000042c 	.word	0x2000042c

08003dfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e04:	f000 f852 	bl	8003eac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <prvIdleTask+0x28>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d9f9      	bls.n	8003e04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <prvIdleTask+0x2c>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e20:	e7f0      	b.n	8003e04 <prvIdleTask+0x8>
 8003e22:	bf00      	nop
 8003e24:	20000430 	.word	0x20000430
 8003e28:	e000ed04 	.word	0xe000ed04

08003e2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	e00c      	b.n	8003e52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <prvInitialiseTaskLists+0x60>)
 8003e44:	4413      	add	r3, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fb3f 	bl	80034ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d9ef      	bls.n	8003e38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e58:	480d      	ldr	r0, [pc, #52]	; (8003e90 <prvInitialiseTaskLists+0x64>)
 8003e5a:	f7ff fb36 	bl	80034ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e5e:	480d      	ldr	r0, [pc, #52]	; (8003e94 <prvInitialiseTaskLists+0x68>)
 8003e60:	f7ff fb33 	bl	80034ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e64:	480c      	ldr	r0, [pc, #48]	; (8003e98 <prvInitialiseTaskLists+0x6c>)
 8003e66:	f7ff fb30 	bl	80034ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e6a:	480c      	ldr	r0, [pc, #48]	; (8003e9c <prvInitialiseTaskLists+0x70>)
 8003e6c:	f7ff fb2d 	bl	80034ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e70:	480b      	ldr	r0, [pc, #44]	; (8003ea0 <prvInitialiseTaskLists+0x74>)
 8003e72:	f7ff fb2a 	bl	80034ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <prvInitialiseTaskLists+0x78>)
 8003e78:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <prvInitialiseTaskLists+0x64>)
 8003e7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <prvInitialiseTaskLists+0x7c>)
 8003e7e:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <prvInitialiseTaskLists+0x68>)
 8003e80:	601a      	str	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000430 	.word	0x20000430
 8003e90:	200004bc 	.word	0x200004bc
 8003e94:	200004d0 	.word	0x200004d0
 8003e98:	200004ec 	.word	0x200004ec
 8003e9c:	20000500 	.word	0x20000500
 8003ea0:	20000518 	.word	0x20000518
 8003ea4:	200004e4 	.word	0x200004e4
 8003ea8:	200004e8 	.word	0x200004e8

08003eac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eb2:	e019      	b.n	8003ee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003eb4:	f000 fa0e 	bl	80042d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <prvCheckTasksWaitingTermination+0x50>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fb8a 	bl	80035de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eca:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <prvCheckTasksWaitingTermination+0x54>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <prvCheckTasksWaitingTermination+0x54>)
 8003ed2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <prvCheckTasksWaitingTermination+0x58>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <prvCheckTasksWaitingTermination+0x58>)
 8003edc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ede:	f000 fa29 	bl	8004334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f810 	bl	8003f08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <prvCheckTasksWaitingTermination+0x58>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e1      	bne.n	8003eb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000500 	.word	0x20000500
 8003f00:	2000052c 	.word	0x2000052c
 8003f04:	20000514 	.word	0x20000514

08003f08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d108      	bne.n	8003f2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fb86 	bl	8004630 <vPortFree>
				vPortFree( pxTCB );
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fb83 	bl	8004630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f2a:	e018      	b.n	8003f5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d103      	bne.n	8003f3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb7a 	bl	8004630 <vPortFree>
	}
 8003f3c:	e00f      	b.n	8003f5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d00a      	beq.n	8003f5e <prvDeleteTCB+0x56>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	60fb      	str	r3, [r7, #12]
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <prvDeleteTCB+0x54>
	}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <prvResetNextTaskUnblockTime+0x38>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8003f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f80:	e008      	b.n	8003f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <prvResetNextTaskUnblockTime+0x38>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	200004e4 	.word	0x200004e4
 8003fa4:	2000054c 	.word	0x2000054c

08003fa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fb2:	4b29      	ldr	r3, [pc, #164]	; (8004058 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fb8:	4b28      	ldr	r3, [pc, #160]	; (800405c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fb0d 	bl	80035de <uxListRemove>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	4b21      	ldr	r3, [pc, #132]	; (8004060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	4a20      	ldr	r2, [pc, #128]	; (8004060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fe0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d10a      	bne.n	8004000 <prvAddCurrentTaskToDelayedList+0x58>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	481a      	ldr	r0, [pc, #104]	; (8004064 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003ffa:	f7ff fa93 	bl	8003524 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ffe:	e026      	b.n	800404e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <prvAddCurrentTaskToDelayedList+0xb4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	429a      	cmp	r2, r3
 8004016:	d209      	bcs.n	800402c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004018:	4b13      	ldr	r3, [pc, #76]	; (8004068 <prvAddCurrentTaskToDelayedList+0xc0>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <prvAddCurrentTaskToDelayedList+0xb4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3304      	adds	r3, #4
 8004022:	4619      	mov	r1, r3
 8004024:	4610      	mov	r0, r2
 8004026:	f7ff faa1 	bl	800356c <vListInsert>
}
 800402a:	e010      	b.n	800404e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <prvAddCurrentTaskToDelayedList+0xc4>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7ff fa97 	bl	800356c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	d202      	bcs.n	800404e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004048:	4a09      	ldr	r2, [pc, #36]	; (8004070 <prvAddCurrentTaskToDelayedList+0xc8>)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6013      	str	r3, [r2, #0]
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000530 	.word	0x20000530
 800405c:	2000042c 	.word	0x2000042c
 8004060:	20000534 	.word	0x20000534
 8004064:	20000518 	.word	0x20000518
 8004068:	200004e8 	.word	0x200004e8
 800406c:	200004e4 	.word	0x200004e4
 8004070:	2000054c 	.word	0x2000054c

08004074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b04      	subs	r3, #4
 8004084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800408c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3b04      	subs	r3, #4
 8004092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3b04      	subs	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040a4:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <pxPortInitialiseStack+0x64>)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b14      	subs	r3, #20
 80040ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3b04      	subs	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f06f 0202 	mvn.w	r2, #2
 80040c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b20      	subs	r3, #32
 80040c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040ca:	68fb      	ldr	r3, [r7, #12]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	080040dd 	.word	0x080040dd

080040dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <prvTaskExitError+0x54>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d00a      	beq.n	8004106 <prvTaskExitError+0x2a>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	60fb      	str	r3, [r7, #12]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <prvTaskExitError+0x28>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60bb      	str	r3, [r7, #8]
}
 8004118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800411a:	bf00      	nop
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0fc      	beq.n	800411c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	2000000c 	.word	0x2000000c
	...

08004140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004140:	4b07      	ldr	r3, [pc, #28]	; (8004160 <pxCurrentTCBConst2>)
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	6808      	ldr	r0, [r1, #0]
 8004146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414a:	f380 8809 	msr	PSP, r0
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f380 8811 	msr	BASEPRI, r0
 800415a:	4770      	bx	lr
 800415c:	f3af 8000 	nop.w

08004160 <pxCurrentTCBConst2>:
 8004160:	2000042c 	.word	0x2000042c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop

08004168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004168:	4808      	ldr	r0, [pc, #32]	; (800418c <prvPortStartFirstTask+0x24>)
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	6800      	ldr	r0, [r0, #0]
 800416e:	f380 8808 	msr	MSP, r0
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f380 8814 	msr	CONTROL, r0
 800417a:	b662      	cpsie	i
 800417c:	b661      	cpsie	f
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	df00      	svc	0
 8004188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800418a:	bf00      	nop
 800418c:	e000ed08 	.word	0xe000ed08

08004190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004196:	4b46      	ldr	r3, [pc, #280]	; (80042b0 <xPortStartScheduler+0x120>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a46      	ldr	r2, [pc, #280]	; (80042b4 <xPortStartScheduler+0x124>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10a      	bne.n	80041b6 <xPortStartScheduler+0x26>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	613b      	str	r3, [r7, #16]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041b6:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <xPortStartScheduler+0x120>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a3f      	ldr	r2, [pc, #252]	; (80042b8 <xPortStartScheduler+0x128>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10a      	bne.n	80041d6 <xPortStartScheduler+0x46>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	60fb      	str	r3, [r7, #12]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041d6:	4b39      	ldr	r3, [pc, #228]	; (80042bc <xPortStartScheduler+0x12c>)
 80041d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	22ff      	movs	r2, #255	; 0xff
 80041e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <xPortStartScheduler+0x130>)
 80041fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041fe:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <xPortStartScheduler+0x134>)
 8004200:	2207      	movs	r2, #7
 8004202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004204:	e009      	b.n	800421a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004206:	4b2f      	ldr	r3, [pc, #188]	; (80042c4 <xPortStartScheduler+0x134>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3b01      	subs	r3, #1
 800420c:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <xPortStartScheduler+0x134>)
 800420e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d0ef      	beq.n	8004206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004226:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <xPortStartScheduler+0x134>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1c3 0307 	rsb	r3, r3, #7
 800422e:	2b04      	cmp	r3, #4
 8004230:	d00a      	beq.n	8004248 <xPortStartScheduler+0xb8>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	60bb      	str	r3, [r7, #8]
}
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004248:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <xPortStartScheduler+0x134>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <xPortStartScheduler+0x134>)
 8004250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004252:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <xPortStartScheduler+0x134>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800425a:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <xPortStartScheduler+0x134>)
 800425c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004266:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <xPortStartScheduler+0x138>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a17      	ldr	r2, [pc, #92]	; (80042c8 <xPortStartScheduler+0x138>)
 800426c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <xPortStartScheduler+0x138>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <xPortStartScheduler+0x138>)
 8004278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800427c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800427e:	f000 f8dd 	bl	800443c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <xPortStartScheduler+0x13c>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004288:	f000 f8fc 	bl	8004484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800428c:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <xPortStartScheduler+0x140>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0f      	ldr	r2, [pc, #60]	; (80042d0 <xPortStartScheduler+0x140>)
 8004292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004298:	f7ff ff66 	bl	8004168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800429c:	f7ff fd52 	bl	8003d44 <vTaskSwitchContext>
	prvTaskExitError();
 80042a0:	f7ff ff1c 	bl	80040dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	e000ed00 	.word	0xe000ed00
 80042b4:	410fc271 	.word	0x410fc271
 80042b8:	410fc270 	.word	0x410fc270
 80042bc:	e000e400 	.word	0xe000e400
 80042c0:	20000558 	.word	0x20000558
 80042c4:	2000055c 	.word	0x2000055c
 80042c8:	e000ed20 	.word	0xe000ed20
 80042cc:	2000000c 	.word	0x2000000c
 80042d0:	e000ef34 	.word	0xe000ef34

080042d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	607b      	str	r3, [r7, #4]
}
 80042ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <vPortEnterCritical+0x58>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	4a0d      	ldr	r2, [pc, #52]	; (800432c <vPortEnterCritical+0x58>)
 80042f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <vPortEnterCritical+0x58>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10f      	bne.n	8004320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <vPortEnterCritical+0x5c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <vPortEnterCritical+0x4c>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	603b      	str	r3, [r7, #0]
}
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <vPortEnterCritical+0x4a>
	}
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	2000000c 	.word	0x2000000c
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800433a:	4b12      	ldr	r3, [pc, #72]	; (8004384 <vPortExitCritical+0x50>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <vPortExitCritical+0x24>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	607b      	str	r3, [r7, #4]
}
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <vPortExitCritical+0x50>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3b01      	subs	r3, #1
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <vPortExitCritical+0x50>)
 8004360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <vPortExitCritical+0x50>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <vPortExitCritical+0x42>
 800436a:	2300      	movs	r3, #0
 800436c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	2000000c 	.word	0x2000000c
	...

08004390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004390:	f3ef 8009 	mrs	r0, PSP
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <pxCurrentTCBConst>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	f01e 0f10 	tst.w	lr, #16
 80043a0:	bf08      	it	eq
 80043a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	6010      	str	r0, [r2, #0]
 80043ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043b4:	f380 8811 	msr	BASEPRI, r0
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f7ff fcc0 	bl	8003d44 <vTaskSwitchContext>
 80043c4:	f04f 0000 	mov.w	r0, #0
 80043c8:	f380 8811 	msr	BASEPRI, r0
 80043cc:	bc09      	pop	{r0, r3}
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	6808      	ldr	r0, [r1, #0]
 80043d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d6:	f01e 0f10 	tst.w	lr, #16
 80043da:	bf08      	it	eq
 80043dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043e0:	f380 8809 	msr	PSP, r0
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	f3af 8000 	nop.w

080043f0 <pxCurrentTCBConst>:
 80043f0:	2000042c 	.word	0x2000042c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	607b      	str	r3, [r7, #4]
}
 8004410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004412:	f7ff fbdf 	bl	8003bd4 <xTaskIncrementTick>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <SysTick_Handler+0x40>)
 800441e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f383 8811 	msr	BASEPRI, r3
}
 800442e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	e000ed04 	.word	0xe000ed04

0800443c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <vPortSetupTimerInterrupt+0x34>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <vPortSetupTimerInterrupt+0x38>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <vPortSetupTimerInterrupt+0x3c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0a      	ldr	r2, [pc, #40]	; (800447c <vPortSetupTimerInterrupt+0x40>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	4a09      	ldr	r2, [pc, #36]	; (8004480 <vPortSetupTimerInterrupt+0x44>)
 800445a:	3b01      	subs	r3, #1
 800445c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <vPortSetupTimerInterrupt+0x34>)
 8004460:	2207      	movs	r2, #7
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	e000e010 	.word	0xe000e010
 8004474:	e000e018 	.word	0xe000e018
 8004478:	20000000 	.word	0x20000000
 800447c:	10624dd3 	.word	0x10624dd3
 8004480:	e000e014 	.word	0xe000e014

08004484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004494 <vPortEnableVFP+0x10>
 8004488:	6801      	ldr	r1, [r0, #0]
 800448a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800448e:	6001      	str	r1, [r0, #0]
 8004490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004492:	bf00      	nop
 8004494:	e000ed88 	.word	0xe000ed88

08004498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044a4:	f7ff faec 	bl	8003a80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044a8:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <pvPortMalloc+0x180>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044b0:	f000 f920 	bl	80046f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <pvPortMalloc+0x184>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 8093 	bne.w	80045e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01d      	beq.n	8004504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80044c8:	2208      	movs	r2, #8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d014      	beq.n	8004504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f023 0307 	bic.w	r3, r3, #7
 80044e0:	3308      	adds	r3, #8
 80044e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <pvPortMalloc+0x6c>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	617b      	str	r3, [r7, #20]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d06e      	beq.n	80045e8 <pvPortMalloc+0x150>
 800450a:	4b45      	ldr	r3, [pc, #276]	; (8004620 <pvPortMalloc+0x188>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d869      	bhi.n	80045e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004514:	4b43      	ldr	r3, [pc, #268]	; (8004624 <pvPortMalloc+0x18c>)
 8004516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004518:	4b42      	ldr	r3, [pc, #264]	; (8004624 <pvPortMalloc+0x18c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800451e:	e004      	b.n	800452a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d903      	bls.n	800453c <pvPortMalloc+0xa4>
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f1      	bne.n	8004520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <pvPortMalloc+0x180>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	429a      	cmp	r2, r3
 8004544:	d050      	beq.n	80045e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2208      	movs	r2, #8
 800454c:	4413      	add	r3, r2
 800454e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	1ad2      	subs	r2, r2, r3
 8004560:	2308      	movs	r3, #8
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	429a      	cmp	r2, r3
 8004566:	d91f      	bls.n	80045a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <pvPortMalloc+0xf8>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	613b      	str	r3, [r7, #16]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	1ad2      	subs	r2, r2, r3
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045a2:	69b8      	ldr	r0, [r7, #24]
 80045a4:	f000 f908 	bl	80047b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <pvPortMalloc+0x188>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <pvPortMalloc+0x188>)
 80045b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <pvPortMalloc+0x188>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <pvPortMalloc+0x190>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d203      	bcs.n	80045ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <pvPortMalloc+0x188>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <pvPortMalloc+0x190>)
 80045c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <pvPortMalloc+0x184>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <pvPortMalloc+0x194>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a11      	ldr	r2, [pc, #68]	; (800462c <pvPortMalloc+0x194>)
 80045e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045e8:	f7ff fa58 	bl	8003a9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <pvPortMalloc+0x174>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	60fb      	str	r3, [r7, #12]
}
 8004608:	bf00      	nop
 800460a:	e7fe      	b.n	800460a <pvPortMalloc+0x172>
	return pvReturn;
 800460c:	69fb      	ldr	r3, [r7, #28]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20004168 	.word	0x20004168
 800461c:	2000417c 	.word	0x2000417c
 8004620:	2000416c 	.word	0x2000416c
 8004624:	20004160 	.word	0x20004160
 8004628:	20004170 	.word	0x20004170
 800462c:	20004174 	.word	0x20004174

08004630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d04d      	beq.n	80046de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004642:	2308      	movs	r3, #8
 8004644:	425b      	negs	r3, r3
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4413      	add	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <vPortFree+0xb8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <vPortFree+0x44>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60fb      	str	r3, [r7, #12]
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <vPortFree+0x62>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	60bb      	str	r3, [r7, #8]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <vPortFree+0xb8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01e      	beq.n	80046de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d11a      	bne.n	80046de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <vPortFree+0xb8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046b8:	f7ff f9e2 	bl	8003a80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <vPortFree+0xbc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	4a09      	ldr	r2, [pc, #36]	; (80046ec <vPortFree+0xbc>)
 80046c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ca:	6938      	ldr	r0, [r7, #16]
 80046cc:	f000 f874 	bl	80047b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <vPortFree+0xc0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3301      	adds	r3, #1
 80046d6:	4a06      	ldr	r2, [pc, #24]	; (80046f0 <vPortFree+0xc0>)
 80046d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046da:	f7ff f9df 	bl	8003a9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046de:	bf00      	nop
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	2000417c 	.word	0x2000417c
 80046ec:	2000416c 	.word	0x2000416c
 80046f0:	20004178 	.word	0x20004178

080046f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80046fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004700:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <prvHeapInit+0xac>)
 8004702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3307      	adds	r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0307 	bic.w	r3, r3, #7
 800471a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <prvHeapInit+0xac>)
 8004724:	4413      	add	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <prvHeapInit+0xb0>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004732:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <prvHeapInit+0xb0>)
 8004734:	2200      	movs	r2, #0
 8004736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4413      	add	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004740:	2208      	movs	r2, #8
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0307 	bic.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <prvHeapInit+0xb4>)
 8004754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <prvHeapInit+0xb4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2200      	movs	r2, #0
 800475c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <prvHeapInit+0xb4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <prvHeapInit+0xb4>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <prvHeapInit+0xb8>)
 8004782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <prvHeapInit+0xbc>)
 800478a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <prvHeapInit+0xc0>)
 800478e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000560 	.word	0x20000560
 80047a4:	20004160 	.word	0x20004160
 80047a8:	20004168 	.word	0x20004168
 80047ac:	20004170 	.word	0x20004170
 80047b0:	2000416c 	.word	0x2000416c
 80047b4:	2000417c 	.word	0x2000417c

080047b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <prvInsertBlockIntoFreeList+0xac>)
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e002      	b.n	80047cc <prvInsertBlockIntoFreeList+0x14>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d8f7      	bhi.n	80047c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d108      	bne.n	80047fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	441a      	add	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	441a      	add	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d118      	bne.n	8004840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <prvInsertBlockIntoFreeList+0xb0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d00d      	beq.n	8004836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	441a      	add	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e008      	b.n	8004848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <prvInsertBlockIntoFreeList+0xb0>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e003      	b.n	8004848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d002      	beq.n	8004856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20004160 	.word	0x20004160
 8004868:	20004168 	.word	0x20004168

0800486c <siprintf>:
 800486c:	b40e      	push	{r1, r2, r3}
 800486e:	b500      	push	{lr}
 8004870:	b09c      	sub	sp, #112	; 0x70
 8004872:	ab1d      	add	r3, sp, #116	; 0x74
 8004874:	9002      	str	r0, [sp, #8]
 8004876:	9006      	str	r0, [sp, #24]
 8004878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800487c:	4809      	ldr	r0, [pc, #36]	; (80048a4 <siprintf+0x38>)
 800487e:	9107      	str	r1, [sp, #28]
 8004880:	9104      	str	r1, [sp, #16]
 8004882:	4909      	ldr	r1, [pc, #36]	; (80048a8 <siprintf+0x3c>)
 8004884:	f853 2b04 	ldr.w	r2, [r3], #4
 8004888:	9105      	str	r1, [sp, #20]
 800488a:	6800      	ldr	r0, [r0, #0]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	a902      	add	r1, sp, #8
 8004890:	f000 f9a0 	bl	8004bd4 <_svfiprintf_r>
 8004894:	9b02      	ldr	r3, [sp, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	b01c      	add	sp, #112	; 0x70
 800489c:	f85d eb04 	ldr.w	lr, [sp], #4
 80048a0:	b003      	add	sp, #12
 80048a2:	4770      	bx	lr
 80048a4:	2000005c 	.word	0x2000005c
 80048a8:	ffff0208 	.word	0xffff0208

080048ac <memset>:
 80048ac:	4402      	add	r2, r0
 80048ae:	4603      	mov	r3, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <__errno>:
 80048bc:	4b01      	ldr	r3, [pc, #4]	; (80048c4 <__errno+0x8>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	2000005c 	.word	0x2000005c

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4d0d      	ldr	r5, [pc, #52]	; (8004900 <__libc_init_array+0x38>)
 80048cc:	4c0d      	ldr	r4, [pc, #52]	; (8004904 <__libc_init_array+0x3c>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	2600      	movs	r6, #0
 80048d4:	42a6      	cmp	r6, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	4d0b      	ldr	r5, [pc, #44]	; (8004908 <__libc_init_array+0x40>)
 80048da:	4c0c      	ldr	r4, [pc, #48]	; (800490c <__libc_init_array+0x44>)
 80048dc:	f000 fc6a 	bl	80051b4 <_init>
 80048e0:	1b64      	subs	r4, r4, r5
 80048e2:	10a4      	asrs	r4, r4, #2
 80048e4:	2600      	movs	r6, #0
 80048e6:	42a6      	cmp	r6, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f0:	4798      	blx	r3
 80048f2:	3601      	adds	r6, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fa:	4798      	blx	r3
 80048fc:	3601      	adds	r6, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	080052e8 	.word	0x080052e8
 8004904:	080052e8 	.word	0x080052e8
 8004908:	080052e8 	.word	0x080052e8
 800490c:	080052ec 	.word	0x080052ec

08004910 <__retarget_lock_acquire_recursive>:
 8004910:	4770      	bx	lr

08004912 <__retarget_lock_release_recursive>:
 8004912:	4770      	bx	lr

08004914 <memcpy>:
 8004914:	440a      	add	r2, r1
 8004916:	4291      	cmp	r1, r2
 8004918:	f100 33ff 	add.w	r3, r0, #4294967295
 800491c:	d100      	bne.n	8004920 <memcpy+0xc>
 800491e:	4770      	bx	lr
 8004920:	b510      	push	{r4, lr}
 8004922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800492a:	4291      	cmp	r1, r2
 800492c:	d1f9      	bne.n	8004922 <memcpy+0xe>
 800492e:	bd10      	pop	{r4, pc}

08004930 <_free_r>:
 8004930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004932:	2900      	cmp	r1, #0
 8004934:	d044      	beq.n	80049c0 <_free_r+0x90>
 8004936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800493a:	9001      	str	r0, [sp, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f1a1 0404 	sub.w	r4, r1, #4
 8004942:	bfb8      	it	lt
 8004944:	18e4      	addlt	r4, r4, r3
 8004946:	f000 f8df 	bl	8004b08 <__malloc_lock>
 800494a:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <_free_r+0x94>)
 800494c:	9801      	ldr	r0, [sp, #4]
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	b933      	cbnz	r3, 8004960 <_free_r+0x30>
 8004952:	6063      	str	r3, [r4, #4]
 8004954:	6014      	str	r4, [r2, #0]
 8004956:	b003      	add	sp, #12
 8004958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800495c:	f000 b8da 	b.w	8004b14 <__malloc_unlock>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d908      	bls.n	8004976 <_free_r+0x46>
 8004964:	6825      	ldr	r5, [r4, #0]
 8004966:	1961      	adds	r1, r4, r5
 8004968:	428b      	cmp	r3, r1
 800496a:	bf01      	itttt	eq
 800496c:	6819      	ldreq	r1, [r3, #0]
 800496e:	685b      	ldreq	r3, [r3, #4]
 8004970:	1949      	addeq	r1, r1, r5
 8004972:	6021      	streq	r1, [r4, #0]
 8004974:	e7ed      	b.n	8004952 <_free_r+0x22>
 8004976:	461a      	mov	r2, r3
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	b10b      	cbz	r3, 8004980 <_free_r+0x50>
 800497c:	42a3      	cmp	r3, r4
 800497e:	d9fa      	bls.n	8004976 <_free_r+0x46>
 8004980:	6811      	ldr	r1, [r2, #0]
 8004982:	1855      	adds	r5, r2, r1
 8004984:	42a5      	cmp	r5, r4
 8004986:	d10b      	bne.n	80049a0 <_free_r+0x70>
 8004988:	6824      	ldr	r4, [r4, #0]
 800498a:	4421      	add	r1, r4
 800498c:	1854      	adds	r4, r2, r1
 800498e:	42a3      	cmp	r3, r4
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	d1e0      	bne.n	8004956 <_free_r+0x26>
 8004994:	681c      	ldr	r4, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	6053      	str	r3, [r2, #4]
 800499a:	440c      	add	r4, r1
 800499c:	6014      	str	r4, [r2, #0]
 800499e:	e7da      	b.n	8004956 <_free_r+0x26>
 80049a0:	d902      	bls.n	80049a8 <_free_r+0x78>
 80049a2:	230c      	movs	r3, #12
 80049a4:	6003      	str	r3, [r0, #0]
 80049a6:	e7d6      	b.n	8004956 <_free_r+0x26>
 80049a8:	6825      	ldr	r5, [r4, #0]
 80049aa:	1961      	adds	r1, r4, r5
 80049ac:	428b      	cmp	r3, r1
 80049ae:	bf04      	itt	eq
 80049b0:	6819      	ldreq	r1, [r3, #0]
 80049b2:	685b      	ldreq	r3, [r3, #4]
 80049b4:	6063      	str	r3, [r4, #4]
 80049b6:	bf04      	itt	eq
 80049b8:	1949      	addeq	r1, r1, r5
 80049ba:	6021      	streq	r1, [r4, #0]
 80049bc:	6054      	str	r4, [r2, #4]
 80049be:	e7ca      	b.n	8004956 <_free_r+0x26>
 80049c0:	b003      	add	sp, #12
 80049c2:	bd30      	pop	{r4, r5, pc}
 80049c4:	200042c0 	.word	0x200042c0

080049c8 <sbrk_aligned>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4e0e      	ldr	r6, [pc, #56]	; (8004a04 <sbrk_aligned+0x3c>)
 80049cc:	460c      	mov	r4, r1
 80049ce:	6831      	ldr	r1, [r6, #0]
 80049d0:	4605      	mov	r5, r0
 80049d2:	b911      	cbnz	r1, 80049da <sbrk_aligned+0x12>
 80049d4:	f000 fba6 	bl	8005124 <_sbrk_r>
 80049d8:	6030      	str	r0, [r6, #0]
 80049da:	4621      	mov	r1, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f000 fba1 	bl	8005124 <_sbrk_r>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	d00a      	beq.n	80049fc <sbrk_aligned+0x34>
 80049e6:	1cc4      	adds	r4, r0, #3
 80049e8:	f024 0403 	bic.w	r4, r4, #3
 80049ec:	42a0      	cmp	r0, r4
 80049ee:	d007      	beq.n	8004a00 <sbrk_aligned+0x38>
 80049f0:	1a21      	subs	r1, r4, r0
 80049f2:	4628      	mov	r0, r5
 80049f4:	f000 fb96 	bl	8005124 <_sbrk_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d101      	bne.n	8004a00 <sbrk_aligned+0x38>
 80049fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004a00:	4620      	mov	r0, r4
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	200042c4 	.word	0x200042c4

08004a08 <_malloc_r>:
 8004a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	1ccd      	adds	r5, r1, #3
 8004a0e:	f025 0503 	bic.w	r5, r5, #3
 8004a12:	3508      	adds	r5, #8
 8004a14:	2d0c      	cmp	r5, #12
 8004a16:	bf38      	it	cc
 8004a18:	250c      	movcc	r5, #12
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	db01      	blt.n	8004a24 <_malloc_r+0x1c>
 8004a20:	42a9      	cmp	r1, r5
 8004a22:	d905      	bls.n	8004a30 <_malloc_r+0x28>
 8004a24:	230c      	movs	r3, #12
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	2600      	movs	r6, #0
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b04 <_malloc_r+0xfc>
 8004a34:	f000 f868 	bl	8004b08 <__malloc_lock>
 8004a38:	f8d8 3000 	ldr.w	r3, [r8]
 8004a3c:	461c      	mov	r4, r3
 8004a3e:	bb5c      	cbnz	r4, 8004a98 <_malloc_r+0x90>
 8004a40:	4629      	mov	r1, r5
 8004a42:	4638      	mov	r0, r7
 8004a44:	f7ff ffc0 	bl	80049c8 <sbrk_aligned>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	d155      	bne.n	8004afa <_malloc_r+0xf2>
 8004a4e:	f8d8 4000 	ldr.w	r4, [r8]
 8004a52:	4626      	mov	r6, r4
 8004a54:	2e00      	cmp	r6, #0
 8004a56:	d145      	bne.n	8004ae4 <_malloc_r+0xdc>
 8004a58:	2c00      	cmp	r4, #0
 8004a5a:	d048      	beq.n	8004aee <_malloc_r+0xe6>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4638      	mov	r0, r7
 8004a62:	eb04 0903 	add.w	r9, r4, r3
 8004a66:	f000 fb5d 	bl	8005124 <_sbrk_r>
 8004a6a:	4581      	cmp	r9, r0
 8004a6c:	d13f      	bne.n	8004aee <_malloc_r+0xe6>
 8004a6e:	6821      	ldr	r1, [r4, #0]
 8004a70:	1a6d      	subs	r5, r5, r1
 8004a72:	4629      	mov	r1, r5
 8004a74:	4638      	mov	r0, r7
 8004a76:	f7ff ffa7 	bl	80049c8 <sbrk_aligned>
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d037      	beq.n	8004aee <_malloc_r+0xe6>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	442b      	add	r3, r5
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	f8d8 3000 	ldr.w	r3, [r8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d038      	beq.n	8004afe <_malloc_r+0xf6>
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	42a2      	cmp	r2, r4
 8004a90:	d12b      	bne.n	8004aea <_malloc_r+0xe2>
 8004a92:	2200      	movs	r2, #0
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	e00f      	b.n	8004ab8 <_malloc_r+0xb0>
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	1b52      	subs	r2, r2, r5
 8004a9c:	d41f      	bmi.n	8004ade <_malloc_r+0xd6>
 8004a9e:	2a0b      	cmp	r2, #11
 8004aa0:	d917      	bls.n	8004ad2 <_malloc_r+0xca>
 8004aa2:	1961      	adds	r1, r4, r5
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	6025      	str	r5, [r4, #0]
 8004aa8:	bf18      	it	ne
 8004aaa:	6059      	strne	r1, [r3, #4]
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	bf08      	it	eq
 8004ab0:	f8c8 1000 	streq.w	r1, [r8]
 8004ab4:	5162      	str	r2, [r4, r5]
 8004ab6:	604b      	str	r3, [r1, #4]
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f104 060b 	add.w	r6, r4, #11
 8004abe:	f000 f829 	bl	8004b14 <__malloc_unlock>
 8004ac2:	f026 0607 	bic.w	r6, r6, #7
 8004ac6:	1d23      	adds	r3, r4, #4
 8004ac8:	1af2      	subs	r2, r6, r3
 8004aca:	d0ae      	beq.n	8004a2a <_malloc_r+0x22>
 8004acc:	1b9b      	subs	r3, r3, r6
 8004ace:	50a3      	str	r3, [r4, r2]
 8004ad0:	e7ab      	b.n	8004a2a <_malloc_r+0x22>
 8004ad2:	42a3      	cmp	r3, r4
 8004ad4:	6862      	ldr	r2, [r4, #4]
 8004ad6:	d1dd      	bne.n	8004a94 <_malloc_r+0x8c>
 8004ad8:	f8c8 2000 	str.w	r2, [r8]
 8004adc:	e7ec      	b.n	8004ab8 <_malloc_r+0xb0>
 8004ade:	4623      	mov	r3, r4
 8004ae0:	6864      	ldr	r4, [r4, #4]
 8004ae2:	e7ac      	b.n	8004a3e <_malloc_r+0x36>
 8004ae4:	4634      	mov	r4, r6
 8004ae6:	6876      	ldr	r6, [r6, #4]
 8004ae8:	e7b4      	b.n	8004a54 <_malloc_r+0x4c>
 8004aea:	4613      	mov	r3, r2
 8004aec:	e7cc      	b.n	8004a88 <_malloc_r+0x80>
 8004aee:	230c      	movs	r3, #12
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4638      	mov	r0, r7
 8004af4:	f000 f80e 	bl	8004b14 <__malloc_unlock>
 8004af8:	e797      	b.n	8004a2a <_malloc_r+0x22>
 8004afa:	6025      	str	r5, [r4, #0]
 8004afc:	e7dc      	b.n	8004ab8 <_malloc_r+0xb0>
 8004afe:	605b      	str	r3, [r3, #4]
 8004b00:	deff      	udf	#255	; 0xff
 8004b02:	bf00      	nop
 8004b04:	200042c0 	.word	0x200042c0

08004b08 <__malloc_lock>:
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <__malloc_lock+0x8>)
 8004b0a:	f7ff bf01 	b.w	8004910 <__retarget_lock_acquire_recursive>
 8004b0e:	bf00      	nop
 8004b10:	200042bc 	.word	0x200042bc

08004b14 <__malloc_unlock>:
 8004b14:	4801      	ldr	r0, [pc, #4]	; (8004b1c <__malloc_unlock+0x8>)
 8004b16:	f7ff befc 	b.w	8004912 <__retarget_lock_release_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	200042bc 	.word	0x200042bc

08004b20 <__ssputs_r>:
 8004b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	688e      	ldr	r6, [r1, #8]
 8004b26:	461f      	mov	r7, r3
 8004b28:	42be      	cmp	r6, r7
 8004b2a:	680b      	ldr	r3, [r1, #0]
 8004b2c:	4682      	mov	sl, r0
 8004b2e:	460c      	mov	r4, r1
 8004b30:	4690      	mov	r8, r2
 8004b32:	d82c      	bhi.n	8004b8e <__ssputs_r+0x6e>
 8004b34:	898a      	ldrh	r2, [r1, #12]
 8004b36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b3a:	d026      	beq.n	8004b8a <__ssputs_r+0x6a>
 8004b3c:	6965      	ldr	r5, [r4, #20]
 8004b3e:	6909      	ldr	r1, [r1, #16]
 8004b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b44:	eba3 0901 	sub.w	r9, r3, r1
 8004b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b4c:	1c7b      	adds	r3, r7, #1
 8004b4e:	444b      	add	r3, r9
 8004b50:	106d      	asrs	r5, r5, #1
 8004b52:	429d      	cmp	r5, r3
 8004b54:	bf38      	it	cc
 8004b56:	461d      	movcc	r5, r3
 8004b58:	0553      	lsls	r3, r2, #21
 8004b5a:	d527      	bpl.n	8004bac <__ssputs_r+0x8c>
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7ff ff53 	bl	8004a08 <_malloc_r>
 8004b62:	4606      	mov	r6, r0
 8004b64:	b360      	cbz	r0, 8004bc0 <__ssputs_r+0xa0>
 8004b66:	6921      	ldr	r1, [r4, #16]
 8004b68:	464a      	mov	r2, r9
 8004b6a:	f7ff fed3 	bl	8004914 <memcpy>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	6126      	str	r6, [r4, #16]
 8004b7c:	6165      	str	r5, [r4, #20]
 8004b7e:	444e      	add	r6, r9
 8004b80:	eba5 0509 	sub.w	r5, r5, r9
 8004b84:	6026      	str	r6, [r4, #0]
 8004b86:	60a5      	str	r5, [r4, #8]
 8004b88:	463e      	mov	r6, r7
 8004b8a:	42be      	cmp	r6, r7
 8004b8c:	d900      	bls.n	8004b90 <__ssputs_r+0x70>
 8004b8e:	463e      	mov	r6, r7
 8004b90:	6820      	ldr	r0, [r4, #0]
 8004b92:	4632      	mov	r2, r6
 8004b94:	4641      	mov	r1, r8
 8004b96:	f000 faab 	bl	80050f0 <memmove>
 8004b9a:	68a3      	ldr	r3, [r4, #8]
 8004b9c:	1b9b      	subs	r3, r3, r6
 8004b9e:	60a3      	str	r3, [r4, #8]
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	4433      	add	r3, r6
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bac:	462a      	mov	r2, r5
 8004bae:	f000 fac9 	bl	8005144 <_realloc_r>
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d1e0      	bne.n	8004b7a <__ssputs_r+0x5a>
 8004bb8:	6921      	ldr	r1, [r4, #16]
 8004bba:	4650      	mov	r0, sl
 8004bbc:	f7ff feb8 	bl	8004930 <_free_r>
 8004bc0:	230c      	movs	r3, #12
 8004bc2:	f8ca 3000 	str.w	r3, [sl]
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd2:	e7e9      	b.n	8004ba8 <__ssputs_r+0x88>

08004bd4 <_svfiprintf_r>:
 8004bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd8:	4698      	mov	r8, r3
 8004bda:	898b      	ldrh	r3, [r1, #12]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	b09d      	sub	sp, #116	; 0x74
 8004be0:	4607      	mov	r7, r0
 8004be2:	460d      	mov	r5, r1
 8004be4:	4614      	mov	r4, r2
 8004be6:	d50e      	bpl.n	8004c06 <_svfiprintf_r+0x32>
 8004be8:	690b      	ldr	r3, [r1, #16]
 8004bea:	b963      	cbnz	r3, 8004c06 <_svfiprintf_r+0x32>
 8004bec:	2140      	movs	r1, #64	; 0x40
 8004bee:	f7ff ff0b 	bl	8004a08 <_malloc_r>
 8004bf2:	6028      	str	r0, [r5, #0]
 8004bf4:	6128      	str	r0, [r5, #16]
 8004bf6:	b920      	cbnz	r0, 8004c02 <_svfiprintf_r+0x2e>
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	e0d0      	b.n	8004da4 <_svfiprintf_r+0x1d0>
 8004c02:	2340      	movs	r3, #64	; 0x40
 8004c04:	616b      	str	r3, [r5, #20]
 8004c06:	2300      	movs	r3, #0
 8004c08:	9309      	str	r3, [sp, #36]	; 0x24
 8004c0a:	2320      	movs	r3, #32
 8004c0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c14:	2330      	movs	r3, #48	; 0x30
 8004c16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004dbc <_svfiprintf_r+0x1e8>
 8004c1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c1e:	f04f 0901 	mov.w	r9, #1
 8004c22:	4623      	mov	r3, r4
 8004c24:	469a      	mov	sl, r3
 8004c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c2a:	b10a      	cbz	r2, 8004c30 <_svfiprintf_r+0x5c>
 8004c2c:	2a25      	cmp	r2, #37	; 0x25
 8004c2e:	d1f9      	bne.n	8004c24 <_svfiprintf_r+0x50>
 8004c30:	ebba 0b04 	subs.w	fp, sl, r4
 8004c34:	d00b      	beq.n	8004c4e <_svfiprintf_r+0x7a>
 8004c36:	465b      	mov	r3, fp
 8004c38:	4622      	mov	r2, r4
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f7ff ff6f 	bl	8004b20 <__ssputs_r>
 8004c42:	3001      	adds	r0, #1
 8004c44:	f000 80a9 	beq.w	8004d9a <_svfiprintf_r+0x1c6>
 8004c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c4a:	445a      	add	r2, fp
 8004c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a1 	beq.w	8004d9a <_svfiprintf_r+0x1c6>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c62:	f10a 0a01 	add.w	sl, sl, #1
 8004c66:	9304      	str	r3, [sp, #16]
 8004c68:	9307      	str	r3, [sp, #28]
 8004c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c70:	4654      	mov	r4, sl
 8004c72:	2205      	movs	r2, #5
 8004c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c78:	4850      	ldr	r0, [pc, #320]	; (8004dbc <_svfiprintf_r+0x1e8>)
 8004c7a:	f7fb fab9 	bl	80001f0 <memchr>
 8004c7e:	9a04      	ldr	r2, [sp, #16]
 8004c80:	b9d8      	cbnz	r0, 8004cba <_svfiprintf_r+0xe6>
 8004c82:	06d0      	lsls	r0, r2, #27
 8004c84:	bf44      	itt	mi
 8004c86:	2320      	movmi	r3, #32
 8004c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c8c:	0711      	lsls	r1, r2, #28
 8004c8e:	bf44      	itt	mi
 8004c90:	232b      	movmi	r3, #43	; 0x2b
 8004c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c96:	f89a 3000 	ldrb.w	r3, [sl]
 8004c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c9c:	d015      	beq.n	8004cca <_svfiprintf_r+0xf6>
 8004c9e:	9a07      	ldr	r2, [sp, #28]
 8004ca0:	4654      	mov	r4, sl
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f04f 0c0a 	mov.w	ip, #10
 8004ca8:	4621      	mov	r1, r4
 8004caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cae:	3b30      	subs	r3, #48	; 0x30
 8004cb0:	2b09      	cmp	r3, #9
 8004cb2:	d94d      	bls.n	8004d50 <_svfiprintf_r+0x17c>
 8004cb4:	b1b0      	cbz	r0, 8004ce4 <_svfiprintf_r+0x110>
 8004cb6:	9207      	str	r2, [sp, #28]
 8004cb8:	e014      	b.n	8004ce4 <_svfiprintf_r+0x110>
 8004cba:	eba0 0308 	sub.w	r3, r0, r8
 8004cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	9304      	str	r3, [sp, #16]
 8004cc6:	46a2      	mov	sl, r4
 8004cc8:	e7d2      	b.n	8004c70 <_svfiprintf_r+0x9c>
 8004cca:	9b03      	ldr	r3, [sp, #12]
 8004ccc:	1d19      	adds	r1, r3, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	9103      	str	r1, [sp, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bfbb      	ittet	lt
 8004cd6:	425b      	neglt	r3, r3
 8004cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8004cdc:	9307      	strge	r3, [sp, #28]
 8004cde:	9307      	strlt	r3, [sp, #28]
 8004ce0:	bfb8      	it	lt
 8004ce2:	9204      	strlt	r2, [sp, #16]
 8004ce4:	7823      	ldrb	r3, [r4, #0]
 8004ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ce8:	d10c      	bne.n	8004d04 <_svfiprintf_r+0x130>
 8004cea:	7863      	ldrb	r3, [r4, #1]
 8004cec:	2b2a      	cmp	r3, #42	; 0x2a
 8004cee:	d134      	bne.n	8004d5a <_svfiprintf_r+0x186>
 8004cf0:	9b03      	ldr	r3, [sp, #12]
 8004cf2:	1d1a      	adds	r2, r3, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	9203      	str	r2, [sp, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfb8      	it	lt
 8004cfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d00:	3402      	adds	r4, #2
 8004d02:	9305      	str	r3, [sp, #20]
 8004d04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004dcc <_svfiprintf_r+0x1f8>
 8004d08:	7821      	ldrb	r1, [r4, #0]
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	4650      	mov	r0, sl
 8004d0e:	f7fb fa6f 	bl	80001f0 <memchr>
 8004d12:	b138      	cbz	r0, 8004d24 <_svfiprintf_r+0x150>
 8004d14:	9b04      	ldr	r3, [sp, #16]
 8004d16:	eba0 000a 	sub.w	r0, r0, sl
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	4082      	lsls	r2, r0
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	3401      	adds	r4, #1
 8004d22:	9304      	str	r3, [sp, #16]
 8004d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d28:	4825      	ldr	r0, [pc, #148]	; (8004dc0 <_svfiprintf_r+0x1ec>)
 8004d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d2e:	2206      	movs	r2, #6
 8004d30:	f7fb fa5e 	bl	80001f0 <memchr>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d038      	beq.n	8004daa <_svfiprintf_r+0x1d6>
 8004d38:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <_svfiprintf_r+0x1f0>)
 8004d3a:	bb1b      	cbnz	r3, 8004d84 <_svfiprintf_r+0x1b0>
 8004d3c:	9b03      	ldr	r3, [sp, #12]
 8004d3e:	3307      	adds	r3, #7
 8004d40:	f023 0307 	bic.w	r3, r3, #7
 8004d44:	3308      	adds	r3, #8
 8004d46:	9303      	str	r3, [sp, #12]
 8004d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4a:	4433      	add	r3, r6
 8004d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d4e:	e768      	b.n	8004c22 <_svfiprintf_r+0x4e>
 8004d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d54:	460c      	mov	r4, r1
 8004d56:	2001      	movs	r0, #1
 8004d58:	e7a6      	b.n	8004ca8 <_svfiprintf_r+0xd4>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	3401      	adds	r4, #1
 8004d5e:	9305      	str	r3, [sp, #20]
 8004d60:	4619      	mov	r1, r3
 8004d62:	f04f 0c0a 	mov.w	ip, #10
 8004d66:	4620      	mov	r0, r4
 8004d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d6c:	3a30      	subs	r2, #48	; 0x30
 8004d6e:	2a09      	cmp	r2, #9
 8004d70:	d903      	bls.n	8004d7a <_svfiprintf_r+0x1a6>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0c6      	beq.n	8004d04 <_svfiprintf_r+0x130>
 8004d76:	9105      	str	r1, [sp, #20]
 8004d78:	e7c4      	b.n	8004d04 <_svfiprintf_r+0x130>
 8004d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d7e:	4604      	mov	r4, r0
 8004d80:	2301      	movs	r3, #1
 8004d82:	e7f0      	b.n	8004d66 <_svfiprintf_r+0x192>
 8004d84:	ab03      	add	r3, sp, #12
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	462a      	mov	r2, r5
 8004d8a:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <_svfiprintf_r+0x1f4>)
 8004d8c:	a904      	add	r1, sp, #16
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f3af 8000 	nop.w
 8004d94:	1c42      	adds	r2, r0, #1
 8004d96:	4606      	mov	r6, r0
 8004d98:	d1d6      	bne.n	8004d48 <_svfiprintf_r+0x174>
 8004d9a:	89ab      	ldrh	r3, [r5, #12]
 8004d9c:	065b      	lsls	r3, r3, #25
 8004d9e:	f53f af2d 	bmi.w	8004bfc <_svfiprintf_r+0x28>
 8004da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004da4:	b01d      	add	sp, #116	; 0x74
 8004da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004daa:	ab03      	add	r3, sp, #12
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	462a      	mov	r2, r5
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <_svfiprintf_r+0x1f4>)
 8004db2:	a904      	add	r1, sp, #16
 8004db4:	4638      	mov	r0, r7
 8004db6:	f000 f879 	bl	8004eac <_printf_i>
 8004dba:	e7eb      	b.n	8004d94 <_svfiprintf_r+0x1c0>
 8004dbc:	080052ac 	.word	0x080052ac
 8004dc0:	080052b6 	.word	0x080052b6
 8004dc4:	00000000 	.word	0x00000000
 8004dc8:	08004b21 	.word	0x08004b21
 8004dcc:	080052b2 	.word	0x080052b2

08004dd0 <_printf_common>:
 8004dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd4:	4616      	mov	r6, r2
 8004dd6:	4699      	mov	r9, r3
 8004dd8:	688a      	ldr	r2, [r1, #8]
 8004dda:	690b      	ldr	r3, [r1, #16]
 8004ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bfb8      	it	lt
 8004de4:	4613      	movlt	r3, r2
 8004de6:	6033      	str	r3, [r6, #0]
 8004de8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dec:	4607      	mov	r7, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	b10a      	cbz	r2, 8004df6 <_printf_common+0x26>
 8004df2:	3301      	adds	r3, #1
 8004df4:	6033      	str	r3, [r6, #0]
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	0699      	lsls	r1, r3, #26
 8004dfa:	bf42      	ittt	mi
 8004dfc:	6833      	ldrmi	r3, [r6, #0]
 8004dfe:	3302      	addmi	r3, #2
 8004e00:	6033      	strmi	r3, [r6, #0]
 8004e02:	6825      	ldr	r5, [r4, #0]
 8004e04:	f015 0506 	ands.w	r5, r5, #6
 8004e08:	d106      	bne.n	8004e18 <_printf_common+0x48>
 8004e0a:	f104 0a19 	add.w	sl, r4, #25
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	6832      	ldr	r2, [r6, #0]
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	42ab      	cmp	r3, r5
 8004e16:	dc26      	bgt.n	8004e66 <_printf_common+0x96>
 8004e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e1c:	1e13      	subs	r3, r2, #0
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	bf18      	it	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	0692      	lsls	r2, r2, #26
 8004e26:	d42b      	bmi.n	8004e80 <_printf_common+0xb0>
 8004e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	4638      	mov	r0, r7
 8004e30:	47c0      	blx	r8
 8004e32:	3001      	adds	r0, #1
 8004e34:	d01e      	beq.n	8004e74 <_printf_common+0xa4>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	6922      	ldr	r2, [r4, #16]
 8004e3a:	f003 0306 	and.w	r3, r3, #6
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	bf02      	ittt	eq
 8004e42:	68e5      	ldreq	r5, [r4, #12]
 8004e44:	6833      	ldreq	r3, [r6, #0]
 8004e46:	1aed      	subeq	r5, r5, r3
 8004e48:	68a3      	ldr	r3, [r4, #8]
 8004e4a:	bf0c      	ite	eq
 8004e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e50:	2500      	movne	r5, #0
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bfc4      	itt	gt
 8004e56:	1a9b      	subgt	r3, r3, r2
 8004e58:	18ed      	addgt	r5, r5, r3
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	341a      	adds	r4, #26
 8004e5e:	42b5      	cmp	r5, r6
 8004e60:	d11a      	bne.n	8004e98 <_printf_common+0xc8>
 8004e62:	2000      	movs	r0, #0
 8004e64:	e008      	b.n	8004e78 <_printf_common+0xa8>
 8004e66:	2301      	movs	r3, #1
 8004e68:	4652      	mov	r2, sl
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	47c0      	blx	r8
 8004e70:	3001      	adds	r0, #1
 8004e72:	d103      	bne.n	8004e7c <_printf_common+0xac>
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	e7c6      	b.n	8004e0e <_printf_common+0x3e>
 8004e80:	18e1      	adds	r1, r4, r3
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	2030      	movs	r0, #48	; 0x30
 8004e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e8a:	4422      	add	r2, r4
 8004e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e94:	3302      	adds	r3, #2
 8004e96:	e7c7      	b.n	8004e28 <_printf_common+0x58>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	47c0      	blx	r8
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d0e6      	beq.n	8004e74 <_printf_common+0xa4>
 8004ea6:	3601      	adds	r6, #1
 8004ea8:	e7d9      	b.n	8004e5e <_printf_common+0x8e>
	...

08004eac <_printf_i>:
 8004eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb0:	7e0f      	ldrb	r7, [r1, #24]
 8004eb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004eb4:	2f78      	cmp	r7, #120	; 0x78
 8004eb6:	4691      	mov	r9, r2
 8004eb8:	4680      	mov	r8, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	469a      	mov	sl, r3
 8004ebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ec2:	d807      	bhi.n	8004ed4 <_printf_i+0x28>
 8004ec4:	2f62      	cmp	r7, #98	; 0x62
 8004ec6:	d80a      	bhi.n	8004ede <_printf_i+0x32>
 8004ec8:	2f00      	cmp	r7, #0
 8004eca:	f000 80d4 	beq.w	8005076 <_printf_i+0x1ca>
 8004ece:	2f58      	cmp	r7, #88	; 0x58
 8004ed0:	f000 80c0 	beq.w	8005054 <_printf_i+0x1a8>
 8004ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004edc:	e03a      	b.n	8004f54 <_printf_i+0xa8>
 8004ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ee2:	2b15      	cmp	r3, #21
 8004ee4:	d8f6      	bhi.n	8004ed4 <_printf_i+0x28>
 8004ee6:	a101      	add	r1, pc, #4	; (adr r1, 8004eec <_printf_i+0x40>)
 8004ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eec:	08004f45 	.word	0x08004f45
 8004ef0:	08004f59 	.word	0x08004f59
 8004ef4:	08004ed5 	.word	0x08004ed5
 8004ef8:	08004ed5 	.word	0x08004ed5
 8004efc:	08004ed5 	.word	0x08004ed5
 8004f00:	08004ed5 	.word	0x08004ed5
 8004f04:	08004f59 	.word	0x08004f59
 8004f08:	08004ed5 	.word	0x08004ed5
 8004f0c:	08004ed5 	.word	0x08004ed5
 8004f10:	08004ed5 	.word	0x08004ed5
 8004f14:	08004ed5 	.word	0x08004ed5
 8004f18:	0800505d 	.word	0x0800505d
 8004f1c:	08004f85 	.word	0x08004f85
 8004f20:	08005017 	.word	0x08005017
 8004f24:	08004ed5 	.word	0x08004ed5
 8004f28:	08004ed5 	.word	0x08004ed5
 8004f2c:	0800507f 	.word	0x0800507f
 8004f30:	08004ed5 	.word	0x08004ed5
 8004f34:	08004f85 	.word	0x08004f85
 8004f38:	08004ed5 	.word	0x08004ed5
 8004f3c:	08004ed5 	.word	0x08004ed5
 8004f40:	0800501f 	.word	0x0800501f
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	602a      	str	r2, [r5, #0]
 8004f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f54:	2301      	movs	r3, #1
 8004f56:	e09f      	b.n	8005098 <_printf_i+0x1ec>
 8004f58:	6820      	ldr	r0, [r4, #0]
 8004f5a:	682b      	ldr	r3, [r5, #0]
 8004f5c:	0607      	lsls	r7, r0, #24
 8004f5e:	f103 0104 	add.w	r1, r3, #4
 8004f62:	6029      	str	r1, [r5, #0]
 8004f64:	d501      	bpl.n	8004f6a <_printf_i+0xbe>
 8004f66:	681e      	ldr	r6, [r3, #0]
 8004f68:	e003      	b.n	8004f72 <_printf_i+0xc6>
 8004f6a:	0646      	lsls	r6, r0, #25
 8004f6c:	d5fb      	bpl.n	8004f66 <_printf_i+0xba>
 8004f6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f72:	2e00      	cmp	r6, #0
 8004f74:	da03      	bge.n	8004f7e <_printf_i+0xd2>
 8004f76:	232d      	movs	r3, #45	; 0x2d
 8004f78:	4276      	negs	r6, r6
 8004f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f7e:	485a      	ldr	r0, [pc, #360]	; (80050e8 <_printf_i+0x23c>)
 8004f80:	230a      	movs	r3, #10
 8004f82:	e012      	b.n	8004faa <_printf_i+0xfe>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	6820      	ldr	r0, [r4, #0]
 8004f88:	1d19      	adds	r1, r3, #4
 8004f8a:	6029      	str	r1, [r5, #0]
 8004f8c:	0605      	lsls	r5, r0, #24
 8004f8e:	d501      	bpl.n	8004f94 <_printf_i+0xe8>
 8004f90:	681e      	ldr	r6, [r3, #0]
 8004f92:	e002      	b.n	8004f9a <_printf_i+0xee>
 8004f94:	0641      	lsls	r1, r0, #25
 8004f96:	d5fb      	bpl.n	8004f90 <_printf_i+0xe4>
 8004f98:	881e      	ldrh	r6, [r3, #0]
 8004f9a:	4853      	ldr	r0, [pc, #332]	; (80050e8 <_printf_i+0x23c>)
 8004f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2308      	moveq	r3, #8
 8004fa2:	230a      	movne	r3, #10
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004faa:	6865      	ldr	r5, [r4, #4]
 8004fac:	60a5      	str	r5, [r4, #8]
 8004fae:	2d00      	cmp	r5, #0
 8004fb0:	bfa2      	ittt	ge
 8004fb2:	6821      	ldrge	r1, [r4, #0]
 8004fb4:	f021 0104 	bicge.w	r1, r1, #4
 8004fb8:	6021      	strge	r1, [r4, #0]
 8004fba:	b90e      	cbnz	r6, 8004fc0 <_printf_i+0x114>
 8004fbc:	2d00      	cmp	r5, #0
 8004fbe:	d04b      	beq.n	8005058 <_printf_i+0x1ac>
 8004fc0:	4615      	mov	r5, r2
 8004fc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fc6:	fb03 6711 	mls	r7, r3, r1, r6
 8004fca:	5dc7      	ldrb	r7, [r0, r7]
 8004fcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fd0:	4637      	mov	r7, r6
 8004fd2:	42bb      	cmp	r3, r7
 8004fd4:	460e      	mov	r6, r1
 8004fd6:	d9f4      	bls.n	8004fc2 <_printf_i+0x116>
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d10b      	bne.n	8004ff4 <_printf_i+0x148>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	07de      	lsls	r6, r3, #31
 8004fe0:	d508      	bpl.n	8004ff4 <_printf_i+0x148>
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	6861      	ldr	r1, [r4, #4]
 8004fe6:	4299      	cmp	r1, r3
 8004fe8:	bfde      	ittt	le
 8004fea:	2330      	movle	r3, #48	; 0x30
 8004fec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ff0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ff4:	1b52      	subs	r2, r2, r5
 8004ff6:	6122      	str	r2, [r4, #16]
 8004ff8:	f8cd a000 	str.w	sl, [sp]
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	aa03      	add	r2, sp, #12
 8005000:	4621      	mov	r1, r4
 8005002:	4640      	mov	r0, r8
 8005004:	f7ff fee4 	bl	8004dd0 <_printf_common>
 8005008:	3001      	adds	r0, #1
 800500a:	d14a      	bne.n	80050a2 <_printf_i+0x1f6>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	b004      	add	sp, #16
 8005012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	f043 0320 	orr.w	r3, r3, #32
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	4833      	ldr	r0, [pc, #204]	; (80050ec <_printf_i+0x240>)
 8005020:	2778      	movs	r7, #120	; 0x78
 8005022:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	6829      	ldr	r1, [r5, #0]
 800502a:	061f      	lsls	r7, r3, #24
 800502c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005030:	d402      	bmi.n	8005038 <_printf_i+0x18c>
 8005032:	065f      	lsls	r7, r3, #25
 8005034:	bf48      	it	mi
 8005036:	b2b6      	uxthmi	r6, r6
 8005038:	07df      	lsls	r7, r3, #31
 800503a:	bf48      	it	mi
 800503c:	f043 0320 	orrmi.w	r3, r3, #32
 8005040:	6029      	str	r1, [r5, #0]
 8005042:	bf48      	it	mi
 8005044:	6023      	strmi	r3, [r4, #0]
 8005046:	b91e      	cbnz	r6, 8005050 <_printf_i+0x1a4>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	f023 0320 	bic.w	r3, r3, #32
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	2310      	movs	r3, #16
 8005052:	e7a7      	b.n	8004fa4 <_printf_i+0xf8>
 8005054:	4824      	ldr	r0, [pc, #144]	; (80050e8 <_printf_i+0x23c>)
 8005056:	e7e4      	b.n	8005022 <_printf_i+0x176>
 8005058:	4615      	mov	r5, r2
 800505a:	e7bd      	b.n	8004fd8 <_printf_i+0x12c>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	6826      	ldr	r6, [r4, #0]
 8005060:	6961      	ldr	r1, [r4, #20]
 8005062:	1d18      	adds	r0, r3, #4
 8005064:	6028      	str	r0, [r5, #0]
 8005066:	0635      	lsls	r5, r6, #24
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	d501      	bpl.n	8005070 <_printf_i+0x1c4>
 800506c:	6019      	str	r1, [r3, #0]
 800506e:	e002      	b.n	8005076 <_printf_i+0x1ca>
 8005070:	0670      	lsls	r0, r6, #25
 8005072:	d5fb      	bpl.n	800506c <_printf_i+0x1c0>
 8005074:	8019      	strh	r1, [r3, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	6123      	str	r3, [r4, #16]
 800507a:	4615      	mov	r5, r2
 800507c:	e7bc      	b.n	8004ff8 <_printf_i+0x14c>
 800507e:	682b      	ldr	r3, [r5, #0]
 8005080:	1d1a      	adds	r2, r3, #4
 8005082:	602a      	str	r2, [r5, #0]
 8005084:	681d      	ldr	r5, [r3, #0]
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	2100      	movs	r1, #0
 800508a:	4628      	mov	r0, r5
 800508c:	f7fb f8b0 	bl	80001f0 <memchr>
 8005090:	b108      	cbz	r0, 8005096 <_printf_i+0x1ea>
 8005092:	1b40      	subs	r0, r0, r5
 8005094:	6060      	str	r0, [r4, #4]
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	2300      	movs	r3, #0
 800509c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a0:	e7aa      	b.n	8004ff8 <_printf_i+0x14c>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	462a      	mov	r2, r5
 80050a6:	4649      	mov	r1, r9
 80050a8:	4640      	mov	r0, r8
 80050aa:	47d0      	blx	sl
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0ad      	beq.n	800500c <_printf_i+0x160>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	079b      	lsls	r3, r3, #30
 80050b4:	d413      	bmi.n	80050de <_printf_i+0x232>
 80050b6:	68e0      	ldr	r0, [r4, #12]
 80050b8:	9b03      	ldr	r3, [sp, #12]
 80050ba:	4298      	cmp	r0, r3
 80050bc:	bfb8      	it	lt
 80050be:	4618      	movlt	r0, r3
 80050c0:	e7a6      	b.n	8005010 <_printf_i+0x164>
 80050c2:	2301      	movs	r3, #1
 80050c4:	4632      	mov	r2, r6
 80050c6:	4649      	mov	r1, r9
 80050c8:	4640      	mov	r0, r8
 80050ca:	47d0      	blx	sl
 80050cc:	3001      	adds	r0, #1
 80050ce:	d09d      	beq.n	800500c <_printf_i+0x160>
 80050d0:	3501      	adds	r5, #1
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	9903      	ldr	r1, [sp, #12]
 80050d6:	1a5b      	subs	r3, r3, r1
 80050d8:	42ab      	cmp	r3, r5
 80050da:	dcf2      	bgt.n	80050c2 <_printf_i+0x216>
 80050dc:	e7eb      	b.n	80050b6 <_printf_i+0x20a>
 80050de:	2500      	movs	r5, #0
 80050e0:	f104 0619 	add.w	r6, r4, #25
 80050e4:	e7f5      	b.n	80050d2 <_printf_i+0x226>
 80050e6:	bf00      	nop
 80050e8:	080052bd 	.word	0x080052bd
 80050ec:	080052ce 	.word	0x080052ce

080050f0 <memmove>:
 80050f0:	4288      	cmp	r0, r1
 80050f2:	b510      	push	{r4, lr}
 80050f4:	eb01 0402 	add.w	r4, r1, r2
 80050f8:	d902      	bls.n	8005100 <memmove+0x10>
 80050fa:	4284      	cmp	r4, r0
 80050fc:	4623      	mov	r3, r4
 80050fe:	d807      	bhi.n	8005110 <memmove+0x20>
 8005100:	1e43      	subs	r3, r0, #1
 8005102:	42a1      	cmp	r1, r4
 8005104:	d008      	beq.n	8005118 <memmove+0x28>
 8005106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800510a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800510e:	e7f8      	b.n	8005102 <memmove+0x12>
 8005110:	4402      	add	r2, r0
 8005112:	4601      	mov	r1, r0
 8005114:	428a      	cmp	r2, r1
 8005116:	d100      	bne.n	800511a <memmove+0x2a>
 8005118:	bd10      	pop	{r4, pc}
 800511a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800511e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005122:	e7f7      	b.n	8005114 <memmove+0x24>

08005124 <_sbrk_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d06      	ldr	r5, [pc, #24]	; (8005140 <_sbrk_r+0x1c>)
 8005128:	2300      	movs	r3, #0
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	602b      	str	r3, [r5, #0]
 8005130:	f7fb fe1c 	bl	8000d6c <_sbrk>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_sbrk_r+0x1a>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_sbrk_r+0x1a>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	200042b8 	.word	0x200042b8

08005144 <_realloc_r>:
 8005144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005148:	4680      	mov	r8, r0
 800514a:	4614      	mov	r4, r2
 800514c:	460e      	mov	r6, r1
 800514e:	b921      	cbnz	r1, 800515a <_realloc_r+0x16>
 8005150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005154:	4611      	mov	r1, r2
 8005156:	f7ff bc57 	b.w	8004a08 <_malloc_r>
 800515a:	b92a      	cbnz	r2, 8005168 <_realloc_r+0x24>
 800515c:	f7ff fbe8 	bl	8004930 <_free_r>
 8005160:	4625      	mov	r5, r4
 8005162:	4628      	mov	r0, r5
 8005164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005168:	f000 f81b 	bl	80051a2 <_malloc_usable_size_r>
 800516c:	4284      	cmp	r4, r0
 800516e:	4607      	mov	r7, r0
 8005170:	d802      	bhi.n	8005178 <_realloc_r+0x34>
 8005172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005176:	d812      	bhi.n	800519e <_realloc_r+0x5a>
 8005178:	4621      	mov	r1, r4
 800517a:	4640      	mov	r0, r8
 800517c:	f7ff fc44 	bl	8004a08 <_malloc_r>
 8005180:	4605      	mov	r5, r0
 8005182:	2800      	cmp	r0, #0
 8005184:	d0ed      	beq.n	8005162 <_realloc_r+0x1e>
 8005186:	42bc      	cmp	r4, r7
 8005188:	4622      	mov	r2, r4
 800518a:	4631      	mov	r1, r6
 800518c:	bf28      	it	cs
 800518e:	463a      	movcs	r2, r7
 8005190:	f7ff fbc0 	bl	8004914 <memcpy>
 8005194:	4631      	mov	r1, r6
 8005196:	4640      	mov	r0, r8
 8005198:	f7ff fbca 	bl	8004930 <_free_r>
 800519c:	e7e1      	b.n	8005162 <_realloc_r+0x1e>
 800519e:	4635      	mov	r5, r6
 80051a0:	e7df      	b.n	8005162 <_realloc_r+0x1e>

080051a2 <_malloc_usable_size_r>:
 80051a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051a6:	1f18      	subs	r0, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bfbc      	itt	lt
 80051ac:	580b      	ldrlt	r3, [r1, r0]
 80051ae:	18c0      	addlt	r0, r0, r3
 80051b0:	4770      	bx	lr
	...

080051b4 <_init>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	bf00      	nop
 80051b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	469e      	mov	lr, r3
 80051be:	4770      	bx	lr

080051c0 <_fini>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	bf00      	nop
 80051c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c6:	bc08      	pop	{r3}
 80051c8:	469e      	mov	lr, r3
 80051ca:	4770      	bx	lr
