
WSST_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08009a78  08009a78  00019a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f1c  08009f1c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009f1c  08009f1c  00019f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f24  08009f24  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f28  08009f28  00019f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004324  200001dc  0800a108  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004500  0800a108  00024500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015dc1  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a4  00000000  00000000  00036010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  000392b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee4  00000000  00000000  0003a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a781  00000000  00000000  0003b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160fe  00000000  00000000  00055c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a48c8  00000000  00000000  0006bd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006214  00000000  00000000  00110614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00116828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a60 	.word	0x08009a60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009a60 	.word	0x08009a60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <vApplicationGetIdleTaskMemory+0x30>)
 8000f6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200001f8 	.word	0x200001f8
 8000f84:	200002a8 	.word	0x200002a8

08000f88 <set_setpoint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_setpoint(uint32_t new_setpoint)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	temp_setpoint = new_setpoint;
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <set_setpoint+0x1c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000594 	.word	0x20000594

08000fa8 <reset_setpoint>:

void reset_setpoint(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	temp_setpoint = 0;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <reset_setpoint+0x14>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000594 	.word	0x20000594

08000fc0 <thermistor_adc_to_temp_c>:

float thermistor_adc_to_temp_c(uint16_t thermistor_adc_value)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
	float thermistor_resistance_ohm = (((float) 4096/(float) thermistor_adc_value) - 1) * (float) THERMISTOR_RESISTOR;
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	ee07 3a90 	vmov	s15, r3
 8000fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fd4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001050 <thermistor_adc_to_temp_c+0x90>
 8000fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001054 <thermistor_adc_to_temp_c+0x94>
 8000fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fec:	edc7 7a03 	vstr	s15, [r7, #12]

	float thermistor_temp = -(30.21*logf(thermistor_resistance_ohm)) + 137.57;
 8000ff0:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ff4:	f008 fc0e 	bl	8009814 <logf>
 8000ff8:	ee10 3a10 	vmov	r3, s0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff faab 	bl	8000558 <__aeabi_f2d>
 8001002:	a30f      	add	r3, pc, #60	; (adr r3, 8001040 <thermistor_adc_to_temp_c+0x80>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff fafe 	bl	8000608 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	a10d      	add	r1, pc, #52	; (adr r1, 8001048 <thermistor_adc_to_temp_c+0x88>)
 8001012:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001016:	f7ff f93f 	bl	8000298 <__aeabi_dsub>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fdc9 	bl	8000bb8 <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	60bb      	str	r3, [r7, #8]
	return thermistor_temp;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	ee07 3a90 	vmov	s15, r3
}
 8001030:	eeb0 0a67 	vmov.f32	s0, s15
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	8f5c28f6 	.word	0x8f5c28f6
 8001044:	403e35c2 	.word	0x403e35c2
 8001048:	70a3d70a 	.word	0x70a3d70a
 800104c:	4061323d 	.word	0x4061323d
 8001050:	45800000 	.word	0x45800000
 8001054:	409570a4 	.word	0x409570a4

08001058 <cycle_heater_state>:

void cycle_heater_state(int active_heater)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  switch(heater_state[active_heater])
 8001060:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <cycle_heater_state+0x60>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d018      	beq.n	800109e <cycle_heater_state+0x46>
 800106c:	2b02      	cmp	r3, #2
 800106e:	dc1e      	bgt.n	80010ae <cycle_heater_state+0x56>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <cycle_heater_state+0x22>
 8001074:	2b01      	cmp	r3, #1
 8001076:	d009      	beq.n	800108c <cycle_heater_state+0x34>
	case FULL_HEAT:
		heater_state[active_heater] = OFF;
		reset_setpoint();
		break;
  }
}
 8001078:	e019      	b.n	80010ae <cycle_heater_state+0x56>
		heater_state[active_heater] = PRE_HEAT;
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <cycle_heater_state+0x60>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
		set_setpoint(PRE_HEAT_SETPOINT);
 8001084:	207d      	movs	r0, #125	; 0x7d
 8001086:	f7ff ff7f 	bl	8000f88 <set_setpoint>
		break;
 800108a:	e010      	b.n	80010ae <cycle_heater_state+0x56>
		heater_state[active_heater] = FULL_HEAT;
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <cycle_heater_state+0x60>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	2202      	movs	r2, #2
 8001094:	701a      	strb	r2, [r3, #0]
		set_setpoint(FULL_HEAT_STOPPOINT);
 8001096:	2096      	movs	r0, #150	; 0x96
 8001098:	f7ff ff76 	bl	8000f88 <set_setpoint>
		break;
 800109c:	e007      	b.n	80010ae <cycle_heater_state+0x56>
		heater_state[active_heater] = OFF;
 800109e:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <cycle_heater_state+0x60>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
		reset_setpoint();
 80010a8:	f7ff ff7e 	bl	8000fa8 <reset_setpoint>
		break;
 80010ac:	bf00      	nop
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000598 	.word	0x20000598

080010bc <select_active_heater_bank>:

void select_active_heater_bank(int active_heater_bank)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	switch(active_heater_bank)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d81b      	bhi.n	8001102 <select_active_heater_bank+0x46>
 80010ca:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <select_active_heater_bank+0x14>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	080010e1 	.word	0x080010e1
 80010d4:	080010e9 	.word	0x080010e9
 80010d8:	080010f1 	.word	0x080010f1
 80010dc:	080010f9 	.word	0x080010f9
	{
		case HEATER_BANK_0:
			active_heater_bank_pin = HEATER_BANK_0_Pin;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <select_active_heater_bank+0x54>)
 80010e2:	2208      	movs	r2, #8
 80010e4:	801a      	strh	r2, [r3, #0]
			break;
 80010e6:	e00c      	b.n	8001102 <select_active_heater_bank+0x46>
		case HEATER_BANK_1:
			active_heater_bank_pin = HEATER_BANK_1_Pin;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <select_active_heater_bank+0x54>)
 80010ea:	2210      	movs	r2, #16
 80010ec:	801a      	strh	r2, [r3, #0]
			break;
 80010ee:	e008      	b.n	8001102 <select_active_heater_bank+0x46>
		case HEATER_BANK_2:
			active_heater_bank_pin = HEATER_BANK_2_Pin;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <select_active_heater_bank+0x54>)
 80010f2:	2220      	movs	r2, #32
 80010f4:	801a      	strh	r2, [r3, #0]
			break;
 80010f6:	e004      	b.n	8001102 <select_active_heater_bank+0x46>
		case HEATER_BANK_3:
			active_heater_bank_pin = HEATER_BANK_3_Pin;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <select_active_heater_bank+0x54>)
 80010fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fe:	801a      	strh	r2, [r3, #0]
			break;
 8001100:	bf00      	nop
	}
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	200005a4 	.word	0x200005a4

08001114 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001124:	d105      	bne.n	8001132 <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  cycle_heater_state(active_heater_bank);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_GPIO_EXTI_Callback+0x38>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff94 	bl	8001058 <cycle_heater_state>
  else if(GPIO_Pin == GPIO_PIN_7)
  {
//	  rpm_time = HAL_GetTick();
	  IR_RPM_interrupt_count++;
  }
}
 8001130:	e007      	b.n	8001142 <HAL_GPIO_EXTI_Callback+0x2e>
  else if(GPIO_Pin == GPIO_PIN_7)
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	2b80      	cmp	r3, #128	; 0x80
 8001136:	d104      	bne.n	8001142 <HAL_GPIO_EXTI_Callback+0x2e>
	  IR_RPM_interrupt_count++;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_GPIO_EXTI_Callback+0x3c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001140:	6013      	str	r3, [r2, #0]
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200005a0 	.word	0x200005a0
 8001150:	200005a8 	.word	0x200005a8

08001154 <read_and_accumulate_adc_channels>:

void read_and_accumulate_adc_channels()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
	for(int i = 0; i < HEATER_COUNT; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	e019      	b.n	8001194 <read_and_accumulate_adc_channels+0x40>
	{
		HAL_ADC_Start(&hadc1);
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <read_and_accumulate_adc_channels+0x54>)
 8001162:	f001 f85b 	bl	800221c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001166:	f04f 31ff 	mov.w	r1, #4294967295
 800116a:	480f      	ldr	r0, [pc, #60]	; (80011a8 <read_and_accumulate_adc_channels+0x54>)
 800116c:	f001 f93d 	bl	80023ea <HAL_ADC_PollForConversion>
		adc_values[i] += HAL_ADC_GetValue(&hadc1);
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <read_and_accumulate_adc_channels+0x54>)
 8001172:	f001 f9c5 	bl	8002500 <HAL_ADC_GetValue>
 8001176:	4601      	mov	r1, r0
 8001178:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <read_and_accumulate_adc_channels+0x58>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001180:	b28b      	uxth	r3, r1
 8001182:	4413      	add	r3, r2
 8001184:	b299      	uxth	r1, r3
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <read_and_accumulate_adc_channels+0x58>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < HEATER_COUNT; i++)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b07      	cmp	r3, #7
 8001198:	dde2      	ble.n	8001160 <read_and_accumulate_adc_channels+0xc>
	}

	HAL_ADC_Stop(&hadc1);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <read_and_accumulate_adc_channels+0x54>)
 800119c:	f001 f8f2 	bl	8002384 <HAL_ADC_Stop>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200004a8 	.word	0x200004a8
 80011ac:	200005e0 	.word	0x200005e0

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b0a4      	sub	sp, #144	; 0x90
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f000 ffab 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ba:	f000 f881 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f000 fa21 	bl	8001604 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011c2:	f000 f8e7 	bl	8001394 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80011c6:	f000 f9f3 	bl	80015b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011ca:	f000 f999 	bl	8001500 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80011ce:	4831      	ldr	r0, [pc, #196]	; (8001294 <main+0xe4>)
 80011d0:	f001 f824 	bl	800221c <HAL_ADC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <main+0xe8>)
 80011d6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80011da:	461d      	mov	r5, r3
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 f9dd 	bl	80055ae <osThreadCreate>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a29      	ldr	r2, [pc, #164]	; (800129c <main+0xec>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of readSensors */
  osThreadDef(readSensors, startReadSensors, osPriorityNormal, 0, 128);
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <main+0xf0>)
 80011fc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800120a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorsHandle = osThreadCreate(osThread(readSensors), NULL);
 800120e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f9ca 	bl	80055ae <osThreadCreate>
 800121a:	4603      	mov	r3, r0
 800121c:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <main+0xf4>)
 800121e:	6013      	str	r3, [r2, #0]

  /* definition and creation of bangBangControl */
  osThreadDef(bangBangControl, StartBangBangControl, osPriorityRealtime, 0, 128);
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <main+0xf8>)
 8001222:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bangBangControlHandle = osThreadCreate(osThread(bangBangControl), NULL);
 8001234:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f004 f9b7 	bl	80055ae <osThreadCreate>
 8001240:	4603      	mov	r3, r0
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <main+0xfc>)
 8001244:	6013      	str	r3, [r2, #0]

  /* definition and creation of communicationTa */
  osThreadDef(communicationTa, StartComTask, osPriorityNormal, 0, 256);
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <main+0x100>)
 8001248:	f107 0420 	add.w	r4, r7, #32
 800124c:	461d      	mov	r5, r3
 800124e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001252:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  communicationTaHandle = osThreadCreate(osThread(communicationTa), NULL);
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f004 f9a4 	bl	80055ae <osThreadCreate>
 8001266:	4603      	mov	r3, r0
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <main+0x104>)
 800126a:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, startMotorTask, osPriorityNormal, 0, 128);
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <main+0x108>)
 800126e:	1d3c      	adds	r4, r7, #4
 8001270:	461d      	mov	r5, r3
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f004 f993 	bl	80055ae <osThreadCreate>
 8001288:	4603      	mov	r3, r0
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <main+0x10c>)
 800128c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800128e:	f004 f987 	bl	80055a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001292:	e7fe      	b.n	8001292 <main+0xe2>
 8001294:	200004a8 	.word	0x200004a8
 8001298:	08009a84 	.word	0x08009a84
 800129c:	20000580 	.word	0x20000580
 80012a0:	08009aac 	.word	0x08009aac
 80012a4:	20000584 	.word	0x20000584
 80012a8:	08009ad8 	.word	0x08009ad8
 80012ac:	20000588 	.word	0x20000588
 80012b0:	08009b04 	.word	0x08009b04
 80012b4:	2000058c 	.word	0x2000058c
 80012b8:	08009b2c 	.word	0x08009b2c
 80012bc:	20000590 	.word	0x20000590

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	; 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2230      	movs	r2, #48	; 0x30
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f006 f94f 	bl	8007572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <SystemClock_Config+0xcc>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <SystemClock_Config+0xcc>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <SystemClock_Config+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <SystemClock_Config+0xd0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800130c:	4a20      	ldr	r2, [pc, #128]	; (8001390 <SystemClock_Config+0xd0>)
 800130e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <SystemClock_Config+0xd0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001324:	2301      	movs	r3, #1
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001328:	2310      	movs	r3, #16
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132c:	2302      	movs	r3, #2
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001330:	2300      	movs	r3, #0
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001334:	2308      	movs	r3, #8
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001338:	2348      	movs	r3, #72	; 0x48
 800133a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	4618      	mov	r0, r3
 800134a:	f001 fe2f 	bl	8002fac <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001354:	f000 fbc2 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001358:	230f      	movs	r3, #15
 800135a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135c:	2302      	movs	r3, #2
 800135e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2102      	movs	r1, #2
 8001374:	4618      	mov	r0, r3
 8001376:	f002 f891 	bl	800349c <HAL_RCC_ClockConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001380:	f000 fbac 	bl	8001adc <Error_Handler>
  }
}
 8001384:	bf00      	nop
 8001386:	3750      	adds	r7, #80	; 0x50
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139a:	463b      	mov	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a6:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013a8:	4a53      	ldr	r2, [pc, #332]	; (80014f8 <MX_ADC1_Init+0x164>)
 80013aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013ac:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b2:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013b8:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013be:	4b4d      	ldr	r3, [pc, #308]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80013c4:	4b4b      	ldr	r3, [pc, #300]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d2:	4b48      	ldr	r3, [pc, #288]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013da:	4a48      	ldr	r2, [pc, #288]	; (80014fc <MX_ADC1_Init+0x168>)
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013de:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80013e4:	4b43      	ldr	r3, [pc, #268]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013e6:	2208      	movs	r2, #8
 80013e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f2:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f8:	483e      	ldr	r0, [pc, #248]	; (80014f4 <MX_ADC1_Init+0x160>)
 80013fa:	f000 fecb 	bl	8002194 <HAL_ADC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001404:	f000 fb6a 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4836      	ldr	r0, [pc, #216]	; (80014f4 <MX_ADC1_Init+0x160>)
 800141a:	f001 f87f 	bl	800251c <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001424:	f000 fb5a 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001428:	2301      	movs	r3, #1
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	482f      	ldr	r0, [pc, #188]	; (80014f4 <MX_ADC1_Init+0x160>)
 8001436:	f001 f871 	bl	800251c <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001440:	f000 fb4c 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001444:	2304      	movs	r3, #4
 8001446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001448:	2303      	movs	r3, #3
 800144a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	4828      	ldr	r0, [pc, #160]	; (80014f4 <MX_ADC1_Init+0x160>)
 8001452:	f001 f863 	bl	800251c <HAL_ADC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800145c:	f000 fb3e 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001460:	2308      	movs	r3, #8
 8001462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001464:	2304      	movs	r3, #4
 8001466:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	4619      	mov	r1, r3
 800146c:	4821      	ldr	r0, [pc, #132]	; (80014f4 <MX_ADC1_Init+0x160>)
 800146e:	f001 f855 	bl	800251c <HAL_ADC_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001478:	f000 fb30 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800147c:	230a      	movs	r3, #10
 800147e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001480:	2305      	movs	r3, #5
 8001482:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	481a      	ldr	r0, [pc, #104]	; (80014f4 <MX_ADC1_Init+0x160>)
 800148a:	f001 f847 	bl	800251c <HAL_ADC_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001494:	f000 fb22 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001498:	230b      	movs	r3, #11
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800149c:	2306      	movs	r3, #6
 800149e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	4619      	mov	r1, r3
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <MX_ADC1_Init+0x160>)
 80014a6:	f001 f839 	bl	800251c <HAL_ADC_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80014b0:	f000 fb14 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014b4:	230c      	movs	r3, #12
 80014b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80014b8:	2307      	movs	r3, #7
 80014ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_ADC1_Init+0x160>)
 80014c2:	f001 f82b 	bl	800251c <HAL_ADC_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80014cc:	f000 fb06 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80014d0:	230d      	movs	r3, #13
 80014d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_ADC1_Init+0x160>)
 80014de:	f001 f81d 	bl	800251c <HAL_ADC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 80014e8:	f000 faf8 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200004a8 	.word	0x200004a8
 80014f8:	40012000 	.word	0x40012000
 80014fc:	0f000001 	.word	0x0f000001

08001500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <MX_TIM2_Init+0xac>)
 8001524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <MX_TIM2_Init+0xac>)
 800152c:	2247      	movs	r2, #71	; 0x47
 800152e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_TIM2_Init+0xac>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_TIM2_Init+0xac>)
 8001538:	f240 32e7 	movw	r2, #999	; 0x3e7
 800153c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_TIM2_Init+0xac>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_TIM2_Init+0xac>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800154a:	4818      	ldr	r0, [pc, #96]	; (80015ac <MX_TIM2_Init+0xac>)
 800154c:	f002 fa74 	bl	8003a38 <HAL_TIM_PWM_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001556:	f000 fac1 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	4619      	mov	r1, r3
 8001568:	4810      	ldr	r0, [pc, #64]	; (80015ac <MX_TIM2_Init+0xac>)
 800156a:	f002 ff7d 	bl	8004468 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001574:	f000 fab2 	bl	8001adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001578:	2360      	movs	r3, #96	; 0x60
 800157a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4807      	ldr	r0, [pc, #28]	; (80015ac <MX_TIM2_Init+0xac>)
 8001590:	f002 fc42 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800159a:	f000 fa9f 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <MX_TIM2_Init+0xac>)
 80015a0:	f000 fb80 	bl	8001ca4 <HAL_TIM_MspPostInit>

}
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200004f0 	.word	0x200004f0

080015b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_USART2_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015e8:	f002 ffc0 	bl	800456c <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015f2:	f000 fa73 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000538 	.word	0x20000538
 8001600:	40004400 	.word	0x40004400

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b40      	ldr	r3, [pc, #256]	; (8001720 <MX_GPIO_Init+0x11c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a3f      	ldr	r2, [pc, #252]	; (8001720 <MX_GPIO_Init+0x11c>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <MX_GPIO_Init+0x11c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <MX_GPIO_Init+0x11c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a38      	ldr	r2, [pc, #224]	; (8001720 <MX_GPIO_Init+0x11c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b36      	ldr	r3, [pc, #216]	; (8001720 <MX_GPIO_Init+0x11c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b32      	ldr	r3, [pc, #200]	; (8001720 <MX_GPIO_Init+0x11c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a31      	ldr	r2, [pc, #196]	; (8001720 <MX_GPIO_Init+0x11c>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <MX_GPIO_Init+0x11c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001674:	482b      	ldr	r0, [pc, #172]	; (8001724 <MX_GPIO_Init+0x120>)
 8001676:	f001 fc67 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEATER_BANK_3_Pin|HEATER_BANK_0_Pin|HEATER_BANK_1_Pin|HEATER_BANK_2_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001680:	4829      	ldr	r0, [pc, #164]	; (8001728 <MX_GPIO_Init+0x124>)
 8001682:	f001 fc61 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Interrupt_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Interrupt_Pin;
 8001686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800168c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001692:	2301      	movs	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	4823      	ldr	r0, [pc, #140]	; (800172c <MX_GPIO_Init+0x128>)
 800169e:	f001 facf 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80016a2:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80016a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4619      	mov	r1, r3
 80016ba:	481a      	ldr	r0, [pc, #104]	; (8001724 <MX_GPIO_Init+0x120>)
 80016bc:	f001 fac0 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Input_Interrupt_Pin */
  GPIO_InitStruct.Pin = IR_Input_Interrupt_Pin;
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_Input_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	4813      	ldr	r0, [pc, #76]	; (8001724 <MX_GPIO_Init+0x120>)
 80016d6:	f001 fab3 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : HEATER_BANK_3_Pin HEATER_BANK_0_Pin HEATER_BANK_1_Pin HEATER_BANK_2_Pin */
  GPIO_InitStruct.Pin = HEATER_BANK_3_Pin|HEATER_BANK_0_Pin|HEATER_BANK_1_Pin|HEATER_BANK_2_Pin;
 80016da:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80016de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	4619      	mov	r1, r3
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_GPIO_Init+0x124>)
 80016f4:	f001 faa4 	bl	8002c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2105      	movs	r1, #5
 80016fc:	2017      	movs	r0, #23
 80016fe:	f001 f9e3 	bl	8002ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001702:	2017      	movs	r0, #23
 8001704:	f001 f9fc 	bl	8002b00 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2105      	movs	r1, #5
 800170c:	2028      	movs	r0, #40	; 0x28
 800170e:	f001 f9db 	bl	8002ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001712:	2028      	movs	r0, #40	; 0x28
 8001714:	f001 f9f4 	bl	8002b00 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800

08001730 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  reset_setpoint();
 8001738:	f7ff fc36 	bl	8000fa8 <reset_setpoint>
  select_active_heater_bank(active_heater_bank);
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <StartDefaultTask+0x20>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fcbb 	bl	80010bc <select_active_heater_bank>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001746:	f242 7010 	movw	r0, #10000	; 0x2710
 800174a:	f003 ff7c 	bl	8005646 <osDelay>
 800174e:	e7fa      	b.n	8001746 <StartDefaultTask+0x16>
 8001750:	200005a0 	.word	0x200005a0

08001754 <startReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadSensors */
void startReadSensors(void const * argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadSensors */
  int oversample_count_max = 10;
 800175c:	230a      	movs	r3, #10
 800175e:	60fb      	str	r3, [r7, #12]
  int oversample_count = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  // add switch case here for reading ADC channels
  for(;;)
  {
	read_and_accumulate_adc_channels();
 8001764:	f7ff fcf6 	bl	8001154 <read_and_accumulate_adc_channels>
	oversample_count++;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]

	if(oversample_count == oversample_count_max)
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	d12b      	bne.n	80017ce <startReadSensors+0x7a>
	{
		oversample_count = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < HEATER_COUNT; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	e023      	b.n	80017c8 <startReadSensors+0x74>
		{
			adc_values[i] = adc_values[i]/oversample_count_max;
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <startReadSensors+0x84>)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001788:	461a      	mov	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001790:	b299      	uxth	r1, r3
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <startReadSensors+0x84>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			temp_values[i] = thermistor_adc_to_temp_c(adc_values[i]);
 800179a:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <startReadSensors+0x84>)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fc0c 	bl	8000fc0 <thermistor_adc_to_temp_c>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <startReadSensors+0x88>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	edc3 7a00 	vstr	s15, [r3]
			adc_values[i] = 0;
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <startReadSensors+0x84>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2100      	movs	r1, #0
 80017be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < HEATER_COUNT; i++)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	3301      	adds	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	ddd8      	ble.n	8001780 <startReadSensors+0x2c>
		}
	}
    osDelay(1);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f003 ff39 	bl	8005646 <osDelay>
	read_and_accumulate_adc_channels();
 80017d4:	e7c6      	b.n	8001764 <startReadSensors+0x10>
 80017d6:	bf00      	nop
 80017d8:	200005e0 	.word	0x200005e0
 80017dc:	200005f0 	.word	0x200005f0

080017e0 <StartBangBangControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBangBangControl */
void StartBangBangControl(void const * argument)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBangBangControl */
  TIM2->CCR1 = 500; // Divide by 1000 to get PWM Duty Cycle
 80017e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017f0:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017f2:	2100      	movs	r1, #0
 80017f4:	483e      	ldr	r0, [pc, #248]	; (80018f0 <StartBangBangControl+0x110>)
 80017f6:	f002 f96f 	bl	8003ad8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // D7 on board
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001800:	483c      	ldr	r0, [pc, #240]	; (80018f4 <StartBangBangControl+0x114>)
 8001802:	f001 fba1 	bl	8002f48 <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	if(heater_state[active_heater_bank] == PRE_HEAT)
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <StartBangBangControl+0x118>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a3c      	ldr	r2, [pc, #240]	; (80018fc <StartBangBangControl+0x11c>)
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d12b      	bne.n	800186a <StartBangBangControl+0x8a>
	{
		if(temp_values[active_heater_bank] < temp_setpoint - PRE_HEAT_DEADBAND)
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <StartBangBangControl+0x118>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a3a      	ldr	r2, [pc, #232]	; (8001900 <StartBangBangControl+0x120>)
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <StartBangBangControl+0x124>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800182c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	d50c      	bpl.n	8001850 <StartBangBangControl+0x70>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2120      	movs	r1, #32
 800183a:	482e      	ldr	r0, [pc, #184]	; (80018f4 <StartBangBangControl+0x114>)
 800183c:	f001 fb84 	bl	8002f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_SET);
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <StartBangBangControl+0x128>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2201      	movs	r2, #1
 8001846:	4619      	mov	r1, r3
 8001848:	4830      	ldr	r0, [pc, #192]	; (800190c <StartBangBangControl+0x12c>)
 800184a:	f001 fb7d 	bl	8002f48 <HAL_GPIO_WritePin>
 800184e:	e04b      	b.n	80018e8 <StartBangBangControl+0x108>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2120      	movs	r1, #32
 8001854:	4827      	ldr	r0, [pc, #156]	; (80018f4 <StartBangBangControl+0x114>)
 8001856:	f001 fb77 	bl	8002f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_RESET);
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <StartBangBangControl+0x128>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	4619      	mov	r1, r3
 8001862:	482a      	ldr	r0, [pc, #168]	; (800190c <StartBangBangControl+0x12c>)
 8001864:	f001 fb70 	bl	8002f48 <HAL_GPIO_WritePin>
 8001868:	e03e      	b.n	80018e8 <StartBangBangControl+0x108>
		}
	}
	else if(heater_state[active_heater_bank] == FULL_HEAT)
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <StartBangBangControl+0x118>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <StartBangBangControl+0x11c>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d12c      	bne.n	80018d0 <StartBangBangControl+0xf0>
	{
		if(temp_values[active_heater_bank] < FULL_HEAT_STOPPOINT)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <StartBangBangControl+0x118>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a21      	ldr	r2, [pc, #132]	; (8001900 <StartBangBangControl+0x120>)
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001910 <StartBangBangControl+0x130>
 8001888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	d50c      	bpl.n	80018ac <StartBangBangControl+0xcc>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	2120      	movs	r1, #32
 8001896:	4817      	ldr	r0, [pc, #92]	; (80018f4 <StartBangBangControl+0x114>)
 8001898:	f001 fb56 	bl	8002f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_SET); // D12 on board
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <StartBangBangControl+0x128>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <StartBangBangControl+0x12c>)
 80018a6:	f001 fb4f 	bl	8002f48 <HAL_GPIO_WritePin>
 80018aa:	e01d      	b.n	80018e8 <StartBangBangControl+0x108>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2120      	movs	r1, #32
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <StartBangBangControl+0x114>)
 80018b2:	f001 fb49 	bl	8002f48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_RESET);
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <StartBangBangControl+0x128>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	4619      	mov	r1, r3
 80018be:	4813      	ldr	r0, [pc, #76]	; (800190c <StartBangBangControl+0x12c>)
 80018c0:	f001 fb42 	bl	8002f48 <HAL_GPIO_WritePin>
			heater_state[active_heater_bank] = OFF;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <StartBangBangControl+0x118>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <StartBangBangControl+0x11c>)
 80018ca:	2100      	movs	r1, #0
 80018cc:	54d1      	strb	r1, [r2, r3]
 80018ce:	e00b      	b.n	80018e8 <StartBangBangControl+0x108>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2120      	movs	r1, #32
 80018d4:	4807      	ldr	r0, [pc, #28]	; (80018f4 <StartBangBangControl+0x114>)
 80018d6:	f001 fb37 	bl	8002f48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, active_heater_bank_pin, GPIO_PIN_RESET);
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <StartBangBangControl+0x128>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	4619      	mov	r1, r3
 80018e2:	480a      	ldr	r0, [pc, #40]	; (800190c <StartBangBangControl+0x12c>)
 80018e4:	f001 fb30 	bl	8002f48 <HAL_GPIO_WritePin>
	}
	osDelay(100);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f003 feac 	bl	8005646 <osDelay>
	if(heater_state[active_heater_bank] == PRE_HEAT)
 80018ee:	e78a      	b.n	8001806 <StartBangBangControl+0x26>
 80018f0:	200004f0 	.word	0x200004f0
 80018f4:	40020000 	.word	0x40020000
 80018f8:	200005a0 	.word	0x200005a0
 80018fc:	20000598 	.word	0x20000598
 8001900:	200005f0 	.word	0x200005f0
 8001904:	20000594 	.word	0x20000594
 8001908:	200005a4 	.word	0x200005a4
 800190c:	40020400 	.word	0x40020400
 8001910:	43160000 	.word	0x43160000

08001914 <StartComTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartComTask */
void StartComTask(void const * argument)
{
 8001914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001918:	b0a9      	sub	sp, #164	; 0xa4
 800191a:	af06      	add	r7, sp, #24
 800191c:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	char buf[128];
	sprintf(buf, "T0(C): %f // T1(C): %f // State: %d // RPM: %f\r\n", temp_values[active_heater_bank],
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <StartComTask+0x80>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <StartComTask+0x84>)
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe14 	bl	8000558 <__aeabi_f2d>
 8001930:	4680      	mov	r8, r0
 8001932:	4689      	mov	r9, r1
			temp_values[1], heater_state[0], global_rpm_avg);
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <StartComTask+0x84>)
 8001936:	685b      	ldr	r3, [r3, #4]
	sprintf(buf, "T0(C): %f // T1(C): %f // State: %d // RPM: %f\r\n", temp_values[active_heater_bank],
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe0d 	bl	8000558 <__aeabi_f2d>
 800193e:	4604      	mov	r4, r0
 8001940:	460d      	mov	r5, r1
			temp_values[1], heater_state[0], global_rpm_avg);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <StartComTask+0x88>)
 8001944:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "T0(C): %f // T1(C): %f // State: %d // RPM: %f\r\n", temp_values[active_heater_bank],
 8001946:	461e      	mov	r6, r3
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <StartComTask+0x8c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe03 	bl	8000558 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	f107 0008 	add.w	r0, r7, #8
 800195a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800195e:	9602      	str	r6, [sp, #8]
 8001960:	e9cd 4500 	strd	r4, r5, [sp]
 8001964:	4642      	mov	r2, r8
 8001966:	464b      	mov	r3, r9
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <StartComTask+0x90>)
 800196a:	f005 fd9f 	bl	80074ac <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fc84 	bl	8000280 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	b29a      	uxth	r2, r3
 800197c:	f107 0108 	add.w	r1, r7, #8
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	4808      	ldr	r0, [pc, #32]	; (80019a8 <StartComTask+0x94>)
 8001986:	f002 fe41 	bl	800460c <HAL_UART_Transmit>

    osDelay(200);
 800198a:	20c8      	movs	r0, #200	; 0xc8
 800198c:	f003 fe5b 	bl	8005646 <osDelay>
  {
 8001990:	e7c5      	b.n	800191e <StartComTask+0xa>
 8001992:	bf00      	nop
 8001994:	200005a0 	.word	0x200005a0
 8001998:	200005f0 	.word	0x200005f0
 800199c:	20000598 	.word	0x20000598
 80019a0:	200005dc 	.word	0x200005dc
 80019a4:	08009b48 	.word	0x08009b48
 80019a8:	20000538 	.word	0x20000538

080019ac <startMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMotorTask */
void startMotorTask(void const * argument)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMotorTask */
  int i = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  float rpm_avg = 0;
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	rpm_time = HAL_GetTick();
 80019be:	f000 fbdd 	bl	800217c <HAL_GetTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a34      	ldr	r2, [pc, #208]	; (8001a98 <startMotorTask+0xec>)
 80019c6:	6013      	str	r3, [r2, #0]
	float time_delta = ((float) rpm_time - (float) prev_rpm_time)/MS_TO_S;
 80019c8:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <startMotorTask+0xec>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <startMotorTask+0xf0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <startMotorTask+0xf4>)
 80019e6:	ed93 7a00 	vldr	s14, [r3]
 80019ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ee:	edc7 7a02 	vstr	s15, [r7, #8]
	centrifuge_RPM[i] = ((IR_RPM_interrupt_count/time_delta)*60)/8;
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <startMotorTask+0xf8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a06:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001aa8 <startMotorTask+0xfc>
 8001a0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a0e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a16:	4a25      	ldr	r2, [pc, #148]	; (8001aac <startMotorTask+0x100>)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	edc3 7a00 	vstr	s15, [r3]
	IR_RPM_interrupt_count = 0;
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <startMotorTask+0xf8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
	prev_rpm_time = rpm_time;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <startMotorTask+0xec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <startMotorTask+0xf0>)
 8001a2e:	6013      	str	r3, [r2, #0]

	rpm_avg = 0;
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]

	for(int index = 0; index < 10; index++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e00e      	b.n	8001a5a <startMotorTask+0xae>
	{
		rpm_avg += centrifuge_RPM[index];
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <startMotorTask+0x100>)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int index = 0; index < 10; index++)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b09      	cmp	r3, #9
 8001a5e:	dded      	ble.n	8001a3c <startMotorTask+0x90>
	}

	global_rpm_avg = (rpm_avg/10);
 8001a60:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a64:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <startMotorTask+0x104>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]

	i = (i+1) % 10;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <startMotorTask+0x108>)
 8001a78:	fb83 1302 	smull	r1, r3, r3, r2
 8001a7c:	1099      	asrs	r1, r3, #2
 8001a7e:	17d3      	asrs	r3, r2, #31
 8001a80:	1ac9      	subs	r1, r1, r3
 8001a82:	460b      	mov	r3, r1
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]

    osDelay(100);
 8001a8e:	2064      	movs	r0, #100	; 0x64
 8001a90:	f003 fdd9 	bl	8005646 <osDelay>
  {
 8001a94:	e793      	b.n	80019be <startMotorTask+0x12>
 8001a96:	bf00      	nop
 8001a98:	200005d4 	.word	0x200005d4
 8001a9c:	200005d8 	.word	0x200005d8
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	200005a8 	.word	0x200005a8
 8001aa8:	42700000 	.word	0x42700000
 8001aac:	200005ac 	.word	0x200005ac
 8001ab0:	200005dc 	.word	0x200005dc
 8001ab4:	66666667 	.word	0x66666667

08001ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aca:	f000 fb43 	bl	8002154 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40010000 	.word	0x40010000

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b090      	sub	sp, #64	; 0x40
 8001ae0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae2:	b672      	cpsid	i
}
 8001ae4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char buf[64];
  sprintf(buf, "BRUH MOMENT");
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4908      	ldr	r1, [pc, #32]	; (8001b0c <Error_Handler+0x30>)
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 fcde 	bl	80074ac <siprintf>

  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8001af0:	463b      	mov	r3, r7
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fbc4 	bl	8000280 <strlen>
 8001af8:	4603      	mov	r3, r0
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4639      	mov	r1, r7
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	4803      	ldr	r0, [pc, #12]	; (8001b10 <Error_Handler+0x34>)
 8001b04:	f002 fd82 	bl	800460c <HAL_UART_Transmit>
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x2c>
 8001b0a:	bf00      	nop
 8001b0c:	08009b7c 	.word	0x08009b7c
 8001b10:	20000538 	.word	0x20000538

08001b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_MspInit+0x54>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_MspInit+0x54>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x54>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_MspInit+0x54>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_MspInit+0x54>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_MspInit+0x54>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	210f      	movs	r1, #15
 8001b56:	f06f 0001 	mvn.w	r0, #1
 8001b5a:	f000 ffb5 	bl	8002ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	; 0x30
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <HAL_ADC_MspInit+0xe4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d15b      	bne.n	8001c46 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a28      	ldr	r2, [pc, #160]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bfe:	230f      	movs	r3, #15
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c02:	2303      	movs	r3, #3
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4811      	ldr	r0, [pc, #68]	; (8001c58 <HAL_ADC_MspInit+0xec>)
 8001c12:	f001 f815 	bl	8002c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001c16:	2313      	movs	r3, #19
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <HAL_ADC_MspInit+0xf0>)
 8001c2a:	f001 f809 	bl	8002c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c32:	2303      	movs	r3, #3
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4807      	ldr	r0, [pc, #28]	; (8001c60 <HAL_ADC_MspInit+0xf4>)
 8001c42:	f000 fffd 	bl	8002c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c46:	bf00      	nop
 8001c48:	3730      	adds	r7, #48	; 0x30
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40012000 	.word	0x40012000
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020400 	.word	0x40020400

08001c64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d10d      	bne.n	8001c92 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc4:	d11e      	bne.n	8001d04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_TIM_MspPostInit+0x68>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <HAL_TIM_MspPostInit+0x68>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_TIM_MspPostInit+0x68>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4804      	ldr	r0, [pc, #16]	; (8001d10 <HAL_TIM_MspPostInit+0x6c>)
 8001d00:	f000 ff9e 	bl	8002c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000

08001d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_UART_MspInit+0x94>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d133      	bne.n	8001d9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <HAL_UART_MspInit+0x98>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <HAL_UART_MspInit+0x98>)
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_UART_MspInit+0x98>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_UART_MspInit+0x98>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_UART_MspInit+0x98>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_UART_MspInit+0x98>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d6e:	230c      	movs	r3, #12
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d7e:	2307      	movs	r3, #7
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4809      	ldr	r0, [pc, #36]	; (8001db0 <HAL_UART_MspInit+0x9c>)
 8001d8a:	f000 ff59 	bl	8002c40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2105      	movs	r1, #5
 8001d92:	2026      	movs	r0, #38	; 0x26
 8001d94:	f000 fe98 	bl	8002ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d98:	2026      	movs	r0, #38	; 0x26
 8001d9a:	f000 feb1 	bl	8002b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40004400 	.word	0x40004400
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_InitTick+0xd0>)
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_InitTick+0xd0>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_InitTick+0xd0>)
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de0:	f107 020c 	add.w	r2, r7, #12
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 fd36 	bl	800385c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001df0:	f001 fd20 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8001df4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <HAL_InitTick+0xd4>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0c9b      	lsrs	r3, r3, #18
 8001e00:	3b01      	subs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_InitTick+0xd8>)
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_InitTick+0xdc>)
 8001e08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_InitTick+0xd8>)
 8001e0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_InitTick+0xd8>)
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_InitTick+0xd8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_InitTick+0xd8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_InitTick+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e2a:	4818      	ldr	r0, [pc, #96]	; (8001e8c <HAL_InitTick+0xd8>)
 8001e2c:	f001 fd48 	bl	80038c0 <HAL_TIM_Base_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11b      	bne.n	8001e76 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e3e:	4813      	ldr	r0, [pc, #76]	; (8001e8c <HAL_InitTick+0xd8>)
 8001e40:	f001 fd98 	bl	8003974 <HAL_TIM_Base_Start_IT>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d111      	bne.n	8001e76 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e52:	2019      	movs	r0, #25
 8001e54:	f000 fe54 	bl	8002b00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b0f      	cmp	r3, #15
 8001e5c:	d808      	bhi.n	8001e70 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	2019      	movs	r0, #25
 8001e64:	f000 fe30 	bl	8002ac8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_InitTick+0xe0>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e002      	b.n	8001e76 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3730      	adds	r7, #48	; 0x30
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	431bde83 	.word	0x431bde83
 8001e8c:	20000610 	.word	0x20000610
 8001e90:	40010000 	.word	0x40010000
 8001e94:	20000008 	.word	0x20000008

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e9c:	e7fe      	b.n	8001e9c <NMI_Handler+0x4>

08001e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <HardFault_Handler+0x4>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <MemManage_Handler+0x4>

08001eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Input_Interrupt_Pin);
 8001ec8:	2080      	movs	r0, #128	; 0x80
 8001eca:	f001 f857 	bl	8002f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001eda:	f001 fead 	bl	8003c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000610 	.word	0x20000610

08001ee8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <USART2_IRQHandler+0x10>)
 8001eee:	f002 fc19 	bl	8004724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000538 	.word	0x20000538

08001efc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Interrupt_Pin);
 8001f00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f04:	f001 f83a 	bl	8002f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_kill>:

int _kill(int pid, int sig)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f26:	f005 fbcd 	bl	80076c4 <__errno>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2216      	movs	r2, #22
 8001f2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_exit>:

void _exit (int status)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ffe7 	bl	8001f1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f4e:	e7fe      	b.n	8001f4e <_exit+0x12>

08001f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e00a      	b.n	8001f78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f62:	f3af 8000 	nop.w
 8001f66:	4601      	mov	r1, r0
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	60ba      	str	r2, [r7, #8]
 8001f6e:	b2ca      	uxtb	r2, r1
 8001f70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dbf0      	blt.n	8001f62 <_read+0x12>
  }

  return len;
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e009      	b.n	8001fb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf1      	blt.n	8001f9c <_write+0x12>
  }
  return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_close>:

int _close(int file)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fea:	605a      	str	r2, [r3, #4]
  return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_isatty>:

int _isatty(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f005 fb32 	bl	80076c4 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20018000 	.word	0x20018000
 800208c:	00000400 	.word	0x00000400
 8002090:	20000658 	.word	0x20000658
 8002094:	20004500 	.word	0x20004500

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020c0:	f7ff ffea 	bl	8002098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020dc:	4c0a      	ldr	r4, [pc, #40]	; (8002108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f005 faf1 	bl	80076d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ee:	f7ff f85f 	bl	80011b0 <main>
  bx  lr    
 80020f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002100:	08009f2c 	.word	0x08009f2c
  ldr r2, =_sbss
 8002104:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002108:	20004500 	.word	0x20004500

0800210c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_Init+0x40>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_Init+0x40>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_Init+0x40>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 fcba 	bl	8002ab2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	200f      	movs	r0, #15
 8002140:	f7ff fe38 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fce6 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_IncTick+0x20>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_IncTick+0x24>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	2000000c 	.word	0x2000000c
 8002178:	2000065c 	.word	0x2000065c

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_GetTick+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	2000065c 	.word	0x2000065c

08002194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e033      	b.n	8002212 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fcda 	bl	8001b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021da:	f023 0302 	bic.w	r3, r3, #2
 80021de:	f043 0202 	orr.w	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 faba 	bl	8002760 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
 8002202:	e001      	b.n	8002208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Start+0x1a>
 8002232:	2302      	movs	r3, #2
 8002234:	e097      	b.n	8002366 <HAL_ADC_Start+0x14a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d018      	beq.n	800227e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800225c:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_ADC_Start+0x158>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a45      	ldr	r2, [pc, #276]	; (8002378 <HAL_ADC_Start+0x15c>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9a      	lsrs	r2, r3, #18
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002270:	e002      	b.n	8002278 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	3b01      	subs	r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f9      	bne.n	8002272 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d15f      	bne.n	800234c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ca:	d106      	bne.n	80022da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f023 0206 	bic.w	r2, r3, #6
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
 80022d8:	e002      	b.n	80022e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_ADC_Start+0x160>)
 80022ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10f      	bne.n	8002322 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d129      	bne.n	8002364 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	e020      	b.n	8002364 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_ADC_Start+0x164>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d11b      	bne.n	8002364 <HAL_ADC_Start+0x148>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d114      	bne.n	8002364 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	e00b      	b.n	8002364 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000004 	.word	0x20000004
 8002378:	431bde83 	.word	0x431bde83
 800237c:	40012300 	.word	0x40012300
 8002380:	40012000 	.word	0x40012000

08002384 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_Stop+0x16>
 8002396:	2302      	movs	r3, #2
 8002398:	e021      	b.n	80023de <HAL_ADC_Stop+0x5a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d113      	bne.n	8002430 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002416:	d10b      	bne.n	8002430 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e063      	b.n	80024f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002430:	f7ff fea4 	bl	800217c <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002436:	e021      	b.n	800247c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243e:	d01d      	beq.n	800247c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_ADC_PollForConversion+0x6c>
 8002446:	f7ff fe99 	bl	800217c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d212      	bcs.n	800247c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d00b      	beq.n	800247c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f043 0204 	orr.w	r2, r3, #4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e03d      	b.n	80024f8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d1d6      	bne.n	8002438 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f06f 0212 	mvn.w	r2, #18
 8002492:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d123      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11f      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d111      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1c>
 8002534:	2302      	movs	r3, #2
 8002536:	e105      	b.n	8002744 <HAL_ADC_ConfigChannel+0x228>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b09      	cmp	r3, #9
 8002546:	d925      	bls.n	8002594 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	3b1e      	subs	r3, #30
 800255e:	2207      	movs	r2, #7
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	4618      	mov	r0, r3
 8002580:	4603      	mov	r3, r0
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4403      	add	r3, r0
 8002586:	3b1e      	subs	r3, #30
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	e022      	b.n	80025da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	2207      	movs	r2, #7
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4403      	add	r3, r0
 80025d0:	409a      	lsls	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d824      	bhi.n	800262c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b05      	subs	r3, #5
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b05      	subs	r3, #5
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
 800262a:	e04c      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d824      	bhi.n	800267e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b23      	subs	r3, #35	; 0x23
 8002646:	221f      	movs	r2, #31
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4618      	mov	r0, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b23      	subs	r3, #35	; 0x23
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
 800267c:	e023      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	3b41      	subs	r3, #65	; 0x41
 8002690:	221f      	movs	r2, #31
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	400a      	ands	r2, r1
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b41      	subs	r3, #65	; 0x41
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_ADC_ConfigChannel+0x234>)
 80026c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a21      	ldr	r2, [pc, #132]	; (8002754 <HAL_ADC_ConfigChannel+0x238>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d109      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1cc>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b12      	cmp	r3, #18
 80026da:	d105      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_ADC_ConfigChannel+0x238>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d123      	bne.n	800273a <HAL_ADC_ConfigChannel+0x21e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d003      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x1e6>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b11      	cmp	r3, #17
 8002700:	d11b      	bne.n	800273a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b10      	cmp	r3, #16
 8002714:	d111      	bne.n	800273a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_ADC_ConfigChannel+0x23c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_ADC_ConfigChannel+0x240>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	0c9a      	lsrs	r2, r3, #18
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800272c:	e002      	b.n	8002734 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3b01      	subs	r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f9      	bne.n	800272e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40012300 	.word	0x40012300
 8002754:	40012000 	.word	0x40012000
 8002758:	20000004 	.word	0x20000004
 800275c:	431bde83 	.word	0x431bde83

08002760 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002768:	4b79      	ldr	r3, [pc, #484]	; (8002950 <ADC_Init+0x1f0>)
 800276a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	431a      	orrs	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	021a      	lsls	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	4a58      	ldr	r2, [pc, #352]	; (8002954 <ADC_Init+0x1f4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d022      	beq.n	800283e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002806:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e00f      	b.n	800285e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800284c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800285c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0202 	bic.w	r2, r2, #2
 800286c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
 8002878:	005a      	lsls	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	3b01      	subs	r3, #1
 80028b8:	035a      	lsls	r2, r3, #13
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	e007      	b.n	80028d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	051a      	lsls	r2, r3, #20
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6899      	ldr	r1, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	029a      	lsls	r2, r3, #10
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40012300 	.word	0x40012300
 8002954:	0f000001 	.word	0x0f000001

08002958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	60d3      	str	r3, [r2, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <__NVIC_GetPriorityGrouping+0x18>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 0307 	and.w	r3, r3, #7
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	db0b      	blt.n	80029e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	4907      	ldr	r1, [pc, #28]	; (80029f4 <__NVIC_EnableIRQ+0x38>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2001      	movs	r0, #1
 80029de:	fa00 f202 	lsl.w	r2, r0, r2
 80029e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000e100 	.word	0xe000e100

080029f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db0a      	blt.n	8002a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	490c      	ldr	r1, [pc, #48]	; (8002a44 <__NVIC_SetPriority+0x4c>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a20:	e00a      	b.n	8002a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4908      	ldr	r1, [pc, #32]	; (8002a48 <__NVIC_SetPriority+0x50>)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	440b      	add	r3, r1
 8002a36:	761a      	strb	r2, [r3, #24]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f1c3 0307 	rsb	r3, r3, #7
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	bf28      	it	cs
 8002a6a:	2304      	movcs	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d902      	bls.n	8002a7c <NVIC_EncodePriority+0x30>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3b03      	subs	r3, #3
 8002a7a:	e000      	b.n	8002a7e <NVIC_EncodePriority+0x32>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a94:	f04f 31ff 	mov.w	r1, #4294967295
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	4313      	orrs	r3, r2
         );
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	; 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff4c 	bl	8002958 <__NVIC_SetPriorityGrouping>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ada:	f7ff ff61 	bl	80029a0 <__NVIC_GetPriorityGrouping>
 8002ade:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	6978      	ldr	r0, [r7, #20]
 8002ae6:	f7ff ffb1 	bl	8002a4c <NVIC_EncodePriority>
 8002aea:	4602      	mov	r2, r0
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff80 	bl	80029f8 <__NVIC_SetPriority>
}
 8002af8:	bf00      	nop
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff54 	bl	80029bc <__NVIC_EnableIRQ>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b2a:	f7ff fb27 	bl	800217c <HAL_GetTick>
 8002b2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d008      	beq.n	8002b4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e052      	b.n	8002bf4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0216 	bic.w	r2, r2, #22
 8002b5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <HAL_DMA_Abort+0x62>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0208 	bic.w	r2, r2, #8
 8002b8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9e:	e013      	b.n	8002bc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba0:	f7ff faec 	bl	800217c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d90c      	bls.n	8002bc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e015      	b.n	8002bf4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e4      	bne.n	8002ba0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	223f      	movs	r2, #63	; 0x3f
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d004      	beq.n	8002c1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00c      	b.n	8002c34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e159      	b.n	8002f10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 8148 	bne.w	8002f0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d005      	beq.n	8002c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d130      	bne.n	8002cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0201 	and.w	r2, r3, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d017      	beq.n	8002d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d123      	bne.n	8002d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	08da      	lsrs	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3208      	adds	r2, #8
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0203 	and.w	r2, r3, #3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a2 	beq.w	8002f0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd6:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de2:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_GPIO_Init+0x2ec>)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <HAL_GPIO_Init+0x2f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d019      	beq.n	8002e42 <HAL_GPIO_Init+0x202>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a48      	ldr	r2, [pc, #288]	; (8002f34 <HAL_GPIO_Init+0x2f4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_GPIO_Init+0x1fe>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a47      	ldr	r2, [pc, #284]	; (8002f38 <HAL_GPIO_Init+0x2f8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00d      	beq.n	8002e3a <HAL_GPIO_Init+0x1fa>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <HAL_GPIO_Init+0x2fc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <HAL_GPIO_Init+0x1f6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a45      	ldr	r2, [pc, #276]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_GPIO_Init+0x1f2>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	e008      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e32:	2307      	movs	r3, #7
 8002e34:	e006      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e36:	2303      	movs	r3, #3
 8002e38:	e004      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e002      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e42:	2300      	movs	r3, #0
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	f002 0203 	and.w	r2, r2, #3
 8002e4a:	0092      	lsls	r2, r2, #2
 8002e4c:	4093      	lsls	r3, r2
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e54:	4935      	ldr	r1, [pc, #212]	; (8002f2c <HAL_GPIO_Init+0x2ec>)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e62:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e86:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb0:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eda:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	f67f aea2 	bls.w	8002c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40020400 	.word	0x40020400
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40020c00 	.word	0x40020c00
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40013c00 	.word	0x40013c00

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe f8ba 	bl	8001114 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e267      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d075      	beq.n	80030b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4b85      	ldr	r3, [pc, #532]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d112      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe2:	4b82      	ldr	r3, [pc, #520]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fee:	d10b      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	4b7e      	ldr	r3, [pc, #504]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05b      	beq.n	80030b4 <HAL_RCC_OscConfig+0x108>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d157      	bne.n	80030b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e242      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d106      	bne.n	8003020 <HAL_RCC_OscConfig+0x74>
 8003012:	4b76      	ldr	r3, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a75      	ldr	r2, [pc, #468]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e01d      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x98>
 800302a:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6f      	ldr	r2, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6c      	ldr	r2, [pc, #432]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003044:	4b69      	ldr	r3, [pc, #420]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a68      	ldr	r2, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b66      	ldr	r3, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a65      	ldr	r2, [pc, #404]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff f88a 	bl	800217c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7ff f886 	bl	800217c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e207      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0xc0>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7ff f876 	bl	800217c <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7ff f872 	bl	800217c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1f3      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0xe8>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d063      	beq.n	800318a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d11c      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1c7      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b3b      	ldr	r3, [pc, #236]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4937      	ldr	r1, [pc, #220]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	e03a      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800311c:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7ff f82b 	bl	800217c <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312a:	f7ff f827 	bl	800217c <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e1a8      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4925      	ldr	r1, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	e015      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7ff f80a 	bl	800217c <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316c:	f7ff f806 	bl	800217c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e187      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d036      	beq.n	8003204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe ffea 	bl	800217c <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fe ffe6 	bl	800217c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e167      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80031c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x200>
 80031ca:	e01b      	b.n	8003204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7fe ffd3 	bl	800217c <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	e00e      	b.n	80031f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031da:	f7fe ffcf 	bl	800217c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d907      	bls.n	80031f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e150      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 80031ec:	40023800 	.word	0x40023800
 80031f0:	42470000 	.word	0x42470000
 80031f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80031fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ea      	bne.n	80031da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8097 	beq.w	8003340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003216:	4b81      	ldr	r3, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	4b7d      	ldr	r3, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a7c      	ldr	r2, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b7a      	ldr	r3, [pc, #488]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b77      	ldr	r3, [pc, #476]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d118      	bne.n	8003280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324e:	4b74      	ldr	r3, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a73      	ldr	r2, [pc, #460]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7fe ff8f 	bl	800217c <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fe ff8b 	bl	800217c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e10c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x2ea>
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a63      	ldr	r2, [pc, #396]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	e01c      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b05      	cmp	r3, #5
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x30c>
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a5e      	ldr	r2, [pc, #376]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 80032b8:	4b58      	ldr	r3, [pc, #352]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ca:	f023 0304 	bic.w	r3, r3, #4
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fe ff50 	bl	800217c <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7fe ff4c 	bl	800217c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0cb      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ee      	beq.n	80032e0 <HAL_RCC_OscConfig+0x334>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7fe ff3a 	bl	800217c <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fe ff36 	bl	800217c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0b5      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003322:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ee      	bne.n	800330c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	4a38      	ldr	r2, [pc, #224]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80a1 	beq.w	800348c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334a:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d05c      	beq.n	8003410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d141      	bne.n	80033e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe ff0a 	bl	800217c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe ff06 	bl	800217c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e087      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe fedf 	bl	800217c <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fe fedb 	bl	800217c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e05c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x416>
 80033e0:	e054      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe fec8 	bl	800217c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fec4 	bl	800217c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e045      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x444>
 800340e:	e03d      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e038      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000
 8003424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x4ec>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d028      	beq.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d121      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d11a      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0cc      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b68      	ldr	r3, [pc, #416]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d90c      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b8      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a58      	ldr	r2, [pc, #352]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003508:	4b53      	ldr	r3, [pc, #332]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	494d      	ldr	r1, [pc, #308]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d044      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d119      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d003      	beq.n	800355a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e067      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4934      	ldr	r1, [pc, #208]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7fe fdf6 	bl	800217c <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fe fdf2 	bl	800217c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e04f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d20c      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e032      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4916      	ldr	r1, [pc, #88]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003622:	f000 f821 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003626:	4602      	mov	r2, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	490a      	ldr	r1, [pc, #40]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	5ccb      	ldrb	r3, [r1, r3]
 8003636:	fa22 f303 	lsr.w	r3, r2, r3
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe fbb6 	bl	8001db4 <HAL_InitTick>

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023c00 	.word	0x40023c00
 8003658:	40023800 	.word	0x40023800
 800365c:	08009b90 	.word	0x08009b90
 8003660:	20000004 	.word	0x20000004
 8003664:	20000008 	.word	0x20000008

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800366c:	b090      	sub	sp, #64	; 0x40
 800366e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
 8003674:	2300      	movs	r3, #0
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003678:	2300      	movs	r3, #0
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003680:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d00d      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x40>
 800368c:	2b08      	cmp	r3, #8
 800368e:	f200 80a1 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
 8003696:	2b04      	cmp	r3, #4
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800369a:	e09b      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b53      	ldr	r3, [pc, #332]	; (80037ec <HAL_RCC_GetSysClockFreq+0x184>)
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036a0:	e09b      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a2:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036a6:	e098      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a8:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b2:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d028      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	623b      	str	r3, [r7, #32]
 80036c8:	627a      	str	r2, [r7, #36]	; 0x24
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d0:	2100      	movs	r1, #0
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036d4:	fb03 f201 	mul.w	r2, r3, r1
 80036d8:	2300      	movs	r3, #0
 80036da:	fb00 f303 	mul.w	r3, r0, r3
 80036de:	4413      	add	r3, r2
 80036e0:	4a43      	ldr	r2, [pc, #268]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e2:	fba0 1202 	umull	r1, r2, r0, r2
 80036e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036e8:	460a      	mov	r2, r1
 80036ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80036ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ee:	4413      	add	r3, r2
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f4:	2200      	movs	r2, #0
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	61fa      	str	r2, [r7, #28]
 80036fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003702:	f7fd faa9 	bl	8000c58 <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4613      	mov	r3, r2
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370e:	e053      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003710:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	2200      	movs	r2, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	617a      	str	r2, [r7, #20]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003722:	f04f 0b00 	mov.w	fp, #0
 8003726:	4652      	mov	r2, sl
 8003728:	465b      	mov	r3, fp
 800372a:	f04f 0000 	mov.w	r0, #0
 800372e:	f04f 0100 	mov.w	r1, #0
 8003732:	0159      	lsls	r1, r3, #5
 8003734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003738:	0150      	lsls	r0, r2, #5
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	ebb2 080a 	subs.w	r8, r2, sl
 8003742:	eb63 090b 	sbc.w	r9, r3, fp
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003752:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003756:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800375a:	ebb2 0408 	subs.w	r4, r2, r8
 800375e:	eb63 0509 	sbc.w	r5, r3, r9
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	00eb      	lsls	r3, r5, #3
 800376c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003770:	00e2      	lsls	r2, r4, #3
 8003772:	4614      	mov	r4, r2
 8003774:	461d      	mov	r5, r3
 8003776:	eb14 030a 	adds.w	r3, r4, sl
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	eb45 030b 	adc.w	r3, r5, fp
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800378e:	4629      	mov	r1, r5
 8003790:	028b      	lsls	r3, r1, #10
 8003792:	4621      	mov	r1, r4
 8003794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003798:	4621      	mov	r1, r4
 800379a:	028a      	lsls	r2, r1, #10
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a2:	2200      	movs	r2, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	60fa      	str	r2, [r7, #12]
 80037a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ac:	f7fd fa54 	bl	8000c58 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetSysClockFreq+0x184>)
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3740      	adds	r7, #64	; 0x40
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	017d7840 	.word	0x017d7840

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_GetHCLKFreq+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000004 	.word	0x20000004

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003810:	f7ff fff0 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0a9b      	lsrs	r3, r3, #10
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	08009ba0 	.word	0x08009ba0

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003838:	f7ff ffdc 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0b5b      	lsrs	r3, r3, #13
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4903      	ldr	r1, [pc, #12]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	08009ba0 	.word	0x08009ba0

0800385c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	220f      	movs	r2, #15
 800386a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_RCC_GetClockConfig+0x5c>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_RCC_GetClockConfig+0x5c>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <HAL_RCC_GetClockConfig+0x60>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0207 	and.w	r2, r3, #7
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40023c00 	.word	0x40023c00

080038c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e041      	b.n	8003956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f839 	bl	800395e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 fb74 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d001      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e044      	b.n	8003a16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <HAL_TIM_Base_Start_IT+0xb0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d018      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x6c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d013      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x6c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <HAL_TIM_Base_Start_IT+0xb4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x6c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <HAL_TIM_Base_Start_IT+0xb8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x6c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_TIM_Base_Start_IT+0xbc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x6c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <HAL_TIM_Base_Start_IT+0xc0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d111      	bne.n	8003a04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d010      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0201 	orr.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a02:	e007      	b.n	8003a14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40014000 	.word	0x40014000

08003a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e041      	b.n	8003ace <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fe f900 	bl	8001c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f000 fab8 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <HAL_TIM_PWM_Start+0x24>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e022      	b.n	8003b42 <HAL_TIM_PWM_Start+0x6a>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d109      	bne.n	8003b16 <HAL_TIM_PWM_Start+0x3e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e015      	b.n	8003b42 <HAL_TIM_PWM_Start+0x6a>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d109      	bne.n	8003b30 <HAL_TIM_PWM_Start+0x58>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e008      	b.n	8003b42 <HAL_TIM_PWM_Start+0x6a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e068      	b.n	8003c1c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0x82>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b58:	e013      	b.n	8003b82 <HAL_TIM_PWM_Start+0xaa>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_PWM_Start+0x92>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b68:	e00b      	b.n	8003b82 <HAL_TIM_PWM_Start+0xaa>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start+0xa2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b78:	e003      	b.n	8003b82 <HAL_TIM_PWM_Start+0xaa>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fc46 	bl	800441c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <HAL_TIM_PWM_Start+0x14c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d107      	bne.n	8003baa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_TIM_PWM_Start+0x14c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x10e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d013      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x10e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_TIM_PWM_Start+0x150>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x10e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_TIM_PWM_Start+0x154>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x10e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <HAL_TIM_PWM_Start+0x158>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x10e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <HAL_TIM_PWM_Start+0x15c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d111      	bne.n	8003c0a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b06      	cmp	r3, #6
 8003bf6:	d010      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c08:	e007      	b.n	8003c1a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40000c00 	.word	0x40000c00
 8003c34:	40014000 	.word	0x40014000

08003c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d020      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0202 	mvn.w	r2, #2
 8003c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f994 	bl	8003fb0 <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f986 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f997 	bl	8003fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d020      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01b      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0204 	mvn.w	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f96e 	bl	8003fb0 <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f960 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f971 	bl	8003fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d020      	beq.n	8003d34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0208 	mvn.w	r2, #8
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f948 	bl	8003fb0 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f93a 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f94b 	bl	8003fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d020      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01b      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0210 	mvn.w	r2, #16
 8003d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2208      	movs	r2, #8
 8003d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f922 	bl	8003fb0 <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f914 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f925 	bl	8003fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0201 	mvn.w	r2, #1
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fe8a 	bl	8001ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00c      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fbc8 	bl	8004558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00c      	beq.n	8003dec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8f6 	bl	8003fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00c      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0220 	mvn.w	r2, #32
 8003e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fb9a 	bl	8004544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0ae      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	f200 809f 	bhi.w	8003f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e81 	.word	0x08003e81
 8003e50:	08003f85 	.word	0x08003f85
 8003e54:	08003f85 	.word	0x08003f85
 8003e58:	08003f85 	.word	0x08003f85
 8003e5c:	08003ec1 	.word	0x08003ec1
 8003e60:	08003f85 	.word	0x08003f85
 8003e64:	08003f85 	.word	0x08003f85
 8003e68:	08003f85 	.word	0x08003f85
 8003e6c:	08003f03 	.word	0x08003f03
 8003e70:	08003f85 	.word	0x08003f85
 8003e74:	08003f85 	.word	0x08003f85
 8003e78:	08003f85 	.word	0x08003f85
 8003e7c:	08003f43 	.word	0x08003f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f93c 	bl	8004104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6999      	ldr	r1, [r3, #24]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	619a      	str	r2, [r3, #24]
      break;
 8003ebe:	e064      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f982 	bl	80041d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
      break;
 8003f00:	e043      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f9cd 	bl	80042a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0208 	orr.w	r2, r2, #8
 8003f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0204 	bic.w	r2, r2, #4
 8003f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69d9      	ldr	r1, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	61da      	str	r2, [r3, #28]
      break;
 8003f40:	e023      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fa17 	bl	800437c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69d9      	ldr	r1, [r3, #28]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	021a      	lsls	r2, r3, #8
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	61da      	str	r2, [r3, #28]
      break;
 8003f82:	e002      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
      break;
 8003f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3a      	ldr	r2, [pc, #232]	; (80040e8 <TIM_Base_SetConfig+0xfc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a37      	ldr	r2, [pc, #220]	; (80040ec <TIM_Base_SetConfig+0x100>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a36      	ldr	r2, [pc, #216]	; (80040f0 <TIM_Base_SetConfig+0x104>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a35      	ldr	r2, [pc, #212]	; (80040f4 <TIM_Base_SetConfig+0x108>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <TIM_Base_SetConfig+0xfc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01b      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d017      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a28      	ldr	r2, [pc, #160]	; (80040ec <TIM_Base_SetConfig+0x100>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <TIM_Base_SetConfig+0x104>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <TIM_Base_SetConfig+0x108>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <TIM_Base_SetConfig+0x10c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a24      	ldr	r2, [pc, #144]	; (80040fc <TIM_Base_SetConfig+0x110>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a23      	ldr	r2, [pc, #140]	; (8004100 <TIM_Base_SetConfig+0x114>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <TIM_Base_SetConfig+0xfc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d103      	bne.n	80040bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d105      	bne.n	80040da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	611a      	str	r2, [r3, #16]
  }
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800

08004104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0201 	bic.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 0302 	bic.w	r3, r3, #2
 800414c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <TIM_OC1_SetConfig+0xc8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10c      	bne.n	800417a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0308 	bic.w	r3, r3, #8
 8004166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a13      	ldr	r2, [pc, #76]	; (80041cc <TIM_OC1_SetConfig+0xc8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d111      	bne.n	80041a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40010000 	.word	0x40010000

080041d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0210 	bic.w	r2, r3, #16
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0320 	bic.w	r3, r3, #32
 800421a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <TIM_OC2_SetConfig+0xd4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10d      	bne.n	800424c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <TIM_OC2_SetConfig+0xd4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d113      	bne.n	800427c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010000 	.word	0x40010000

080042a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1d      	ldr	r2, [pc, #116]	; (8004378 <TIM_OC3_SetConfig+0xd0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10d      	bne.n	8004322 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800430c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a14      	ldr	r2, [pc, #80]	; (8004378 <TIM_OC3_SetConfig+0xd0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d113      	bne.n	8004352 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	621a      	str	r2, [r3, #32]
}
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40010000 	.word	0x40010000

0800437c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a10      	ldr	r2, [pc, #64]	; (8004418 <TIM_OC4_SetConfig+0x9c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d109      	bne.n	80043f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	019b      	lsls	r3, r3, #6
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000

0800441c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2201      	movs	r2, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1a      	ldr	r2, [r3, #32]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	43db      	mvns	r3, r3
 800443e:	401a      	ands	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	fa01 f303 	lsl.w	r3, r1, r3
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800447c:	2302      	movs	r3, #2
 800447e:	e050      	b.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d013      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a16      	ldr	r2, [pc, #88]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a13      	ldr	r2, [pc, #76]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d10c      	bne.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	4313      	orrs	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40000c00 	.word	0x40000c00
 8004540:	40014000 	.word	0x40014000

08004544 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e042      	b.n	8004604 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fd fbbe 	bl	8001d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2224      	movs	r2, #36	; 0x24
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fd69 	bl	8005088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	d175      	bne.n	8004718 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_UART_Transmit+0x2c>
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e06e      	b.n	800471a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2221      	movs	r2, #33	; 0x21
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800464a:	f7fd fd97 	bl	800217c <HAL_GetTick>
 800464e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	d108      	bne.n	8004678 <HAL_UART_Transmit+0x6c>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e003      	b.n	8004680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004680:	e02e      	b.n	80046e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2200      	movs	r2, #0
 800468a:	2180      	movs	r1, #128	; 0x80
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fb05 	bl	8004c9c <UART_WaitOnFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e03a      	b.n	800471a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	3302      	adds	r3, #2
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e007      	b.n	80046d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	3301      	adds	r3, #1
 80046d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1cb      	bne.n	8004682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2200      	movs	r2, #0
 80046f2:	2140      	movs	r1, #64	; 0x40
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fad1 	bl	8004c9c <UART_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b0ba      	sub	sp, #232	; 0xe8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004750:	2300      	movs	r3, #0
 8004752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10f      	bne.n	800478a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_UART_IRQHandler+0x66>
 8004776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fbc2 	bl	8004f0c <UART_Receive_IT>
      return;
 8004788:	e25b      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800478a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80de 	beq.w	8004950 <HAL_UART_IRQHandler+0x22c>
 8004794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80d1 	beq.w	8004950 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <HAL_UART_IRQHandler+0xae>
 80047ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <HAL_UART_IRQHandler+0xd2>
 80047de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	f043 0202 	orr.w	r2, r3, #2
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <HAL_UART_IRQHandler+0xf6>
 8004802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f043 0204 	orr.w	r2, r3, #4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d011      	beq.n	800484a <HAL_UART_IRQHandler+0x126>
 8004826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d105      	bne.n	800483e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f043 0208 	orr.w	r2, r3, #8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 81f2 	beq.w	8004c38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_UART_IRQHandler+0x14e>
 8004860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fb4d 	bl	8004f0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <HAL_UART_IRQHandler+0x17a>
 8004896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d04f      	beq.n	800493e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa55 	bl	8004d4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d141      	bne.n	8004936 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3314      	adds	r3, #20
 80048b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3314      	adds	r3, #20
 80048da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1d9      	bne.n	80048b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d013      	beq.n	800492e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	4a7e      	ldr	r2, [pc, #504]	; (8004b04 <HAL_UART_IRQHandler+0x3e0>)
 800490c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe f972 	bl	8002bfc <HAL_DMA_Abort_IT>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004928:	4610      	mov	r0, r2
 800492a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	e00e      	b.n	800494c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f99e 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004934:	e00a      	b.n	800494c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f99a 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493c:	e006      	b.n	800494c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f996 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800494a:	e175      	b.n	8004c38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494c:	bf00      	nop
    return;
 800494e:	e173      	b.n	8004c38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	2b01      	cmp	r3, #1
 8004956:	f040 814f 	bne.w	8004bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8148 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8141 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	f040 80b6 	bne.w	8004b08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8145 	beq.w	8004c3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ba:	429a      	cmp	r2, r3
 80049bc:	f080 813e 	bcs.w	8004c3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d2:	f000 8088 	beq.w	8004ae6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1d9      	bne.n	80049d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e1      	bne.n	8004a22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3314      	adds	r3, #20
 8004a64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e3      	bne.n	8004a5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab6:	f023 0310 	bic.w	r3, r3, #16
 8004aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ac8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004aca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ace:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e3      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe f81b 	bl	8002b1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f8c1 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b02:	e09b      	b.n	8004c3c <HAL_UART_IRQHandler+0x518>
 8004b04:	08004e15 	.word	0x08004e15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 808e 	beq.w	8004c40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8089 	beq.w	8004c40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b52:	647a      	str	r2, [r7, #68]	; 0x44
 8004b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e3      	bne.n	8004b2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	623b      	str	r3, [r7, #32]
   return(result);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b8a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e3      	bne.n	8004b66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e3      	bne.n	8004bac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f847 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bf6:	e023      	b.n	8004c40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d009      	beq.n	8004c18 <HAL_UART_IRQHandler+0x4f4>
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f913 	bl	8004e3c <UART_Transmit_IT>
    return;
 8004c16:	e014      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <HAL_UART_IRQHandler+0x51e>
 8004c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f953 	bl	8004edc <UART_EndTransmit_IT>
    return;
 8004c36:	e004      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c38:	bf00      	nop
 8004c3a:	e002      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c3c:	bf00      	nop
 8004c3e:	e000      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c40:	bf00      	nop
  }
}
 8004c42:	37e8      	adds	r7, #232	; 0xe8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cac:	e03b      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d037      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7fd fa61 	bl	800217c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e03a      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d023      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b80      	cmp	r3, #128	; 0x80
 8004ce2:	d020      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d01d      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d116      	bne.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f81d 	bl	8004d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2208      	movs	r2, #8
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e00f      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d0b4      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b095      	sub	sp, #84	; 0x54
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d76:	643a      	str	r2, [r7, #64]	; 0x40
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3314      	adds	r3, #20
 8004d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3314      	adds	r3, #20
 8004da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e5      	bne.n	8004d8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d119      	bne.n	8004dfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 0310 	bic.w	r3, r3, #16
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de6:	61ba      	str	r2, [r7, #24]
 8004de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6979      	ldr	r1, [r7, #20]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	613b      	str	r3, [r7, #16]
   return(result);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e5      	bne.n	8004dc6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e08:	bf00      	nop
 8004e0a:	3754      	adds	r7, #84	; 0x54
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff ff1e 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b21      	cmp	r3, #33	; 0x21
 8004e4e:	d13e      	bne.n	8004ece <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e58:	d114      	bne.n	8004e84 <UART_Transmit_IT+0x48>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d110      	bne.n	8004e84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	1c9a      	adds	r2, r3, #2
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	621a      	str	r2, [r3, #32]
 8004e82:	e008      	b.n	8004e96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6211      	str	r1, [r2, #32]
 8004e8e:	781a      	ldrb	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10f      	bne.n	8004eca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e000      	b.n	8004ed0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ece:	2302      	movs	r3, #2
  }
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fea3 	bl	8004c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08c      	sub	sp, #48	; 0x30
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b22      	cmp	r3, #34	; 0x22
 8004f1e:	f040 80ae 	bne.w	800507e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2a:	d117      	bne.n	8004f5c <UART_Receive_IT+0x50>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d113      	bne.n	8004f5c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	629a      	str	r2, [r3, #40]	; 0x28
 8004f5a:	e026      	b.n	8004faa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6e:	d007      	beq.n	8004f80 <UART_Receive_IT+0x74>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <UART_Receive_IT+0x82>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e008      	b.n	8004fa0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d15d      	bne.n	800507a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0220 	bic.w	r2, r2, #32
 8004fcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	2b01      	cmp	r3, #1
 8005002:	d135      	bne.n	8005070 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	613b      	str	r3, [r7, #16]
   return(result);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f023 0310 	bic.w	r3, r3, #16
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	623a      	str	r2, [r7, #32]
 800502c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	69f9      	ldr	r1, [r7, #28]
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	61bb      	str	r3, [r7, #24]
   return(result);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e5      	bne.n	800500a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d10a      	bne.n	8005062 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff fe0b 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
 800506e:	e002      	b.n	8005076 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fdf3 	bl	8004c5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e002      	b.n	8005080 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	3730      	adds	r7, #48	; 0x30
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800508c:	b0c0      	sub	sp, #256	; 0x100
 800508e:	af00      	add	r7, sp, #0
 8005090:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	68d9      	ldr	r1, [r3, #12]
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	ea40 0301 	orr.w	r3, r0, r1
 80050b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	431a      	orrs	r2, r3
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050e0:	f021 010c 	bic.w	r1, r1, #12
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ee:	430b      	orrs	r3, r1
 80050f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005102:	6999      	ldr	r1, [r3, #24]
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	ea40 0301 	orr.w	r3, r0, r1
 800510e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b8f      	ldr	r3, [pc, #572]	; (8005354 <UART_SetConfig+0x2cc>)
 8005118:	429a      	cmp	r2, r3
 800511a:	d005      	beq.n	8005128 <UART_SetConfig+0xa0>
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b8d      	ldr	r3, [pc, #564]	; (8005358 <UART_SetConfig+0x2d0>)
 8005124:	429a      	cmp	r2, r3
 8005126:	d104      	bne.n	8005132 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005128:	f7fe fb84 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 800512c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005130:	e003      	b.n	800513a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005132:	f7fe fb6b 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8005136:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005144:	f040 810c 	bne.w	8005360 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514c:	2200      	movs	r2, #0
 800514e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005152:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005156:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800515a:	4622      	mov	r2, r4
 800515c:	462b      	mov	r3, r5
 800515e:	1891      	adds	r1, r2, r2
 8005160:	65b9      	str	r1, [r7, #88]	; 0x58
 8005162:	415b      	adcs	r3, r3
 8005164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005166:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800516a:	4621      	mov	r1, r4
 800516c:	eb12 0801 	adds.w	r8, r2, r1
 8005170:	4629      	mov	r1, r5
 8005172:	eb43 0901 	adc.w	r9, r3, r1
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800518a:	4690      	mov	r8, r2
 800518c:	4699      	mov	r9, r3
 800518e:	4623      	mov	r3, r4
 8005190:	eb18 0303 	adds.w	r3, r8, r3
 8005194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005198:	462b      	mov	r3, r5
 800519a:	eb49 0303 	adc.w	r3, r9, r3
 800519e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051b6:	460b      	mov	r3, r1
 80051b8:	18db      	adds	r3, r3, r3
 80051ba:	653b      	str	r3, [r7, #80]	; 0x50
 80051bc:	4613      	mov	r3, r2
 80051be:	eb42 0303 	adc.w	r3, r2, r3
 80051c2:	657b      	str	r3, [r7, #84]	; 0x54
 80051c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051cc:	f7fb fd44 	bl	8000c58 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4b61      	ldr	r3, [pc, #388]	; (800535c <UART_SetConfig+0x2d4>)
 80051d6:	fba3 2302 	umull	r2, r3, r3, r2
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	011c      	lsls	r4, r3, #4
 80051de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051f0:	4642      	mov	r2, r8
 80051f2:	464b      	mov	r3, r9
 80051f4:	1891      	adds	r1, r2, r2
 80051f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80051f8:	415b      	adcs	r3, r3
 80051fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005200:	4641      	mov	r1, r8
 8005202:	eb12 0a01 	adds.w	sl, r2, r1
 8005206:	4649      	mov	r1, r9
 8005208:	eb43 0b01 	adc.w	fp, r3, r1
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005218:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800521c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005220:	4692      	mov	sl, r2
 8005222:	469b      	mov	fp, r3
 8005224:	4643      	mov	r3, r8
 8005226:	eb1a 0303 	adds.w	r3, sl, r3
 800522a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800522e:	464b      	mov	r3, r9
 8005230:	eb4b 0303 	adc.w	r3, fp, r3
 8005234:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005244:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005248:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800524c:	460b      	mov	r3, r1
 800524e:	18db      	adds	r3, r3, r3
 8005250:	643b      	str	r3, [r7, #64]	; 0x40
 8005252:	4613      	mov	r3, r2
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
 800525a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800525e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005262:	f7fb fcf9 	bl	8000c58 <__aeabi_uldivmod>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4611      	mov	r1, r2
 800526c:	4b3b      	ldr	r3, [pc, #236]	; (800535c <UART_SetConfig+0x2d4>)
 800526e:	fba3 2301 	umull	r2, r3, r3, r1
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2264      	movs	r2, #100	; 0x64
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	1acb      	subs	r3, r1, r3
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005282:	4b36      	ldr	r3, [pc, #216]	; (800535c <UART_SetConfig+0x2d4>)
 8005284:	fba3 2302 	umull	r2, r3, r3, r2
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005290:	441c      	add	r4, r3
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005296:	2200      	movs	r2, #0
 8005298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800529c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	1891      	adds	r1, r2, r2
 80052aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80052ac:	415b      	adcs	r3, r3
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052b4:	4641      	mov	r1, r8
 80052b6:	1851      	adds	r1, r2, r1
 80052b8:	6339      	str	r1, [r7, #48]	; 0x30
 80052ba:	4649      	mov	r1, r9
 80052bc:	414b      	adcs	r3, r1
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052cc:	4659      	mov	r1, fp
 80052ce:	00cb      	lsls	r3, r1, #3
 80052d0:	4651      	mov	r1, sl
 80052d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d6:	4651      	mov	r1, sl
 80052d8:	00ca      	lsls	r2, r1, #3
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	4642      	mov	r2, r8
 80052e2:	189b      	adds	r3, r3, r2
 80052e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e8:	464b      	mov	r3, r9
 80052ea:	460a      	mov	r2, r1
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005300:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005304:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005308:	460b      	mov	r3, r1
 800530a:	18db      	adds	r3, r3, r3
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
 800530e:	4613      	mov	r3, r2
 8005310:	eb42 0303 	adc.w	r3, r2, r3
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800531a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800531e:	f7fb fc9b 	bl	8000c58 <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <UART_SetConfig+0x2d4>)
 8005328:	fba3 1302 	umull	r1, r3, r3, r2
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	2164      	movs	r1, #100	; 0x64
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	3332      	adds	r3, #50	; 0x32
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <UART_SetConfig+0x2d4>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	f003 0207 	and.w	r2, r3, #7
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4422      	add	r2, r4
 800534e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005350:	e106      	b.n	8005560 <UART_SetConfig+0x4d8>
 8005352:	bf00      	nop
 8005354:	40011000 	.word	0x40011000
 8005358:	40011400 	.word	0x40011400
 800535c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005364:	2200      	movs	r2, #0
 8005366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800536a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800536e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005372:	4642      	mov	r2, r8
 8005374:	464b      	mov	r3, r9
 8005376:	1891      	adds	r1, r2, r2
 8005378:	6239      	str	r1, [r7, #32]
 800537a:	415b      	adcs	r3, r3
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
 800537e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005382:	4641      	mov	r1, r8
 8005384:	1854      	adds	r4, r2, r1
 8005386:	4649      	mov	r1, r9
 8005388:	eb43 0501 	adc.w	r5, r3, r1
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	00eb      	lsls	r3, r5, #3
 8005396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800539a:	00e2      	lsls	r2, r4, #3
 800539c:	4614      	mov	r4, r2
 800539e:	461d      	mov	r5, r3
 80053a0:	4643      	mov	r3, r8
 80053a2:	18e3      	adds	r3, r4, r3
 80053a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053a8:	464b      	mov	r3, r9
 80053aa:	eb45 0303 	adc.w	r3, r5, r3
 80053ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053ce:	4629      	mov	r1, r5
 80053d0:	008b      	lsls	r3, r1, #2
 80053d2:	4621      	mov	r1, r4
 80053d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d8:	4621      	mov	r1, r4
 80053da:	008a      	lsls	r2, r1, #2
 80053dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053e0:	f7fb fc3a 	bl	8000c58 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4b60      	ldr	r3, [pc, #384]	; (800556c <UART_SetConfig+0x4e4>)
 80053ea:	fba3 2302 	umull	r2, r3, r3, r2
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	011c      	lsls	r4, r3, #4
 80053f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005400:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005404:	4642      	mov	r2, r8
 8005406:	464b      	mov	r3, r9
 8005408:	1891      	adds	r1, r2, r2
 800540a:	61b9      	str	r1, [r7, #24]
 800540c:	415b      	adcs	r3, r3
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005414:	4641      	mov	r1, r8
 8005416:	1851      	adds	r1, r2, r1
 8005418:	6139      	str	r1, [r7, #16]
 800541a:	4649      	mov	r1, r9
 800541c:	414b      	adcs	r3, r1
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800542c:	4659      	mov	r1, fp
 800542e:	00cb      	lsls	r3, r1, #3
 8005430:	4651      	mov	r1, sl
 8005432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005436:	4651      	mov	r1, sl
 8005438:	00ca      	lsls	r2, r1, #3
 800543a:	4610      	mov	r0, r2
 800543c:	4619      	mov	r1, r3
 800543e:	4603      	mov	r3, r0
 8005440:	4642      	mov	r2, r8
 8005442:	189b      	adds	r3, r3, r2
 8005444:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005448:	464b      	mov	r3, r9
 800544a:	460a      	mov	r2, r1
 800544c:	eb42 0303 	adc.w	r3, r2, r3
 8005450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	67bb      	str	r3, [r7, #120]	; 0x78
 800545e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800546c:	4649      	mov	r1, r9
 800546e:	008b      	lsls	r3, r1, #2
 8005470:	4641      	mov	r1, r8
 8005472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005476:	4641      	mov	r1, r8
 8005478:	008a      	lsls	r2, r1, #2
 800547a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800547e:	f7fb fbeb 	bl	8000c58 <__aeabi_uldivmod>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4611      	mov	r1, r2
 8005488:	4b38      	ldr	r3, [pc, #224]	; (800556c <UART_SetConfig+0x4e4>)
 800548a:	fba3 2301 	umull	r2, r3, r3, r1
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2264      	movs	r2, #100	; 0x64
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	1acb      	subs	r3, r1, r3
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	3332      	adds	r3, #50	; 0x32
 800549c:	4a33      	ldr	r2, [pc, #204]	; (800556c <UART_SetConfig+0x4e4>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a8:	441c      	add	r4, r3
 80054aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ae:	2200      	movs	r2, #0
 80054b0:	673b      	str	r3, [r7, #112]	; 0x70
 80054b2:	677a      	str	r2, [r7, #116]	; 0x74
 80054b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	1891      	adds	r1, r2, r2
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	415b      	adcs	r3, r3
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054c8:	4641      	mov	r1, r8
 80054ca:	1851      	adds	r1, r2, r1
 80054cc:	6039      	str	r1, [r7, #0]
 80054ce:	4649      	mov	r1, r9
 80054d0:	414b      	adcs	r3, r1
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054e0:	4659      	mov	r1, fp
 80054e2:	00cb      	lsls	r3, r1, #3
 80054e4:	4651      	mov	r1, sl
 80054e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ea:	4651      	mov	r1, sl
 80054ec:	00ca      	lsls	r2, r1, #3
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	4642      	mov	r2, r8
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80054fa:	464b      	mov	r3, r9
 80054fc:	460a      	mov	r2, r1
 80054fe:	eb42 0303 	adc.w	r3, r2, r3
 8005502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	663b      	str	r3, [r7, #96]	; 0x60
 800550e:	667a      	str	r2, [r7, #100]	; 0x64
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800551c:	4649      	mov	r1, r9
 800551e:	008b      	lsls	r3, r1, #2
 8005520:	4641      	mov	r1, r8
 8005522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005526:	4641      	mov	r1, r8
 8005528:	008a      	lsls	r2, r1, #2
 800552a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800552e:	f7fb fb93 	bl	8000c58 <__aeabi_uldivmod>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <UART_SetConfig+0x4e4>)
 8005538:	fba3 1302 	umull	r1, r3, r3, r2
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	2164      	movs	r1, #100	; 0x64
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	3332      	adds	r3, #50	; 0x32
 800554a:	4a08      	ldr	r2, [pc, #32]	; (800556c <UART_SetConfig+0x4e4>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	f003 020f 	and.w	r2, r3, #15
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4422      	add	r2, r4
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	bf00      	nop
 8005562:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005566:	46bd      	mov	sp, r7
 8005568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800556c:	51eb851f 	.word	0x51eb851f

08005570 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800557e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005582:	2b84      	cmp	r3, #132	; 0x84
 8005584:	d005      	beq.n	8005592 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005586:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	3303      	adds	r3, #3
 8005590:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005592:	68fb      	ldr	r3, [r7, #12]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055a4:	f000 faf6 	bl	8005b94 <vTaskStartScheduler>
  
  return osOK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	bd80      	pop	{r7, pc}

080055ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b0:	b089      	sub	sp, #36	; 0x24
 80055b2:	af04      	add	r7, sp, #16
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d020      	beq.n	8005602 <osThreadCreate+0x54>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01c      	beq.n	8005602 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685c      	ldr	r4, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691e      	ldr	r6, [r3, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff ffc8 	bl	8005570 <makeFreeRtosPriority>
 80055e0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ea:	9202      	str	r2, [sp, #8]
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	9100      	str	r1, [sp, #0]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	4632      	mov	r2, r6
 80055f4:	4629      	mov	r1, r5
 80055f6:	4620      	mov	r0, r4
 80055f8:	f000 f8ed 	bl	80057d6 <xTaskCreateStatic>
 80055fc:	4603      	mov	r3, r0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e01c      	b.n	800563c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685c      	ldr	r4, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800560e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ffaa 	bl	8005570 <makeFreeRtosPriority>
 800561c:	4602      	mov	r2, r0
 800561e:	f107 030c 	add.w	r3, r7, #12
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	9200      	str	r2, [sp, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	4632      	mov	r2, r6
 800562a:	4629      	mov	r1, r5
 800562c:	4620      	mov	r0, r4
 800562e:	f000 f92f 	bl	8005890 <xTaskCreate>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d001      	beq.n	800563c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	e000      	b.n	800563e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800563c:	68fb      	ldr	r3, [r7, #12]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005646 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <osDelay+0x16>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	e000      	b.n	800565e <osDelay+0x18>
 800565c:	2301      	movs	r3, #1
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fa64 	bl	8005b2c <vTaskDelay>
  
  return osOK;
 8005664:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f103 0208 	add.w	r2, r3, #8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f04f 32ff 	mov.w	r2, #4294967295
 8005686:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f103 0208 	add.w	r2, r3, #8
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f103 0208 	add.w	r2, r3, #8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005726:	d103      	bne.n	8005730 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	e00c      	b.n	800574a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3308      	adds	r3, #8
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	e002      	b.n	800573e <vListInsert+0x2e>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	429a      	cmp	r2, r3
 8005748:	d2f6      	bcs.n	8005738 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	601a      	str	r2, [r3, #0]
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6892      	ldr	r2, [r2, #8]
 8005798:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6852      	ldr	r2, [r2, #4]
 80057a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d103      	bne.n	80057b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	1e5a      	subs	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b08e      	sub	sp, #56	; 0x38
 80057da:	af04      	add	r7, sp, #16
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <xTaskCreateStatic+0x46>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	61fb      	str	r3, [r7, #28]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800581c:	23b0      	movs	r3, #176	; 0xb0
 800581e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2bb0      	cmp	r3, #176	; 0xb0
 8005824:	d00a      	beq.n	800583c <xTaskCreateStatic+0x66>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	61bb      	str	r3, [r7, #24]
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800583c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01e      	beq.n	8005882 <xTaskCreateStatic+0xac>
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01b      	beq.n	8005882 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005852:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	2202      	movs	r2, #2
 8005858:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800585c:	2300      	movs	r3, #0
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	9302      	str	r3, [sp, #8]
 8005864:	f107 0314 	add.w	r3, r7, #20
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f851 	bl	800591c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800587a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800587c:	f000 f8ec 	bl	8005a58 <prvAddNewTaskToReadyList>
 8005880:	e001      	b.n	8005886 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005886:	697b      	ldr	r3, [r7, #20]
	}
 8005888:	4618      	mov	r0, r3
 800588a:	3728      	adds	r7, #40	; 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08c      	sub	sp, #48	; 0x30
 8005894:	af04      	add	r7, sp, #16
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 feef 	bl	8006688 <pvPortMalloc>
 80058aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00e      	beq.n	80058d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058b2:	20b0      	movs	r0, #176	; 0xb0
 80058b4:	f000 fee8 	bl	8006688 <pvPortMalloc>
 80058b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
 80058c6:	e005      	b.n	80058d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058c8:	6978      	ldr	r0, [r7, #20]
 80058ca:	f000 ffa9 	bl	8006820 <vPortFree>
 80058ce:	e001      	b.n	80058d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d017      	beq.n	800590a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058e2:	88fa      	ldrh	r2, [r7, #6]
 80058e4:	2300      	movs	r3, #0
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	9302      	str	r3, [sp, #8]
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f80f 	bl	800591c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058fe:	69f8      	ldr	r0, [r7, #28]
 8005900:	f000 f8aa 	bl	8005a58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005904:	2301      	movs	r3, #1
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	e002      	b.n	8005910 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005910:	69bb      	ldr	r3, [r7, #24]
	}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005934:	3b01      	subs	r3, #1
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f023 0307 	bic.w	r3, r3, #7
 8005942:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <prvInitialiseNewTask+0x48>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	617b      	str	r3, [r7, #20]
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01f      	beq.n	80059aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	e012      	b.n	8005996 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	7819      	ldrb	r1, [r3, #0]
 8005978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	3334      	adds	r3, #52	; 0x34
 8005980:	460a      	mov	r2, r1
 8005982:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d006      	beq.n	800599e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	3301      	adds	r3, #1
 8005994:	61fb      	str	r3, [r7, #28]
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	2b1f      	cmp	r3, #31
 800599a:	d9e9      	bls.n	8005970 <prvInitialiseNewTask+0x54>
 800599c:	e000      	b.n	80059a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800599e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80059a8:	e003      	b.n	80059b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	2b06      	cmp	r3, #6
 80059b6:	d901      	bls.n	80059bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059b8:	2306      	movs	r3, #6
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	2200      	movs	r2, #0
 80059cc:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	3304      	adds	r3, #4
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fe6b 	bl	80056ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	3318      	adds	r3, #24
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fe66 	bl	80056ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	f1c3 0207 	rsb	r2, r3, #7
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	335c      	adds	r3, #92	; 0x5c
 8005a0c:	224c      	movs	r2, #76	; 0x4c
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 fdae 	bl	8007572 <memset>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <prvInitialiseNewTask+0x130>)
 8005a1a:	661a      	str	r2, [r3, #96]	; 0x60
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <prvInitialiseNewTask+0x134>)
 8005a20:	665a      	str	r2, [r3, #100]	; 0x64
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	4a0b      	ldr	r2, [pc, #44]	; (8005a54 <prvInitialiseNewTask+0x138>)
 8005a26:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	69b8      	ldr	r0, [r7, #24]
 8005a2e:	f000 fc1f 	bl	8006270 <pxPortInitialiseStack>
 8005a32:	4602      	mov	r2, r0
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a44:	bf00      	nop
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200043b4 	.word	0x200043b4
 8005a50:	2000441c 	.word	0x2000441c
 8005a54:	20004484 	.word	0x20004484

08005a58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a60:	f000 fd30 	bl	80064c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a64:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <prvAddNewTaskToReadyList+0xb8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <prvAddNewTaskToReadyList+0xb8>)
 8005a6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a6e:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a76:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a7c:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <prvAddNewTaskToReadyList+0xb8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d110      	bne.n	8005aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a84:	f000 facc 	bl	8006020 <prvInitialiseTaskLists>
 8005a88:	e00d      	b.n	8005aa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a8a:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <prvAddNewTaskToReadyList+0xc0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a92:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d802      	bhi.n	8005aa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <prvAddNewTaskToReadyList+0xc4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <prvAddNewTaskToReadyList+0xc4>)
 8005aae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	4b19      	ldr	r3, [pc, #100]	; (8005b20 <prvAddNewTaskToReadyList+0xc8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <prvAddNewTaskToReadyList+0xc8>)
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <prvAddNewTaskToReadyList+0xcc>)
 8005ad0:	441a      	add	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f7ff fdf5 	bl	80056c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ade:	f000 fd21 	bl	8006524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <prvAddNewTaskToReadyList+0xc0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d207      	bcs.n	8005b08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <prvAddNewTaskToReadyList+0xd0>)
 8005afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000760 	.word	0x20000760
 8005b14:	20000660 	.word	0x20000660
 8005b18:	2000076c 	.word	0x2000076c
 8005b1c:	2000077c 	.word	0x2000077c
 8005b20:	20000768 	.word	0x20000768
 8005b24:	20000664 	.word	0x20000664
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d017      	beq.n	8005b6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b3e:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <vTaskDelay+0x60>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <vTaskDelay+0x30>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60bb      	str	r3, [r7, #8]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b5c:	f000 f884 	bl	8005c68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b60:	2100      	movs	r1, #0
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fb1e 	bl	80061a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b68:	f000 f88c 	bl	8005c84 <xTaskResumeAll>
 8005b6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d107      	bne.n	8005b84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <vTaskDelay+0x64>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000788 	.word	0x20000788
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ba2:	463a      	mov	r2, r7
 8005ba4:	1d39      	adds	r1, r7, #4
 8005ba6:	f107 0308 	add.w	r3, r7, #8
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fb f9d2 	bl	8000f54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	9202      	str	r2, [sp, #8]
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	4921      	ldr	r1, [pc, #132]	; (8005c48 <vTaskStartScheduler+0xb4>)
 8005bc4:	4821      	ldr	r0, [pc, #132]	; (8005c4c <vTaskStartScheduler+0xb8>)
 8005bc6:	f7ff fe06 	bl	80057d6 <xTaskCreateStatic>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4a20      	ldr	r2, [pc, #128]	; (8005c50 <vTaskStartScheduler+0xbc>)
 8005bce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <vTaskStartScheduler+0xbc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	e001      	b.n	8005be2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d11b      	bne.n	8005c20 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	613b      	str	r3, [r7, #16]
}
 8005bfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bfc:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <vTaskStartScheduler+0xc0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	335c      	adds	r3, #92	; 0x5c
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <vTaskStartScheduler+0xc4>)
 8005c04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c06:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <vTaskStartScheduler+0xc8>)
 8005c08:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c0e:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <vTaskStartScheduler+0xcc>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <vTaskStartScheduler+0xd0>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c1a:	f000 fbb1 	bl	8006380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c1e:	e00e      	b.n	8005c3e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d10a      	bne.n	8005c3e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	60fb      	str	r3, [r7, #12]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <vTaskStartScheduler+0xa8>
}
 8005c3e:	bf00      	nop
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	08009b88 	.word	0x08009b88
 8005c4c:	08005ff1 	.word	0x08005ff1
 8005c50:	20000784 	.word	0x20000784
 8005c54:	20000660 	.word	0x20000660
 8005c58:	2000006c 	.word	0x2000006c
 8005c5c:	20000780 	.word	0x20000780
 8005c60:	2000076c 	.word	0x2000076c
 8005c64:	20000764 	.word	0x20000764

08005c68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c6c:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <vTaskSuspendAll+0x18>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3301      	adds	r3, #1
 8005c72:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <vTaskSuspendAll+0x18>)
 8005c74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c76:	bf00      	nop
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	20000788 	.word	0x20000788

08005c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c92:	4b41      	ldr	r3, [pc, #260]	; (8005d98 <xTaskResumeAll+0x114>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	603b      	str	r3, [r7, #0]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cb0:	f000 fc08 	bl	80064c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cb4:	4b38      	ldr	r3, [pc, #224]	; (8005d98 <xTaskResumeAll+0x114>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	4a37      	ldr	r2, [pc, #220]	; (8005d98 <xTaskResumeAll+0x114>)
 8005cbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cbe:	4b36      	ldr	r3, [pc, #216]	; (8005d98 <xTaskResumeAll+0x114>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d161      	bne.n	8005d8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cc6:	4b35      	ldr	r3, [pc, #212]	; (8005d9c <xTaskResumeAll+0x118>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d05d      	beq.n	8005d8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cce:	e02e      	b.n	8005d2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd0:	4b33      	ldr	r3, [pc, #204]	; (8005da0 <xTaskResumeAll+0x11c>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3318      	adds	r3, #24
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fd50 	bl	8005782 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fd4b 	bl	8005782 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	409a      	lsls	r2, r3
 8005cf4:	4b2b      	ldr	r3, [pc, #172]	; (8005da4 <xTaskResumeAll+0x120>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	4a2a      	ldr	r2, [pc, #168]	; (8005da4 <xTaskResumeAll+0x120>)
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4a27      	ldr	r2, [pc, #156]	; (8005da8 <xTaskResumeAll+0x124>)
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f7ff fcd7 	bl	80056c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1e:	4b23      	ldr	r3, [pc, #140]	; (8005dac <xTaskResumeAll+0x128>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d302      	bcc.n	8005d2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d28:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <xTaskResumeAll+0x12c>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d2e:	4b1c      	ldr	r3, [pc, #112]	; (8005da0 <xTaskResumeAll+0x11c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1cc      	bne.n	8005cd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d3c:	f000 fa12 	bl	8006164 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d40:	4b1c      	ldr	r3, [pc, #112]	; (8005db4 <xTaskResumeAll+0x130>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d010      	beq.n	8005d6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d4c:	f000 f836 	bl	8005dbc <xTaskIncrementTick>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d56:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <xTaskResumeAll+0x12c>)
 8005d58:	2201      	movs	r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f1      	bne.n	8005d4c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005d68:	4b12      	ldr	r3, [pc, #72]	; (8005db4 <xTaskResumeAll+0x130>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <xTaskResumeAll+0x12c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d76:	2301      	movs	r3, #1
 8005d78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <xTaskResumeAll+0x134>)
 8005d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d8a:	f000 fbcb 	bl	8006524 <vPortExitCritical>

	return xAlreadyYielded;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	20000788 	.word	0x20000788
 8005d9c:	20000760 	.word	0x20000760
 8005da0:	20000720 	.word	0x20000720
 8005da4:	20000768 	.word	0x20000768
 8005da8:	20000664 	.word	0x20000664
 8005dac:	20000660 	.word	0x20000660
 8005db0:	20000774 	.word	0x20000774
 8005db4:	20000770 	.word	0x20000770
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc6:	4b4e      	ldr	r3, [pc, #312]	; (8005f00 <xTaskIncrementTick+0x144>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f040 808e 	bne.w	8005eec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dd0:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <xTaskIncrementTick+0x148>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dd8:	4a4a      	ldr	r2, [pc, #296]	; (8005f04 <xTaskIncrementTick+0x148>)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d120      	bne.n	8005e26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005de4:	4b48      	ldr	r3, [pc, #288]	; (8005f08 <xTaskIncrementTick+0x14c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <xTaskIncrementTick+0x48>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	603b      	str	r3, [r7, #0]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <xTaskIncrementTick+0x46>
 8005e04:	4b40      	ldr	r3, [pc, #256]	; (8005f08 <xTaskIncrementTick+0x14c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	4b40      	ldr	r3, [pc, #256]	; (8005f0c <xTaskIncrementTick+0x150>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a3e      	ldr	r2, [pc, #248]	; (8005f08 <xTaskIncrementTick+0x14c>)
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	4a3e      	ldr	r2, [pc, #248]	; (8005f0c <xTaskIncrementTick+0x150>)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	4b3d      	ldr	r3, [pc, #244]	; (8005f10 <xTaskIncrementTick+0x154>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	4a3c      	ldr	r2, [pc, #240]	; (8005f10 <xTaskIncrementTick+0x154>)
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	f000 f99f 	bl	8006164 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e26:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <xTaskIncrementTick+0x158>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d348      	bcc.n	8005ec2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e30:	4b35      	ldr	r3, [pc, #212]	; (8005f08 <xTaskIncrementTick+0x14c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d104      	bne.n	8005e44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e3a:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <xTaskIncrementTick+0x158>)
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e40:	601a      	str	r2, [r3, #0]
					break;
 8005e42:	e03e      	b.n	8005ec2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e44:	4b30      	ldr	r3, [pc, #192]	; (8005f08 <xTaskIncrementTick+0x14c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d203      	bcs.n	8005e64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e5c:	4a2d      	ldr	r2, [pc, #180]	; (8005f14 <xTaskIncrementTick+0x158>)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e62:	e02e      	b.n	8005ec2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fc8a 	bl	8005782 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	3318      	adds	r3, #24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fc81 	bl	8005782 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	2201      	movs	r2, #1
 8005e86:	409a      	lsls	r2, r3
 8005e88:	4b23      	ldr	r3, [pc, #140]	; (8005f18 <xTaskIncrementTick+0x15c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	4a22      	ldr	r2, [pc, #136]	; (8005f18 <xTaskIncrementTick+0x15c>)
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <xTaskIncrementTick+0x160>)
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7ff fc0d 	bl	80056c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb2:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <xTaskIncrementTick+0x164>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d3b9      	bcc.n	8005e30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ec0:	e7b6      	b.n	8005e30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ec2:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <xTaskIncrementTick+0x164>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	4914      	ldr	r1, [pc, #80]	; (8005f1c <xTaskIncrementTick+0x160>)
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d901      	bls.n	8005ede <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005eda:	2301      	movs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ede:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <xTaskIncrementTick+0x168>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	e004      	b.n	8005ef6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005eec:	4b0e      	ldr	r3, [pc, #56]	; (8005f28 <xTaskIncrementTick+0x16c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	4a0d      	ldr	r2, [pc, #52]	; (8005f28 <xTaskIncrementTick+0x16c>)
 8005ef4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ef6:	697b      	ldr	r3, [r7, #20]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20000788 	.word	0x20000788
 8005f04:	20000764 	.word	0x20000764
 8005f08:	20000718 	.word	0x20000718
 8005f0c:	2000071c 	.word	0x2000071c
 8005f10:	20000778 	.word	0x20000778
 8005f14:	20000780 	.word	0x20000780
 8005f18:	20000768 	.word	0x20000768
 8005f1c:	20000664 	.word	0x20000664
 8005f20:	20000660 	.word	0x20000660
 8005f24:	20000774 	.word	0x20000774
 8005f28:	20000770 	.word	0x20000770

08005f2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f32:	4b29      	ldr	r3, [pc, #164]	; (8005fd8 <vTaskSwitchContext+0xac>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f3a:	4b28      	ldr	r3, [pc, #160]	; (8005fdc <vTaskSwitchContext+0xb0>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f40:	e044      	b.n	8005fcc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005f42:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <vTaskSwitchContext+0xb0>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f48:	4b25      	ldr	r3, [pc, #148]	; (8005fe0 <vTaskSwitchContext+0xb4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	fab3 f383 	clz	r3, r3
 8005f54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f56:	7afb      	ldrb	r3, [r7, #11]
 8005f58:	f1c3 031f 	rsb	r3, r3, #31
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	4921      	ldr	r1, [pc, #132]	; (8005fe4 <vTaskSwitchContext+0xb8>)
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	607b      	str	r3, [r7, #4]
}
 8005f84:	bf00      	nop
 8005f86:	e7fe      	b.n	8005f86 <vTaskSwitchContext+0x5a>
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4a14      	ldr	r2, [pc, #80]	; (8005fe4 <vTaskSwitchContext+0xb8>)
 8005f94:	4413      	add	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3308      	adds	r3, #8
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d104      	bne.n	8005fb8 <vTaskSwitchContext+0x8c>
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	; (8005fe8 <vTaskSwitchContext+0xbc>)
 8005fc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <vTaskSwitchContext+0xbc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	335c      	adds	r3, #92	; 0x5c
 8005fc8:	4a08      	ldr	r2, [pc, #32]	; (8005fec <vTaskSwitchContext+0xc0>)
 8005fca:	6013      	str	r3, [r2, #0]
}
 8005fcc:	bf00      	nop
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	20000788 	.word	0x20000788
 8005fdc:	20000774 	.word	0x20000774
 8005fe0:	20000768 	.word	0x20000768
 8005fe4:	20000664 	.word	0x20000664
 8005fe8:	20000660 	.word	0x20000660
 8005fec:	2000006c 	.word	0x2000006c

08005ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ff8:	f000 f852 	bl	80060a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <prvIdleTask+0x28>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d9f9      	bls.n	8005ff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <prvIdleTask+0x2c>)
 8006006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006014:	e7f0      	b.n	8005ff8 <prvIdleTask+0x8>
 8006016:	bf00      	nop
 8006018:	20000664 	.word	0x20000664
 800601c:	e000ed04 	.word	0xe000ed04

08006020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006026:	2300      	movs	r3, #0
 8006028:	607b      	str	r3, [r7, #4]
 800602a:	e00c      	b.n	8006046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4a12      	ldr	r2, [pc, #72]	; (8006080 <prvInitialiseTaskLists+0x60>)
 8006038:	4413      	add	r3, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fb17 	bl	800566e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3301      	adds	r3, #1
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b06      	cmp	r3, #6
 800604a:	d9ef      	bls.n	800602c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800604c:	480d      	ldr	r0, [pc, #52]	; (8006084 <prvInitialiseTaskLists+0x64>)
 800604e:	f7ff fb0e 	bl	800566e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006052:	480d      	ldr	r0, [pc, #52]	; (8006088 <prvInitialiseTaskLists+0x68>)
 8006054:	f7ff fb0b 	bl	800566e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006058:	480c      	ldr	r0, [pc, #48]	; (800608c <prvInitialiseTaskLists+0x6c>)
 800605a:	f7ff fb08 	bl	800566e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800605e:	480c      	ldr	r0, [pc, #48]	; (8006090 <prvInitialiseTaskLists+0x70>)
 8006060:	f7ff fb05 	bl	800566e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006064:	480b      	ldr	r0, [pc, #44]	; (8006094 <prvInitialiseTaskLists+0x74>)
 8006066:	f7ff fb02 	bl	800566e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <prvInitialiseTaskLists+0x78>)
 800606c:	4a05      	ldr	r2, [pc, #20]	; (8006084 <prvInitialiseTaskLists+0x64>)
 800606e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <prvInitialiseTaskLists+0x7c>)
 8006072:	4a05      	ldr	r2, [pc, #20]	; (8006088 <prvInitialiseTaskLists+0x68>)
 8006074:	601a      	str	r2, [r3, #0]
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000664 	.word	0x20000664
 8006084:	200006f0 	.word	0x200006f0
 8006088:	20000704 	.word	0x20000704
 800608c:	20000720 	.word	0x20000720
 8006090:	20000734 	.word	0x20000734
 8006094:	2000074c 	.word	0x2000074c
 8006098:	20000718 	.word	0x20000718
 800609c:	2000071c 	.word	0x2000071c

080060a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060a6:	e019      	b.n	80060dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060a8:	f000 fa0c 	bl	80064c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ac:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <prvCheckTasksWaitingTermination+0x50>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fb62 	bl	8005782 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060be:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <prvCheckTasksWaitingTermination+0x54>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	4a0b      	ldr	r2, [pc, #44]	; (80060f4 <prvCheckTasksWaitingTermination+0x54>)
 80060c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060c8:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <prvCheckTasksWaitingTermination+0x58>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	4a0a      	ldr	r2, [pc, #40]	; (80060f8 <prvCheckTasksWaitingTermination+0x58>)
 80060d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060d2:	f000 fa27 	bl	8006524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f810 	bl	80060fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <prvCheckTasksWaitingTermination+0x58>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e1      	bne.n	80060a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000734 	.word	0x20000734
 80060f4:	20000760 	.word	0x20000760
 80060f8:	20000748 	.word	0x20000748

080060fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	335c      	adds	r3, #92	; 0x5c
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fa4f 	bl	80075ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006114:	2b00      	cmp	r3, #0
 8006116:	d108      	bne.n	800612a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fb7f 	bl	8006820 <vPortFree>
				vPortFree( pxTCB );
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fb7c 	bl	8006820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006128:	e018      	b.n	800615c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006130:	2b01      	cmp	r3, #1
 8006132:	d103      	bne.n	800613c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fb73 	bl	8006820 <vPortFree>
	}
 800613a:	e00f      	b.n	800615c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006142:	2b02      	cmp	r3, #2
 8006144:	d00a      	beq.n	800615c <prvDeleteTCB+0x60>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60fb      	str	r3, [r7, #12]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <prvDeleteTCB+0x5e>
	}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800616a:	4b0c      	ldr	r3, [pc, #48]	; (800619c <prvResetNextTaskUnblockTime+0x38>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <prvResetNextTaskUnblockTime+0x3c>)
 8006176:	f04f 32ff 	mov.w	r2, #4294967295
 800617a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800617c:	e008      	b.n	8006190 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617e:	4b07      	ldr	r3, [pc, #28]	; (800619c <prvResetNextTaskUnblockTime+0x38>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a04      	ldr	r2, [pc, #16]	; (80061a0 <prvResetNextTaskUnblockTime+0x3c>)
 800618e:	6013      	str	r3, [r2, #0]
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	20000718 	.word	0x20000718
 80061a0:	20000780 	.word	0x20000780

080061a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ae:	4b29      	ldr	r3, [pc, #164]	; (8006254 <prvAddCurrentTaskToDelayedList+0xb0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b4:	4b28      	ldr	r3, [pc, #160]	; (8006258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fae1 	bl	8005782 <uxListRemove>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061c6:	4b24      	ldr	r3, [pc, #144]	; (8006258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	2201      	movs	r2, #1
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43da      	mvns	r2, r3
 80061d4:	4b21      	ldr	r3, [pc, #132]	; (800625c <prvAddCurrentTaskToDelayedList+0xb8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4013      	ands	r3, r2
 80061da:	4a20      	ldr	r2, [pc, #128]	; (800625c <prvAddCurrentTaskToDelayedList+0xb8>)
 80061dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d10a      	bne.n	80061fc <prvAddCurrentTaskToDelayedList+0x58>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d007      	beq.n	80061fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ec:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	481a      	ldr	r0, [pc, #104]	; (8006260 <prvAddCurrentTaskToDelayedList+0xbc>)
 80061f6:	f7ff fa67 	bl	80056c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061fa:	e026      	b.n	800624a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006204:	4b14      	ldr	r3, [pc, #80]	; (8006258 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	429a      	cmp	r2, r3
 8006212:	d209      	bcs.n	8006228 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006214:	4b13      	ldr	r3, [pc, #76]	; (8006264 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f7ff fa75 	bl	8005710 <vListInsert>
}
 8006226:	e010      	b.n	800624a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006228:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <prvAddCurrentTaskToDelayedList+0xc4>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3304      	adds	r3, #4
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7ff fa6b 	bl	8005710 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800623a:	4b0c      	ldr	r3, [pc, #48]	; (800626c <prvAddCurrentTaskToDelayedList+0xc8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	d202      	bcs.n	800624a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006244:	4a09      	ldr	r2, [pc, #36]	; (800626c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6013      	str	r3, [r2, #0]
}
 800624a:	bf00      	nop
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000764 	.word	0x20000764
 8006258:	20000660 	.word	0x20000660
 800625c:	20000768 	.word	0x20000768
 8006260:	2000074c 	.word	0x2000074c
 8006264:	2000071c 	.word	0x2000071c
 8006268:	20000718 	.word	0x20000718
 800626c:	20000780 	.word	0x20000780

08006270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3b04      	subs	r3, #4
 8006280:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3b04      	subs	r3, #4
 800628e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f023 0201 	bic.w	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3b04      	subs	r3, #4
 800629e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062a0:	4a0c      	ldr	r2, [pc, #48]	; (80062d4 <pxPortInitialiseStack+0x64>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3b14      	subs	r3, #20
 80062aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3b04      	subs	r3, #4
 80062b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f06f 0202 	mvn.w	r2, #2
 80062be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3b20      	subs	r3, #32
 80062c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	080062d9 	.word	0x080062d9

080062d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062e2:	4b12      	ldr	r3, [pc, #72]	; (800632c <prvTaskExitError+0x54>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d00a      	beq.n	8006302 <prvTaskExitError+0x2a>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	60fb      	str	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <prvTaskExitError+0x28>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	60bb      	str	r3, [r7, #8]
}
 8006314:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006316:	bf00      	nop
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0fc      	beq.n	8006318 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	20000010 	.word	0x20000010

08006330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <pxCurrentTCBConst2>)
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	6808      	ldr	r0, [r1, #0]
 8006336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633a:	f380 8809 	msr	PSP, r0
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8811 	msr	BASEPRI, r0
 800634a:	4770      	bx	lr
 800634c:	f3af 8000 	nop.w

08006350 <pxCurrentTCBConst2>:
 8006350:	20000660 	.word	0x20000660
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop

08006358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006358:	4808      	ldr	r0, [pc, #32]	; (800637c <prvPortStartFirstTask+0x24>)
 800635a:	6800      	ldr	r0, [r0, #0]
 800635c:	6800      	ldr	r0, [r0, #0]
 800635e:	f380 8808 	msr	MSP, r0
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f380 8814 	msr	CONTROL, r0
 800636a:	b662      	cpsie	i
 800636c:	b661      	cpsie	f
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	df00      	svc	0
 8006378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800637a:	bf00      	nop
 800637c:	e000ed08 	.word	0xe000ed08

08006380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006386:	4b46      	ldr	r3, [pc, #280]	; (80064a0 <xPortStartScheduler+0x120>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a46      	ldr	r2, [pc, #280]	; (80064a4 <xPortStartScheduler+0x124>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d10a      	bne.n	80063a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	613b      	str	r3, [r7, #16]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063a6:	4b3e      	ldr	r3, [pc, #248]	; (80064a0 <xPortStartScheduler+0x120>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a3f      	ldr	r2, [pc, #252]	; (80064a8 <xPortStartScheduler+0x128>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10a      	bne.n	80063c6 <xPortStartScheduler+0x46>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	60fb      	str	r3, [r7, #12]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063c6:	4b39      	ldr	r3, [pc, #228]	; (80064ac <xPortStartScheduler+0x12c>)
 80063c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	22ff      	movs	r2, #255	; 0xff
 80063d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <xPortStartScheduler+0x130>)
 80063ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063ee:	4b31      	ldr	r3, [pc, #196]	; (80064b4 <xPortStartScheduler+0x134>)
 80063f0:	2207      	movs	r2, #7
 80063f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063f4:	e009      	b.n	800640a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80063f6:	4b2f      	ldr	r3, [pc, #188]	; (80064b4 <xPortStartScheduler+0x134>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <xPortStartScheduler+0x134>)
 80063fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	2b80      	cmp	r3, #128	; 0x80
 8006414:	d0ef      	beq.n	80063f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006416:	4b27      	ldr	r3, [pc, #156]	; (80064b4 <xPortStartScheduler+0x134>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f1c3 0307 	rsb	r3, r3, #7
 800641e:	2b04      	cmp	r3, #4
 8006420:	d00a      	beq.n	8006438 <xPortStartScheduler+0xb8>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60bb      	str	r3, [r7, #8]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006438:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <xPortStartScheduler+0x134>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <xPortStartScheduler+0x134>)
 8006440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006442:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <xPortStartScheduler+0x134>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800644a:	4a1a      	ldr	r2, [pc, #104]	; (80064b4 <xPortStartScheduler+0x134>)
 800644c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006456:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <xPortStartScheduler+0x138>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <xPortStartScheduler+0x138>)
 800645c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006462:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <xPortStartScheduler+0x138>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a14      	ldr	r2, [pc, #80]	; (80064b8 <xPortStartScheduler+0x138>)
 8006468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800646c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800646e:	f000 f8dd 	bl	800662c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <xPortStartScheduler+0x13c>)
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006478:	f000 f8fc 	bl	8006674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800647c:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <xPortStartScheduler+0x140>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0f      	ldr	r2, [pc, #60]	; (80064c0 <xPortStartScheduler+0x140>)
 8006482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006488:	f7ff ff66 	bl	8006358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800648c:	f7ff fd4e 	bl	8005f2c <vTaskSwitchContext>
	prvTaskExitError();
 8006490:	f7ff ff22 	bl	80062d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	e000ed00 	.word	0xe000ed00
 80064a4:	410fc271 	.word	0x410fc271
 80064a8:	410fc270 	.word	0x410fc270
 80064ac:	e000e400 	.word	0xe000e400
 80064b0:	2000078c 	.word	0x2000078c
 80064b4:	20000790 	.word	0x20000790
 80064b8:	e000ed20 	.word	0xe000ed20
 80064bc:	20000010 	.word	0x20000010
 80064c0:	e000ef34 	.word	0xe000ef34

080064c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	607b      	str	r3, [r7, #4]
}
 80064dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064de:	4b0f      	ldr	r3, [pc, #60]	; (800651c <vPortEnterCritical+0x58>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	4a0d      	ldr	r2, [pc, #52]	; (800651c <vPortEnterCritical+0x58>)
 80064e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <vPortEnterCritical+0x58>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d10f      	bne.n	8006510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <vPortEnterCritical+0x5c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <vPortEnterCritical+0x4c>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	603b      	str	r3, [r7, #0]
}
 800650c:	bf00      	nop
 800650e:	e7fe      	b.n	800650e <vPortEnterCritical+0x4a>
	}
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	20000010 	.word	0x20000010
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <vPortExitCritical+0x50>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <vPortExitCritical+0x24>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	607b      	str	r3, [r7, #4]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <vPortExitCritical+0x50>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3b01      	subs	r3, #1
 800654e:	4a09      	ldr	r2, [pc, #36]	; (8006574 <vPortExitCritical+0x50>)
 8006550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <vPortExitCritical+0x50>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d105      	bne.n	8006566 <vPortExitCritical+0x42>
 800655a:	2300      	movs	r3, #0
 800655c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000010 	.word	0x20000010
	...

08006580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006580:	f3ef 8009 	mrs	r0, PSP
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <pxCurrentTCBConst>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f01e 0f10 	tst.w	lr, #16
 8006590:	bf08      	it	eq
 8006592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	6010      	str	r0, [r2, #0]
 800659c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065a4:	f380 8811 	msr	BASEPRI, r0
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f7ff fcbc 	bl	8005f2c <vTaskSwitchContext>
 80065b4:	f04f 0000 	mov.w	r0, #0
 80065b8:	f380 8811 	msr	BASEPRI, r0
 80065bc:	bc09      	pop	{r0, r3}
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	6808      	ldr	r0, [r1, #0]
 80065c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c6:	f01e 0f10 	tst.w	lr, #16
 80065ca:	bf08      	it	eq
 80065cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065d0:	f380 8809 	msr	PSP, r0
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst>:
 80065e0:	20000660 	.word	0x20000660
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006602:	f7ff fbdb 	bl	8005dbc <xTaskIncrementTick>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <SysTick_Handler+0x40>)
 800660e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	f383 8811 	msr	BASEPRI, r3
}
 800661e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <vPortSetupTimerInterrupt+0x34>)
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <vPortSetupTimerInterrupt+0x38>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <vPortSetupTimerInterrupt+0x3c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a0a      	ldr	r2, [pc, #40]	; (800666c <vPortSetupTimerInterrupt+0x40>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	4a09      	ldr	r2, [pc, #36]	; (8006670 <vPortSetupTimerInterrupt+0x44>)
 800664a:	3b01      	subs	r3, #1
 800664c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800664e:	4b04      	ldr	r3, [pc, #16]	; (8006660 <vPortSetupTimerInterrupt+0x34>)
 8006650:	2207      	movs	r2, #7
 8006652:	601a      	str	r2, [r3, #0]
}
 8006654:	bf00      	nop
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	e000e010 	.word	0xe000e010
 8006664:	e000e018 	.word	0xe000e018
 8006668:	20000004 	.word	0x20000004
 800666c:	10624dd3 	.word	0x10624dd3
 8006670:	e000e014 	.word	0xe000e014

08006674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006684 <vPortEnableVFP+0x10>
 8006678:	6801      	ldr	r1, [r0, #0]
 800667a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800667e:	6001      	str	r1, [r0, #0]
 8006680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006682:	bf00      	nop
 8006684:	e000ed88 	.word	0xe000ed88

08006688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006694:	f7ff fae8 	bl	8005c68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006698:	4b5b      	ldr	r3, [pc, #364]	; (8006808 <pvPortMalloc+0x180>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066a0:	f000 f920 	bl	80068e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066a4:	4b59      	ldr	r3, [pc, #356]	; (800680c <pvPortMalloc+0x184>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f040 8093 	bne.w	80067d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01d      	beq.n	80066f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066b8:	2208      	movs	r2, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f023 0307 	bic.w	r3, r3, #7
 80066d0:	3308      	adds	r3, #8
 80066d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <pvPortMalloc+0x6c>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	617b      	str	r3, [r7, #20]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d06e      	beq.n	80067d8 <pvPortMalloc+0x150>
 80066fa:	4b45      	ldr	r3, [pc, #276]	; (8006810 <pvPortMalloc+0x188>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d869      	bhi.n	80067d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006704:	4b43      	ldr	r3, [pc, #268]	; (8006814 <pvPortMalloc+0x18c>)
 8006706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006708:	4b42      	ldr	r3, [pc, #264]	; (8006814 <pvPortMalloc+0x18c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800670e:	e004      	b.n	800671a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d903      	bls.n	800672c <pvPortMalloc+0xa4>
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f1      	bne.n	8006710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800672c:	4b36      	ldr	r3, [pc, #216]	; (8006808 <pvPortMalloc+0x180>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	429a      	cmp	r2, r3
 8006734:	d050      	beq.n	80067d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2208      	movs	r2, #8
 800673c:	4413      	add	r3, r2
 800673e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	2308      	movs	r3, #8
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	429a      	cmp	r2, r3
 8006756:	d91f      	bls.n	8006798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <pvPortMalloc+0xf8>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	613b      	str	r3, [r7, #16]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006792:	69b8      	ldr	r0, [r7, #24]
 8006794:	f000 f908 	bl	80069a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <pvPortMalloc+0x188>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <pvPortMalloc+0x188>)
 80067a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067a6:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <pvPortMalloc+0x188>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <pvPortMalloc+0x190>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d203      	bcs.n	80067ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067b2:	4b17      	ldr	r3, [pc, #92]	; (8006810 <pvPortMalloc+0x188>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <pvPortMalloc+0x190>)
 80067b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	4b13      	ldr	r3, [pc, #76]	; (800680c <pvPortMalloc+0x184>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <pvPortMalloc+0x194>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	4a11      	ldr	r2, [pc, #68]	; (800681c <pvPortMalloc+0x194>)
 80067d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067d8:	f7ff fa54 	bl	8005c84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <pvPortMalloc+0x174>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
}
 80067f8:	bf00      	nop
 80067fa:	e7fe      	b.n	80067fa <pvPortMalloc+0x172>
	return pvReturn;
 80067fc:	69fb      	ldr	r3, [r7, #28]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3728      	adds	r7, #40	; 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	2000439c 	.word	0x2000439c
 800680c:	200043b0 	.word	0x200043b0
 8006810:	200043a0 	.word	0x200043a0
 8006814:	20004394 	.word	0x20004394
 8006818:	200043a4 	.word	0x200043a4
 800681c:	200043a8 	.word	0x200043a8

08006820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d04d      	beq.n	80068ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006832:	2308      	movs	r3, #8
 8006834:	425b      	negs	r3, r3
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4b24      	ldr	r3, [pc, #144]	; (80068d8 <vPortFree+0xb8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4013      	ands	r3, r2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <vPortFree+0x44>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60fb      	str	r3, [r7, #12]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <vPortFree+0x62>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60bb      	str	r3, [r7, #8]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	4b14      	ldr	r3, [pc, #80]	; (80068d8 <vPortFree+0xb8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01e      	beq.n	80068ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11a      	bne.n	80068ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <vPortFree+0xb8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	43db      	mvns	r3, r3
 80068a2:	401a      	ands	r2, r3
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068a8:	f7ff f9de 	bl	8005c68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <vPortFree+0xbc>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	4a09      	ldr	r2, [pc, #36]	; (80068dc <vPortFree+0xbc>)
 80068b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ba:	6938      	ldr	r0, [r7, #16]
 80068bc:	f000 f874 	bl	80069a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <vPortFree+0xc0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <vPortFree+0xc0>)
 80068c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ca:	f7ff f9db 	bl	8005c84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	200043b0 	.word	0x200043b0
 80068dc:	200043a0 	.word	0x200043a0
 80068e0:	200043ac 	.word	0x200043ac

080068e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <prvHeapInit+0xac>)
 80068f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3307      	adds	r3, #7
 8006902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <prvHeapInit+0xac>)
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800691c:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <prvHeapInit+0xb0>)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <prvHeapInit+0xb0>)
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	4413      	add	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006930:	2208      	movs	r2, #8
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0307 	bic.w	r3, r3, #7
 800693e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <prvHeapInit+0xb4>)
 8006944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <prvHeapInit+0xb4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <prvHeapInit+0xb4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <prvHeapInit+0xb4>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <prvHeapInit+0xb8>)
 8006972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <prvHeapInit+0xbc>)
 800697a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <prvHeapInit+0xc0>)
 800697e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000794 	.word	0x20000794
 8006994:	20004394 	.word	0x20004394
 8006998:	2000439c 	.word	0x2000439c
 800699c:	200043a4 	.word	0x200043a4
 80069a0:	200043a0 	.word	0x200043a0
 80069a4:	200043b0 	.word	0x200043b0

080069a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <prvInsertBlockIntoFreeList+0xac>)
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e002      	b.n	80069bc <prvInsertBlockIntoFreeList+0x14>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d8f7      	bhi.n	80069b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d108      	bne.n	80069ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	441a      	add	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	441a      	add	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d118      	bne.n	8006a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d00d      	beq.n	8006a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e008      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e003      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d002      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20004394 	.word	0x20004394
 8006a58:	2000439c 	.word	0x2000439c

08006a5c <__cvt>:
 8006a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a60:	ec55 4b10 	vmov	r4, r5, d0
 8006a64:	2d00      	cmp	r5, #0
 8006a66:	460e      	mov	r6, r1
 8006a68:	4619      	mov	r1, r3
 8006a6a:	462b      	mov	r3, r5
 8006a6c:	bfbb      	ittet	lt
 8006a6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a72:	461d      	movlt	r5, r3
 8006a74:	2300      	movge	r3, #0
 8006a76:	232d      	movlt	r3, #45	; 0x2d
 8006a78:	700b      	strb	r3, [r1, #0]
 8006a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a80:	4691      	mov	r9, r2
 8006a82:	f023 0820 	bic.w	r8, r3, #32
 8006a86:	bfbc      	itt	lt
 8006a88:	4622      	movlt	r2, r4
 8006a8a:	4614      	movlt	r4, r2
 8006a8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a90:	d005      	beq.n	8006a9e <__cvt+0x42>
 8006a92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a96:	d100      	bne.n	8006a9a <__cvt+0x3e>
 8006a98:	3601      	adds	r6, #1
 8006a9a:	2102      	movs	r1, #2
 8006a9c:	e000      	b.n	8006aa0 <__cvt+0x44>
 8006a9e:	2103      	movs	r1, #3
 8006aa0:	ab03      	add	r3, sp, #12
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	ab02      	add	r3, sp, #8
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	ec45 4b10 	vmov	d0, r4, r5
 8006aac:	4653      	mov	r3, sl
 8006aae:	4632      	mov	r2, r6
 8006ab0:	f000 fece 	bl	8007850 <_dtoa_r>
 8006ab4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ab8:	4607      	mov	r7, r0
 8006aba:	d102      	bne.n	8006ac2 <__cvt+0x66>
 8006abc:	f019 0f01 	tst.w	r9, #1
 8006ac0:	d022      	beq.n	8006b08 <__cvt+0xac>
 8006ac2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ac6:	eb07 0906 	add.w	r9, r7, r6
 8006aca:	d110      	bne.n	8006aee <__cvt+0x92>
 8006acc:	783b      	ldrb	r3, [r7, #0]
 8006ace:	2b30      	cmp	r3, #48	; 0x30
 8006ad0:	d10a      	bne.n	8006ae8 <__cvt+0x8c>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	4629      	mov	r1, r5
 8006ada:	f7f9 fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ade:	b918      	cbnz	r0, 8006ae8 <__cvt+0x8c>
 8006ae0:	f1c6 0601 	rsb	r6, r6, #1
 8006ae4:	f8ca 6000 	str.w	r6, [sl]
 8006ae8:	f8da 3000 	ldr.w	r3, [sl]
 8006aec:	4499      	add	r9, r3
 8006aee:	2200      	movs	r2, #0
 8006af0:	2300      	movs	r3, #0
 8006af2:	4620      	mov	r0, r4
 8006af4:	4629      	mov	r1, r5
 8006af6:	f7f9 ffef 	bl	8000ad8 <__aeabi_dcmpeq>
 8006afa:	b108      	cbz	r0, 8006b00 <__cvt+0xa4>
 8006afc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b00:	2230      	movs	r2, #48	; 0x30
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	454b      	cmp	r3, r9
 8006b06:	d307      	bcc.n	8006b18 <__cvt+0xbc>
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b0c:	1bdb      	subs	r3, r3, r7
 8006b0e:	4638      	mov	r0, r7
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	b004      	add	sp, #16
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	1c59      	adds	r1, r3, #1
 8006b1a:	9103      	str	r1, [sp, #12]
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	e7f0      	b.n	8006b02 <__cvt+0xa6>

08006b20 <__exponent>:
 8006b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b22:	4603      	mov	r3, r0
 8006b24:	2900      	cmp	r1, #0
 8006b26:	bfb8      	it	lt
 8006b28:	4249      	neglt	r1, r1
 8006b2a:	f803 2b02 	strb.w	r2, [r3], #2
 8006b2e:	bfb4      	ite	lt
 8006b30:	222d      	movlt	r2, #45	; 0x2d
 8006b32:	222b      	movge	r2, #43	; 0x2b
 8006b34:	2909      	cmp	r1, #9
 8006b36:	7042      	strb	r2, [r0, #1]
 8006b38:	dd2a      	ble.n	8006b90 <__exponent+0x70>
 8006b3a:	f10d 0207 	add.w	r2, sp, #7
 8006b3e:	4617      	mov	r7, r2
 8006b40:	260a      	movs	r6, #10
 8006b42:	4694      	mov	ip, r2
 8006b44:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b48:	fb06 1415 	mls	r4, r6, r5, r1
 8006b4c:	3430      	adds	r4, #48	; 0x30
 8006b4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b52:	460c      	mov	r4, r1
 8006b54:	2c63      	cmp	r4, #99	; 0x63
 8006b56:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	dcf1      	bgt.n	8006b42 <__exponent+0x22>
 8006b5e:	3130      	adds	r1, #48	; 0x30
 8006b60:	f1ac 0402 	sub.w	r4, ip, #2
 8006b64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b68:	1c41      	adds	r1, r0, #1
 8006b6a:	4622      	mov	r2, r4
 8006b6c:	42ba      	cmp	r2, r7
 8006b6e:	d30a      	bcc.n	8006b86 <__exponent+0x66>
 8006b70:	f10d 0209 	add.w	r2, sp, #9
 8006b74:	eba2 020c 	sub.w	r2, r2, ip
 8006b78:	42bc      	cmp	r4, r7
 8006b7a:	bf88      	it	hi
 8006b7c:	2200      	movhi	r2, #0
 8006b7e:	4413      	add	r3, r2
 8006b80:	1a18      	subs	r0, r3, r0
 8006b82:	b003      	add	sp, #12
 8006b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b8e:	e7ed      	b.n	8006b6c <__exponent+0x4c>
 8006b90:	2330      	movs	r3, #48	; 0x30
 8006b92:	3130      	adds	r1, #48	; 0x30
 8006b94:	7083      	strb	r3, [r0, #2]
 8006b96:	70c1      	strb	r1, [r0, #3]
 8006b98:	1d03      	adds	r3, r0, #4
 8006b9a:	e7f1      	b.n	8006b80 <__exponent+0x60>

08006b9c <_printf_float>:
 8006b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba0:	ed2d 8b02 	vpush	{d8}
 8006ba4:	b08d      	sub	sp, #52	; 0x34
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bac:	4616      	mov	r6, r2
 8006bae:	461f      	mov	r7, r3
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	f000 fce7 	bl	8007584 <_localeconv_r>
 8006bb6:	f8d0 a000 	ldr.w	sl, [r0]
 8006bba:	4650      	mov	r0, sl
 8006bbc:	f7f9 fb60 	bl	8000280 <strlen>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	9305      	str	r3, [sp, #20]
 8006bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bd0:	3307      	adds	r3, #7
 8006bd2:	f023 0307 	bic.w	r3, r3, #7
 8006bd6:	f103 0208 	add.w	r2, r3, #8
 8006bda:	f8c8 2000 	str.w	r2, [r8]
 8006bde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006be2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006be6:	9307      	str	r3, [sp, #28]
 8006be8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bec:	ee08 0a10 	vmov	s16, r0
 8006bf0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf8:	4b9e      	ldr	r3, [pc, #632]	; (8006e74 <_printf_float+0x2d8>)
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfe:	f7f9 ff9d 	bl	8000b3c <__aeabi_dcmpun>
 8006c02:	bb88      	cbnz	r0, 8006c68 <_printf_float+0xcc>
 8006c04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c08:	4b9a      	ldr	r3, [pc, #616]	; (8006e74 <_printf_float+0x2d8>)
 8006c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0e:	f7f9 ff77 	bl	8000b00 <__aeabi_dcmple>
 8006c12:	bb48      	cbnz	r0, 8006c68 <_printf_float+0xcc>
 8006c14:	2200      	movs	r2, #0
 8006c16:	2300      	movs	r3, #0
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 ff66 	bl	8000aec <__aeabi_dcmplt>
 8006c20:	b110      	cbz	r0, 8006c28 <_printf_float+0x8c>
 8006c22:	232d      	movs	r3, #45	; 0x2d
 8006c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c28:	4a93      	ldr	r2, [pc, #588]	; (8006e78 <_printf_float+0x2dc>)
 8006c2a:	4b94      	ldr	r3, [pc, #592]	; (8006e7c <_printf_float+0x2e0>)
 8006c2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c30:	bf94      	ite	ls
 8006c32:	4690      	movls	r8, r2
 8006c34:	4698      	movhi	r8, r3
 8006c36:	2303      	movs	r3, #3
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	9b05      	ldr	r3, [sp, #20]
 8006c3c:	f023 0304 	bic.w	r3, r3, #4
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	f04f 0900 	mov.w	r9, #0
 8006c46:	9700      	str	r7, [sp, #0]
 8006c48:	4633      	mov	r3, r6
 8006c4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 f9da 	bl	8007008 <_printf_common>
 8006c54:	3001      	adds	r0, #1
 8006c56:	f040 8090 	bne.w	8006d7a <_printf_float+0x1de>
 8006c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5e:	b00d      	add	sp, #52	; 0x34
 8006c60:	ecbd 8b02 	vpop	{d8}
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	4642      	mov	r2, r8
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4649      	mov	r1, r9
 8006c70:	f7f9 ff64 	bl	8000b3c <__aeabi_dcmpun>
 8006c74:	b140      	cbz	r0, 8006c88 <_printf_float+0xec>
 8006c76:	464b      	mov	r3, r9
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	bfbc      	itt	lt
 8006c7c:	232d      	movlt	r3, #45	; 0x2d
 8006c7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c82:	4a7f      	ldr	r2, [pc, #508]	; (8006e80 <_printf_float+0x2e4>)
 8006c84:	4b7f      	ldr	r3, [pc, #508]	; (8006e84 <_printf_float+0x2e8>)
 8006c86:	e7d1      	b.n	8006c2c <_printf_float+0x90>
 8006c88:	6863      	ldr	r3, [r4, #4]
 8006c8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c8e:	9206      	str	r2, [sp, #24]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	d13f      	bne.n	8006d14 <_printf_float+0x178>
 8006c94:	2306      	movs	r3, #6
 8006c96:	6063      	str	r3, [r4, #4]
 8006c98:	9b05      	ldr	r3, [sp, #20]
 8006c9a:	6861      	ldr	r1, [r4, #4]
 8006c9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9303      	str	r3, [sp, #12]
 8006ca4:	ab0a      	add	r3, sp, #40	; 0x28
 8006ca6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006caa:	ab09      	add	r3, sp, #36	; 0x24
 8006cac:	ec49 8b10 	vmov	d0, r8, r9
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	6022      	str	r2, [r4, #0]
 8006cb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cb8:	4628      	mov	r0, r5
 8006cba:	f7ff fecf 	bl	8006a5c <__cvt>
 8006cbe:	9b06      	ldr	r3, [sp, #24]
 8006cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cc2:	2b47      	cmp	r3, #71	; 0x47
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	d108      	bne.n	8006cda <_printf_float+0x13e>
 8006cc8:	1cc8      	adds	r0, r1, #3
 8006cca:	db02      	blt.n	8006cd2 <_printf_float+0x136>
 8006ccc:	6863      	ldr	r3, [r4, #4]
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	dd41      	ble.n	8006d56 <_printf_float+0x1ba>
 8006cd2:	f1ab 0302 	sub.w	r3, fp, #2
 8006cd6:	fa5f fb83 	uxtb.w	fp, r3
 8006cda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cde:	d820      	bhi.n	8006d22 <_printf_float+0x186>
 8006ce0:	3901      	subs	r1, #1
 8006ce2:	465a      	mov	r2, fp
 8006ce4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ce8:	9109      	str	r1, [sp, #36]	; 0x24
 8006cea:	f7ff ff19 	bl	8006b20 <__exponent>
 8006cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cf0:	1813      	adds	r3, r2, r0
 8006cf2:	2a01      	cmp	r2, #1
 8006cf4:	4681      	mov	r9, r0
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	dc02      	bgt.n	8006d00 <_printf_float+0x164>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	07d2      	lsls	r2, r2, #31
 8006cfe:	d501      	bpl.n	8006d04 <_printf_float+0x168>
 8006d00:	3301      	adds	r3, #1
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d09c      	beq.n	8006c46 <_printf_float+0xaa>
 8006d0c:	232d      	movs	r3, #45	; 0x2d
 8006d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d12:	e798      	b.n	8006c46 <_printf_float+0xaa>
 8006d14:	9a06      	ldr	r2, [sp, #24]
 8006d16:	2a47      	cmp	r2, #71	; 0x47
 8006d18:	d1be      	bne.n	8006c98 <_printf_float+0xfc>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1bc      	bne.n	8006c98 <_printf_float+0xfc>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e7b9      	b.n	8006c96 <_printf_float+0xfa>
 8006d22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d26:	d118      	bne.n	8006d5a <_printf_float+0x1be>
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	6863      	ldr	r3, [r4, #4]
 8006d2c:	dd0b      	ble.n	8006d46 <_printf_float+0x1aa>
 8006d2e:	6121      	str	r1, [r4, #16]
 8006d30:	b913      	cbnz	r3, 8006d38 <_printf_float+0x19c>
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	07d0      	lsls	r0, r2, #31
 8006d36:	d502      	bpl.n	8006d3e <_printf_float+0x1a2>
 8006d38:	3301      	adds	r3, #1
 8006d3a:	440b      	add	r3, r1
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d40:	f04f 0900 	mov.w	r9, #0
 8006d44:	e7de      	b.n	8006d04 <_printf_float+0x168>
 8006d46:	b913      	cbnz	r3, 8006d4e <_printf_float+0x1b2>
 8006d48:	6822      	ldr	r2, [r4, #0]
 8006d4a:	07d2      	lsls	r2, r2, #31
 8006d4c:	d501      	bpl.n	8006d52 <_printf_float+0x1b6>
 8006d4e:	3302      	adds	r3, #2
 8006d50:	e7f4      	b.n	8006d3c <_printf_float+0x1a0>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7f2      	b.n	8006d3c <_printf_float+0x1a0>
 8006d56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5c:	4299      	cmp	r1, r3
 8006d5e:	db05      	blt.n	8006d6c <_printf_float+0x1d0>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	6121      	str	r1, [r4, #16]
 8006d64:	07d8      	lsls	r0, r3, #31
 8006d66:	d5ea      	bpl.n	8006d3e <_printf_float+0x1a2>
 8006d68:	1c4b      	adds	r3, r1, #1
 8006d6a:	e7e7      	b.n	8006d3c <_printf_float+0x1a0>
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	bfd4      	ite	le
 8006d70:	f1c1 0202 	rsble	r2, r1, #2
 8006d74:	2201      	movgt	r2, #1
 8006d76:	4413      	add	r3, r2
 8006d78:	e7e0      	b.n	8006d3c <_printf_float+0x1a0>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	055a      	lsls	r2, r3, #21
 8006d7e:	d407      	bmi.n	8006d90 <_printf_float+0x1f4>
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	4642      	mov	r2, r8
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d12c      	bne.n	8006de8 <_printf_float+0x24c>
 8006d8e:	e764      	b.n	8006c5a <_printf_float+0xbe>
 8006d90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d94:	f240 80e0 	bls.w	8006f58 <_printf_float+0x3bc>
 8006d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f7f9 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d034      	beq.n	8006e12 <_printf_float+0x276>
 8006da8:	4a37      	ldr	r2, [pc, #220]	; (8006e88 <_printf_float+0x2ec>)
 8006daa:	2301      	movs	r3, #1
 8006dac:	4631      	mov	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f af51 	beq.w	8006c5a <_printf_float+0xbe>
 8006db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	db02      	blt.n	8006dc6 <_printf_float+0x22a>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	07d8      	lsls	r0, r3, #31
 8006dc4:	d510      	bpl.n	8006de8 <_printf_float+0x24c>
 8006dc6:	ee18 3a10 	vmov	r3, s16
 8006dca:	4652      	mov	r2, sl
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4628      	mov	r0, r5
 8006dd0:	47b8      	blx	r7
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	f43f af41 	beq.w	8006c5a <_printf_float+0xbe>
 8006dd8:	f04f 0800 	mov.w	r8, #0
 8006ddc:	f104 091a 	add.w	r9, r4, #26
 8006de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de2:	3b01      	subs	r3, #1
 8006de4:	4543      	cmp	r3, r8
 8006de6:	dc09      	bgt.n	8006dfc <_printf_float+0x260>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	079b      	lsls	r3, r3, #30
 8006dec:	f100 8107 	bmi.w	8006ffe <_printf_float+0x462>
 8006df0:	68e0      	ldr	r0, [r4, #12]
 8006df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df4:	4298      	cmp	r0, r3
 8006df6:	bfb8      	it	lt
 8006df8:	4618      	movlt	r0, r3
 8006dfa:	e730      	b.n	8006c5e <_printf_float+0xc2>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	464a      	mov	r2, r9
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	f43f af27 	beq.w	8006c5a <_printf_float+0xbe>
 8006e0c:	f108 0801 	add.w	r8, r8, #1
 8006e10:	e7e6      	b.n	8006de0 <_printf_float+0x244>
 8006e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dc39      	bgt.n	8006e8c <_printf_float+0x2f0>
 8006e18:	4a1b      	ldr	r2, [pc, #108]	; (8006e88 <_printf_float+0x2ec>)
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	f43f af19 	beq.w	8006c5a <_printf_float+0xbe>
 8006e28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	d102      	bne.n	8006e36 <_printf_float+0x29a>
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	07d9      	lsls	r1, r3, #31
 8006e34:	d5d8      	bpl.n	8006de8 <_printf_float+0x24c>
 8006e36:	ee18 3a10 	vmov	r3, s16
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f af09 	beq.w	8006c5a <_printf_float+0xbe>
 8006e48:	f04f 0900 	mov.w	r9, #0
 8006e4c:	f104 0a1a 	add.w	sl, r4, #26
 8006e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e52:	425b      	negs	r3, r3
 8006e54:	454b      	cmp	r3, r9
 8006e56:	dc01      	bgt.n	8006e5c <_printf_float+0x2c0>
 8006e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5a:	e792      	b.n	8006d82 <_printf_float+0x1e6>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	4652      	mov	r2, sl
 8006e60:	4631      	mov	r1, r6
 8006e62:	4628      	mov	r0, r5
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	f43f aef7 	beq.w	8006c5a <_printf_float+0xbe>
 8006e6c:	f109 0901 	add.w	r9, r9, #1
 8006e70:	e7ee      	b.n	8006e50 <_printf_float+0x2b4>
 8006e72:	bf00      	nop
 8006e74:	7fefffff 	.word	0x7fefffff
 8006e78:	08009ba8 	.word	0x08009ba8
 8006e7c:	08009bac 	.word	0x08009bac
 8006e80:	08009bb0 	.word	0x08009bb0
 8006e84:	08009bb4 	.word	0x08009bb4
 8006e88:	08009bb8 	.word	0x08009bb8
 8006e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e90:	429a      	cmp	r2, r3
 8006e92:	bfa8      	it	ge
 8006e94:	461a      	movge	r2, r3
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	4691      	mov	r9, r2
 8006e9a:	dc37      	bgt.n	8006f0c <_printf_float+0x370>
 8006e9c:	f04f 0b00 	mov.w	fp, #0
 8006ea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea4:	f104 021a 	add.w	r2, r4, #26
 8006ea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eaa:	9305      	str	r3, [sp, #20]
 8006eac:	eba3 0309 	sub.w	r3, r3, r9
 8006eb0:	455b      	cmp	r3, fp
 8006eb2:	dc33      	bgt.n	8006f1c <_printf_float+0x380>
 8006eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	db3b      	blt.n	8006f34 <_printf_float+0x398>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	07da      	lsls	r2, r3, #31
 8006ec0:	d438      	bmi.n	8006f34 <_printf_float+0x398>
 8006ec2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ec6:	eba2 0903 	sub.w	r9, r2, r3
 8006eca:	9b05      	ldr	r3, [sp, #20]
 8006ecc:	1ad2      	subs	r2, r2, r3
 8006ece:	4591      	cmp	r9, r2
 8006ed0:	bfa8      	it	ge
 8006ed2:	4691      	movge	r9, r2
 8006ed4:	f1b9 0f00 	cmp.w	r9, #0
 8006ed8:	dc35      	bgt.n	8006f46 <_printf_float+0x3aa>
 8006eda:	f04f 0800 	mov.w	r8, #0
 8006ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee2:	f104 0a1a 	add.w	sl, r4, #26
 8006ee6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	eba3 0309 	sub.w	r3, r3, r9
 8006ef0:	4543      	cmp	r3, r8
 8006ef2:	f77f af79 	ble.w	8006de8 <_printf_float+0x24c>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4652      	mov	r2, sl
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	f43f aeaa 	beq.w	8006c5a <_printf_float+0xbe>
 8006f06:	f108 0801 	add.w	r8, r8, #1
 8006f0a:	e7ec      	b.n	8006ee6 <_printf_float+0x34a>
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4642      	mov	r2, r8
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	d1c0      	bne.n	8006e9c <_printf_float+0x300>
 8006f1a:	e69e      	b.n	8006c5a <_printf_float+0xbe>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4628      	mov	r0, r5
 8006f22:	9205      	str	r2, [sp, #20]
 8006f24:	47b8      	blx	r7
 8006f26:	3001      	adds	r0, #1
 8006f28:	f43f ae97 	beq.w	8006c5a <_printf_float+0xbe>
 8006f2c:	9a05      	ldr	r2, [sp, #20]
 8006f2e:	f10b 0b01 	add.w	fp, fp, #1
 8006f32:	e7b9      	b.n	8006ea8 <_printf_float+0x30c>
 8006f34:	ee18 3a10 	vmov	r3, s16
 8006f38:	4652      	mov	r2, sl
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1be      	bne.n	8006ec2 <_printf_float+0x326>
 8006f44:	e689      	b.n	8006c5a <_printf_float+0xbe>
 8006f46:	9a05      	ldr	r2, [sp, #20]
 8006f48:	464b      	mov	r3, r9
 8006f4a:	4442      	add	r2, r8
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4628      	mov	r0, r5
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	d1c1      	bne.n	8006eda <_printf_float+0x33e>
 8006f56:	e680      	b.n	8006c5a <_printf_float+0xbe>
 8006f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f5a:	2a01      	cmp	r2, #1
 8006f5c:	dc01      	bgt.n	8006f62 <_printf_float+0x3c6>
 8006f5e:	07db      	lsls	r3, r3, #31
 8006f60:	d53a      	bpl.n	8006fd8 <_printf_float+0x43c>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4642      	mov	r2, r8
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f43f ae74 	beq.w	8006c5a <_printf_float+0xbe>
 8006f72:	ee18 3a10 	vmov	r3, s16
 8006f76:	4652      	mov	r2, sl
 8006f78:	4631      	mov	r1, r6
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	47b8      	blx	r7
 8006f7e:	3001      	adds	r0, #1
 8006f80:	f43f ae6b 	beq.w	8006c5a <_printf_float+0xbe>
 8006f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006f90:	f7f9 fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f94:	b9d8      	cbnz	r0, 8006fce <_printf_float+0x432>
 8006f96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f9a:	f108 0201 	add.w	r2, r8, #1
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d10e      	bne.n	8006fc6 <_printf_float+0x42a>
 8006fa8:	e657      	b.n	8006c5a <_printf_float+0xbe>
 8006faa:	2301      	movs	r3, #1
 8006fac:	4652      	mov	r2, sl
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f ae50 	beq.w	8006c5a <_printf_float+0xbe>
 8006fba:	f108 0801 	add.w	r8, r8, #1
 8006fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	4543      	cmp	r3, r8
 8006fc4:	dcf1      	bgt.n	8006faa <_printf_float+0x40e>
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fcc:	e6da      	b.n	8006d84 <_printf_float+0x1e8>
 8006fce:	f04f 0800 	mov.w	r8, #0
 8006fd2:	f104 0a1a 	add.w	sl, r4, #26
 8006fd6:	e7f2      	b.n	8006fbe <_printf_float+0x422>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4642      	mov	r2, r8
 8006fdc:	e7df      	b.n	8006f9e <_printf_float+0x402>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	464a      	mov	r2, r9
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	f43f ae36 	beq.w	8006c5a <_printf_float+0xbe>
 8006fee:	f108 0801 	add.w	r8, r8, #1
 8006ff2:	68e3      	ldr	r3, [r4, #12]
 8006ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ff6:	1a5b      	subs	r3, r3, r1
 8006ff8:	4543      	cmp	r3, r8
 8006ffa:	dcf0      	bgt.n	8006fde <_printf_float+0x442>
 8006ffc:	e6f8      	b.n	8006df0 <_printf_float+0x254>
 8006ffe:	f04f 0800 	mov.w	r8, #0
 8007002:	f104 0919 	add.w	r9, r4, #25
 8007006:	e7f4      	b.n	8006ff2 <_printf_float+0x456>

08007008 <_printf_common>:
 8007008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	4616      	mov	r6, r2
 800700e:	4699      	mov	r9, r3
 8007010:	688a      	ldr	r2, [r1, #8]
 8007012:	690b      	ldr	r3, [r1, #16]
 8007014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007018:	4293      	cmp	r3, r2
 800701a:	bfb8      	it	lt
 800701c:	4613      	movlt	r3, r2
 800701e:	6033      	str	r3, [r6, #0]
 8007020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007024:	4607      	mov	r7, r0
 8007026:	460c      	mov	r4, r1
 8007028:	b10a      	cbz	r2, 800702e <_printf_common+0x26>
 800702a:	3301      	adds	r3, #1
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	0699      	lsls	r1, r3, #26
 8007032:	bf42      	ittt	mi
 8007034:	6833      	ldrmi	r3, [r6, #0]
 8007036:	3302      	addmi	r3, #2
 8007038:	6033      	strmi	r3, [r6, #0]
 800703a:	6825      	ldr	r5, [r4, #0]
 800703c:	f015 0506 	ands.w	r5, r5, #6
 8007040:	d106      	bne.n	8007050 <_printf_common+0x48>
 8007042:	f104 0a19 	add.w	sl, r4, #25
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	6832      	ldr	r2, [r6, #0]
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	42ab      	cmp	r3, r5
 800704e:	dc26      	bgt.n	800709e <_printf_common+0x96>
 8007050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007054:	1e13      	subs	r3, r2, #0
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	bf18      	it	ne
 800705a:	2301      	movne	r3, #1
 800705c:	0692      	lsls	r2, r2, #26
 800705e:	d42b      	bmi.n	80070b8 <_printf_common+0xb0>
 8007060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007064:	4649      	mov	r1, r9
 8007066:	4638      	mov	r0, r7
 8007068:	47c0      	blx	r8
 800706a:	3001      	adds	r0, #1
 800706c:	d01e      	beq.n	80070ac <_printf_common+0xa4>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	6922      	ldr	r2, [r4, #16]
 8007072:	f003 0306 	and.w	r3, r3, #6
 8007076:	2b04      	cmp	r3, #4
 8007078:	bf02      	ittt	eq
 800707a:	68e5      	ldreq	r5, [r4, #12]
 800707c:	6833      	ldreq	r3, [r6, #0]
 800707e:	1aed      	subeq	r5, r5, r3
 8007080:	68a3      	ldr	r3, [r4, #8]
 8007082:	bf0c      	ite	eq
 8007084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007088:	2500      	movne	r5, #0
 800708a:	4293      	cmp	r3, r2
 800708c:	bfc4      	itt	gt
 800708e:	1a9b      	subgt	r3, r3, r2
 8007090:	18ed      	addgt	r5, r5, r3
 8007092:	2600      	movs	r6, #0
 8007094:	341a      	adds	r4, #26
 8007096:	42b5      	cmp	r5, r6
 8007098:	d11a      	bne.n	80070d0 <_printf_common+0xc8>
 800709a:	2000      	movs	r0, #0
 800709c:	e008      	b.n	80070b0 <_printf_common+0xa8>
 800709e:	2301      	movs	r3, #1
 80070a0:	4652      	mov	r2, sl
 80070a2:	4649      	mov	r1, r9
 80070a4:	4638      	mov	r0, r7
 80070a6:	47c0      	blx	r8
 80070a8:	3001      	adds	r0, #1
 80070aa:	d103      	bne.n	80070b4 <_printf_common+0xac>
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295
 80070b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b4:	3501      	adds	r5, #1
 80070b6:	e7c6      	b.n	8007046 <_printf_common+0x3e>
 80070b8:	18e1      	adds	r1, r4, r3
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	2030      	movs	r0, #48	; 0x30
 80070be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070c2:	4422      	add	r2, r4
 80070c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070cc:	3302      	adds	r3, #2
 80070ce:	e7c7      	b.n	8007060 <_printf_common+0x58>
 80070d0:	2301      	movs	r3, #1
 80070d2:	4622      	mov	r2, r4
 80070d4:	4649      	mov	r1, r9
 80070d6:	4638      	mov	r0, r7
 80070d8:	47c0      	blx	r8
 80070da:	3001      	adds	r0, #1
 80070dc:	d0e6      	beq.n	80070ac <_printf_common+0xa4>
 80070de:	3601      	adds	r6, #1
 80070e0:	e7d9      	b.n	8007096 <_printf_common+0x8e>
	...

080070e4 <_printf_i>:
 80070e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	7e0f      	ldrb	r7, [r1, #24]
 80070ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070ec:	2f78      	cmp	r7, #120	; 0x78
 80070ee:	4691      	mov	r9, r2
 80070f0:	4680      	mov	r8, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	469a      	mov	sl, r3
 80070f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070fa:	d807      	bhi.n	800710c <_printf_i+0x28>
 80070fc:	2f62      	cmp	r7, #98	; 0x62
 80070fe:	d80a      	bhi.n	8007116 <_printf_i+0x32>
 8007100:	2f00      	cmp	r7, #0
 8007102:	f000 80d4 	beq.w	80072ae <_printf_i+0x1ca>
 8007106:	2f58      	cmp	r7, #88	; 0x58
 8007108:	f000 80c0 	beq.w	800728c <_printf_i+0x1a8>
 800710c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007114:	e03a      	b.n	800718c <_printf_i+0xa8>
 8007116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800711a:	2b15      	cmp	r3, #21
 800711c:	d8f6      	bhi.n	800710c <_printf_i+0x28>
 800711e:	a101      	add	r1, pc, #4	; (adr r1, 8007124 <_printf_i+0x40>)
 8007120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007124:	0800717d 	.word	0x0800717d
 8007128:	08007191 	.word	0x08007191
 800712c:	0800710d 	.word	0x0800710d
 8007130:	0800710d 	.word	0x0800710d
 8007134:	0800710d 	.word	0x0800710d
 8007138:	0800710d 	.word	0x0800710d
 800713c:	08007191 	.word	0x08007191
 8007140:	0800710d 	.word	0x0800710d
 8007144:	0800710d 	.word	0x0800710d
 8007148:	0800710d 	.word	0x0800710d
 800714c:	0800710d 	.word	0x0800710d
 8007150:	08007295 	.word	0x08007295
 8007154:	080071bd 	.word	0x080071bd
 8007158:	0800724f 	.word	0x0800724f
 800715c:	0800710d 	.word	0x0800710d
 8007160:	0800710d 	.word	0x0800710d
 8007164:	080072b7 	.word	0x080072b7
 8007168:	0800710d 	.word	0x0800710d
 800716c:	080071bd 	.word	0x080071bd
 8007170:	0800710d 	.word	0x0800710d
 8007174:	0800710d 	.word	0x0800710d
 8007178:	08007257 	.word	0x08007257
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	1d1a      	adds	r2, r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	602a      	str	r2, [r5, #0]
 8007184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800718c:	2301      	movs	r3, #1
 800718e:	e09f      	b.n	80072d0 <_printf_i+0x1ec>
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	682b      	ldr	r3, [r5, #0]
 8007194:	0607      	lsls	r7, r0, #24
 8007196:	f103 0104 	add.w	r1, r3, #4
 800719a:	6029      	str	r1, [r5, #0]
 800719c:	d501      	bpl.n	80071a2 <_printf_i+0xbe>
 800719e:	681e      	ldr	r6, [r3, #0]
 80071a0:	e003      	b.n	80071aa <_printf_i+0xc6>
 80071a2:	0646      	lsls	r6, r0, #25
 80071a4:	d5fb      	bpl.n	800719e <_printf_i+0xba>
 80071a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	da03      	bge.n	80071b6 <_printf_i+0xd2>
 80071ae:	232d      	movs	r3, #45	; 0x2d
 80071b0:	4276      	negs	r6, r6
 80071b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b6:	485a      	ldr	r0, [pc, #360]	; (8007320 <_printf_i+0x23c>)
 80071b8:	230a      	movs	r3, #10
 80071ba:	e012      	b.n	80071e2 <_printf_i+0xfe>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	6820      	ldr	r0, [r4, #0]
 80071c0:	1d19      	adds	r1, r3, #4
 80071c2:	6029      	str	r1, [r5, #0]
 80071c4:	0605      	lsls	r5, r0, #24
 80071c6:	d501      	bpl.n	80071cc <_printf_i+0xe8>
 80071c8:	681e      	ldr	r6, [r3, #0]
 80071ca:	e002      	b.n	80071d2 <_printf_i+0xee>
 80071cc:	0641      	lsls	r1, r0, #25
 80071ce:	d5fb      	bpl.n	80071c8 <_printf_i+0xe4>
 80071d0:	881e      	ldrh	r6, [r3, #0]
 80071d2:	4853      	ldr	r0, [pc, #332]	; (8007320 <_printf_i+0x23c>)
 80071d4:	2f6f      	cmp	r7, #111	; 0x6f
 80071d6:	bf0c      	ite	eq
 80071d8:	2308      	moveq	r3, #8
 80071da:	230a      	movne	r3, #10
 80071dc:	2100      	movs	r1, #0
 80071de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071e2:	6865      	ldr	r5, [r4, #4]
 80071e4:	60a5      	str	r5, [r4, #8]
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	bfa2      	ittt	ge
 80071ea:	6821      	ldrge	r1, [r4, #0]
 80071ec:	f021 0104 	bicge.w	r1, r1, #4
 80071f0:	6021      	strge	r1, [r4, #0]
 80071f2:	b90e      	cbnz	r6, 80071f8 <_printf_i+0x114>
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	d04b      	beq.n	8007290 <_printf_i+0x1ac>
 80071f8:	4615      	mov	r5, r2
 80071fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80071fe:	fb03 6711 	mls	r7, r3, r1, r6
 8007202:	5dc7      	ldrb	r7, [r0, r7]
 8007204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007208:	4637      	mov	r7, r6
 800720a:	42bb      	cmp	r3, r7
 800720c:	460e      	mov	r6, r1
 800720e:	d9f4      	bls.n	80071fa <_printf_i+0x116>
 8007210:	2b08      	cmp	r3, #8
 8007212:	d10b      	bne.n	800722c <_printf_i+0x148>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	07de      	lsls	r6, r3, #31
 8007218:	d508      	bpl.n	800722c <_printf_i+0x148>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	6861      	ldr	r1, [r4, #4]
 800721e:	4299      	cmp	r1, r3
 8007220:	bfde      	ittt	le
 8007222:	2330      	movle	r3, #48	; 0x30
 8007224:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007228:	f105 35ff 	addle.w	r5, r5, #4294967295
 800722c:	1b52      	subs	r2, r2, r5
 800722e:	6122      	str	r2, [r4, #16]
 8007230:	f8cd a000 	str.w	sl, [sp]
 8007234:	464b      	mov	r3, r9
 8007236:	aa03      	add	r2, sp, #12
 8007238:	4621      	mov	r1, r4
 800723a:	4640      	mov	r0, r8
 800723c:	f7ff fee4 	bl	8007008 <_printf_common>
 8007240:	3001      	adds	r0, #1
 8007242:	d14a      	bne.n	80072da <_printf_i+0x1f6>
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	b004      	add	sp, #16
 800724a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	f043 0320 	orr.w	r3, r3, #32
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	4833      	ldr	r0, [pc, #204]	; (8007324 <_printf_i+0x240>)
 8007258:	2778      	movs	r7, #120	; 0x78
 800725a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	6829      	ldr	r1, [r5, #0]
 8007262:	061f      	lsls	r7, r3, #24
 8007264:	f851 6b04 	ldr.w	r6, [r1], #4
 8007268:	d402      	bmi.n	8007270 <_printf_i+0x18c>
 800726a:	065f      	lsls	r7, r3, #25
 800726c:	bf48      	it	mi
 800726e:	b2b6      	uxthmi	r6, r6
 8007270:	07df      	lsls	r7, r3, #31
 8007272:	bf48      	it	mi
 8007274:	f043 0320 	orrmi.w	r3, r3, #32
 8007278:	6029      	str	r1, [r5, #0]
 800727a:	bf48      	it	mi
 800727c:	6023      	strmi	r3, [r4, #0]
 800727e:	b91e      	cbnz	r6, 8007288 <_printf_i+0x1a4>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	f023 0320 	bic.w	r3, r3, #32
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	2310      	movs	r3, #16
 800728a:	e7a7      	b.n	80071dc <_printf_i+0xf8>
 800728c:	4824      	ldr	r0, [pc, #144]	; (8007320 <_printf_i+0x23c>)
 800728e:	e7e4      	b.n	800725a <_printf_i+0x176>
 8007290:	4615      	mov	r5, r2
 8007292:	e7bd      	b.n	8007210 <_printf_i+0x12c>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	6826      	ldr	r6, [r4, #0]
 8007298:	6961      	ldr	r1, [r4, #20]
 800729a:	1d18      	adds	r0, r3, #4
 800729c:	6028      	str	r0, [r5, #0]
 800729e:	0635      	lsls	r5, r6, #24
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	d501      	bpl.n	80072a8 <_printf_i+0x1c4>
 80072a4:	6019      	str	r1, [r3, #0]
 80072a6:	e002      	b.n	80072ae <_printf_i+0x1ca>
 80072a8:	0670      	lsls	r0, r6, #25
 80072aa:	d5fb      	bpl.n	80072a4 <_printf_i+0x1c0>
 80072ac:	8019      	strh	r1, [r3, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	4615      	mov	r5, r2
 80072b4:	e7bc      	b.n	8007230 <_printf_i+0x14c>
 80072b6:	682b      	ldr	r3, [r5, #0]
 80072b8:	1d1a      	adds	r2, r3, #4
 80072ba:	602a      	str	r2, [r5, #0]
 80072bc:	681d      	ldr	r5, [r3, #0]
 80072be:	6862      	ldr	r2, [r4, #4]
 80072c0:	2100      	movs	r1, #0
 80072c2:	4628      	mov	r0, r5
 80072c4:	f7f8 ff8c 	bl	80001e0 <memchr>
 80072c8:	b108      	cbz	r0, 80072ce <_printf_i+0x1ea>
 80072ca:	1b40      	subs	r0, r0, r5
 80072cc:	6060      	str	r0, [r4, #4]
 80072ce:	6863      	ldr	r3, [r4, #4]
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	2300      	movs	r3, #0
 80072d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d8:	e7aa      	b.n	8007230 <_printf_i+0x14c>
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	462a      	mov	r2, r5
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	47d0      	blx	sl
 80072e4:	3001      	adds	r0, #1
 80072e6:	d0ad      	beq.n	8007244 <_printf_i+0x160>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	079b      	lsls	r3, r3, #30
 80072ec:	d413      	bmi.n	8007316 <_printf_i+0x232>
 80072ee:	68e0      	ldr	r0, [r4, #12]
 80072f0:	9b03      	ldr	r3, [sp, #12]
 80072f2:	4298      	cmp	r0, r3
 80072f4:	bfb8      	it	lt
 80072f6:	4618      	movlt	r0, r3
 80072f8:	e7a6      	b.n	8007248 <_printf_i+0x164>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4632      	mov	r2, r6
 80072fe:	4649      	mov	r1, r9
 8007300:	4640      	mov	r0, r8
 8007302:	47d0      	blx	sl
 8007304:	3001      	adds	r0, #1
 8007306:	d09d      	beq.n	8007244 <_printf_i+0x160>
 8007308:	3501      	adds	r5, #1
 800730a:	68e3      	ldr	r3, [r4, #12]
 800730c:	9903      	ldr	r1, [sp, #12]
 800730e:	1a5b      	subs	r3, r3, r1
 8007310:	42ab      	cmp	r3, r5
 8007312:	dcf2      	bgt.n	80072fa <_printf_i+0x216>
 8007314:	e7eb      	b.n	80072ee <_printf_i+0x20a>
 8007316:	2500      	movs	r5, #0
 8007318:	f104 0619 	add.w	r6, r4, #25
 800731c:	e7f5      	b.n	800730a <_printf_i+0x226>
 800731e:	bf00      	nop
 8007320:	08009bba 	.word	0x08009bba
 8007324:	08009bcb 	.word	0x08009bcb

08007328 <std>:
 8007328:	2300      	movs	r3, #0
 800732a:	b510      	push	{r4, lr}
 800732c:	4604      	mov	r4, r0
 800732e:	e9c0 3300 	strd	r3, r3, [r0]
 8007332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007336:	6083      	str	r3, [r0, #8]
 8007338:	8181      	strh	r1, [r0, #12]
 800733a:	6643      	str	r3, [r0, #100]	; 0x64
 800733c:	81c2      	strh	r2, [r0, #14]
 800733e:	6183      	str	r3, [r0, #24]
 8007340:	4619      	mov	r1, r3
 8007342:	2208      	movs	r2, #8
 8007344:	305c      	adds	r0, #92	; 0x5c
 8007346:	f000 f914 	bl	8007572 <memset>
 800734a:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <std+0x58>)
 800734c:	6263      	str	r3, [r4, #36]	; 0x24
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <std+0x5c>)
 8007350:	62a3      	str	r3, [r4, #40]	; 0x28
 8007352:	4b0d      	ldr	r3, [pc, #52]	; (8007388 <std+0x60>)
 8007354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007356:	4b0d      	ldr	r3, [pc, #52]	; (800738c <std+0x64>)
 8007358:	6323      	str	r3, [r4, #48]	; 0x30
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <std+0x68>)
 800735c:	6224      	str	r4, [r4, #32]
 800735e:	429c      	cmp	r4, r3
 8007360:	d006      	beq.n	8007370 <std+0x48>
 8007362:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007366:	4294      	cmp	r4, r2
 8007368:	d002      	beq.n	8007370 <std+0x48>
 800736a:	33d0      	adds	r3, #208	; 0xd0
 800736c:	429c      	cmp	r4, r3
 800736e:	d105      	bne.n	800737c <std+0x54>
 8007370:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007378:	f000 b9ce 	b.w	8007718 <__retarget_lock_init_recursive>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	bf00      	nop
 8007380:	080074ed 	.word	0x080074ed
 8007384:	0800750f 	.word	0x0800750f
 8007388:	08007547 	.word	0x08007547
 800738c:	0800756b 	.word	0x0800756b
 8007390:	200043b4 	.word	0x200043b4

08007394 <stdio_exit_handler>:
 8007394:	4a02      	ldr	r2, [pc, #8]	; (80073a0 <stdio_exit_handler+0xc>)
 8007396:	4903      	ldr	r1, [pc, #12]	; (80073a4 <stdio_exit_handler+0x10>)
 8007398:	4803      	ldr	r0, [pc, #12]	; (80073a8 <stdio_exit_handler+0x14>)
 800739a:	f000 b869 	b.w	8007470 <_fwalk_sglue>
 800739e:	bf00      	nop
 80073a0:	20000014 	.word	0x20000014
 80073a4:	080090e9 	.word	0x080090e9
 80073a8:	20000020 	.word	0x20000020

080073ac <cleanup_stdio>:
 80073ac:	6841      	ldr	r1, [r0, #4]
 80073ae:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <cleanup_stdio+0x34>)
 80073b0:	4299      	cmp	r1, r3
 80073b2:	b510      	push	{r4, lr}
 80073b4:	4604      	mov	r4, r0
 80073b6:	d001      	beq.n	80073bc <cleanup_stdio+0x10>
 80073b8:	f001 fe96 	bl	80090e8 <_fflush_r>
 80073bc:	68a1      	ldr	r1, [r4, #8]
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <cleanup_stdio+0x38>)
 80073c0:	4299      	cmp	r1, r3
 80073c2:	d002      	beq.n	80073ca <cleanup_stdio+0x1e>
 80073c4:	4620      	mov	r0, r4
 80073c6:	f001 fe8f 	bl	80090e8 <_fflush_r>
 80073ca:	68e1      	ldr	r1, [r4, #12]
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <cleanup_stdio+0x3c>)
 80073ce:	4299      	cmp	r1, r3
 80073d0:	d004      	beq.n	80073dc <cleanup_stdio+0x30>
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d8:	f001 be86 	b.w	80090e8 <_fflush_r>
 80073dc:	bd10      	pop	{r4, pc}
 80073de:	bf00      	nop
 80073e0:	200043b4 	.word	0x200043b4
 80073e4:	2000441c 	.word	0x2000441c
 80073e8:	20004484 	.word	0x20004484

080073ec <global_stdio_init.part.0>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	4b0b      	ldr	r3, [pc, #44]	; (800741c <global_stdio_init.part.0+0x30>)
 80073f0:	4c0b      	ldr	r4, [pc, #44]	; (8007420 <global_stdio_init.part.0+0x34>)
 80073f2:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <global_stdio_init.part.0+0x38>)
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	4620      	mov	r0, r4
 80073f8:	2200      	movs	r2, #0
 80073fa:	2104      	movs	r1, #4
 80073fc:	f7ff ff94 	bl	8007328 <std>
 8007400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007404:	2201      	movs	r2, #1
 8007406:	2109      	movs	r1, #9
 8007408:	f7ff ff8e 	bl	8007328 <std>
 800740c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007410:	2202      	movs	r2, #2
 8007412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007416:	2112      	movs	r1, #18
 8007418:	f7ff bf86 	b.w	8007328 <std>
 800741c:	200044ec 	.word	0x200044ec
 8007420:	200043b4 	.word	0x200043b4
 8007424:	08007395 	.word	0x08007395

08007428 <__sfp_lock_acquire>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__sfp_lock_acquire+0x8>)
 800742a:	f000 b976 	b.w	800771a <__retarget_lock_acquire_recursive>
 800742e:	bf00      	nop
 8007430:	200044f5 	.word	0x200044f5

08007434 <__sfp_lock_release>:
 8007434:	4801      	ldr	r0, [pc, #4]	; (800743c <__sfp_lock_release+0x8>)
 8007436:	f000 b971 	b.w	800771c <__retarget_lock_release_recursive>
 800743a:	bf00      	nop
 800743c:	200044f5 	.word	0x200044f5

08007440 <__sinit>:
 8007440:	b510      	push	{r4, lr}
 8007442:	4604      	mov	r4, r0
 8007444:	f7ff fff0 	bl	8007428 <__sfp_lock_acquire>
 8007448:	6a23      	ldr	r3, [r4, #32]
 800744a:	b11b      	cbz	r3, 8007454 <__sinit+0x14>
 800744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007450:	f7ff bff0 	b.w	8007434 <__sfp_lock_release>
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <__sinit+0x28>)
 8007456:	6223      	str	r3, [r4, #32]
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <__sinit+0x2c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1f5      	bne.n	800744c <__sinit+0xc>
 8007460:	f7ff ffc4 	bl	80073ec <global_stdio_init.part.0>
 8007464:	e7f2      	b.n	800744c <__sinit+0xc>
 8007466:	bf00      	nop
 8007468:	080073ad 	.word	0x080073ad
 800746c:	200044ec 	.word	0x200044ec

08007470 <_fwalk_sglue>:
 8007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007474:	4607      	mov	r7, r0
 8007476:	4688      	mov	r8, r1
 8007478:	4614      	mov	r4, r2
 800747a:	2600      	movs	r6, #0
 800747c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007480:	f1b9 0901 	subs.w	r9, r9, #1
 8007484:	d505      	bpl.n	8007492 <_fwalk_sglue+0x22>
 8007486:	6824      	ldr	r4, [r4, #0]
 8007488:	2c00      	cmp	r4, #0
 800748a:	d1f7      	bne.n	800747c <_fwalk_sglue+0xc>
 800748c:	4630      	mov	r0, r6
 800748e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007492:	89ab      	ldrh	r3, [r5, #12]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d907      	bls.n	80074a8 <_fwalk_sglue+0x38>
 8007498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800749c:	3301      	adds	r3, #1
 800749e:	d003      	beq.n	80074a8 <_fwalk_sglue+0x38>
 80074a0:	4629      	mov	r1, r5
 80074a2:	4638      	mov	r0, r7
 80074a4:	47c0      	blx	r8
 80074a6:	4306      	orrs	r6, r0
 80074a8:	3568      	adds	r5, #104	; 0x68
 80074aa:	e7e9      	b.n	8007480 <_fwalk_sglue+0x10>

080074ac <siprintf>:
 80074ac:	b40e      	push	{r1, r2, r3}
 80074ae:	b500      	push	{lr}
 80074b0:	b09c      	sub	sp, #112	; 0x70
 80074b2:	ab1d      	add	r3, sp, #116	; 0x74
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	9006      	str	r0, [sp, #24]
 80074b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074bc:	4809      	ldr	r0, [pc, #36]	; (80074e4 <siprintf+0x38>)
 80074be:	9107      	str	r1, [sp, #28]
 80074c0:	9104      	str	r1, [sp, #16]
 80074c2:	4909      	ldr	r1, [pc, #36]	; (80074e8 <siprintf+0x3c>)
 80074c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c8:	9105      	str	r1, [sp, #20]
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	a902      	add	r1, sp, #8
 80074d0:	f001 fc86 	bl	8008de0 <_svfiprintf_r>
 80074d4:	9b02      	ldr	r3, [sp, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	b01c      	add	sp, #112	; 0x70
 80074dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e0:	b003      	add	sp, #12
 80074e2:	4770      	bx	lr
 80074e4:	2000006c 	.word	0x2000006c
 80074e8:	ffff0208 	.word	0xffff0208

080074ec <__sread>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	460c      	mov	r4, r1
 80074f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f4:	f000 f8c2 	bl	800767c <_read_r>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	bfab      	itete	ge
 80074fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007500:	181b      	addge	r3, r3, r0
 8007502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007506:	bfac      	ite	ge
 8007508:	6563      	strge	r3, [r4, #84]	; 0x54
 800750a:	81a3      	strhlt	r3, [r4, #12]
 800750c:	bd10      	pop	{r4, pc}

0800750e <__swrite>:
 800750e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007512:	461f      	mov	r7, r3
 8007514:	898b      	ldrh	r3, [r1, #12]
 8007516:	05db      	lsls	r3, r3, #23
 8007518:	4605      	mov	r5, r0
 800751a:	460c      	mov	r4, r1
 800751c:	4616      	mov	r6, r2
 800751e:	d505      	bpl.n	800752c <__swrite+0x1e>
 8007520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007524:	2302      	movs	r3, #2
 8007526:	2200      	movs	r2, #0
 8007528:	f000 f896 	bl	8007658 <_lseek_r>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	4632      	mov	r2, r6
 800753a:	463b      	mov	r3, r7
 800753c:	4628      	mov	r0, r5
 800753e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007542:	f000 b8ad 	b.w	80076a0 <_write_r>

08007546 <__sseek>:
 8007546:	b510      	push	{r4, lr}
 8007548:	460c      	mov	r4, r1
 800754a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754e:	f000 f883 	bl	8007658 <_lseek_r>
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	bf15      	itete	ne
 8007558:	6560      	strne	r0, [r4, #84]	; 0x54
 800755a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800755e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007562:	81a3      	strheq	r3, [r4, #12]
 8007564:	bf18      	it	ne
 8007566:	81a3      	strhne	r3, [r4, #12]
 8007568:	bd10      	pop	{r4, pc}

0800756a <__sclose>:
 800756a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756e:	f000 b80d 	b.w	800758c <_close_r>

08007572 <memset>:
 8007572:	4402      	add	r2, r0
 8007574:	4603      	mov	r3, r0
 8007576:	4293      	cmp	r3, r2
 8007578:	d100      	bne.n	800757c <memset+0xa>
 800757a:	4770      	bx	lr
 800757c:	f803 1b01 	strb.w	r1, [r3], #1
 8007580:	e7f9      	b.n	8007576 <memset+0x4>
	...

08007584 <_localeconv_r>:
 8007584:	4800      	ldr	r0, [pc, #0]	; (8007588 <_localeconv_r+0x4>)
 8007586:	4770      	bx	lr
 8007588:	20000160 	.word	0x20000160

0800758c <_close_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d06      	ldr	r5, [pc, #24]	; (80075a8 <_close_r+0x1c>)
 8007590:	2300      	movs	r3, #0
 8007592:	4604      	mov	r4, r0
 8007594:	4608      	mov	r0, r1
 8007596:	602b      	str	r3, [r5, #0]
 8007598:	f7fa fd13 	bl	8001fc2 <_close>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_close_r+0x1a>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_close_r+0x1a>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	200044f0 	.word	0x200044f0

080075ac <_reclaim_reent>:
 80075ac:	4b29      	ldr	r3, [pc, #164]	; (8007654 <_reclaim_reent+0xa8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4283      	cmp	r3, r0
 80075b2:	b570      	push	{r4, r5, r6, lr}
 80075b4:	4604      	mov	r4, r0
 80075b6:	d04b      	beq.n	8007650 <_reclaim_reent+0xa4>
 80075b8:	69c3      	ldr	r3, [r0, #28]
 80075ba:	b143      	cbz	r3, 80075ce <_reclaim_reent+0x22>
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d144      	bne.n	800764c <_reclaim_reent+0xa0>
 80075c2:	69e3      	ldr	r3, [r4, #28]
 80075c4:	6819      	ldr	r1, [r3, #0]
 80075c6:	b111      	cbz	r1, 80075ce <_reclaim_reent+0x22>
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 ff33 	bl	8008434 <_free_r>
 80075ce:	6961      	ldr	r1, [r4, #20]
 80075d0:	b111      	cbz	r1, 80075d8 <_reclaim_reent+0x2c>
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 ff2e 	bl	8008434 <_free_r>
 80075d8:	69e1      	ldr	r1, [r4, #28]
 80075da:	b111      	cbz	r1, 80075e2 <_reclaim_reent+0x36>
 80075dc:	4620      	mov	r0, r4
 80075de:	f000 ff29 	bl	8008434 <_free_r>
 80075e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80075e4:	b111      	cbz	r1, 80075ec <_reclaim_reent+0x40>
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 ff24 	bl	8008434 <_free_r>
 80075ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ee:	b111      	cbz	r1, 80075f6 <_reclaim_reent+0x4a>
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 ff1f 	bl	8008434 <_free_r>
 80075f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80075f8:	b111      	cbz	r1, 8007600 <_reclaim_reent+0x54>
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 ff1a 	bl	8008434 <_free_r>
 8007600:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007602:	b111      	cbz	r1, 800760a <_reclaim_reent+0x5e>
 8007604:	4620      	mov	r0, r4
 8007606:	f000 ff15 	bl	8008434 <_free_r>
 800760a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800760c:	b111      	cbz	r1, 8007614 <_reclaim_reent+0x68>
 800760e:	4620      	mov	r0, r4
 8007610:	f000 ff10 	bl	8008434 <_free_r>
 8007614:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007616:	b111      	cbz	r1, 800761e <_reclaim_reent+0x72>
 8007618:	4620      	mov	r0, r4
 800761a:	f000 ff0b 	bl	8008434 <_free_r>
 800761e:	6a23      	ldr	r3, [r4, #32]
 8007620:	b1b3      	cbz	r3, 8007650 <_reclaim_reent+0xa4>
 8007622:	4620      	mov	r0, r4
 8007624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007628:	4718      	bx	r3
 800762a:	5949      	ldr	r1, [r1, r5]
 800762c:	b941      	cbnz	r1, 8007640 <_reclaim_reent+0x94>
 800762e:	3504      	adds	r5, #4
 8007630:	69e3      	ldr	r3, [r4, #28]
 8007632:	2d80      	cmp	r5, #128	; 0x80
 8007634:	68d9      	ldr	r1, [r3, #12]
 8007636:	d1f8      	bne.n	800762a <_reclaim_reent+0x7e>
 8007638:	4620      	mov	r0, r4
 800763a:	f000 fefb 	bl	8008434 <_free_r>
 800763e:	e7c0      	b.n	80075c2 <_reclaim_reent+0x16>
 8007640:	680e      	ldr	r6, [r1, #0]
 8007642:	4620      	mov	r0, r4
 8007644:	f000 fef6 	bl	8008434 <_free_r>
 8007648:	4631      	mov	r1, r6
 800764a:	e7ef      	b.n	800762c <_reclaim_reent+0x80>
 800764c:	2500      	movs	r5, #0
 800764e:	e7ef      	b.n	8007630 <_reclaim_reent+0x84>
 8007650:	bd70      	pop	{r4, r5, r6, pc}
 8007652:	bf00      	nop
 8007654:	2000006c 	.word	0x2000006c

08007658 <_lseek_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d07      	ldr	r5, [pc, #28]	; (8007678 <_lseek_r+0x20>)
 800765c:	4604      	mov	r4, r0
 800765e:	4608      	mov	r0, r1
 8007660:	4611      	mov	r1, r2
 8007662:	2200      	movs	r2, #0
 8007664:	602a      	str	r2, [r5, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	f7fa fcd2 	bl	8002010 <_lseek>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_lseek_r+0x1e>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_lseek_r+0x1e>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	200044f0 	.word	0x200044f0

0800767c <_read_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d07      	ldr	r5, [pc, #28]	; (800769c <_read_r+0x20>)
 8007680:	4604      	mov	r4, r0
 8007682:	4608      	mov	r0, r1
 8007684:	4611      	mov	r1, r2
 8007686:	2200      	movs	r2, #0
 8007688:	602a      	str	r2, [r5, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f7fa fc60 	bl	8001f50 <_read>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_read_r+0x1e>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_read_r+0x1e>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	200044f0 	.word	0x200044f0

080076a0 <_write_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d07      	ldr	r5, [pc, #28]	; (80076c0 <_write_r+0x20>)
 80076a4:	4604      	mov	r4, r0
 80076a6:	4608      	mov	r0, r1
 80076a8:	4611      	mov	r1, r2
 80076aa:	2200      	movs	r2, #0
 80076ac:	602a      	str	r2, [r5, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	f7fa fc6b 	bl	8001f8a <_write>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_write_r+0x1e>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_write_r+0x1e>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	200044f0 	.word	0x200044f0

080076c4 <__errno>:
 80076c4:	4b01      	ldr	r3, [pc, #4]	; (80076cc <__errno+0x8>)
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	2000006c 	.word	0x2000006c

080076d0 <__libc_init_array>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	4d0d      	ldr	r5, [pc, #52]	; (8007708 <__libc_init_array+0x38>)
 80076d4:	4c0d      	ldr	r4, [pc, #52]	; (800770c <__libc_init_array+0x3c>)
 80076d6:	1b64      	subs	r4, r4, r5
 80076d8:	10a4      	asrs	r4, r4, #2
 80076da:	2600      	movs	r6, #0
 80076dc:	42a6      	cmp	r6, r4
 80076de:	d109      	bne.n	80076f4 <__libc_init_array+0x24>
 80076e0:	4d0b      	ldr	r5, [pc, #44]	; (8007710 <__libc_init_array+0x40>)
 80076e2:	4c0c      	ldr	r4, [pc, #48]	; (8007714 <__libc_init_array+0x44>)
 80076e4:	f002 f9bc 	bl	8009a60 <_init>
 80076e8:	1b64      	subs	r4, r4, r5
 80076ea:	10a4      	asrs	r4, r4, #2
 80076ec:	2600      	movs	r6, #0
 80076ee:	42a6      	cmp	r6, r4
 80076f0:	d105      	bne.n	80076fe <__libc_init_array+0x2e>
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f8:	4798      	blx	r3
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7ee      	b.n	80076dc <__libc_init_array+0xc>
 80076fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007702:	4798      	blx	r3
 8007704:	3601      	adds	r6, #1
 8007706:	e7f2      	b.n	80076ee <__libc_init_array+0x1e>
 8007708:	08009f24 	.word	0x08009f24
 800770c:	08009f24 	.word	0x08009f24
 8007710:	08009f24 	.word	0x08009f24
 8007714:	08009f28 	.word	0x08009f28

08007718 <__retarget_lock_init_recursive>:
 8007718:	4770      	bx	lr

0800771a <__retarget_lock_acquire_recursive>:
 800771a:	4770      	bx	lr

0800771c <__retarget_lock_release_recursive>:
 800771c:	4770      	bx	lr

0800771e <memcpy>:
 800771e:	440a      	add	r2, r1
 8007720:	4291      	cmp	r1, r2
 8007722:	f100 33ff 	add.w	r3, r0, #4294967295
 8007726:	d100      	bne.n	800772a <memcpy+0xc>
 8007728:	4770      	bx	lr
 800772a:	b510      	push	{r4, lr}
 800772c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007734:	4291      	cmp	r1, r2
 8007736:	d1f9      	bne.n	800772c <memcpy+0xe>
 8007738:	bd10      	pop	{r4, pc}

0800773a <quorem>:
 800773a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773e:	6903      	ldr	r3, [r0, #16]
 8007740:	690c      	ldr	r4, [r1, #16]
 8007742:	42a3      	cmp	r3, r4
 8007744:	4607      	mov	r7, r0
 8007746:	db7e      	blt.n	8007846 <quorem+0x10c>
 8007748:	3c01      	subs	r4, #1
 800774a:	f101 0814 	add.w	r8, r1, #20
 800774e:	f100 0514 	add.w	r5, r0, #20
 8007752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800775c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007760:	3301      	adds	r3, #1
 8007762:	429a      	cmp	r2, r3
 8007764:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007768:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800776c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007770:	d331      	bcc.n	80077d6 <quorem+0x9c>
 8007772:	f04f 0e00 	mov.w	lr, #0
 8007776:	4640      	mov	r0, r8
 8007778:	46ac      	mov	ip, r5
 800777a:	46f2      	mov	sl, lr
 800777c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007780:	b293      	uxth	r3, r2
 8007782:	fb06 e303 	mla	r3, r6, r3, lr
 8007786:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800778a:	0c1a      	lsrs	r2, r3, #16
 800778c:	b29b      	uxth	r3, r3
 800778e:	ebaa 0303 	sub.w	r3, sl, r3
 8007792:	f8dc a000 	ldr.w	sl, [ip]
 8007796:	fa13 f38a 	uxtah	r3, r3, sl
 800779a:	fb06 220e 	mla	r2, r6, lr, r2
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077a6:	b292      	uxth	r2, r2
 80077a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80077b4:	4581      	cmp	r9, r0
 80077b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077ba:	f84c 3b04 	str.w	r3, [ip], #4
 80077be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077c2:	d2db      	bcs.n	800777c <quorem+0x42>
 80077c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80077c8:	b92b      	cbnz	r3, 80077d6 <quorem+0x9c>
 80077ca:	9b01      	ldr	r3, [sp, #4]
 80077cc:	3b04      	subs	r3, #4
 80077ce:	429d      	cmp	r5, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	d32c      	bcc.n	800782e <quorem+0xf4>
 80077d4:	613c      	str	r4, [r7, #16]
 80077d6:	4638      	mov	r0, r7
 80077d8:	f001 f9a8 	bl	8008b2c <__mcmp>
 80077dc:	2800      	cmp	r0, #0
 80077de:	db22      	blt.n	8007826 <quorem+0xec>
 80077e0:	3601      	adds	r6, #1
 80077e2:	4629      	mov	r1, r5
 80077e4:	2000      	movs	r0, #0
 80077e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80077ea:	f8d1 c000 	ldr.w	ip, [r1]
 80077ee:	b293      	uxth	r3, r2
 80077f0:	1ac3      	subs	r3, r0, r3
 80077f2:	0c12      	lsrs	r2, r2, #16
 80077f4:	fa13 f38c 	uxtah	r3, r3, ip
 80077f8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80077fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007800:	b29b      	uxth	r3, r3
 8007802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007806:	45c1      	cmp	r9, r8
 8007808:	f841 3b04 	str.w	r3, [r1], #4
 800780c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007810:	d2e9      	bcs.n	80077e6 <quorem+0xac>
 8007812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800781a:	b922      	cbnz	r2, 8007826 <quorem+0xec>
 800781c:	3b04      	subs	r3, #4
 800781e:	429d      	cmp	r5, r3
 8007820:	461a      	mov	r2, r3
 8007822:	d30a      	bcc.n	800783a <quorem+0x100>
 8007824:	613c      	str	r4, [r7, #16]
 8007826:	4630      	mov	r0, r6
 8007828:	b003      	add	sp, #12
 800782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	3b04      	subs	r3, #4
 8007832:	2a00      	cmp	r2, #0
 8007834:	d1ce      	bne.n	80077d4 <quorem+0x9a>
 8007836:	3c01      	subs	r4, #1
 8007838:	e7c9      	b.n	80077ce <quorem+0x94>
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	3b04      	subs	r3, #4
 800783e:	2a00      	cmp	r2, #0
 8007840:	d1f0      	bne.n	8007824 <quorem+0xea>
 8007842:	3c01      	subs	r4, #1
 8007844:	e7eb      	b.n	800781e <quorem+0xe4>
 8007846:	2000      	movs	r0, #0
 8007848:	e7ee      	b.n	8007828 <quorem+0xee>
 800784a:	0000      	movs	r0, r0
 800784c:	0000      	movs	r0, r0
	...

08007850 <_dtoa_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	ed2d 8b04 	vpush	{d8-d9}
 8007858:	69c5      	ldr	r5, [r0, #28]
 800785a:	b093      	sub	sp, #76	; 0x4c
 800785c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007860:	ec57 6b10 	vmov	r6, r7, d0
 8007864:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007868:	9107      	str	r1, [sp, #28]
 800786a:	4604      	mov	r4, r0
 800786c:	920a      	str	r2, [sp, #40]	; 0x28
 800786e:	930d      	str	r3, [sp, #52]	; 0x34
 8007870:	b975      	cbnz	r5, 8007890 <_dtoa_r+0x40>
 8007872:	2010      	movs	r0, #16
 8007874:	f000 fe2a 	bl	80084cc <malloc>
 8007878:	4602      	mov	r2, r0
 800787a:	61e0      	str	r0, [r4, #28]
 800787c:	b920      	cbnz	r0, 8007888 <_dtoa_r+0x38>
 800787e:	4bae      	ldr	r3, [pc, #696]	; (8007b38 <_dtoa_r+0x2e8>)
 8007880:	21ef      	movs	r1, #239	; 0xef
 8007882:	48ae      	ldr	r0, [pc, #696]	; (8007b3c <_dtoa_r+0x2ec>)
 8007884:	f001 fc82 	bl	800918c <__assert_func>
 8007888:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800788c:	6005      	str	r5, [r0, #0]
 800788e:	60c5      	str	r5, [r0, #12]
 8007890:	69e3      	ldr	r3, [r4, #28]
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	b151      	cbz	r1, 80078ac <_dtoa_r+0x5c>
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	604a      	str	r2, [r1, #4]
 800789a:	2301      	movs	r3, #1
 800789c:	4093      	lsls	r3, r2
 800789e:	608b      	str	r3, [r1, #8]
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 ff07 	bl	80086b4 <_Bfree>
 80078a6:	69e3      	ldr	r3, [r4, #28]
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	1e3b      	subs	r3, r7, #0
 80078ae:	bfbb      	ittet	lt
 80078b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	9303      	strlt	r3, [sp, #12]
 80078b6:	2300      	movge	r3, #0
 80078b8:	2201      	movlt	r2, #1
 80078ba:	bfac      	ite	ge
 80078bc:	f8c8 3000 	strge.w	r3, [r8]
 80078c0:	f8c8 2000 	strlt.w	r2, [r8]
 80078c4:	4b9e      	ldr	r3, [pc, #632]	; (8007b40 <_dtoa_r+0x2f0>)
 80078c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80078ca:	ea33 0308 	bics.w	r3, r3, r8
 80078ce:	d11b      	bne.n	8007908 <_dtoa_r+0xb8>
 80078d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80078dc:	4333      	orrs	r3, r6
 80078de:	f000 8593 	beq.w	8008408 <_dtoa_r+0xbb8>
 80078e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e4:	b963      	cbnz	r3, 8007900 <_dtoa_r+0xb0>
 80078e6:	4b97      	ldr	r3, [pc, #604]	; (8007b44 <_dtoa_r+0x2f4>)
 80078e8:	e027      	b.n	800793a <_dtoa_r+0xea>
 80078ea:	4b97      	ldr	r3, [pc, #604]	; (8007b48 <_dtoa_r+0x2f8>)
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	9800      	ldr	r0, [sp, #0]
 80078f6:	b013      	add	sp, #76	; 0x4c
 80078f8:	ecbd 8b04 	vpop	{d8-d9}
 80078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007900:	4b90      	ldr	r3, [pc, #576]	; (8007b44 <_dtoa_r+0x2f4>)
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	3303      	adds	r3, #3
 8007906:	e7f3      	b.n	80078f0 <_dtoa_r+0xa0>
 8007908:	ed9d 7b02 	vldr	d7, [sp, #8]
 800790c:	2200      	movs	r2, #0
 800790e:	ec51 0b17 	vmov	r0, r1, d7
 8007912:	eeb0 8a47 	vmov.f32	s16, s14
 8007916:	eef0 8a67 	vmov.f32	s17, s15
 800791a:	2300      	movs	r3, #0
 800791c:	f7f9 f8dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007920:	4681      	mov	r9, r0
 8007922:	b160      	cbz	r0, 800793e <_dtoa_r+0xee>
 8007924:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007926:	2301      	movs	r3, #1
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8568 	beq.w	8008402 <_dtoa_r+0xbb2>
 8007932:	4b86      	ldr	r3, [pc, #536]	; (8007b4c <_dtoa_r+0x2fc>)
 8007934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	3b01      	subs	r3, #1
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	e7da      	b.n	80078f4 <_dtoa_r+0xa4>
 800793e:	aa10      	add	r2, sp, #64	; 0x40
 8007940:	a911      	add	r1, sp, #68	; 0x44
 8007942:	4620      	mov	r0, r4
 8007944:	eeb0 0a48 	vmov.f32	s0, s16
 8007948:	eef0 0a68 	vmov.f32	s1, s17
 800794c:	f001 f994 	bl	8008c78 <__d2b>
 8007950:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007954:	4682      	mov	sl, r0
 8007956:	2d00      	cmp	r5, #0
 8007958:	d07f      	beq.n	8007a5a <_dtoa_r+0x20a>
 800795a:	ee18 3a90 	vmov	r3, s17
 800795e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007962:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007966:	ec51 0b18 	vmov	r0, r1, d8
 800796a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800796e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007972:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007976:	4619      	mov	r1, r3
 8007978:	2200      	movs	r2, #0
 800797a:	4b75      	ldr	r3, [pc, #468]	; (8007b50 <_dtoa_r+0x300>)
 800797c:	f7f8 fc8c 	bl	8000298 <__aeabi_dsub>
 8007980:	a367      	add	r3, pc, #412	; (adr r3, 8007b20 <_dtoa_r+0x2d0>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f7f8 fe3f 	bl	8000608 <__aeabi_dmul>
 800798a:	a367      	add	r3, pc, #412	; (adr r3, 8007b28 <_dtoa_r+0x2d8>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fc84 	bl	800029c <__adddf3>
 8007994:	4606      	mov	r6, r0
 8007996:	4628      	mov	r0, r5
 8007998:	460f      	mov	r7, r1
 800799a:	f7f8 fdcb 	bl	8000534 <__aeabi_i2d>
 800799e:	a364      	add	r3, pc, #400	; (adr r3, 8007b30 <_dtoa_r+0x2e0>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f7f8 fe30 	bl	8000608 <__aeabi_dmul>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4630      	mov	r0, r6
 80079ae:	4639      	mov	r1, r7
 80079b0:	f7f8 fc74 	bl	800029c <__adddf3>
 80079b4:	4606      	mov	r6, r0
 80079b6:	460f      	mov	r7, r1
 80079b8:	f7f9 f8d6 	bl	8000b68 <__aeabi_d2iz>
 80079bc:	2200      	movs	r2, #0
 80079be:	4683      	mov	fp, r0
 80079c0:	2300      	movs	r3, #0
 80079c2:	4630      	mov	r0, r6
 80079c4:	4639      	mov	r1, r7
 80079c6:	f7f9 f891 	bl	8000aec <__aeabi_dcmplt>
 80079ca:	b148      	cbz	r0, 80079e0 <_dtoa_r+0x190>
 80079cc:	4658      	mov	r0, fp
 80079ce:	f7f8 fdb1 	bl	8000534 <__aeabi_i2d>
 80079d2:	4632      	mov	r2, r6
 80079d4:	463b      	mov	r3, r7
 80079d6:	f7f9 f87f 	bl	8000ad8 <__aeabi_dcmpeq>
 80079da:	b908      	cbnz	r0, 80079e0 <_dtoa_r+0x190>
 80079dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079e0:	f1bb 0f16 	cmp.w	fp, #22
 80079e4:	d857      	bhi.n	8007a96 <_dtoa_r+0x246>
 80079e6:	4b5b      	ldr	r3, [pc, #364]	; (8007b54 <_dtoa_r+0x304>)
 80079e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	ec51 0b18 	vmov	r0, r1, d8
 80079f4:	f7f9 f87a 	bl	8000aec <__aeabi_dcmplt>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d04e      	beq.n	8007a9a <_dtoa_r+0x24a>
 80079fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a00:	2300      	movs	r3, #0
 8007a02:	930c      	str	r3, [sp, #48]	; 0x30
 8007a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a06:	1b5b      	subs	r3, r3, r5
 8007a08:	1e5a      	subs	r2, r3, #1
 8007a0a:	bf45      	ittet	mi
 8007a0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a10:	9305      	strmi	r3, [sp, #20]
 8007a12:	2300      	movpl	r3, #0
 8007a14:	2300      	movmi	r3, #0
 8007a16:	9206      	str	r2, [sp, #24]
 8007a18:	bf54      	ite	pl
 8007a1a:	9305      	strpl	r3, [sp, #20]
 8007a1c:	9306      	strmi	r3, [sp, #24]
 8007a1e:	f1bb 0f00 	cmp.w	fp, #0
 8007a22:	db3c      	blt.n	8007a9e <_dtoa_r+0x24e>
 8007a24:	9b06      	ldr	r3, [sp, #24]
 8007a26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007a2a:	445b      	add	r3, fp
 8007a2c:	9306      	str	r3, [sp, #24]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9308      	str	r3, [sp, #32]
 8007a32:	9b07      	ldr	r3, [sp, #28]
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d868      	bhi.n	8007b0a <_dtoa_r+0x2ba>
 8007a38:	2b05      	cmp	r3, #5
 8007a3a:	bfc4      	itt	gt
 8007a3c:	3b04      	subgt	r3, #4
 8007a3e:	9307      	strgt	r3, [sp, #28]
 8007a40:	9b07      	ldr	r3, [sp, #28]
 8007a42:	f1a3 0302 	sub.w	r3, r3, #2
 8007a46:	bfcc      	ite	gt
 8007a48:	2500      	movgt	r5, #0
 8007a4a:	2501      	movle	r5, #1
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	f200 8085 	bhi.w	8007b5c <_dtoa_r+0x30c>
 8007a52:	e8df f003 	tbb	[pc, r3]
 8007a56:	3b2e      	.short	0x3b2e
 8007a58:	5839      	.short	0x5839
 8007a5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a5e:	441d      	add	r5, r3
 8007a60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a64:	2b20      	cmp	r3, #32
 8007a66:	bfc1      	itttt	gt
 8007a68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007a70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007a74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007a78:	bfd6      	itet	le
 8007a7a:	f1c3 0320 	rsble	r3, r3, #32
 8007a7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a82:	fa06 f003 	lslle.w	r0, r6, r3
 8007a86:	f7f8 fd45 	bl	8000514 <__aeabi_ui2d>
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007a90:	3d01      	subs	r5, #1
 8007a92:	920e      	str	r2, [sp, #56]	; 0x38
 8007a94:	e76f      	b.n	8007976 <_dtoa_r+0x126>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e7b3      	b.n	8007a02 <_dtoa_r+0x1b2>
 8007a9a:	900c      	str	r0, [sp, #48]	; 0x30
 8007a9c:	e7b2      	b.n	8007a04 <_dtoa_r+0x1b4>
 8007a9e:	9b05      	ldr	r3, [sp, #20]
 8007aa0:	eba3 030b 	sub.w	r3, r3, fp
 8007aa4:	9305      	str	r3, [sp, #20]
 8007aa6:	f1cb 0300 	rsb	r3, fp, #0
 8007aaa:	9308      	str	r3, [sp, #32]
 8007aac:	2300      	movs	r3, #0
 8007aae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ab0:	e7bf      	b.n	8007a32 <_dtoa_r+0x1e2>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	dc52      	bgt.n	8007b62 <_dtoa_r+0x312>
 8007abc:	2301      	movs	r3, #1
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	920a      	str	r2, [sp, #40]	; 0x28
 8007ac6:	e00b      	b.n	8007ae0 <_dtoa_r+0x290>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e7f3      	b.n	8007ab4 <_dtoa_r+0x264>
 8007acc:	2300      	movs	r3, #0
 8007ace:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad2:	445b      	add	r3, fp
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	bfb8      	it	lt
 8007ade:	2301      	movlt	r3, #1
 8007ae0:	69e0      	ldr	r0, [r4, #28]
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	f102 0614 	add.w	r6, r2, #20
 8007aea:	429e      	cmp	r6, r3
 8007aec:	d93d      	bls.n	8007b6a <_dtoa_r+0x31a>
 8007aee:	6041      	str	r1, [r0, #4]
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fd9f 	bl	8008634 <_Balloc>
 8007af6:	9000      	str	r0, [sp, #0]
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d139      	bne.n	8007b70 <_dtoa_r+0x320>
 8007afc:	4b16      	ldr	r3, [pc, #88]	; (8007b58 <_dtoa_r+0x308>)
 8007afe:	4602      	mov	r2, r0
 8007b00:	f240 11af 	movw	r1, #431	; 0x1af
 8007b04:	e6bd      	b.n	8007882 <_dtoa_r+0x32>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e7e1      	b.n	8007ace <_dtoa_r+0x27e>
 8007b0a:	2501      	movs	r5, #1
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9307      	str	r3, [sp, #28]
 8007b10:	9509      	str	r5, [sp, #36]	; 0x24
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	9304      	str	r3, [sp, #16]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2312      	movs	r3, #18
 8007b1e:	e7d1      	b.n	8007ac4 <_dtoa_r+0x274>
 8007b20:	636f4361 	.word	0x636f4361
 8007b24:	3fd287a7 	.word	0x3fd287a7
 8007b28:	8b60c8b3 	.word	0x8b60c8b3
 8007b2c:	3fc68a28 	.word	0x3fc68a28
 8007b30:	509f79fb 	.word	0x509f79fb
 8007b34:	3fd34413 	.word	0x3fd34413
 8007b38:	08009be9 	.word	0x08009be9
 8007b3c:	08009c00 	.word	0x08009c00
 8007b40:	7ff00000 	.word	0x7ff00000
 8007b44:	08009be5 	.word	0x08009be5
 8007b48:	08009bdc 	.word	0x08009bdc
 8007b4c:	08009bb9 	.word	0x08009bb9
 8007b50:	3ff80000 	.word	0x3ff80000
 8007b54:	08009cf0 	.word	0x08009cf0
 8007b58:	08009c58 	.word	0x08009c58
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b60:	e7d7      	b.n	8007b12 <_dtoa_r+0x2c2>
 8007b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	e7ba      	b.n	8007ae0 <_dtoa_r+0x290>
 8007b6a:	3101      	adds	r1, #1
 8007b6c:	0052      	lsls	r2, r2, #1
 8007b6e:	e7ba      	b.n	8007ae6 <_dtoa_r+0x296>
 8007b70:	69e3      	ldr	r3, [r4, #28]
 8007b72:	9a00      	ldr	r2, [sp, #0]
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	9b04      	ldr	r3, [sp, #16]
 8007b78:	2b0e      	cmp	r3, #14
 8007b7a:	f200 80a8 	bhi.w	8007cce <_dtoa_r+0x47e>
 8007b7e:	2d00      	cmp	r5, #0
 8007b80:	f000 80a5 	beq.w	8007cce <_dtoa_r+0x47e>
 8007b84:	f1bb 0f00 	cmp.w	fp, #0
 8007b88:	dd38      	ble.n	8007bfc <_dtoa_r+0x3ac>
 8007b8a:	4bc0      	ldr	r3, [pc, #768]	; (8007e8c <_dtoa_r+0x63c>)
 8007b8c:	f00b 020f 	and.w	r2, fp, #15
 8007b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007ba0:	d019      	beq.n	8007bd6 <_dtoa_r+0x386>
 8007ba2:	4bbb      	ldr	r3, [pc, #748]	; (8007e90 <_dtoa_r+0x640>)
 8007ba4:	ec51 0b18 	vmov	r0, r1, d8
 8007ba8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bac:	f7f8 fe56 	bl	800085c <__aeabi_ddiv>
 8007bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb4:	f008 080f 	and.w	r8, r8, #15
 8007bb8:	2503      	movs	r5, #3
 8007bba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007e90 <_dtoa_r+0x640>
 8007bbe:	f1b8 0f00 	cmp.w	r8, #0
 8007bc2:	d10a      	bne.n	8007bda <_dtoa_r+0x38a>
 8007bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc8:	4632      	mov	r2, r6
 8007bca:	463b      	mov	r3, r7
 8007bcc:	f7f8 fe46 	bl	800085c <__aeabi_ddiv>
 8007bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bd4:	e02b      	b.n	8007c2e <_dtoa_r+0x3de>
 8007bd6:	2502      	movs	r5, #2
 8007bd8:	e7ef      	b.n	8007bba <_dtoa_r+0x36a>
 8007bda:	f018 0f01 	tst.w	r8, #1
 8007bde:	d008      	beq.n	8007bf2 <_dtoa_r+0x3a2>
 8007be0:	4630      	mov	r0, r6
 8007be2:	4639      	mov	r1, r7
 8007be4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007be8:	f7f8 fd0e 	bl	8000608 <__aeabi_dmul>
 8007bec:	3501      	adds	r5, #1
 8007bee:	4606      	mov	r6, r0
 8007bf0:	460f      	mov	r7, r1
 8007bf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007bf6:	f109 0908 	add.w	r9, r9, #8
 8007bfa:	e7e0      	b.n	8007bbe <_dtoa_r+0x36e>
 8007bfc:	f000 809f 	beq.w	8007d3e <_dtoa_r+0x4ee>
 8007c00:	f1cb 0600 	rsb	r6, fp, #0
 8007c04:	4ba1      	ldr	r3, [pc, #644]	; (8007e8c <_dtoa_r+0x63c>)
 8007c06:	4fa2      	ldr	r7, [pc, #648]	; (8007e90 <_dtoa_r+0x640>)
 8007c08:	f006 020f 	and.w	r2, r6, #15
 8007c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	ec51 0b18 	vmov	r0, r1, d8
 8007c18:	f7f8 fcf6 	bl	8000608 <__aeabi_dmul>
 8007c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c20:	1136      	asrs	r6, r6, #4
 8007c22:	2300      	movs	r3, #0
 8007c24:	2502      	movs	r5, #2
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	d17e      	bne.n	8007d28 <_dtoa_r+0x4d8>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1d0      	bne.n	8007bd0 <_dtoa_r+0x380>
 8007c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 8084 	beq.w	8007d42 <_dtoa_r+0x4f2>
 8007c3a:	4b96      	ldr	r3, [pc, #600]	; (8007e94 <_dtoa_r+0x644>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4640      	mov	r0, r8
 8007c40:	4649      	mov	r1, r9
 8007c42:	f7f8 ff53 	bl	8000aec <__aeabi_dcmplt>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d07b      	beq.n	8007d42 <_dtoa_r+0x4f2>
 8007c4a:	9b04      	ldr	r3, [sp, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d078      	beq.n	8007d42 <_dtoa_r+0x4f2>
 8007c50:	9b01      	ldr	r3, [sp, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dd39      	ble.n	8007cca <_dtoa_r+0x47a>
 8007c56:	4b90      	ldr	r3, [pc, #576]	; (8007e98 <_dtoa_r+0x648>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	f7f8 fcd3 	bl	8000608 <__aeabi_dmul>
 8007c62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c66:	9e01      	ldr	r6, [sp, #4]
 8007c68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c72:	4628      	mov	r0, r5
 8007c74:	f7f8 fc5e 	bl	8000534 <__aeabi_i2d>
 8007c78:	4642      	mov	r2, r8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	f7f8 fcc4 	bl	8000608 <__aeabi_dmul>
 8007c80:	4b86      	ldr	r3, [pc, #536]	; (8007e9c <_dtoa_r+0x64c>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	f7f8 fb0a 	bl	800029c <__adddf3>
 8007c88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c90:	9303      	str	r3, [sp, #12]
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d158      	bne.n	8007d48 <_dtoa_r+0x4f8>
 8007c96:	4b82      	ldr	r3, [pc, #520]	; (8007ea0 <_dtoa_r+0x650>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 fafb 	bl	8000298 <__aeabi_dsub>
 8007ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	4689      	mov	r9, r1
 8007caa:	f7f8 ff3d 	bl	8000b28 <__aeabi_dcmpgt>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f040 8296 	bne.w	80081e0 <_dtoa_r+0x990>
 8007cb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007cb8:	4640      	mov	r0, r8
 8007cba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	f7f8 ff14 	bl	8000aec <__aeabi_dcmplt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f040 8289 	bne.w	80081dc <_dtoa_r+0x98c>
 8007cca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f2c0 814e 	blt.w	8007f72 <_dtoa_r+0x722>
 8007cd6:	f1bb 0f0e 	cmp.w	fp, #14
 8007cda:	f300 814a 	bgt.w	8007f72 <_dtoa_r+0x722>
 8007cde:	4b6b      	ldr	r3, [pc, #428]	; (8007e8c <_dtoa_r+0x63c>)
 8007ce0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ce4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f280 80dc 	bge.w	8007ea8 <_dtoa_r+0x658>
 8007cf0:	9b04      	ldr	r3, [sp, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f300 80d8 	bgt.w	8007ea8 <_dtoa_r+0x658>
 8007cf8:	f040 826f 	bne.w	80081da <_dtoa_r+0x98a>
 8007cfc:	4b68      	ldr	r3, [pc, #416]	; (8007ea0 <_dtoa_r+0x650>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4640      	mov	r0, r8
 8007d02:	4649      	mov	r1, r9
 8007d04:	f7f8 fc80 	bl	8000608 <__aeabi_dmul>
 8007d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d0c:	f7f8 ff02 	bl	8000b14 <__aeabi_dcmpge>
 8007d10:	9e04      	ldr	r6, [sp, #16]
 8007d12:	4637      	mov	r7, r6
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f040 8245 	bne.w	80081a4 <_dtoa_r+0x954>
 8007d1a:	9d00      	ldr	r5, [sp, #0]
 8007d1c:	2331      	movs	r3, #49	; 0x31
 8007d1e:	f805 3b01 	strb.w	r3, [r5], #1
 8007d22:	f10b 0b01 	add.w	fp, fp, #1
 8007d26:	e241      	b.n	80081ac <_dtoa_r+0x95c>
 8007d28:	07f2      	lsls	r2, r6, #31
 8007d2a:	d505      	bpl.n	8007d38 <_dtoa_r+0x4e8>
 8007d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d30:	f7f8 fc6a 	bl	8000608 <__aeabi_dmul>
 8007d34:	3501      	adds	r5, #1
 8007d36:	2301      	movs	r3, #1
 8007d38:	1076      	asrs	r6, r6, #1
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	e773      	b.n	8007c26 <_dtoa_r+0x3d6>
 8007d3e:	2502      	movs	r5, #2
 8007d40:	e775      	b.n	8007c2e <_dtoa_r+0x3de>
 8007d42:	9e04      	ldr	r6, [sp, #16]
 8007d44:	465f      	mov	r7, fp
 8007d46:	e792      	b.n	8007c6e <_dtoa_r+0x41e>
 8007d48:	9900      	ldr	r1, [sp, #0]
 8007d4a:	4b50      	ldr	r3, [pc, #320]	; (8007e8c <_dtoa_r+0x63c>)
 8007d4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d50:	4431      	add	r1, r6
 8007d52:	9102      	str	r1, [sp, #8]
 8007d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d56:	eeb0 9a47 	vmov.f32	s18, s14
 8007d5a:	eef0 9a67 	vmov.f32	s19, s15
 8007d5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d66:	2900      	cmp	r1, #0
 8007d68:	d044      	beq.n	8007df4 <_dtoa_r+0x5a4>
 8007d6a:	494e      	ldr	r1, [pc, #312]	; (8007ea4 <_dtoa_r+0x654>)
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	f7f8 fd75 	bl	800085c <__aeabi_ddiv>
 8007d72:	ec53 2b19 	vmov	r2, r3, d9
 8007d76:	f7f8 fa8f 	bl	8000298 <__aeabi_dsub>
 8007d7a:	9d00      	ldr	r5, [sp, #0]
 8007d7c:	ec41 0b19 	vmov	d9, r0, r1
 8007d80:	4649      	mov	r1, r9
 8007d82:	4640      	mov	r0, r8
 8007d84:	f7f8 fef0 	bl	8000b68 <__aeabi_d2iz>
 8007d88:	4606      	mov	r6, r0
 8007d8a:	f7f8 fbd3 	bl	8000534 <__aeabi_i2d>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4640      	mov	r0, r8
 8007d94:	4649      	mov	r1, r9
 8007d96:	f7f8 fa7f 	bl	8000298 <__aeabi_dsub>
 8007d9a:	3630      	adds	r6, #48	; 0x30
 8007d9c:	f805 6b01 	strb.w	r6, [r5], #1
 8007da0:	ec53 2b19 	vmov	r2, r3, d9
 8007da4:	4680      	mov	r8, r0
 8007da6:	4689      	mov	r9, r1
 8007da8:	f7f8 fea0 	bl	8000aec <__aeabi_dcmplt>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d164      	bne.n	8007e7a <_dtoa_r+0x62a>
 8007db0:	4642      	mov	r2, r8
 8007db2:	464b      	mov	r3, r9
 8007db4:	4937      	ldr	r1, [pc, #220]	; (8007e94 <_dtoa_r+0x644>)
 8007db6:	2000      	movs	r0, #0
 8007db8:	f7f8 fa6e 	bl	8000298 <__aeabi_dsub>
 8007dbc:	ec53 2b19 	vmov	r2, r3, d9
 8007dc0:	f7f8 fe94 	bl	8000aec <__aeabi_dcmplt>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f040 80b6 	bne.w	8007f36 <_dtoa_r+0x6e6>
 8007dca:	9b02      	ldr	r3, [sp, #8]
 8007dcc:	429d      	cmp	r5, r3
 8007dce:	f43f af7c 	beq.w	8007cca <_dtoa_r+0x47a>
 8007dd2:	4b31      	ldr	r3, [pc, #196]	; (8007e98 <_dtoa_r+0x648>)
 8007dd4:	ec51 0b19 	vmov	r0, r1, d9
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f7f8 fc15 	bl	8000608 <__aeabi_dmul>
 8007dde:	4b2e      	ldr	r3, [pc, #184]	; (8007e98 <_dtoa_r+0x648>)
 8007de0:	ec41 0b19 	vmov	d9, r0, r1
 8007de4:	2200      	movs	r2, #0
 8007de6:	4640      	mov	r0, r8
 8007de8:	4649      	mov	r1, r9
 8007dea:	f7f8 fc0d 	bl	8000608 <__aeabi_dmul>
 8007dee:	4680      	mov	r8, r0
 8007df0:	4689      	mov	r9, r1
 8007df2:	e7c5      	b.n	8007d80 <_dtoa_r+0x530>
 8007df4:	ec51 0b17 	vmov	r0, r1, d7
 8007df8:	f7f8 fc06 	bl	8000608 <__aeabi_dmul>
 8007dfc:	9b02      	ldr	r3, [sp, #8]
 8007dfe:	9d00      	ldr	r5, [sp, #0]
 8007e00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e02:	ec41 0b19 	vmov	d9, r0, r1
 8007e06:	4649      	mov	r1, r9
 8007e08:	4640      	mov	r0, r8
 8007e0a:	f7f8 fead 	bl	8000b68 <__aeabi_d2iz>
 8007e0e:	4606      	mov	r6, r0
 8007e10:	f7f8 fb90 	bl	8000534 <__aeabi_i2d>
 8007e14:	3630      	adds	r6, #48	; 0x30
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4640      	mov	r0, r8
 8007e1c:	4649      	mov	r1, r9
 8007e1e:	f7f8 fa3b 	bl	8000298 <__aeabi_dsub>
 8007e22:	f805 6b01 	strb.w	r6, [r5], #1
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	429d      	cmp	r5, r3
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	4689      	mov	r9, r1
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	d124      	bne.n	8007e7e <_dtoa_r+0x62e>
 8007e34:	4b1b      	ldr	r3, [pc, #108]	; (8007ea4 <_dtoa_r+0x654>)
 8007e36:	ec51 0b19 	vmov	r0, r1, d9
 8007e3a:	f7f8 fa2f 	bl	800029c <__adddf3>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4640      	mov	r0, r8
 8007e44:	4649      	mov	r1, r9
 8007e46:	f7f8 fe6f 	bl	8000b28 <__aeabi_dcmpgt>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d173      	bne.n	8007f36 <_dtoa_r+0x6e6>
 8007e4e:	ec53 2b19 	vmov	r2, r3, d9
 8007e52:	4914      	ldr	r1, [pc, #80]	; (8007ea4 <_dtoa_r+0x654>)
 8007e54:	2000      	movs	r0, #0
 8007e56:	f7f8 fa1f 	bl	8000298 <__aeabi_dsub>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4640      	mov	r0, r8
 8007e60:	4649      	mov	r1, r9
 8007e62:	f7f8 fe43 	bl	8000aec <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f43f af2f 	beq.w	8007cca <_dtoa_r+0x47a>
 8007e6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e6e:	1e6b      	subs	r3, r5, #1
 8007e70:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e76:	2b30      	cmp	r3, #48	; 0x30
 8007e78:	d0f8      	beq.n	8007e6c <_dtoa_r+0x61c>
 8007e7a:	46bb      	mov	fp, r7
 8007e7c:	e04a      	b.n	8007f14 <_dtoa_r+0x6c4>
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <_dtoa_r+0x648>)
 8007e80:	f7f8 fbc2 	bl	8000608 <__aeabi_dmul>
 8007e84:	4680      	mov	r8, r0
 8007e86:	4689      	mov	r9, r1
 8007e88:	e7bd      	b.n	8007e06 <_dtoa_r+0x5b6>
 8007e8a:	bf00      	nop
 8007e8c:	08009cf0 	.word	0x08009cf0
 8007e90:	08009cc8 	.word	0x08009cc8
 8007e94:	3ff00000 	.word	0x3ff00000
 8007e98:	40240000 	.word	0x40240000
 8007e9c:	401c0000 	.word	0x401c0000
 8007ea0:	40140000 	.word	0x40140000
 8007ea4:	3fe00000 	.word	0x3fe00000
 8007ea8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007eac:	9d00      	ldr	r5, [sp, #0]
 8007eae:	4642      	mov	r2, r8
 8007eb0:	464b      	mov	r3, r9
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	f7f8 fcd1 	bl	800085c <__aeabi_ddiv>
 8007eba:	f7f8 fe55 	bl	8000b68 <__aeabi_d2iz>
 8007ebe:	9001      	str	r0, [sp, #4]
 8007ec0:	f7f8 fb38 	bl	8000534 <__aeabi_i2d>
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	f7f8 fb9e 	bl	8000608 <__aeabi_dmul>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f7f8 f9e0 	bl	8000298 <__aeabi_dsub>
 8007ed8:	9e01      	ldr	r6, [sp, #4]
 8007eda:	9f04      	ldr	r7, [sp, #16]
 8007edc:	3630      	adds	r6, #48	; 0x30
 8007ede:	f805 6b01 	strb.w	r6, [r5], #1
 8007ee2:	9e00      	ldr	r6, [sp, #0]
 8007ee4:	1bae      	subs	r6, r5, r6
 8007ee6:	42b7      	cmp	r7, r6
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	d134      	bne.n	8007f58 <_dtoa_r+0x708>
 8007eee:	f7f8 f9d5 	bl	800029c <__adddf3>
 8007ef2:	4642      	mov	r2, r8
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	460f      	mov	r7, r1
 8007efa:	f7f8 fe15 	bl	8000b28 <__aeabi_dcmpgt>
 8007efe:	b9c8      	cbnz	r0, 8007f34 <_dtoa_r+0x6e4>
 8007f00:	4642      	mov	r2, r8
 8007f02:	464b      	mov	r3, r9
 8007f04:	4630      	mov	r0, r6
 8007f06:	4639      	mov	r1, r7
 8007f08:	f7f8 fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f0c:	b110      	cbz	r0, 8007f14 <_dtoa_r+0x6c4>
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	07db      	lsls	r3, r3, #31
 8007f12:	d40f      	bmi.n	8007f34 <_dtoa_r+0x6e4>
 8007f14:	4651      	mov	r1, sl
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 fbcc 	bl	80086b4 <_Bfree>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f20:	702b      	strb	r3, [r5, #0]
 8007f22:	f10b 0301 	add.w	r3, fp, #1
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f43f ace2 	beq.w	80078f4 <_dtoa_r+0xa4>
 8007f30:	601d      	str	r5, [r3, #0]
 8007f32:	e4df      	b.n	80078f4 <_dtoa_r+0xa4>
 8007f34:	465f      	mov	r7, fp
 8007f36:	462b      	mov	r3, r5
 8007f38:	461d      	mov	r5, r3
 8007f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f3e:	2a39      	cmp	r2, #57	; 0x39
 8007f40:	d106      	bne.n	8007f50 <_dtoa_r+0x700>
 8007f42:	9a00      	ldr	r2, [sp, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d1f7      	bne.n	8007f38 <_dtoa_r+0x6e8>
 8007f48:	9900      	ldr	r1, [sp, #0]
 8007f4a:	2230      	movs	r2, #48	; 0x30
 8007f4c:	3701      	adds	r7, #1
 8007f4e:	700a      	strb	r2, [r1, #0]
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	3201      	adds	r2, #1
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	e790      	b.n	8007e7a <_dtoa_r+0x62a>
 8007f58:	4ba3      	ldr	r3, [pc, #652]	; (80081e8 <_dtoa_r+0x998>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f7f8 fb54 	bl	8000608 <__aeabi_dmul>
 8007f60:	2200      	movs	r2, #0
 8007f62:	2300      	movs	r3, #0
 8007f64:	4606      	mov	r6, r0
 8007f66:	460f      	mov	r7, r1
 8007f68:	f7f8 fdb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d09e      	beq.n	8007eae <_dtoa_r+0x65e>
 8007f70:	e7d0      	b.n	8007f14 <_dtoa_r+0x6c4>
 8007f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f74:	2a00      	cmp	r2, #0
 8007f76:	f000 80ca 	beq.w	800810e <_dtoa_r+0x8be>
 8007f7a:	9a07      	ldr	r2, [sp, #28]
 8007f7c:	2a01      	cmp	r2, #1
 8007f7e:	f300 80ad 	bgt.w	80080dc <_dtoa_r+0x88c>
 8007f82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	f000 80a5 	beq.w	80080d4 <_dtoa_r+0x884>
 8007f8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f8e:	9e08      	ldr	r6, [sp, #32]
 8007f90:	9d05      	ldr	r5, [sp, #20]
 8007f92:	9a05      	ldr	r2, [sp, #20]
 8007f94:	441a      	add	r2, r3
 8007f96:	9205      	str	r2, [sp, #20]
 8007f98:	9a06      	ldr	r2, [sp, #24]
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	441a      	add	r2, r3
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	9206      	str	r2, [sp, #24]
 8007fa2:	f000 fc3d 	bl	8008820 <__i2b>
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	b165      	cbz	r5, 8007fc4 <_dtoa_r+0x774>
 8007faa:	9b06      	ldr	r3, [sp, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dd09      	ble.n	8007fc4 <_dtoa_r+0x774>
 8007fb0:	42ab      	cmp	r3, r5
 8007fb2:	9a05      	ldr	r2, [sp, #20]
 8007fb4:	bfa8      	it	ge
 8007fb6:	462b      	movge	r3, r5
 8007fb8:	1ad2      	subs	r2, r2, r3
 8007fba:	9205      	str	r2, [sp, #20]
 8007fbc:	9a06      	ldr	r2, [sp, #24]
 8007fbe:	1aed      	subs	r5, r5, r3
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	9306      	str	r3, [sp, #24]
 8007fc4:	9b08      	ldr	r3, [sp, #32]
 8007fc6:	b1f3      	cbz	r3, 8008006 <_dtoa_r+0x7b6>
 8007fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 80a3 	beq.w	8008116 <_dtoa_r+0x8c6>
 8007fd0:	2e00      	cmp	r6, #0
 8007fd2:	dd10      	ble.n	8007ff6 <_dtoa_r+0x7a6>
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	4632      	mov	r2, r6
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 fce1 	bl	80089a0 <__pow5mult>
 8007fde:	4652      	mov	r2, sl
 8007fe0:	4601      	mov	r1, r0
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 fc31 	bl	800884c <__multiply>
 8007fea:	4651      	mov	r1, sl
 8007fec:	4680      	mov	r8, r0
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 fb60 	bl	80086b4 <_Bfree>
 8007ff4:	46c2      	mov	sl, r8
 8007ff6:	9b08      	ldr	r3, [sp, #32]
 8007ff8:	1b9a      	subs	r2, r3, r6
 8007ffa:	d004      	beq.n	8008006 <_dtoa_r+0x7b6>
 8007ffc:	4651      	mov	r1, sl
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 fcce 	bl	80089a0 <__pow5mult>
 8008004:	4682      	mov	sl, r0
 8008006:	2101      	movs	r1, #1
 8008008:	4620      	mov	r0, r4
 800800a:	f000 fc09 	bl	8008820 <__i2b>
 800800e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008010:	2b00      	cmp	r3, #0
 8008012:	4606      	mov	r6, r0
 8008014:	f340 8081 	ble.w	800811a <_dtoa_r+0x8ca>
 8008018:	461a      	mov	r2, r3
 800801a:	4601      	mov	r1, r0
 800801c:	4620      	mov	r0, r4
 800801e:	f000 fcbf 	bl	80089a0 <__pow5mult>
 8008022:	9b07      	ldr	r3, [sp, #28]
 8008024:	2b01      	cmp	r3, #1
 8008026:	4606      	mov	r6, r0
 8008028:	dd7a      	ble.n	8008120 <_dtoa_r+0x8d0>
 800802a:	f04f 0800 	mov.w	r8, #0
 800802e:	6933      	ldr	r3, [r6, #16]
 8008030:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008034:	6918      	ldr	r0, [r3, #16]
 8008036:	f000 fba5 	bl	8008784 <__hi0bits>
 800803a:	f1c0 0020 	rsb	r0, r0, #32
 800803e:	9b06      	ldr	r3, [sp, #24]
 8008040:	4418      	add	r0, r3
 8008042:	f010 001f 	ands.w	r0, r0, #31
 8008046:	f000 8094 	beq.w	8008172 <_dtoa_r+0x922>
 800804a:	f1c0 0320 	rsb	r3, r0, #32
 800804e:	2b04      	cmp	r3, #4
 8008050:	f340 8085 	ble.w	800815e <_dtoa_r+0x90e>
 8008054:	9b05      	ldr	r3, [sp, #20]
 8008056:	f1c0 001c 	rsb	r0, r0, #28
 800805a:	4403      	add	r3, r0
 800805c:	9305      	str	r3, [sp, #20]
 800805e:	9b06      	ldr	r3, [sp, #24]
 8008060:	4403      	add	r3, r0
 8008062:	4405      	add	r5, r0
 8008064:	9306      	str	r3, [sp, #24]
 8008066:	9b05      	ldr	r3, [sp, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	dd05      	ble.n	8008078 <_dtoa_r+0x828>
 800806c:	4651      	mov	r1, sl
 800806e:	461a      	mov	r2, r3
 8008070:	4620      	mov	r0, r4
 8008072:	f000 fcef 	bl	8008a54 <__lshift>
 8008076:	4682      	mov	sl, r0
 8008078:	9b06      	ldr	r3, [sp, #24]
 800807a:	2b00      	cmp	r3, #0
 800807c:	dd05      	ble.n	800808a <_dtoa_r+0x83a>
 800807e:	4631      	mov	r1, r6
 8008080:	461a      	mov	r2, r3
 8008082:	4620      	mov	r0, r4
 8008084:	f000 fce6 	bl	8008a54 <__lshift>
 8008088:	4606      	mov	r6, r0
 800808a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800808c:	2b00      	cmp	r3, #0
 800808e:	d072      	beq.n	8008176 <_dtoa_r+0x926>
 8008090:	4631      	mov	r1, r6
 8008092:	4650      	mov	r0, sl
 8008094:	f000 fd4a 	bl	8008b2c <__mcmp>
 8008098:	2800      	cmp	r0, #0
 800809a:	da6c      	bge.n	8008176 <_dtoa_r+0x926>
 800809c:	2300      	movs	r3, #0
 800809e:	4651      	mov	r1, sl
 80080a0:	220a      	movs	r2, #10
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 fb28 	bl	80086f8 <__multadd>
 80080a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080ae:	4682      	mov	sl, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 81b0 	beq.w	8008416 <_dtoa_r+0xbc6>
 80080b6:	2300      	movs	r3, #0
 80080b8:	4639      	mov	r1, r7
 80080ba:	220a      	movs	r2, #10
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fb1b 	bl	80086f8 <__multadd>
 80080c2:	9b01      	ldr	r3, [sp, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	4607      	mov	r7, r0
 80080c8:	f300 8096 	bgt.w	80081f8 <_dtoa_r+0x9a8>
 80080cc:	9b07      	ldr	r3, [sp, #28]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	dc59      	bgt.n	8008186 <_dtoa_r+0x936>
 80080d2:	e091      	b.n	80081f8 <_dtoa_r+0x9a8>
 80080d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080da:	e758      	b.n	8007f8e <_dtoa_r+0x73e>
 80080dc:	9b04      	ldr	r3, [sp, #16]
 80080de:	1e5e      	subs	r6, r3, #1
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	42b3      	cmp	r3, r6
 80080e4:	bfbf      	itttt	lt
 80080e6:	9b08      	ldrlt	r3, [sp, #32]
 80080e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80080ea:	9608      	strlt	r6, [sp, #32]
 80080ec:	1af3      	sublt	r3, r6, r3
 80080ee:	bfb4      	ite	lt
 80080f0:	18d2      	addlt	r2, r2, r3
 80080f2:	1b9e      	subge	r6, r3, r6
 80080f4:	9b04      	ldr	r3, [sp, #16]
 80080f6:	bfbc      	itt	lt
 80080f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80080fa:	2600      	movlt	r6, #0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bfb7      	itett	lt
 8008100:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008104:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008108:	1a9d      	sublt	r5, r3, r2
 800810a:	2300      	movlt	r3, #0
 800810c:	e741      	b.n	8007f92 <_dtoa_r+0x742>
 800810e:	9e08      	ldr	r6, [sp, #32]
 8008110:	9d05      	ldr	r5, [sp, #20]
 8008112:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008114:	e748      	b.n	8007fa8 <_dtoa_r+0x758>
 8008116:	9a08      	ldr	r2, [sp, #32]
 8008118:	e770      	b.n	8007ffc <_dtoa_r+0x7ac>
 800811a:	9b07      	ldr	r3, [sp, #28]
 800811c:	2b01      	cmp	r3, #1
 800811e:	dc19      	bgt.n	8008154 <_dtoa_r+0x904>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	b9bb      	cbnz	r3, 8008154 <_dtoa_r+0x904>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800812a:	b99b      	cbnz	r3, 8008154 <_dtoa_r+0x904>
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008132:	0d1b      	lsrs	r3, r3, #20
 8008134:	051b      	lsls	r3, r3, #20
 8008136:	b183      	cbz	r3, 800815a <_dtoa_r+0x90a>
 8008138:	9b05      	ldr	r3, [sp, #20]
 800813a:	3301      	adds	r3, #1
 800813c:	9305      	str	r3, [sp, #20]
 800813e:	9b06      	ldr	r3, [sp, #24]
 8008140:	3301      	adds	r3, #1
 8008142:	9306      	str	r3, [sp, #24]
 8008144:	f04f 0801 	mov.w	r8, #1
 8008148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800814a:	2b00      	cmp	r3, #0
 800814c:	f47f af6f 	bne.w	800802e <_dtoa_r+0x7de>
 8008150:	2001      	movs	r0, #1
 8008152:	e774      	b.n	800803e <_dtoa_r+0x7ee>
 8008154:	f04f 0800 	mov.w	r8, #0
 8008158:	e7f6      	b.n	8008148 <_dtoa_r+0x8f8>
 800815a:	4698      	mov	r8, r3
 800815c:	e7f4      	b.n	8008148 <_dtoa_r+0x8f8>
 800815e:	d082      	beq.n	8008066 <_dtoa_r+0x816>
 8008160:	9a05      	ldr	r2, [sp, #20]
 8008162:	331c      	adds	r3, #28
 8008164:	441a      	add	r2, r3
 8008166:	9205      	str	r2, [sp, #20]
 8008168:	9a06      	ldr	r2, [sp, #24]
 800816a:	441a      	add	r2, r3
 800816c:	441d      	add	r5, r3
 800816e:	9206      	str	r2, [sp, #24]
 8008170:	e779      	b.n	8008066 <_dtoa_r+0x816>
 8008172:	4603      	mov	r3, r0
 8008174:	e7f4      	b.n	8008160 <_dtoa_r+0x910>
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	dc37      	bgt.n	80081ec <_dtoa_r+0x99c>
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	2b02      	cmp	r3, #2
 8008180:	dd34      	ble.n	80081ec <_dtoa_r+0x99c>
 8008182:	9b04      	ldr	r3, [sp, #16]
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	9b01      	ldr	r3, [sp, #4]
 8008188:	b963      	cbnz	r3, 80081a4 <_dtoa_r+0x954>
 800818a:	4631      	mov	r1, r6
 800818c:	2205      	movs	r2, #5
 800818e:	4620      	mov	r0, r4
 8008190:	f000 fab2 	bl	80086f8 <__multadd>
 8008194:	4601      	mov	r1, r0
 8008196:	4606      	mov	r6, r0
 8008198:	4650      	mov	r0, sl
 800819a:	f000 fcc7 	bl	8008b2c <__mcmp>
 800819e:	2800      	cmp	r0, #0
 80081a0:	f73f adbb 	bgt.w	8007d1a <_dtoa_r+0x4ca>
 80081a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a6:	9d00      	ldr	r5, [sp, #0]
 80081a8:	ea6f 0b03 	mvn.w	fp, r3
 80081ac:	f04f 0800 	mov.w	r8, #0
 80081b0:	4631      	mov	r1, r6
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 fa7e 	bl	80086b4 <_Bfree>
 80081b8:	2f00      	cmp	r7, #0
 80081ba:	f43f aeab 	beq.w	8007f14 <_dtoa_r+0x6c4>
 80081be:	f1b8 0f00 	cmp.w	r8, #0
 80081c2:	d005      	beq.n	80081d0 <_dtoa_r+0x980>
 80081c4:	45b8      	cmp	r8, r7
 80081c6:	d003      	beq.n	80081d0 <_dtoa_r+0x980>
 80081c8:	4641      	mov	r1, r8
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 fa72 	bl	80086b4 <_Bfree>
 80081d0:	4639      	mov	r1, r7
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 fa6e 	bl	80086b4 <_Bfree>
 80081d8:	e69c      	b.n	8007f14 <_dtoa_r+0x6c4>
 80081da:	2600      	movs	r6, #0
 80081dc:	4637      	mov	r7, r6
 80081de:	e7e1      	b.n	80081a4 <_dtoa_r+0x954>
 80081e0:	46bb      	mov	fp, r7
 80081e2:	4637      	mov	r7, r6
 80081e4:	e599      	b.n	8007d1a <_dtoa_r+0x4ca>
 80081e6:	bf00      	nop
 80081e8:	40240000 	.word	0x40240000
 80081ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80c8 	beq.w	8008384 <_dtoa_r+0xb34>
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	2d00      	cmp	r5, #0
 80081fa:	dd05      	ble.n	8008208 <_dtoa_r+0x9b8>
 80081fc:	4639      	mov	r1, r7
 80081fe:	462a      	mov	r2, r5
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fc27 	bl	8008a54 <__lshift>
 8008206:	4607      	mov	r7, r0
 8008208:	f1b8 0f00 	cmp.w	r8, #0
 800820c:	d05b      	beq.n	80082c6 <_dtoa_r+0xa76>
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fa0f 	bl	8008634 <_Balloc>
 8008216:	4605      	mov	r5, r0
 8008218:	b928      	cbnz	r0, 8008226 <_dtoa_r+0x9d6>
 800821a:	4b83      	ldr	r3, [pc, #524]	; (8008428 <_dtoa_r+0xbd8>)
 800821c:	4602      	mov	r2, r0
 800821e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008222:	f7ff bb2e 	b.w	8007882 <_dtoa_r+0x32>
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	3202      	adds	r2, #2
 800822a:	0092      	lsls	r2, r2, #2
 800822c:	f107 010c 	add.w	r1, r7, #12
 8008230:	300c      	adds	r0, #12
 8008232:	f7ff fa74 	bl	800771e <memcpy>
 8008236:	2201      	movs	r2, #1
 8008238:	4629      	mov	r1, r5
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fc0a 	bl	8008a54 <__lshift>
 8008240:	9b00      	ldr	r3, [sp, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800824a:	4413      	add	r3, r2
 800824c:	9308      	str	r3, [sp, #32]
 800824e:	9b02      	ldr	r3, [sp, #8]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	46b8      	mov	r8, r7
 8008256:	9306      	str	r3, [sp, #24]
 8008258:	4607      	mov	r7, r0
 800825a:	9b04      	ldr	r3, [sp, #16]
 800825c:	4631      	mov	r1, r6
 800825e:	3b01      	subs	r3, #1
 8008260:	4650      	mov	r0, sl
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	f7ff fa69 	bl	800773a <quorem>
 8008268:	4641      	mov	r1, r8
 800826a:	9002      	str	r0, [sp, #8]
 800826c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008270:	4650      	mov	r0, sl
 8008272:	f000 fc5b 	bl	8008b2c <__mcmp>
 8008276:	463a      	mov	r2, r7
 8008278:	9005      	str	r0, [sp, #20]
 800827a:	4631      	mov	r1, r6
 800827c:	4620      	mov	r0, r4
 800827e:	f000 fc71 	bl	8008b64 <__mdiff>
 8008282:	68c2      	ldr	r2, [r0, #12]
 8008284:	4605      	mov	r5, r0
 8008286:	bb02      	cbnz	r2, 80082ca <_dtoa_r+0xa7a>
 8008288:	4601      	mov	r1, r0
 800828a:	4650      	mov	r0, sl
 800828c:	f000 fc4e 	bl	8008b2c <__mcmp>
 8008290:	4602      	mov	r2, r0
 8008292:	4629      	mov	r1, r5
 8008294:	4620      	mov	r0, r4
 8008296:	9209      	str	r2, [sp, #36]	; 0x24
 8008298:	f000 fa0c 	bl	80086b4 <_Bfree>
 800829c:	9b07      	ldr	r3, [sp, #28]
 800829e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a0:	9d04      	ldr	r5, [sp, #16]
 80082a2:	ea43 0102 	orr.w	r1, r3, r2
 80082a6:	9b06      	ldr	r3, [sp, #24]
 80082a8:	4319      	orrs	r1, r3
 80082aa:	d110      	bne.n	80082ce <_dtoa_r+0xa7e>
 80082ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082b0:	d029      	beq.n	8008306 <_dtoa_r+0xab6>
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dd02      	ble.n	80082be <_dtoa_r+0xa6e>
 80082b8:	9b02      	ldr	r3, [sp, #8]
 80082ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	f883 9000 	strb.w	r9, [r3]
 80082c4:	e774      	b.n	80081b0 <_dtoa_r+0x960>
 80082c6:	4638      	mov	r0, r7
 80082c8:	e7ba      	b.n	8008240 <_dtoa_r+0x9f0>
 80082ca:	2201      	movs	r2, #1
 80082cc:	e7e1      	b.n	8008292 <_dtoa_r+0xa42>
 80082ce:	9b05      	ldr	r3, [sp, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	db04      	blt.n	80082de <_dtoa_r+0xa8e>
 80082d4:	9907      	ldr	r1, [sp, #28]
 80082d6:	430b      	orrs	r3, r1
 80082d8:	9906      	ldr	r1, [sp, #24]
 80082da:	430b      	orrs	r3, r1
 80082dc:	d120      	bne.n	8008320 <_dtoa_r+0xad0>
 80082de:	2a00      	cmp	r2, #0
 80082e0:	dded      	ble.n	80082be <_dtoa_r+0xa6e>
 80082e2:	4651      	mov	r1, sl
 80082e4:	2201      	movs	r2, #1
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 fbb4 	bl	8008a54 <__lshift>
 80082ec:	4631      	mov	r1, r6
 80082ee:	4682      	mov	sl, r0
 80082f0:	f000 fc1c 	bl	8008b2c <__mcmp>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	dc03      	bgt.n	8008300 <_dtoa_r+0xab0>
 80082f8:	d1e1      	bne.n	80082be <_dtoa_r+0xa6e>
 80082fa:	f019 0f01 	tst.w	r9, #1
 80082fe:	d0de      	beq.n	80082be <_dtoa_r+0xa6e>
 8008300:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008304:	d1d8      	bne.n	80082b8 <_dtoa_r+0xa68>
 8008306:	9a01      	ldr	r2, [sp, #4]
 8008308:	2339      	movs	r3, #57	; 0x39
 800830a:	7013      	strb	r3, [r2, #0]
 800830c:	462b      	mov	r3, r5
 800830e:	461d      	mov	r5, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008316:	2a39      	cmp	r2, #57	; 0x39
 8008318:	d06c      	beq.n	80083f4 <_dtoa_r+0xba4>
 800831a:	3201      	adds	r2, #1
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	e747      	b.n	80081b0 <_dtoa_r+0x960>
 8008320:	2a00      	cmp	r2, #0
 8008322:	dd07      	ble.n	8008334 <_dtoa_r+0xae4>
 8008324:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008328:	d0ed      	beq.n	8008306 <_dtoa_r+0xab6>
 800832a:	9a01      	ldr	r2, [sp, #4]
 800832c:	f109 0301 	add.w	r3, r9, #1
 8008330:	7013      	strb	r3, [r2, #0]
 8008332:	e73d      	b.n	80081b0 <_dtoa_r+0x960>
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	9a08      	ldr	r2, [sp, #32]
 8008338:	f803 9c01 	strb.w	r9, [r3, #-1]
 800833c:	4293      	cmp	r3, r2
 800833e:	d043      	beq.n	80083c8 <_dtoa_r+0xb78>
 8008340:	4651      	mov	r1, sl
 8008342:	2300      	movs	r3, #0
 8008344:	220a      	movs	r2, #10
 8008346:	4620      	mov	r0, r4
 8008348:	f000 f9d6 	bl	80086f8 <__multadd>
 800834c:	45b8      	cmp	r8, r7
 800834e:	4682      	mov	sl, r0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	f04f 020a 	mov.w	r2, #10
 8008358:	4641      	mov	r1, r8
 800835a:	4620      	mov	r0, r4
 800835c:	d107      	bne.n	800836e <_dtoa_r+0xb1e>
 800835e:	f000 f9cb 	bl	80086f8 <__multadd>
 8008362:	4680      	mov	r8, r0
 8008364:	4607      	mov	r7, r0
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	3301      	adds	r3, #1
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	e775      	b.n	800825a <_dtoa_r+0xa0a>
 800836e:	f000 f9c3 	bl	80086f8 <__multadd>
 8008372:	4639      	mov	r1, r7
 8008374:	4680      	mov	r8, r0
 8008376:	2300      	movs	r3, #0
 8008378:	220a      	movs	r2, #10
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f9bc 	bl	80086f8 <__multadd>
 8008380:	4607      	mov	r7, r0
 8008382:	e7f0      	b.n	8008366 <_dtoa_r+0xb16>
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	9d00      	ldr	r5, [sp, #0]
 800838a:	4631      	mov	r1, r6
 800838c:	4650      	mov	r0, sl
 800838e:	f7ff f9d4 	bl	800773a <quorem>
 8008392:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008396:	9b00      	ldr	r3, [sp, #0]
 8008398:	f805 9b01 	strb.w	r9, [r5], #1
 800839c:	1aea      	subs	r2, r5, r3
 800839e:	9b01      	ldr	r3, [sp, #4]
 80083a0:	4293      	cmp	r3, r2
 80083a2:	dd07      	ble.n	80083b4 <_dtoa_r+0xb64>
 80083a4:	4651      	mov	r1, sl
 80083a6:	2300      	movs	r3, #0
 80083a8:	220a      	movs	r2, #10
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 f9a4 	bl	80086f8 <__multadd>
 80083b0:	4682      	mov	sl, r0
 80083b2:	e7ea      	b.n	800838a <_dtoa_r+0xb3a>
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	bfc8      	it	gt
 80083ba:	461d      	movgt	r5, r3
 80083bc:	9b00      	ldr	r3, [sp, #0]
 80083be:	bfd8      	it	le
 80083c0:	2501      	movle	r5, #1
 80083c2:	441d      	add	r5, r3
 80083c4:	f04f 0800 	mov.w	r8, #0
 80083c8:	4651      	mov	r1, sl
 80083ca:	2201      	movs	r2, #1
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 fb41 	bl	8008a54 <__lshift>
 80083d2:	4631      	mov	r1, r6
 80083d4:	4682      	mov	sl, r0
 80083d6:	f000 fba9 	bl	8008b2c <__mcmp>
 80083da:	2800      	cmp	r0, #0
 80083dc:	dc96      	bgt.n	800830c <_dtoa_r+0xabc>
 80083de:	d102      	bne.n	80083e6 <_dtoa_r+0xb96>
 80083e0:	f019 0f01 	tst.w	r9, #1
 80083e4:	d192      	bne.n	800830c <_dtoa_r+0xabc>
 80083e6:	462b      	mov	r3, r5
 80083e8:	461d      	mov	r5, r3
 80083ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083ee:	2a30      	cmp	r2, #48	; 0x30
 80083f0:	d0fa      	beq.n	80083e8 <_dtoa_r+0xb98>
 80083f2:	e6dd      	b.n	80081b0 <_dtoa_r+0x960>
 80083f4:	9a00      	ldr	r2, [sp, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d189      	bne.n	800830e <_dtoa_r+0xabe>
 80083fa:	f10b 0b01 	add.w	fp, fp, #1
 80083fe:	2331      	movs	r3, #49	; 0x31
 8008400:	e796      	b.n	8008330 <_dtoa_r+0xae0>
 8008402:	4b0a      	ldr	r3, [pc, #40]	; (800842c <_dtoa_r+0xbdc>)
 8008404:	f7ff ba99 	b.w	800793a <_dtoa_r+0xea>
 8008408:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800840a:	2b00      	cmp	r3, #0
 800840c:	f47f aa6d 	bne.w	80078ea <_dtoa_r+0x9a>
 8008410:	4b07      	ldr	r3, [pc, #28]	; (8008430 <_dtoa_r+0xbe0>)
 8008412:	f7ff ba92 	b.w	800793a <_dtoa_r+0xea>
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	dcb5      	bgt.n	8008388 <_dtoa_r+0xb38>
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	2b02      	cmp	r3, #2
 8008420:	f73f aeb1 	bgt.w	8008186 <_dtoa_r+0x936>
 8008424:	e7b0      	b.n	8008388 <_dtoa_r+0xb38>
 8008426:	bf00      	nop
 8008428:	08009c58 	.word	0x08009c58
 800842c:	08009bb8 	.word	0x08009bb8
 8008430:	08009bdc 	.word	0x08009bdc

08008434 <_free_r>:
 8008434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008436:	2900      	cmp	r1, #0
 8008438:	d044      	beq.n	80084c4 <_free_r+0x90>
 800843a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800843e:	9001      	str	r0, [sp, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f1a1 0404 	sub.w	r4, r1, #4
 8008446:	bfb8      	it	lt
 8008448:	18e4      	addlt	r4, r4, r3
 800844a:	f000 f8e7 	bl	800861c <__malloc_lock>
 800844e:	4a1e      	ldr	r2, [pc, #120]	; (80084c8 <_free_r+0x94>)
 8008450:	9801      	ldr	r0, [sp, #4]
 8008452:	6813      	ldr	r3, [r2, #0]
 8008454:	b933      	cbnz	r3, 8008464 <_free_r+0x30>
 8008456:	6063      	str	r3, [r4, #4]
 8008458:	6014      	str	r4, [r2, #0]
 800845a:	b003      	add	sp, #12
 800845c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008460:	f000 b8e2 	b.w	8008628 <__malloc_unlock>
 8008464:	42a3      	cmp	r3, r4
 8008466:	d908      	bls.n	800847a <_free_r+0x46>
 8008468:	6825      	ldr	r5, [r4, #0]
 800846a:	1961      	adds	r1, r4, r5
 800846c:	428b      	cmp	r3, r1
 800846e:	bf01      	itttt	eq
 8008470:	6819      	ldreq	r1, [r3, #0]
 8008472:	685b      	ldreq	r3, [r3, #4]
 8008474:	1949      	addeq	r1, r1, r5
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	e7ed      	b.n	8008456 <_free_r+0x22>
 800847a:	461a      	mov	r2, r3
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	b10b      	cbz	r3, 8008484 <_free_r+0x50>
 8008480:	42a3      	cmp	r3, r4
 8008482:	d9fa      	bls.n	800847a <_free_r+0x46>
 8008484:	6811      	ldr	r1, [r2, #0]
 8008486:	1855      	adds	r5, r2, r1
 8008488:	42a5      	cmp	r5, r4
 800848a:	d10b      	bne.n	80084a4 <_free_r+0x70>
 800848c:	6824      	ldr	r4, [r4, #0]
 800848e:	4421      	add	r1, r4
 8008490:	1854      	adds	r4, r2, r1
 8008492:	42a3      	cmp	r3, r4
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	d1e0      	bne.n	800845a <_free_r+0x26>
 8008498:	681c      	ldr	r4, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	6053      	str	r3, [r2, #4]
 800849e:	440c      	add	r4, r1
 80084a0:	6014      	str	r4, [r2, #0]
 80084a2:	e7da      	b.n	800845a <_free_r+0x26>
 80084a4:	d902      	bls.n	80084ac <_free_r+0x78>
 80084a6:	230c      	movs	r3, #12
 80084a8:	6003      	str	r3, [r0, #0]
 80084aa:	e7d6      	b.n	800845a <_free_r+0x26>
 80084ac:	6825      	ldr	r5, [r4, #0]
 80084ae:	1961      	adds	r1, r4, r5
 80084b0:	428b      	cmp	r3, r1
 80084b2:	bf04      	itt	eq
 80084b4:	6819      	ldreq	r1, [r3, #0]
 80084b6:	685b      	ldreq	r3, [r3, #4]
 80084b8:	6063      	str	r3, [r4, #4]
 80084ba:	bf04      	itt	eq
 80084bc:	1949      	addeq	r1, r1, r5
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	6054      	str	r4, [r2, #4]
 80084c2:	e7ca      	b.n	800845a <_free_r+0x26>
 80084c4:	b003      	add	sp, #12
 80084c6:	bd30      	pop	{r4, r5, pc}
 80084c8:	200044f8 	.word	0x200044f8

080084cc <malloc>:
 80084cc:	4b02      	ldr	r3, [pc, #8]	; (80084d8 <malloc+0xc>)
 80084ce:	4601      	mov	r1, r0
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	f000 b823 	b.w	800851c <_malloc_r>
 80084d6:	bf00      	nop
 80084d8:	2000006c 	.word	0x2000006c

080084dc <sbrk_aligned>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4e0e      	ldr	r6, [pc, #56]	; (8008518 <sbrk_aligned+0x3c>)
 80084e0:	460c      	mov	r4, r1
 80084e2:	6831      	ldr	r1, [r6, #0]
 80084e4:	4605      	mov	r5, r0
 80084e6:	b911      	cbnz	r1, 80084ee <sbrk_aligned+0x12>
 80084e8:	f000 fe40 	bl	800916c <_sbrk_r>
 80084ec:	6030      	str	r0, [r6, #0]
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 fe3b 	bl	800916c <_sbrk_r>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d00a      	beq.n	8008510 <sbrk_aligned+0x34>
 80084fa:	1cc4      	adds	r4, r0, #3
 80084fc:	f024 0403 	bic.w	r4, r4, #3
 8008500:	42a0      	cmp	r0, r4
 8008502:	d007      	beq.n	8008514 <sbrk_aligned+0x38>
 8008504:	1a21      	subs	r1, r4, r0
 8008506:	4628      	mov	r0, r5
 8008508:	f000 fe30 	bl	800916c <_sbrk_r>
 800850c:	3001      	adds	r0, #1
 800850e:	d101      	bne.n	8008514 <sbrk_aligned+0x38>
 8008510:	f04f 34ff 	mov.w	r4, #4294967295
 8008514:	4620      	mov	r0, r4
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	200044fc 	.word	0x200044fc

0800851c <_malloc_r>:
 800851c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008520:	1ccd      	adds	r5, r1, #3
 8008522:	f025 0503 	bic.w	r5, r5, #3
 8008526:	3508      	adds	r5, #8
 8008528:	2d0c      	cmp	r5, #12
 800852a:	bf38      	it	cc
 800852c:	250c      	movcc	r5, #12
 800852e:	2d00      	cmp	r5, #0
 8008530:	4607      	mov	r7, r0
 8008532:	db01      	blt.n	8008538 <_malloc_r+0x1c>
 8008534:	42a9      	cmp	r1, r5
 8008536:	d905      	bls.n	8008544 <_malloc_r+0x28>
 8008538:	230c      	movs	r3, #12
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	2600      	movs	r6, #0
 800853e:	4630      	mov	r0, r6
 8008540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008544:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008618 <_malloc_r+0xfc>
 8008548:	f000 f868 	bl	800861c <__malloc_lock>
 800854c:	f8d8 3000 	ldr.w	r3, [r8]
 8008550:	461c      	mov	r4, r3
 8008552:	bb5c      	cbnz	r4, 80085ac <_malloc_r+0x90>
 8008554:	4629      	mov	r1, r5
 8008556:	4638      	mov	r0, r7
 8008558:	f7ff ffc0 	bl	80084dc <sbrk_aligned>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	4604      	mov	r4, r0
 8008560:	d155      	bne.n	800860e <_malloc_r+0xf2>
 8008562:	f8d8 4000 	ldr.w	r4, [r8]
 8008566:	4626      	mov	r6, r4
 8008568:	2e00      	cmp	r6, #0
 800856a:	d145      	bne.n	80085f8 <_malloc_r+0xdc>
 800856c:	2c00      	cmp	r4, #0
 800856e:	d048      	beq.n	8008602 <_malloc_r+0xe6>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	4631      	mov	r1, r6
 8008574:	4638      	mov	r0, r7
 8008576:	eb04 0903 	add.w	r9, r4, r3
 800857a:	f000 fdf7 	bl	800916c <_sbrk_r>
 800857e:	4581      	cmp	r9, r0
 8008580:	d13f      	bne.n	8008602 <_malloc_r+0xe6>
 8008582:	6821      	ldr	r1, [r4, #0]
 8008584:	1a6d      	subs	r5, r5, r1
 8008586:	4629      	mov	r1, r5
 8008588:	4638      	mov	r0, r7
 800858a:	f7ff ffa7 	bl	80084dc <sbrk_aligned>
 800858e:	3001      	adds	r0, #1
 8008590:	d037      	beq.n	8008602 <_malloc_r+0xe6>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	442b      	add	r3, r5
 8008596:	6023      	str	r3, [r4, #0]
 8008598:	f8d8 3000 	ldr.w	r3, [r8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d038      	beq.n	8008612 <_malloc_r+0xf6>
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	42a2      	cmp	r2, r4
 80085a4:	d12b      	bne.n	80085fe <_malloc_r+0xe2>
 80085a6:	2200      	movs	r2, #0
 80085a8:	605a      	str	r2, [r3, #4]
 80085aa:	e00f      	b.n	80085cc <_malloc_r+0xb0>
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	1b52      	subs	r2, r2, r5
 80085b0:	d41f      	bmi.n	80085f2 <_malloc_r+0xd6>
 80085b2:	2a0b      	cmp	r2, #11
 80085b4:	d917      	bls.n	80085e6 <_malloc_r+0xca>
 80085b6:	1961      	adds	r1, r4, r5
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	6025      	str	r5, [r4, #0]
 80085bc:	bf18      	it	ne
 80085be:	6059      	strne	r1, [r3, #4]
 80085c0:	6863      	ldr	r3, [r4, #4]
 80085c2:	bf08      	it	eq
 80085c4:	f8c8 1000 	streq.w	r1, [r8]
 80085c8:	5162      	str	r2, [r4, r5]
 80085ca:	604b      	str	r3, [r1, #4]
 80085cc:	4638      	mov	r0, r7
 80085ce:	f104 060b 	add.w	r6, r4, #11
 80085d2:	f000 f829 	bl	8008628 <__malloc_unlock>
 80085d6:	f026 0607 	bic.w	r6, r6, #7
 80085da:	1d23      	adds	r3, r4, #4
 80085dc:	1af2      	subs	r2, r6, r3
 80085de:	d0ae      	beq.n	800853e <_malloc_r+0x22>
 80085e0:	1b9b      	subs	r3, r3, r6
 80085e2:	50a3      	str	r3, [r4, r2]
 80085e4:	e7ab      	b.n	800853e <_malloc_r+0x22>
 80085e6:	42a3      	cmp	r3, r4
 80085e8:	6862      	ldr	r2, [r4, #4]
 80085ea:	d1dd      	bne.n	80085a8 <_malloc_r+0x8c>
 80085ec:	f8c8 2000 	str.w	r2, [r8]
 80085f0:	e7ec      	b.n	80085cc <_malloc_r+0xb0>
 80085f2:	4623      	mov	r3, r4
 80085f4:	6864      	ldr	r4, [r4, #4]
 80085f6:	e7ac      	b.n	8008552 <_malloc_r+0x36>
 80085f8:	4634      	mov	r4, r6
 80085fa:	6876      	ldr	r6, [r6, #4]
 80085fc:	e7b4      	b.n	8008568 <_malloc_r+0x4c>
 80085fe:	4613      	mov	r3, r2
 8008600:	e7cc      	b.n	800859c <_malloc_r+0x80>
 8008602:	230c      	movs	r3, #12
 8008604:	603b      	str	r3, [r7, #0]
 8008606:	4638      	mov	r0, r7
 8008608:	f000 f80e 	bl	8008628 <__malloc_unlock>
 800860c:	e797      	b.n	800853e <_malloc_r+0x22>
 800860e:	6025      	str	r5, [r4, #0]
 8008610:	e7dc      	b.n	80085cc <_malloc_r+0xb0>
 8008612:	605b      	str	r3, [r3, #4]
 8008614:	deff      	udf	#255	; 0xff
 8008616:	bf00      	nop
 8008618:	200044f8 	.word	0x200044f8

0800861c <__malloc_lock>:
 800861c:	4801      	ldr	r0, [pc, #4]	; (8008624 <__malloc_lock+0x8>)
 800861e:	f7ff b87c 	b.w	800771a <__retarget_lock_acquire_recursive>
 8008622:	bf00      	nop
 8008624:	200044f4 	.word	0x200044f4

08008628 <__malloc_unlock>:
 8008628:	4801      	ldr	r0, [pc, #4]	; (8008630 <__malloc_unlock+0x8>)
 800862a:	f7ff b877 	b.w	800771c <__retarget_lock_release_recursive>
 800862e:	bf00      	nop
 8008630:	200044f4 	.word	0x200044f4

08008634 <_Balloc>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	69c6      	ldr	r6, [r0, #28]
 8008638:	4604      	mov	r4, r0
 800863a:	460d      	mov	r5, r1
 800863c:	b976      	cbnz	r6, 800865c <_Balloc+0x28>
 800863e:	2010      	movs	r0, #16
 8008640:	f7ff ff44 	bl	80084cc <malloc>
 8008644:	4602      	mov	r2, r0
 8008646:	61e0      	str	r0, [r4, #28]
 8008648:	b920      	cbnz	r0, 8008654 <_Balloc+0x20>
 800864a:	4b18      	ldr	r3, [pc, #96]	; (80086ac <_Balloc+0x78>)
 800864c:	4818      	ldr	r0, [pc, #96]	; (80086b0 <_Balloc+0x7c>)
 800864e:	216b      	movs	r1, #107	; 0x6b
 8008650:	f000 fd9c 	bl	800918c <__assert_func>
 8008654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008658:	6006      	str	r6, [r0, #0]
 800865a:	60c6      	str	r6, [r0, #12]
 800865c:	69e6      	ldr	r6, [r4, #28]
 800865e:	68f3      	ldr	r3, [r6, #12]
 8008660:	b183      	cbz	r3, 8008684 <_Balloc+0x50>
 8008662:	69e3      	ldr	r3, [r4, #28]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800866a:	b9b8      	cbnz	r0, 800869c <_Balloc+0x68>
 800866c:	2101      	movs	r1, #1
 800866e:	fa01 f605 	lsl.w	r6, r1, r5
 8008672:	1d72      	adds	r2, r6, #5
 8008674:	0092      	lsls	r2, r2, #2
 8008676:	4620      	mov	r0, r4
 8008678:	f000 fda6 	bl	80091c8 <_calloc_r>
 800867c:	b160      	cbz	r0, 8008698 <_Balloc+0x64>
 800867e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008682:	e00e      	b.n	80086a2 <_Balloc+0x6e>
 8008684:	2221      	movs	r2, #33	; 0x21
 8008686:	2104      	movs	r1, #4
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fd9d 	bl	80091c8 <_calloc_r>
 800868e:	69e3      	ldr	r3, [r4, #28]
 8008690:	60f0      	str	r0, [r6, #12]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e4      	bne.n	8008662 <_Balloc+0x2e>
 8008698:	2000      	movs	r0, #0
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	6802      	ldr	r2, [r0, #0]
 800869e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086a2:	2300      	movs	r3, #0
 80086a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086a8:	e7f7      	b.n	800869a <_Balloc+0x66>
 80086aa:	bf00      	nop
 80086ac:	08009be9 	.word	0x08009be9
 80086b0:	08009c69 	.word	0x08009c69

080086b4 <_Bfree>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	69c6      	ldr	r6, [r0, #28]
 80086b8:	4605      	mov	r5, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	b976      	cbnz	r6, 80086dc <_Bfree+0x28>
 80086be:	2010      	movs	r0, #16
 80086c0:	f7ff ff04 	bl	80084cc <malloc>
 80086c4:	4602      	mov	r2, r0
 80086c6:	61e8      	str	r0, [r5, #28]
 80086c8:	b920      	cbnz	r0, 80086d4 <_Bfree+0x20>
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <_Bfree+0x3c>)
 80086cc:	4809      	ldr	r0, [pc, #36]	; (80086f4 <_Bfree+0x40>)
 80086ce:	218f      	movs	r1, #143	; 0x8f
 80086d0:	f000 fd5c 	bl	800918c <__assert_func>
 80086d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d8:	6006      	str	r6, [r0, #0]
 80086da:	60c6      	str	r6, [r0, #12]
 80086dc:	b13c      	cbz	r4, 80086ee <_Bfree+0x3a>
 80086de:	69eb      	ldr	r3, [r5, #28]
 80086e0:	6862      	ldr	r2, [r4, #4]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086e8:	6021      	str	r1, [r4, #0]
 80086ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	08009be9 	.word	0x08009be9
 80086f4:	08009c69 	.word	0x08009c69

080086f8 <__multadd>:
 80086f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fc:	690d      	ldr	r5, [r1, #16]
 80086fe:	4607      	mov	r7, r0
 8008700:	460c      	mov	r4, r1
 8008702:	461e      	mov	r6, r3
 8008704:	f101 0c14 	add.w	ip, r1, #20
 8008708:	2000      	movs	r0, #0
 800870a:	f8dc 3000 	ldr.w	r3, [ip]
 800870e:	b299      	uxth	r1, r3
 8008710:	fb02 6101 	mla	r1, r2, r1, r6
 8008714:	0c1e      	lsrs	r6, r3, #16
 8008716:	0c0b      	lsrs	r3, r1, #16
 8008718:	fb02 3306 	mla	r3, r2, r6, r3
 800871c:	b289      	uxth	r1, r1
 800871e:	3001      	adds	r0, #1
 8008720:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008724:	4285      	cmp	r5, r0
 8008726:	f84c 1b04 	str.w	r1, [ip], #4
 800872a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800872e:	dcec      	bgt.n	800870a <__multadd+0x12>
 8008730:	b30e      	cbz	r6, 8008776 <__multadd+0x7e>
 8008732:	68a3      	ldr	r3, [r4, #8]
 8008734:	42ab      	cmp	r3, r5
 8008736:	dc19      	bgt.n	800876c <__multadd+0x74>
 8008738:	6861      	ldr	r1, [r4, #4]
 800873a:	4638      	mov	r0, r7
 800873c:	3101      	adds	r1, #1
 800873e:	f7ff ff79 	bl	8008634 <_Balloc>
 8008742:	4680      	mov	r8, r0
 8008744:	b928      	cbnz	r0, 8008752 <__multadd+0x5a>
 8008746:	4602      	mov	r2, r0
 8008748:	4b0c      	ldr	r3, [pc, #48]	; (800877c <__multadd+0x84>)
 800874a:	480d      	ldr	r0, [pc, #52]	; (8008780 <__multadd+0x88>)
 800874c:	21ba      	movs	r1, #186	; 0xba
 800874e:	f000 fd1d 	bl	800918c <__assert_func>
 8008752:	6922      	ldr	r2, [r4, #16]
 8008754:	3202      	adds	r2, #2
 8008756:	f104 010c 	add.w	r1, r4, #12
 800875a:	0092      	lsls	r2, r2, #2
 800875c:	300c      	adds	r0, #12
 800875e:	f7fe ffde 	bl	800771e <memcpy>
 8008762:	4621      	mov	r1, r4
 8008764:	4638      	mov	r0, r7
 8008766:	f7ff ffa5 	bl	80086b4 <_Bfree>
 800876a:	4644      	mov	r4, r8
 800876c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008770:	3501      	adds	r5, #1
 8008772:	615e      	str	r6, [r3, #20]
 8008774:	6125      	str	r5, [r4, #16]
 8008776:	4620      	mov	r0, r4
 8008778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800877c:	08009c58 	.word	0x08009c58
 8008780:	08009c69 	.word	0x08009c69

08008784 <__hi0bits>:
 8008784:	0c03      	lsrs	r3, r0, #16
 8008786:	041b      	lsls	r3, r3, #16
 8008788:	b9d3      	cbnz	r3, 80087c0 <__hi0bits+0x3c>
 800878a:	0400      	lsls	r0, r0, #16
 800878c:	2310      	movs	r3, #16
 800878e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008792:	bf04      	itt	eq
 8008794:	0200      	lsleq	r0, r0, #8
 8008796:	3308      	addeq	r3, #8
 8008798:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800879c:	bf04      	itt	eq
 800879e:	0100      	lsleq	r0, r0, #4
 80087a0:	3304      	addeq	r3, #4
 80087a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087a6:	bf04      	itt	eq
 80087a8:	0080      	lsleq	r0, r0, #2
 80087aa:	3302      	addeq	r3, #2
 80087ac:	2800      	cmp	r0, #0
 80087ae:	db05      	blt.n	80087bc <__hi0bits+0x38>
 80087b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80087b4:	f103 0301 	add.w	r3, r3, #1
 80087b8:	bf08      	it	eq
 80087ba:	2320      	moveq	r3, #32
 80087bc:	4618      	mov	r0, r3
 80087be:	4770      	bx	lr
 80087c0:	2300      	movs	r3, #0
 80087c2:	e7e4      	b.n	800878e <__hi0bits+0xa>

080087c4 <__lo0bits>:
 80087c4:	6803      	ldr	r3, [r0, #0]
 80087c6:	f013 0207 	ands.w	r2, r3, #7
 80087ca:	d00c      	beq.n	80087e6 <__lo0bits+0x22>
 80087cc:	07d9      	lsls	r1, r3, #31
 80087ce:	d422      	bmi.n	8008816 <__lo0bits+0x52>
 80087d0:	079a      	lsls	r2, r3, #30
 80087d2:	bf49      	itett	mi
 80087d4:	085b      	lsrmi	r3, r3, #1
 80087d6:	089b      	lsrpl	r3, r3, #2
 80087d8:	6003      	strmi	r3, [r0, #0]
 80087da:	2201      	movmi	r2, #1
 80087dc:	bf5c      	itt	pl
 80087de:	6003      	strpl	r3, [r0, #0]
 80087e0:	2202      	movpl	r2, #2
 80087e2:	4610      	mov	r0, r2
 80087e4:	4770      	bx	lr
 80087e6:	b299      	uxth	r1, r3
 80087e8:	b909      	cbnz	r1, 80087ee <__lo0bits+0x2a>
 80087ea:	0c1b      	lsrs	r3, r3, #16
 80087ec:	2210      	movs	r2, #16
 80087ee:	b2d9      	uxtb	r1, r3
 80087f0:	b909      	cbnz	r1, 80087f6 <__lo0bits+0x32>
 80087f2:	3208      	adds	r2, #8
 80087f4:	0a1b      	lsrs	r3, r3, #8
 80087f6:	0719      	lsls	r1, r3, #28
 80087f8:	bf04      	itt	eq
 80087fa:	091b      	lsreq	r3, r3, #4
 80087fc:	3204      	addeq	r2, #4
 80087fe:	0799      	lsls	r1, r3, #30
 8008800:	bf04      	itt	eq
 8008802:	089b      	lsreq	r3, r3, #2
 8008804:	3202      	addeq	r2, #2
 8008806:	07d9      	lsls	r1, r3, #31
 8008808:	d403      	bmi.n	8008812 <__lo0bits+0x4e>
 800880a:	085b      	lsrs	r3, r3, #1
 800880c:	f102 0201 	add.w	r2, r2, #1
 8008810:	d003      	beq.n	800881a <__lo0bits+0x56>
 8008812:	6003      	str	r3, [r0, #0]
 8008814:	e7e5      	b.n	80087e2 <__lo0bits+0x1e>
 8008816:	2200      	movs	r2, #0
 8008818:	e7e3      	b.n	80087e2 <__lo0bits+0x1e>
 800881a:	2220      	movs	r2, #32
 800881c:	e7e1      	b.n	80087e2 <__lo0bits+0x1e>
	...

08008820 <__i2b>:
 8008820:	b510      	push	{r4, lr}
 8008822:	460c      	mov	r4, r1
 8008824:	2101      	movs	r1, #1
 8008826:	f7ff ff05 	bl	8008634 <_Balloc>
 800882a:	4602      	mov	r2, r0
 800882c:	b928      	cbnz	r0, 800883a <__i2b+0x1a>
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <__i2b+0x24>)
 8008830:	4805      	ldr	r0, [pc, #20]	; (8008848 <__i2b+0x28>)
 8008832:	f240 1145 	movw	r1, #325	; 0x145
 8008836:	f000 fca9 	bl	800918c <__assert_func>
 800883a:	2301      	movs	r3, #1
 800883c:	6144      	str	r4, [r0, #20]
 800883e:	6103      	str	r3, [r0, #16]
 8008840:	bd10      	pop	{r4, pc}
 8008842:	bf00      	nop
 8008844:	08009c58 	.word	0x08009c58
 8008848:	08009c69 	.word	0x08009c69

0800884c <__multiply>:
 800884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	4691      	mov	r9, r2
 8008852:	690a      	ldr	r2, [r1, #16]
 8008854:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008858:	429a      	cmp	r2, r3
 800885a:	bfb8      	it	lt
 800885c:	460b      	movlt	r3, r1
 800885e:	460c      	mov	r4, r1
 8008860:	bfbc      	itt	lt
 8008862:	464c      	movlt	r4, r9
 8008864:	4699      	movlt	r9, r3
 8008866:	6927      	ldr	r7, [r4, #16]
 8008868:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800886c:	68a3      	ldr	r3, [r4, #8]
 800886e:	6861      	ldr	r1, [r4, #4]
 8008870:	eb07 060a 	add.w	r6, r7, sl
 8008874:	42b3      	cmp	r3, r6
 8008876:	b085      	sub	sp, #20
 8008878:	bfb8      	it	lt
 800887a:	3101      	addlt	r1, #1
 800887c:	f7ff feda 	bl	8008634 <_Balloc>
 8008880:	b930      	cbnz	r0, 8008890 <__multiply+0x44>
 8008882:	4602      	mov	r2, r0
 8008884:	4b44      	ldr	r3, [pc, #272]	; (8008998 <__multiply+0x14c>)
 8008886:	4845      	ldr	r0, [pc, #276]	; (800899c <__multiply+0x150>)
 8008888:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800888c:	f000 fc7e 	bl	800918c <__assert_func>
 8008890:	f100 0514 	add.w	r5, r0, #20
 8008894:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008898:	462b      	mov	r3, r5
 800889a:	2200      	movs	r2, #0
 800889c:	4543      	cmp	r3, r8
 800889e:	d321      	bcc.n	80088e4 <__multiply+0x98>
 80088a0:	f104 0314 	add.w	r3, r4, #20
 80088a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80088a8:	f109 0314 	add.w	r3, r9, #20
 80088ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80088b0:	9202      	str	r2, [sp, #8]
 80088b2:	1b3a      	subs	r2, r7, r4
 80088b4:	3a15      	subs	r2, #21
 80088b6:	f022 0203 	bic.w	r2, r2, #3
 80088ba:	3204      	adds	r2, #4
 80088bc:	f104 0115 	add.w	r1, r4, #21
 80088c0:	428f      	cmp	r7, r1
 80088c2:	bf38      	it	cc
 80088c4:	2204      	movcc	r2, #4
 80088c6:	9201      	str	r2, [sp, #4]
 80088c8:	9a02      	ldr	r2, [sp, #8]
 80088ca:	9303      	str	r3, [sp, #12]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d80c      	bhi.n	80088ea <__multiply+0x9e>
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	dd03      	ble.n	80088dc <__multiply+0x90>
 80088d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d05b      	beq.n	8008994 <__multiply+0x148>
 80088dc:	6106      	str	r6, [r0, #16]
 80088de:	b005      	add	sp, #20
 80088e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e4:	f843 2b04 	str.w	r2, [r3], #4
 80088e8:	e7d8      	b.n	800889c <__multiply+0x50>
 80088ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80088ee:	f1ba 0f00 	cmp.w	sl, #0
 80088f2:	d024      	beq.n	800893e <__multiply+0xf2>
 80088f4:	f104 0e14 	add.w	lr, r4, #20
 80088f8:	46a9      	mov	r9, r5
 80088fa:	f04f 0c00 	mov.w	ip, #0
 80088fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008902:	f8d9 1000 	ldr.w	r1, [r9]
 8008906:	fa1f fb82 	uxth.w	fp, r2
 800890a:	b289      	uxth	r1, r1
 800890c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008910:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008914:	f8d9 2000 	ldr.w	r2, [r9]
 8008918:	4461      	add	r1, ip
 800891a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800891e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008922:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008926:	b289      	uxth	r1, r1
 8008928:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800892c:	4577      	cmp	r7, lr
 800892e:	f849 1b04 	str.w	r1, [r9], #4
 8008932:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008936:	d8e2      	bhi.n	80088fe <__multiply+0xb2>
 8008938:	9a01      	ldr	r2, [sp, #4]
 800893a:	f845 c002 	str.w	ip, [r5, r2]
 800893e:	9a03      	ldr	r2, [sp, #12]
 8008940:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008944:	3304      	adds	r3, #4
 8008946:	f1b9 0f00 	cmp.w	r9, #0
 800894a:	d021      	beq.n	8008990 <__multiply+0x144>
 800894c:	6829      	ldr	r1, [r5, #0]
 800894e:	f104 0c14 	add.w	ip, r4, #20
 8008952:	46ae      	mov	lr, r5
 8008954:	f04f 0a00 	mov.w	sl, #0
 8008958:	f8bc b000 	ldrh.w	fp, [ip]
 800895c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008960:	fb09 220b 	mla	r2, r9, fp, r2
 8008964:	4452      	add	r2, sl
 8008966:	b289      	uxth	r1, r1
 8008968:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800896c:	f84e 1b04 	str.w	r1, [lr], #4
 8008970:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008974:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008978:	f8be 1000 	ldrh.w	r1, [lr]
 800897c:	fb09 110a 	mla	r1, r9, sl, r1
 8008980:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008984:	4567      	cmp	r7, ip
 8008986:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800898a:	d8e5      	bhi.n	8008958 <__multiply+0x10c>
 800898c:	9a01      	ldr	r2, [sp, #4]
 800898e:	50a9      	str	r1, [r5, r2]
 8008990:	3504      	adds	r5, #4
 8008992:	e799      	b.n	80088c8 <__multiply+0x7c>
 8008994:	3e01      	subs	r6, #1
 8008996:	e79b      	b.n	80088d0 <__multiply+0x84>
 8008998:	08009c58 	.word	0x08009c58
 800899c:	08009c69 	.word	0x08009c69

080089a0 <__pow5mult>:
 80089a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089a4:	4615      	mov	r5, r2
 80089a6:	f012 0203 	ands.w	r2, r2, #3
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	d007      	beq.n	80089c0 <__pow5mult+0x20>
 80089b0:	4c25      	ldr	r4, [pc, #148]	; (8008a48 <__pow5mult+0xa8>)
 80089b2:	3a01      	subs	r2, #1
 80089b4:	2300      	movs	r3, #0
 80089b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089ba:	f7ff fe9d 	bl	80086f8 <__multadd>
 80089be:	4607      	mov	r7, r0
 80089c0:	10ad      	asrs	r5, r5, #2
 80089c2:	d03d      	beq.n	8008a40 <__pow5mult+0xa0>
 80089c4:	69f4      	ldr	r4, [r6, #28]
 80089c6:	b97c      	cbnz	r4, 80089e8 <__pow5mult+0x48>
 80089c8:	2010      	movs	r0, #16
 80089ca:	f7ff fd7f 	bl	80084cc <malloc>
 80089ce:	4602      	mov	r2, r0
 80089d0:	61f0      	str	r0, [r6, #28]
 80089d2:	b928      	cbnz	r0, 80089e0 <__pow5mult+0x40>
 80089d4:	4b1d      	ldr	r3, [pc, #116]	; (8008a4c <__pow5mult+0xac>)
 80089d6:	481e      	ldr	r0, [pc, #120]	; (8008a50 <__pow5mult+0xb0>)
 80089d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80089dc:	f000 fbd6 	bl	800918c <__assert_func>
 80089e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089e4:	6004      	str	r4, [r0, #0]
 80089e6:	60c4      	str	r4, [r0, #12]
 80089e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80089ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089f0:	b94c      	cbnz	r4, 8008a06 <__pow5mult+0x66>
 80089f2:	f240 2171 	movw	r1, #625	; 0x271
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7ff ff12 	bl	8008820 <__i2b>
 80089fc:	2300      	movs	r3, #0
 80089fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a02:	4604      	mov	r4, r0
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	f04f 0900 	mov.w	r9, #0
 8008a0a:	07eb      	lsls	r3, r5, #31
 8008a0c:	d50a      	bpl.n	8008a24 <__pow5mult+0x84>
 8008a0e:	4639      	mov	r1, r7
 8008a10:	4622      	mov	r2, r4
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff ff1a 	bl	800884c <__multiply>
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7ff fe49 	bl	80086b4 <_Bfree>
 8008a22:	4647      	mov	r7, r8
 8008a24:	106d      	asrs	r5, r5, #1
 8008a26:	d00b      	beq.n	8008a40 <__pow5mult+0xa0>
 8008a28:	6820      	ldr	r0, [r4, #0]
 8008a2a:	b938      	cbnz	r0, 8008a3c <__pow5mult+0x9c>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7ff ff0b 	bl	800884c <__multiply>
 8008a36:	6020      	str	r0, [r4, #0]
 8008a38:	f8c0 9000 	str.w	r9, [r0]
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	e7e4      	b.n	8008a0a <__pow5mult+0x6a>
 8008a40:	4638      	mov	r0, r7
 8008a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a46:	bf00      	nop
 8008a48:	08009db8 	.word	0x08009db8
 8008a4c:	08009be9 	.word	0x08009be9
 8008a50:	08009c69 	.word	0x08009c69

08008a54 <__lshift>:
 8008a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a58:	460c      	mov	r4, r1
 8008a5a:	6849      	ldr	r1, [r1, #4]
 8008a5c:	6923      	ldr	r3, [r4, #16]
 8008a5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	4607      	mov	r7, r0
 8008a66:	4691      	mov	r9, r2
 8008a68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a6c:	f108 0601 	add.w	r6, r8, #1
 8008a70:	42b3      	cmp	r3, r6
 8008a72:	db0b      	blt.n	8008a8c <__lshift+0x38>
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff fddd 	bl	8008634 <_Balloc>
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	b948      	cbnz	r0, 8008a92 <__lshift+0x3e>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	4b28      	ldr	r3, [pc, #160]	; (8008b24 <__lshift+0xd0>)
 8008a82:	4829      	ldr	r0, [pc, #164]	; (8008b28 <__lshift+0xd4>)
 8008a84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a88:	f000 fb80 	bl	800918c <__assert_func>
 8008a8c:	3101      	adds	r1, #1
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	e7ee      	b.n	8008a70 <__lshift+0x1c>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f100 0114 	add.w	r1, r0, #20
 8008a98:	f100 0210 	add.w	r2, r0, #16
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	4553      	cmp	r3, sl
 8008aa0:	db33      	blt.n	8008b0a <__lshift+0xb6>
 8008aa2:	6920      	ldr	r0, [r4, #16]
 8008aa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008aa8:	f104 0314 	add.w	r3, r4, #20
 8008aac:	f019 091f 	ands.w	r9, r9, #31
 8008ab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ab8:	d02b      	beq.n	8008b12 <__lshift+0xbe>
 8008aba:	f1c9 0e20 	rsb	lr, r9, #32
 8008abe:	468a      	mov	sl, r1
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	fa00 f009 	lsl.w	r0, r0, r9
 8008ac8:	4310      	orrs	r0, r2
 8008aca:	f84a 0b04 	str.w	r0, [sl], #4
 8008ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad2:	459c      	cmp	ip, r3
 8008ad4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ad8:	d8f3      	bhi.n	8008ac2 <__lshift+0x6e>
 8008ada:	ebac 0304 	sub.w	r3, ip, r4
 8008ade:	3b15      	subs	r3, #21
 8008ae0:	f023 0303 	bic.w	r3, r3, #3
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	f104 0015 	add.w	r0, r4, #21
 8008aea:	4584      	cmp	ip, r0
 8008aec:	bf38      	it	cc
 8008aee:	2304      	movcc	r3, #4
 8008af0:	50ca      	str	r2, [r1, r3]
 8008af2:	b10a      	cbz	r2, 8008af8 <__lshift+0xa4>
 8008af4:	f108 0602 	add.w	r6, r8, #2
 8008af8:	3e01      	subs	r6, #1
 8008afa:	4638      	mov	r0, r7
 8008afc:	612e      	str	r6, [r5, #16]
 8008afe:	4621      	mov	r1, r4
 8008b00:	f7ff fdd8 	bl	80086b4 <_Bfree>
 8008b04:	4628      	mov	r0, r5
 8008b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b0e:	3301      	adds	r3, #1
 8008b10:	e7c5      	b.n	8008a9e <__lshift+0x4a>
 8008b12:	3904      	subs	r1, #4
 8008b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b1c:	459c      	cmp	ip, r3
 8008b1e:	d8f9      	bhi.n	8008b14 <__lshift+0xc0>
 8008b20:	e7ea      	b.n	8008af8 <__lshift+0xa4>
 8008b22:	bf00      	nop
 8008b24:	08009c58 	.word	0x08009c58
 8008b28:	08009c69 	.word	0x08009c69

08008b2c <__mcmp>:
 8008b2c:	b530      	push	{r4, r5, lr}
 8008b2e:	6902      	ldr	r2, [r0, #16]
 8008b30:	690c      	ldr	r4, [r1, #16]
 8008b32:	1b12      	subs	r2, r2, r4
 8008b34:	d10e      	bne.n	8008b54 <__mcmp+0x28>
 8008b36:	f100 0314 	add.w	r3, r0, #20
 8008b3a:	3114      	adds	r1, #20
 8008b3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b4c:	42a5      	cmp	r5, r4
 8008b4e:	d003      	beq.n	8008b58 <__mcmp+0x2c>
 8008b50:	d305      	bcc.n	8008b5e <__mcmp+0x32>
 8008b52:	2201      	movs	r2, #1
 8008b54:	4610      	mov	r0, r2
 8008b56:	bd30      	pop	{r4, r5, pc}
 8008b58:	4283      	cmp	r3, r0
 8008b5a:	d3f3      	bcc.n	8008b44 <__mcmp+0x18>
 8008b5c:	e7fa      	b.n	8008b54 <__mcmp+0x28>
 8008b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b62:	e7f7      	b.n	8008b54 <__mcmp+0x28>

08008b64 <__mdiff>:
 8008b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	460c      	mov	r4, r1
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	4620      	mov	r0, r4
 8008b70:	4690      	mov	r8, r2
 8008b72:	f7ff ffdb 	bl	8008b2c <__mcmp>
 8008b76:	1e05      	subs	r5, r0, #0
 8008b78:	d110      	bne.n	8008b9c <__mdiff+0x38>
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f7ff fd59 	bl	8008634 <_Balloc>
 8008b82:	b930      	cbnz	r0, 8008b92 <__mdiff+0x2e>
 8008b84:	4b3a      	ldr	r3, [pc, #232]	; (8008c70 <__mdiff+0x10c>)
 8008b86:	4602      	mov	r2, r0
 8008b88:	f240 2137 	movw	r1, #567	; 0x237
 8008b8c:	4839      	ldr	r0, [pc, #228]	; (8008c74 <__mdiff+0x110>)
 8008b8e:	f000 fafd 	bl	800918c <__assert_func>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9c:	bfa4      	itt	ge
 8008b9e:	4643      	movge	r3, r8
 8008ba0:	46a0      	movge	r8, r4
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ba8:	bfa6      	itte	ge
 8008baa:	461c      	movge	r4, r3
 8008bac:	2500      	movge	r5, #0
 8008bae:	2501      	movlt	r5, #1
 8008bb0:	f7ff fd40 	bl	8008634 <_Balloc>
 8008bb4:	b920      	cbnz	r0, 8008bc0 <__mdiff+0x5c>
 8008bb6:	4b2e      	ldr	r3, [pc, #184]	; (8008c70 <__mdiff+0x10c>)
 8008bb8:	4602      	mov	r2, r0
 8008bba:	f240 2145 	movw	r1, #581	; 0x245
 8008bbe:	e7e5      	b.n	8008b8c <__mdiff+0x28>
 8008bc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008bc4:	6926      	ldr	r6, [r4, #16]
 8008bc6:	60c5      	str	r5, [r0, #12]
 8008bc8:	f104 0914 	add.w	r9, r4, #20
 8008bcc:	f108 0514 	add.w	r5, r8, #20
 8008bd0:	f100 0e14 	add.w	lr, r0, #20
 8008bd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008bd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bdc:	f108 0210 	add.w	r2, r8, #16
 8008be0:	46f2      	mov	sl, lr
 8008be2:	2100      	movs	r1, #0
 8008be4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008be8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bec:	fa11 f88b 	uxtah	r8, r1, fp
 8008bf0:	b299      	uxth	r1, r3
 8008bf2:	0c1b      	lsrs	r3, r3, #16
 8008bf4:	eba8 0801 	sub.w	r8, r8, r1
 8008bf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bfc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c00:	fa1f f888 	uxth.w	r8, r8
 8008c04:	1419      	asrs	r1, r3, #16
 8008c06:	454e      	cmp	r6, r9
 8008c08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c0c:	f84a 3b04 	str.w	r3, [sl], #4
 8008c10:	d8e8      	bhi.n	8008be4 <__mdiff+0x80>
 8008c12:	1b33      	subs	r3, r6, r4
 8008c14:	3b15      	subs	r3, #21
 8008c16:	f023 0303 	bic.w	r3, r3, #3
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	3415      	adds	r4, #21
 8008c1e:	42a6      	cmp	r6, r4
 8008c20:	bf38      	it	cc
 8008c22:	2304      	movcc	r3, #4
 8008c24:	441d      	add	r5, r3
 8008c26:	4473      	add	r3, lr
 8008c28:	469e      	mov	lr, r3
 8008c2a:	462e      	mov	r6, r5
 8008c2c:	4566      	cmp	r6, ip
 8008c2e:	d30e      	bcc.n	8008c4e <__mdiff+0xea>
 8008c30:	f10c 0203 	add.w	r2, ip, #3
 8008c34:	1b52      	subs	r2, r2, r5
 8008c36:	f022 0203 	bic.w	r2, r2, #3
 8008c3a:	3d03      	subs	r5, #3
 8008c3c:	45ac      	cmp	ip, r5
 8008c3e:	bf38      	it	cc
 8008c40:	2200      	movcc	r2, #0
 8008c42:	4413      	add	r3, r2
 8008c44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008c48:	b17a      	cbz	r2, 8008c6a <__mdiff+0x106>
 8008c4a:	6107      	str	r7, [r0, #16]
 8008c4c:	e7a4      	b.n	8008b98 <__mdiff+0x34>
 8008c4e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c52:	fa11 f288 	uxtah	r2, r1, r8
 8008c56:	1414      	asrs	r4, r2, #16
 8008c58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c5c:	b292      	uxth	r2, r2
 8008c5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c62:	f84e 2b04 	str.w	r2, [lr], #4
 8008c66:	1421      	asrs	r1, r4, #16
 8008c68:	e7e0      	b.n	8008c2c <__mdiff+0xc8>
 8008c6a:	3f01      	subs	r7, #1
 8008c6c:	e7ea      	b.n	8008c44 <__mdiff+0xe0>
 8008c6e:	bf00      	nop
 8008c70:	08009c58 	.word	0x08009c58
 8008c74:	08009c69 	.word	0x08009c69

08008c78 <__d2b>:
 8008c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	460f      	mov	r7, r1
 8008c7e:	2101      	movs	r1, #1
 8008c80:	ec59 8b10 	vmov	r8, r9, d0
 8008c84:	4616      	mov	r6, r2
 8008c86:	f7ff fcd5 	bl	8008634 <_Balloc>
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	b930      	cbnz	r0, 8008c9c <__d2b+0x24>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	4b24      	ldr	r3, [pc, #144]	; (8008d24 <__d2b+0xac>)
 8008c92:	4825      	ldr	r0, [pc, #148]	; (8008d28 <__d2b+0xb0>)
 8008c94:	f240 310f 	movw	r1, #783	; 0x30f
 8008c98:	f000 fa78 	bl	800918c <__assert_func>
 8008c9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ca4:	bb2d      	cbnz	r5, 8008cf2 <__d2b+0x7a>
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	f1b8 0300 	subs.w	r3, r8, #0
 8008cac:	d026      	beq.n	8008cfc <__d2b+0x84>
 8008cae:	4668      	mov	r0, sp
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	f7ff fd87 	bl	80087c4 <__lo0bits>
 8008cb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cba:	b1e8      	cbz	r0, 8008cf8 <__d2b+0x80>
 8008cbc:	f1c0 0320 	rsb	r3, r0, #32
 8008cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	40c2      	lsrs	r2, r0
 8008cc8:	6163      	str	r3, [r4, #20]
 8008cca:	9201      	str	r2, [sp, #4]
 8008ccc:	9b01      	ldr	r3, [sp, #4]
 8008cce:	61a3      	str	r3, [r4, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bf14      	ite	ne
 8008cd4:	2202      	movne	r2, #2
 8008cd6:	2201      	moveq	r2, #1
 8008cd8:	6122      	str	r2, [r4, #16]
 8008cda:	b1bd      	cbz	r5, 8008d0c <__d2b+0x94>
 8008cdc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ce0:	4405      	add	r5, r0
 8008ce2:	603d      	str	r5, [r7, #0]
 8008ce4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ce8:	6030      	str	r0, [r6, #0]
 8008cea:	4620      	mov	r0, r4
 8008cec:	b003      	add	sp, #12
 8008cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cf6:	e7d6      	b.n	8008ca6 <__d2b+0x2e>
 8008cf8:	6161      	str	r1, [r4, #20]
 8008cfa:	e7e7      	b.n	8008ccc <__d2b+0x54>
 8008cfc:	a801      	add	r0, sp, #4
 8008cfe:	f7ff fd61 	bl	80087c4 <__lo0bits>
 8008d02:	9b01      	ldr	r3, [sp, #4]
 8008d04:	6163      	str	r3, [r4, #20]
 8008d06:	3020      	adds	r0, #32
 8008d08:	2201      	movs	r2, #1
 8008d0a:	e7e5      	b.n	8008cd8 <__d2b+0x60>
 8008d0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d14:	6038      	str	r0, [r7, #0]
 8008d16:	6918      	ldr	r0, [r3, #16]
 8008d18:	f7ff fd34 	bl	8008784 <__hi0bits>
 8008d1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d20:	e7e2      	b.n	8008ce8 <__d2b+0x70>
 8008d22:	bf00      	nop
 8008d24:	08009c58 	.word	0x08009c58
 8008d28:	08009c69 	.word	0x08009c69

08008d2c <__ssputs_r>:
 8008d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d30:	688e      	ldr	r6, [r1, #8]
 8008d32:	461f      	mov	r7, r3
 8008d34:	42be      	cmp	r6, r7
 8008d36:	680b      	ldr	r3, [r1, #0]
 8008d38:	4682      	mov	sl, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4690      	mov	r8, r2
 8008d3e:	d82c      	bhi.n	8008d9a <__ssputs_r+0x6e>
 8008d40:	898a      	ldrh	r2, [r1, #12]
 8008d42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d46:	d026      	beq.n	8008d96 <__ssputs_r+0x6a>
 8008d48:	6965      	ldr	r5, [r4, #20]
 8008d4a:	6909      	ldr	r1, [r1, #16]
 8008d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d50:	eba3 0901 	sub.w	r9, r3, r1
 8008d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d58:	1c7b      	adds	r3, r7, #1
 8008d5a:	444b      	add	r3, r9
 8008d5c:	106d      	asrs	r5, r5, #1
 8008d5e:	429d      	cmp	r5, r3
 8008d60:	bf38      	it	cc
 8008d62:	461d      	movcc	r5, r3
 8008d64:	0553      	lsls	r3, r2, #21
 8008d66:	d527      	bpl.n	8008db8 <__ssputs_r+0x8c>
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7ff fbd7 	bl	800851c <_malloc_r>
 8008d6e:	4606      	mov	r6, r0
 8008d70:	b360      	cbz	r0, 8008dcc <__ssputs_r+0xa0>
 8008d72:	6921      	ldr	r1, [r4, #16]
 8008d74:	464a      	mov	r2, r9
 8008d76:	f7fe fcd2 	bl	800771e <memcpy>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d84:	81a3      	strh	r3, [r4, #12]
 8008d86:	6126      	str	r6, [r4, #16]
 8008d88:	6165      	str	r5, [r4, #20]
 8008d8a:	444e      	add	r6, r9
 8008d8c:	eba5 0509 	sub.w	r5, r5, r9
 8008d90:	6026      	str	r6, [r4, #0]
 8008d92:	60a5      	str	r5, [r4, #8]
 8008d94:	463e      	mov	r6, r7
 8008d96:	42be      	cmp	r6, r7
 8008d98:	d900      	bls.n	8008d9c <__ssputs_r+0x70>
 8008d9a:	463e      	mov	r6, r7
 8008d9c:	6820      	ldr	r0, [r4, #0]
 8008d9e:	4632      	mov	r2, r6
 8008da0:	4641      	mov	r1, r8
 8008da2:	f000 f9c9 	bl	8009138 <memmove>
 8008da6:	68a3      	ldr	r3, [r4, #8]
 8008da8:	1b9b      	subs	r3, r3, r6
 8008daa:	60a3      	str	r3, [r4, #8]
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	4433      	add	r3, r6
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	2000      	movs	r0, #0
 8008db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db8:	462a      	mov	r2, r5
 8008dba:	f000 fa2d 	bl	8009218 <_realloc_r>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d1e0      	bne.n	8008d86 <__ssputs_r+0x5a>
 8008dc4:	6921      	ldr	r1, [r4, #16]
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	f7ff fb34 	bl	8008434 <_free_r>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	f8ca 3000 	str.w	r3, [sl]
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295
 8008dde:	e7e9      	b.n	8008db4 <__ssputs_r+0x88>

08008de0 <_svfiprintf_r>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	4698      	mov	r8, r3
 8008de6:	898b      	ldrh	r3, [r1, #12]
 8008de8:	061b      	lsls	r3, r3, #24
 8008dea:	b09d      	sub	sp, #116	; 0x74
 8008dec:	4607      	mov	r7, r0
 8008dee:	460d      	mov	r5, r1
 8008df0:	4614      	mov	r4, r2
 8008df2:	d50e      	bpl.n	8008e12 <_svfiprintf_r+0x32>
 8008df4:	690b      	ldr	r3, [r1, #16]
 8008df6:	b963      	cbnz	r3, 8008e12 <_svfiprintf_r+0x32>
 8008df8:	2140      	movs	r1, #64	; 0x40
 8008dfa:	f7ff fb8f 	bl	800851c <_malloc_r>
 8008dfe:	6028      	str	r0, [r5, #0]
 8008e00:	6128      	str	r0, [r5, #16]
 8008e02:	b920      	cbnz	r0, 8008e0e <_svfiprintf_r+0x2e>
 8008e04:	230c      	movs	r3, #12
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	e0d0      	b.n	8008fb0 <_svfiprintf_r+0x1d0>
 8008e0e:	2340      	movs	r3, #64	; 0x40
 8008e10:	616b      	str	r3, [r5, #20]
 8008e12:	2300      	movs	r3, #0
 8008e14:	9309      	str	r3, [sp, #36]	; 0x24
 8008e16:	2320      	movs	r3, #32
 8008e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e20:	2330      	movs	r3, #48	; 0x30
 8008e22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008fc8 <_svfiprintf_r+0x1e8>
 8008e26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e2a:	f04f 0901 	mov.w	r9, #1
 8008e2e:	4623      	mov	r3, r4
 8008e30:	469a      	mov	sl, r3
 8008e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e36:	b10a      	cbz	r2, 8008e3c <_svfiprintf_r+0x5c>
 8008e38:	2a25      	cmp	r2, #37	; 0x25
 8008e3a:	d1f9      	bne.n	8008e30 <_svfiprintf_r+0x50>
 8008e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e40:	d00b      	beq.n	8008e5a <_svfiprintf_r+0x7a>
 8008e42:	465b      	mov	r3, fp
 8008e44:	4622      	mov	r2, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	4638      	mov	r0, r7
 8008e4a:	f7ff ff6f 	bl	8008d2c <__ssputs_r>
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f000 80a9 	beq.w	8008fa6 <_svfiprintf_r+0x1c6>
 8008e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e56:	445a      	add	r2, fp
 8008e58:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 80a1 	beq.w	8008fa6 <_svfiprintf_r+0x1c6>
 8008e64:	2300      	movs	r3, #0
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e6e:	f10a 0a01 	add.w	sl, sl, #1
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	9307      	str	r3, [sp, #28]
 8008e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e7c:	4654      	mov	r4, sl
 8008e7e:	2205      	movs	r2, #5
 8008e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e84:	4850      	ldr	r0, [pc, #320]	; (8008fc8 <_svfiprintf_r+0x1e8>)
 8008e86:	f7f7 f9ab 	bl	80001e0 <memchr>
 8008e8a:	9a04      	ldr	r2, [sp, #16]
 8008e8c:	b9d8      	cbnz	r0, 8008ec6 <_svfiprintf_r+0xe6>
 8008e8e:	06d0      	lsls	r0, r2, #27
 8008e90:	bf44      	itt	mi
 8008e92:	2320      	movmi	r3, #32
 8008e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e98:	0711      	lsls	r1, r2, #28
 8008e9a:	bf44      	itt	mi
 8008e9c:	232b      	movmi	r3, #43	; 0x2b
 8008e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea8:	d015      	beq.n	8008ed6 <_svfiprintf_r+0xf6>
 8008eaa:	9a07      	ldr	r2, [sp, #28]
 8008eac:	4654      	mov	r4, sl
 8008eae:	2000      	movs	r0, #0
 8008eb0:	f04f 0c0a 	mov.w	ip, #10
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eba:	3b30      	subs	r3, #48	; 0x30
 8008ebc:	2b09      	cmp	r3, #9
 8008ebe:	d94d      	bls.n	8008f5c <_svfiprintf_r+0x17c>
 8008ec0:	b1b0      	cbz	r0, 8008ef0 <_svfiprintf_r+0x110>
 8008ec2:	9207      	str	r2, [sp, #28]
 8008ec4:	e014      	b.n	8008ef0 <_svfiprintf_r+0x110>
 8008ec6:	eba0 0308 	sub.w	r3, r0, r8
 8008eca:	fa09 f303 	lsl.w	r3, r9, r3
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	46a2      	mov	sl, r4
 8008ed4:	e7d2      	b.n	8008e7c <_svfiprintf_r+0x9c>
 8008ed6:	9b03      	ldr	r3, [sp, #12]
 8008ed8:	1d19      	adds	r1, r3, #4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	9103      	str	r1, [sp, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bfbb      	ittet	lt
 8008ee2:	425b      	neglt	r3, r3
 8008ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ee8:	9307      	strge	r3, [sp, #28]
 8008eea:	9307      	strlt	r3, [sp, #28]
 8008eec:	bfb8      	it	lt
 8008eee:	9204      	strlt	r2, [sp, #16]
 8008ef0:	7823      	ldrb	r3, [r4, #0]
 8008ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ef4:	d10c      	bne.n	8008f10 <_svfiprintf_r+0x130>
 8008ef6:	7863      	ldrb	r3, [r4, #1]
 8008ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8008efa:	d134      	bne.n	8008f66 <_svfiprintf_r+0x186>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	1d1a      	adds	r2, r3, #4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	9203      	str	r2, [sp, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bfb8      	it	lt
 8008f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f0c:	3402      	adds	r4, #2
 8008f0e:	9305      	str	r3, [sp, #20]
 8008f10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008fd8 <_svfiprintf_r+0x1f8>
 8008f14:	7821      	ldrb	r1, [r4, #0]
 8008f16:	2203      	movs	r2, #3
 8008f18:	4650      	mov	r0, sl
 8008f1a:	f7f7 f961 	bl	80001e0 <memchr>
 8008f1e:	b138      	cbz	r0, 8008f30 <_svfiprintf_r+0x150>
 8008f20:	9b04      	ldr	r3, [sp, #16]
 8008f22:	eba0 000a 	sub.w	r0, r0, sl
 8008f26:	2240      	movs	r2, #64	; 0x40
 8008f28:	4082      	lsls	r2, r0
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f34:	4825      	ldr	r0, [pc, #148]	; (8008fcc <_svfiprintf_r+0x1ec>)
 8008f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f3a:	2206      	movs	r2, #6
 8008f3c:	f7f7 f950 	bl	80001e0 <memchr>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d038      	beq.n	8008fb6 <_svfiprintf_r+0x1d6>
 8008f44:	4b22      	ldr	r3, [pc, #136]	; (8008fd0 <_svfiprintf_r+0x1f0>)
 8008f46:	bb1b      	cbnz	r3, 8008f90 <_svfiprintf_r+0x1b0>
 8008f48:	9b03      	ldr	r3, [sp, #12]
 8008f4a:	3307      	adds	r3, #7
 8008f4c:	f023 0307 	bic.w	r3, r3, #7
 8008f50:	3308      	adds	r3, #8
 8008f52:	9303      	str	r3, [sp, #12]
 8008f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f56:	4433      	add	r3, r6
 8008f58:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5a:	e768      	b.n	8008e2e <_svfiprintf_r+0x4e>
 8008f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f60:	460c      	mov	r4, r1
 8008f62:	2001      	movs	r0, #1
 8008f64:	e7a6      	b.n	8008eb4 <_svfiprintf_r+0xd4>
 8008f66:	2300      	movs	r3, #0
 8008f68:	3401      	adds	r4, #1
 8008f6a:	9305      	str	r3, [sp, #20]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	f04f 0c0a 	mov.w	ip, #10
 8008f72:	4620      	mov	r0, r4
 8008f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f78:	3a30      	subs	r2, #48	; 0x30
 8008f7a:	2a09      	cmp	r2, #9
 8008f7c:	d903      	bls.n	8008f86 <_svfiprintf_r+0x1a6>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0c6      	beq.n	8008f10 <_svfiprintf_r+0x130>
 8008f82:	9105      	str	r1, [sp, #20]
 8008f84:	e7c4      	b.n	8008f10 <_svfiprintf_r+0x130>
 8008f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e7f0      	b.n	8008f72 <_svfiprintf_r+0x192>
 8008f90:	ab03      	add	r3, sp, #12
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	462a      	mov	r2, r5
 8008f96:	4b0f      	ldr	r3, [pc, #60]	; (8008fd4 <_svfiprintf_r+0x1f4>)
 8008f98:	a904      	add	r1, sp, #16
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	f7fd fdfe 	bl	8006b9c <_printf_float>
 8008fa0:	1c42      	adds	r2, r0, #1
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	d1d6      	bne.n	8008f54 <_svfiprintf_r+0x174>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	065b      	lsls	r3, r3, #25
 8008faa:	f53f af2d 	bmi.w	8008e08 <_svfiprintf_r+0x28>
 8008fae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb0:	b01d      	add	sp, #116	; 0x74
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <_svfiprintf_r+0x1f4>)
 8008fbe:	a904      	add	r1, sp, #16
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	f7fe f88f 	bl	80070e4 <_printf_i>
 8008fc6:	e7eb      	b.n	8008fa0 <_svfiprintf_r+0x1c0>
 8008fc8:	08009dc4 	.word	0x08009dc4
 8008fcc:	08009dce 	.word	0x08009dce
 8008fd0:	08006b9d 	.word	0x08006b9d
 8008fd4:	08008d2d 	.word	0x08008d2d
 8008fd8:	08009dca 	.word	0x08009dca

08008fdc <__sflush_r>:
 8008fdc:	898a      	ldrh	r2, [r1, #12]
 8008fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	0710      	lsls	r0, r2, #28
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	d458      	bmi.n	800909c <__sflush_r+0xc0>
 8008fea:	684b      	ldr	r3, [r1, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dc05      	bgt.n	8008ffc <__sflush_r+0x20>
 8008ff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dc02      	bgt.n	8008ffc <__sflush_r+0x20>
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ffe:	2e00      	cmp	r6, #0
 8009000:	d0f9      	beq.n	8008ff6 <__sflush_r+0x1a>
 8009002:	2300      	movs	r3, #0
 8009004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009008:	682f      	ldr	r7, [r5, #0]
 800900a:	6a21      	ldr	r1, [r4, #32]
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	d032      	beq.n	8009076 <__sflush_r+0x9a>
 8009010:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	075a      	lsls	r2, r3, #29
 8009016:	d505      	bpl.n	8009024 <__sflush_r+0x48>
 8009018:	6863      	ldr	r3, [r4, #4]
 800901a:	1ac0      	subs	r0, r0, r3
 800901c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800901e:	b10b      	cbz	r3, 8009024 <__sflush_r+0x48>
 8009020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009022:	1ac0      	subs	r0, r0, r3
 8009024:	2300      	movs	r3, #0
 8009026:	4602      	mov	r2, r0
 8009028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800902a:	6a21      	ldr	r1, [r4, #32]
 800902c:	4628      	mov	r0, r5
 800902e:	47b0      	blx	r6
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	d106      	bne.n	8009044 <__sflush_r+0x68>
 8009036:	6829      	ldr	r1, [r5, #0]
 8009038:	291d      	cmp	r1, #29
 800903a:	d82b      	bhi.n	8009094 <__sflush_r+0xb8>
 800903c:	4a29      	ldr	r2, [pc, #164]	; (80090e4 <__sflush_r+0x108>)
 800903e:	410a      	asrs	r2, r1
 8009040:	07d6      	lsls	r6, r2, #31
 8009042:	d427      	bmi.n	8009094 <__sflush_r+0xb8>
 8009044:	2200      	movs	r2, #0
 8009046:	6062      	str	r2, [r4, #4]
 8009048:	04d9      	lsls	r1, r3, #19
 800904a:	6922      	ldr	r2, [r4, #16]
 800904c:	6022      	str	r2, [r4, #0]
 800904e:	d504      	bpl.n	800905a <__sflush_r+0x7e>
 8009050:	1c42      	adds	r2, r0, #1
 8009052:	d101      	bne.n	8009058 <__sflush_r+0x7c>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b903      	cbnz	r3, 800905a <__sflush_r+0x7e>
 8009058:	6560      	str	r0, [r4, #84]	; 0x54
 800905a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800905c:	602f      	str	r7, [r5, #0]
 800905e:	2900      	cmp	r1, #0
 8009060:	d0c9      	beq.n	8008ff6 <__sflush_r+0x1a>
 8009062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009066:	4299      	cmp	r1, r3
 8009068:	d002      	beq.n	8009070 <__sflush_r+0x94>
 800906a:	4628      	mov	r0, r5
 800906c:	f7ff f9e2 	bl	8008434 <_free_r>
 8009070:	2000      	movs	r0, #0
 8009072:	6360      	str	r0, [r4, #52]	; 0x34
 8009074:	e7c0      	b.n	8008ff8 <__sflush_r+0x1c>
 8009076:	2301      	movs	r3, #1
 8009078:	4628      	mov	r0, r5
 800907a:	47b0      	blx	r6
 800907c:	1c41      	adds	r1, r0, #1
 800907e:	d1c8      	bne.n	8009012 <__sflush_r+0x36>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0c5      	beq.n	8009012 <__sflush_r+0x36>
 8009086:	2b1d      	cmp	r3, #29
 8009088:	d001      	beq.n	800908e <__sflush_r+0xb2>
 800908a:	2b16      	cmp	r3, #22
 800908c:	d101      	bne.n	8009092 <__sflush_r+0xb6>
 800908e:	602f      	str	r7, [r5, #0]
 8009090:	e7b1      	b.n	8008ff6 <__sflush_r+0x1a>
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009098:	81a3      	strh	r3, [r4, #12]
 800909a:	e7ad      	b.n	8008ff8 <__sflush_r+0x1c>
 800909c:	690f      	ldr	r7, [r1, #16]
 800909e:	2f00      	cmp	r7, #0
 80090a0:	d0a9      	beq.n	8008ff6 <__sflush_r+0x1a>
 80090a2:	0793      	lsls	r3, r2, #30
 80090a4:	680e      	ldr	r6, [r1, #0]
 80090a6:	bf08      	it	eq
 80090a8:	694b      	ldreq	r3, [r1, #20]
 80090aa:	600f      	str	r7, [r1, #0]
 80090ac:	bf18      	it	ne
 80090ae:	2300      	movne	r3, #0
 80090b0:	eba6 0807 	sub.w	r8, r6, r7
 80090b4:	608b      	str	r3, [r1, #8]
 80090b6:	f1b8 0f00 	cmp.w	r8, #0
 80090ba:	dd9c      	ble.n	8008ff6 <__sflush_r+0x1a>
 80090bc:	6a21      	ldr	r1, [r4, #32]
 80090be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090c0:	4643      	mov	r3, r8
 80090c2:	463a      	mov	r2, r7
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b0      	blx	r6
 80090c8:	2800      	cmp	r0, #0
 80090ca:	dc06      	bgt.n	80090da <__sflush_r+0xfe>
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	e78e      	b.n	8008ff8 <__sflush_r+0x1c>
 80090da:	4407      	add	r7, r0
 80090dc:	eba8 0800 	sub.w	r8, r8, r0
 80090e0:	e7e9      	b.n	80090b6 <__sflush_r+0xda>
 80090e2:	bf00      	nop
 80090e4:	dfbffffe 	.word	0xdfbffffe

080090e8 <_fflush_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	690b      	ldr	r3, [r1, #16]
 80090ec:	4605      	mov	r5, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	b913      	cbnz	r3, 80090f8 <_fflush_r+0x10>
 80090f2:	2500      	movs	r5, #0
 80090f4:	4628      	mov	r0, r5
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	b118      	cbz	r0, 8009102 <_fflush_r+0x1a>
 80090fa:	6a03      	ldr	r3, [r0, #32]
 80090fc:	b90b      	cbnz	r3, 8009102 <_fflush_r+0x1a>
 80090fe:	f7fe f99f 	bl	8007440 <__sinit>
 8009102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0f3      	beq.n	80090f2 <_fflush_r+0xa>
 800910a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800910c:	07d0      	lsls	r0, r2, #31
 800910e:	d404      	bmi.n	800911a <_fflush_r+0x32>
 8009110:	0599      	lsls	r1, r3, #22
 8009112:	d402      	bmi.n	800911a <_fflush_r+0x32>
 8009114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009116:	f7fe fb00 	bl	800771a <__retarget_lock_acquire_recursive>
 800911a:	4628      	mov	r0, r5
 800911c:	4621      	mov	r1, r4
 800911e:	f7ff ff5d 	bl	8008fdc <__sflush_r>
 8009122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009124:	07da      	lsls	r2, r3, #31
 8009126:	4605      	mov	r5, r0
 8009128:	d4e4      	bmi.n	80090f4 <_fflush_r+0xc>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	059b      	lsls	r3, r3, #22
 800912e:	d4e1      	bmi.n	80090f4 <_fflush_r+0xc>
 8009130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009132:	f7fe faf3 	bl	800771c <__retarget_lock_release_recursive>
 8009136:	e7dd      	b.n	80090f4 <_fflush_r+0xc>

08009138 <memmove>:
 8009138:	4288      	cmp	r0, r1
 800913a:	b510      	push	{r4, lr}
 800913c:	eb01 0402 	add.w	r4, r1, r2
 8009140:	d902      	bls.n	8009148 <memmove+0x10>
 8009142:	4284      	cmp	r4, r0
 8009144:	4623      	mov	r3, r4
 8009146:	d807      	bhi.n	8009158 <memmove+0x20>
 8009148:	1e43      	subs	r3, r0, #1
 800914a:	42a1      	cmp	r1, r4
 800914c:	d008      	beq.n	8009160 <memmove+0x28>
 800914e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009156:	e7f8      	b.n	800914a <memmove+0x12>
 8009158:	4402      	add	r2, r0
 800915a:	4601      	mov	r1, r0
 800915c:	428a      	cmp	r2, r1
 800915e:	d100      	bne.n	8009162 <memmove+0x2a>
 8009160:	bd10      	pop	{r4, pc}
 8009162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800916a:	e7f7      	b.n	800915c <memmove+0x24>

0800916c <_sbrk_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4d06      	ldr	r5, [pc, #24]	; (8009188 <_sbrk_r+0x1c>)
 8009170:	2300      	movs	r3, #0
 8009172:	4604      	mov	r4, r0
 8009174:	4608      	mov	r0, r1
 8009176:	602b      	str	r3, [r5, #0]
 8009178:	f7f8 ff58 	bl	800202c <_sbrk>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d102      	bne.n	8009186 <_sbrk_r+0x1a>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	b103      	cbz	r3, 8009186 <_sbrk_r+0x1a>
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	200044f0 	.word	0x200044f0

0800918c <__assert_func>:
 800918c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800918e:	4614      	mov	r4, r2
 8009190:	461a      	mov	r2, r3
 8009192:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <__assert_func+0x2c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4605      	mov	r5, r0
 8009198:	68d8      	ldr	r0, [r3, #12]
 800919a:	b14c      	cbz	r4, 80091b0 <__assert_func+0x24>
 800919c:	4b07      	ldr	r3, [pc, #28]	; (80091bc <__assert_func+0x30>)
 800919e:	9100      	str	r1, [sp, #0]
 80091a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091a4:	4906      	ldr	r1, [pc, #24]	; (80091c0 <__assert_func+0x34>)
 80091a6:	462b      	mov	r3, r5
 80091a8:	f000 f872 	bl	8009290 <fiprintf>
 80091ac:	f000 f882 	bl	80092b4 <abort>
 80091b0:	4b04      	ldr	r3, [pc, #16]	; (80091c4 <__assert_func+0x38>)
 80091b2:	461c      	mov	r4, r3
 80091b4:	e7f3      	b.n	800919e <__assert_func+0x12>
 80091b6:	bf00      	nop
 80091b8:	2000006c 	.word	0x2000006c
 80091bc:	08009ddf 	.word	0x08009ddf
 80091c0:	08009dec 	.word	0x08009dec
 80091c4:	08009e1a 	.word	0x08009e1a

080091c8 <_calloc_r>:
 80091c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ca:	fba1 2402 	umull	r2, r4, r1, r2
 80091ce:	b94c      	cbnz	r4, 80091e4 <_calloc_r+0x1c>
 80091d0:	4611      	mov	r1, r2
 80091d2:	9201      	str	r2, [sp, #4]
 80091d4:	f7ff f9a2 	bl	800851c <_malloc_r>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	4605      	mov	r5, r0
 80091dc:	b930      	cbnz	r0, 80091ec <_calloc_r+0x24>
 80091de:	4628      	mov	r0, r5
 80091e0:	b003      	add	sp, #12
 80091e2:	bd30      	pop	{r4, r5, pc}
 80091e4:	220c      	movs	r2, #12
 80091e6:	6002      	str	r2, [r0, #0]
 80091e8:	2500      	movs	r5, #0
 80091ea:	e7f8      	b.n	80091de <_calloc_r+0x16>
 80091ec:	4621      	mov	r1, r4
 80091ee:	f7fe f9c0 	bl	8007572 <memset>
 80091f2:	e7f4      	b.n	80091de <_calloc_r+0x16>

080091f4 <__ascii_mbtowc>:
 80091f4:	b082      	sub	sp, #8
 80091f6:	b901      	cbnz	r1, 80091fa <__ascii_mbtowc+0x6>
 80091f8:	a901      	add	r1, sp, #4
 80091fa:	b142      	cbz	r2, 800920e <__ascii_mbtowc+0x1a>
 80091fc:	b14b      	cbz	r3, 8009212 <__ascii_mbtowc+0x1e>
 80091fe:	7813      	ldrb	r3, [r2, #0]
 8009200:	600b      	str	r3, [r1, #0]
 8009202:	7812      	ldrb	r2, [r2, #0]
 8009204:	1e10      	subs	r0, r2, #0
 8009206:	bf18      	it	ne
 8009208:	2001      	movne	r0, #1
 800920a:	b002      	add	sp, #8
 800920c:	4770      	bx	lr
 800920e:	4610      	mov	r0, r2
 8009210:	e7fb      	b.n	800920a <__ascii_mbtowc+0x16>
 8009212:	f06f 0001 	mvn.w	r0, #1
 8009216:	e7f8      	b.n	800920a <__ascii_mbtowc+0x16>

08009218 <_realloc_r>:
 8009218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800921c:	4680      	mov	r8, r0
 800921e:	4614      	mov	r4, r2
 8009220:	460e      	mov	r6, r1
 8009222:	b921      	cbnz	r1, 800922e <_realloc_r+0x16>
 8009224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009228:	4611      	mov	r1, r2
 800922a:	f7ff b977 	b.w	800851c <_malloc_r>
 800922e:	b92a      	cbnz	r2, 800923c <_realloc_r+0x24>
 8009230:	f7ff f900 	bl	8008434 <_free_r>
 8009234:	4625      	mov	r5, r4
 8009236:	4628      	mov	r0, r5
 8009238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800923c:	f000 f841 	bl	80092c2 <_malloc_usable_size_r>
 8009240:	4284      	cmp	r4, r0
 8009242:	4607      	mov	r7, r0
 8009244:	d802      	bhi.n	800924c <_realloc_r+0x34>
 8009246:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800924a:	d812      	bhi.n	8009272 <_realloc_r+0x5a>
 800924c:	4621      	mov	r1, r4
 800924e:	4640      	mov	r0, r8
 8009250:	f7ff f964 	bl	800851c <_malloc_r>
 8009254:	4605      	mov	r5, r0
 8009256:	2800      	cmp	r0, #0
 8009258:	d0ed      	beq.n	8009236 <_realloc_r+0x1e>
 800925a:	42bc      	cmp	r4, r7
 800925c:	4622      	mov	r2, r4
 800925e:	4631      	mov	r1, r6
 8009260:	bf28      	it	cs
 8009262:	463a      	movcs	r2, r7
 8009264:	f7fe fa5b 	bl	800771e <memcpy>
 8009268:	4631      	mov	r1, r6
 800926a:	4640      	mov	r0, r8
 800926c:	f7ff f8e2 	bl	8008434 <_free_r>
 8009270:	e7e1      	b.n	8009236 <_realloc_r+0x1e>
 8009272:	4635      	mov	r5, r6
 8009274:	e7df      	b.n	8009236 <_realloc_r+0x1e>

08009276 <__ascii_wctomb>:
 8009276:	b149      	cbz	r1, 800928c <__ascii_wctomb+0x16>
 8009278:	2aff      	cmp	r2, #255	; 0xff
 800927a:	bf85      	ittet	hi
 800927c:	238a      	movhi	r3, #138	; 0x8a
 800927e:	6003      	strhi	r3, [r0, #0]
 8009280:	700a      	strbls	r2, [r1, #0]
 8009282:	f04f 30ff 	movhi.w	r0, #4294967295
 8009286:	bf98      	it	ls
 8009288:	2001      	movls	r0, #1
 800928a:	4770      	bx	lr
 800928c:	4608      	mov	r0, r1
 800928e:	4770      	bx	lr

08009290 <fiprintf>:
 8009290:	b40e      	push	{r1, r2, r3}
 8009292:	b503      	push	{r0, r1, lr}
 8009294:	4601      	mov	r1, r0
 8009296:	ab03      	add	r3, sp, #12
 8009298:	4805      	ldr	r0, [pc, #20]	; (80092b0 <fiprintf+0x20>)
 800929a:	f853 2b04 	ldr.w	r2, [r3], #4
 800929e:	6800      	ldr	r0, [r0, #0]
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	f000 f83f 	bl	8009324 <_vfiprintf_r>
 80092a6:	b002      	add	sp, #8
 80092a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092ac:	b003      	add	sp, #12
 80092ae:	4770      	bx	lr
 80092b0:	2000006c 	.word	0x2000006c

080092b4 <abort>:
 80092b4:	b508      	push	{r3, lr}
 80092b6:	2006      	movs	r0, #6
 80092b8:	f000 fa0c 	bl	80096d4 <raise>
 80092bc:	2001      	movs	r0, #1
 80092be:	f7f8 fe3d 	bl	8001f3c <_exit>

080092c2 <_malloc_usable_size_r>:
 80092c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c6:	1f18      	subs	r0, r3, #4
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	bfbc      	itt	lt
 80092cc:	580b      	ldrlt	r3, [r1, r0]
 80092ce:	18c0      	addlt	r0, r0, r3
 80092d0:	4770      	bx	lr

080092d2 <__sfputc_r>:
 80092d2:	6893      	ldr	r3, [r2, #8]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	b410      	push	{r4}
 80092da:	6093      	str	r3, [r2, #8]
 80092dc:	da08      	bge.n	80092f0 <__sfputc_r+0x1e>
 80092de:	6994      	ldr	r4, [r2, #24]
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	db01      	blt.n	80092e8 <__sfputc_r+0x16>
 80092e4:	290a      	cmp	r1, #10
 80092e6:	d103      	bne.n	80092f0 <__sfputc_r+0x1e>
 80092e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ec:	f000 b934 	b.w	8009558 <__swbuf_r>
 80092f0:	6813      	ldr	r3, [r2, #0]
 80092f2:	1c58      	adds	r0, r3, #1
 80092f4:	6010      	str	r0, [r2, #0]
 80092f6:	7019      	strb	r1, [r3, #0]
 80092f8:	4608      	mov	r0, r1
 80092fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <__sfputs_r>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	4606      	mov	r6, r0
 8009304:	460f      	mov	r7, r1
 8009306:	4614      	mov	r4, r2
 8009308:	18d5      	adds	r5, r2, r3
 800930a:	42ac      	cmp	r4, r5
 800930c:	d101      	bne.n	8009312 <__sfputs_r+0x12>
 800930e:	2000      	movs	r0, #0
 8009310:	e007      	b.n	8009322 <__sfputs_r+0x22>
 8009312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009316:	463a      	mov	r2, r7
 8009318:	4630      	mov	r0, r6
 800931a:	f7ff ffda 	bl	80092d2 <__sfputc_r>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d1f3      	bne.n	800930a <__sfputs_r+0xa>
 8009322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009324 <_vfiprintf_r>:
 8009324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	460d      	mov	r5, r1
 800932a:	b09d      	sub	sp, #116	; 0x74
 800932c:	4614      	mov	r4, r2
 800932e:	4698      	mov	r8, r3
 8009330:	4606      	mov	r6, r0
 8009332:	b118      	cbz	r0, 800933c <_vfiprintf_r+0x18>
 8009334:	6a03      	ldr	r3, [r0, #32]
 8009336:	b90b      	cbnz	r3, 800933c <_vfiprintf_r+0x18>
 8009338:	f7fe f882 	bl	8007440 <__sinit>
 800933c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800933e:	07d9      	lsls	r1, r3, #31
 8009340:	d405      	bmi.n	800934e <_vfiprintf_r+0x2a>
 8009342:	89ab      	ldrh	r3, [r5, #12]
 8009344:	059a      	lsls	r2, r3, #22
 8009346:	d402      	bmi.n	800934e <_vfiprintf_r+0x2a>
 8009348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800934a:	f7fe f9e6 	bl	800771a <__retarget_lock_acquire_recursive>
 800934e:	89ab      	ldrh	r3, [r5, #12]
 8009350:	071b      	lsls	r3, r3, #28
 8009352:	d501      	bpl.n	8009358 <_vfiprintf_r+0x34>
 8009354:	692b      	ldr	r3, [r5, #16]
 8009356:	b99b      	cbnz	r3, 8009380 <_vfiprintf_r+0x5c>
 8009358:	4629      	mov	r1, r5
 800935a:	4630      	mov	r0, r6
 800935c:	f000 f93a 	bl	80095d4 <__swsetup_r>
 8009360:	b170      	cbz	r0, 8009380 <_vfiprintf_r+0x5c>
 8009362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009364:	07dc      	lsls	r4, r3, #31
 8009366:	d504      	bpl.n	8009372 <_vfiprintf_r+0x4e>
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	b01d      	add	sp, #116	; 0x74
 800936e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	0598      	lsls	r0, r3, #22
 8009376:	d4f7      	bmi.n	8009368 <_vfiprintf_r+0x44>
 8009378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800937a:	f7fe f9cf 	bl	800771c <__retarget_lock_release_recursive>
 800937e:	e7f3      	b.n	8009368 <_vfiprintf_r+0x44>
 8009380:	2300      	movs	r3, #0
 8009382:	9309      	str	r3, [sp, #36]	; 0x24
 8009384:	2320      	movs	r3, #32
 8009386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800938a:	f8cd 800c 	str.w	r8, [sp, #12]
 800938e:	2330      	movs	r3, #48	; 0x30
 8009390:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009544 <_vfiprintf_r+0x220>
 8009394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009398:	f04f 0901 	mov.w	r9, #1
 800939c:	4623      	mov	r3, r4
 800939e:	469a      	mov	sl, r3
 80093a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a4:	b10a      	cbz	r2, 80093aa <_vfiprintf_r+0x86>
 80093a6:	2a25      	cmp	r2, #37	; 0x25
 80093a8:	d1f9      	bne.n	800939e <_vfiprintf_r+0x7a>
 80093aa:	ebba 0b04 	subs.w	fp, sl, r4
 80093ae:	d00b      	beq.n	80093c8 <_vfiprintf_r+0xa4>
 80093b0:	465b      	mov	r3, fp
 80093b2:	4622      	mov	r2, r4
 80093b4:	4629      	mov	r1, r5
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7ff ffa2 	bl	8009300 <__sfputs_r>
 80093bc:	3001      	adds	r0, #1
 80093be:	f000 80a9 	beq.w	8009514 <_vfiprintf_r+0x1f0>
 80093c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c4:	445a      	add	r2, fp
 80093c6:	9209      	str	r2, [sp, #36]	; 0x24
 80093c8:	f89a 3000 	ldrb.w	r3, [sl]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 80a1 	beq.w	8009514 <_vfiprintf_r+0x1f0>
 80093d2:	2300      	movs	r3, #0
 80093d4:	f04f 32ff 	mov.w	r2, #4294967295
 80093d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093dc:	f10a 0a01 	add.w	sl, sl, #1
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	9307      	str	r3, [sp, #28]
 80093e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093e8:	931a      	str	r3, [sp, #104]	; 0x68
 80093ea:	4654      	mov	r4, sl
 80093ec:	2205      	movs	r2, #5
 80093ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f2:	4854      	ldr	r0, [pc, #336]	; (8009544 <_vfiprintf_r+0x220>)
 80093f4:	f7f6 fef4 	bl	80001e0 <memchr>
 80093f8:	9a04      	ldr	r2, [sp, #16]
 80093fa:	b9d8      	cbnz	r0, 8009434 <_vfiprintf_r+0x110>
 80093fc:	06d1      	lsls	r1, r2, #27
 80093fe:	bf44      	itt	mi
 8009400:	2320      	movmi	r3, #32
 8009402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009406:	0713      	lsls	r3, r2, #28
 8009408:	bf44      	itt	mi
 800940a:	232b      	movmi	r3, #43	; 0x2b
 800940c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009410:	f89a 3000 	ldrb.w	r3, [sl]
 8009414:	2b2a      	cmp	r3, #42	; 0x2a
 8009416:	d015      	beq.n	8009444 <_vfiprintf_r+0x120>
 8009418:	9a07      	ldr	r2, [sp, #28]
 800941a:	4654      	mov	r4, sl
 800941c:	2000      	movs	r0, #0
 800941e:	f04f 0c0a 	mov.w	ip, #10
 8009422:	4621      	mov	r1, r4
 8009424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009428:	3b30      	subs	r3, #48	; 0x30
 800942a:	2b09      	cmp	r3, #9
 800942c:	d94d      	bls.n	80094ca <_vfiprintf_r+0x1a6>
 800942e:	b1b0      	cbz	r0, 800945e <_vfiprintf_r+0x13a>
 8009430:	9207      	str	r2, [sp, #28]
 8009432:	e014      	b.n	800945e <_vfiprintf_r+0x13a>
 8009434:	eba0 0308 	sub.w	r3, r0, r8
 8009438:	fa09 f303 	lsl.w	r3, r9, r3
 800943c:	4313      	orrs	r3, r2
 800943e:	9304      	str	r3, [sp, #16]
 8009440:	46a2      	mov	sl, r4
 8009442:	e7d2      	b.n	80093ea <_vfiprintf_r+0xc6>
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	1d19      	adds	r1, r3, #4
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	9103      	str	r1, [sp, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	bfbb      	ittet	lt
 8009450:	425b      	neglt	r3, r3
 8009452:	f042 0202 	orrlt.w	r2, r2, #2
 8009456:	9307      	strge	r3, [sp, #28]
 8009458:	9307      	strlt	r3, [sp, #28]
 800945a:	bfb8      	it	lt
 800945c:	9204      	strlt	r2, [sp, #16]
 800945e:	7823      	ldrb	r3, [r4, #0]
 8009460:	2b2e      	cmp	r3, #46	; 0x2e
 8009462:	d10c      	bne.n	800947e <_vfiprintf_r+0x15a>
 8009464:	7863      	ldrb	r3, [r4, #1]
 8009466:	2b2a      	cmp	r3, #42	; 0x2a
 8009468:	d134      	bne.n	80094d4 <_vfiprintf_r+0x1b0>
 800946a:	9b03      	ldr	r3, [sp, #12]
 800946c:	1d1a      	adds	r2, r3, #4
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	9203      	str	r2, [sp, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	bfb8      	it	lt
 8009476:	f04f 33ff 	movlt.w	r3, #4294967295
 800947a:	3402      	adds	r4, #2
 800947c:	9305      	str	r3, [sp, #20]
 800947e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009554 <_vfiprintf_r+0x230>
 8009482:	7821      	ldrb	r1, [r4, #0]
 8009484:	2203      	movs	r2, #3
 8009486:	4650      	mov	r0, sl
 8009488:	f7f6 feaa 	bl	80001e0 <memchr>
 800948c:	b138      	cbz	r0, 800949e <_vfiprintf_r+0x17a>
 800948e:	9b04      	ldr	r3, [sp, #16]
 8009490:	eba0 000a 	sub.w	r0, r0, sl
 8009494:	2240      	movs	r2, #64	; 0x40
 8009496:	4082      	lsls	r2, r0
 8009498:	4313      	orrs	r3, r2
 800949a:	3401      	adds	r4, #1
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a2:	4829      	ldr	r0, [pc, #164]	; (8009548 <_vfiprintf_r+0x224>)
 80094a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094a8:	2206      	movs	r2, #6
 80094aa:	f7f6 fe99 	bl	80001e0 <memchr>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d03f      	beq.n	8009532 <_vfiprintf_r+0x20e>
 80094b2:	4b26      	ldr	r3, [pc, #152]	; (800954c <_vfiprintf_r+0x228>)
 80094b4:	bb1b      	cbnz	r3, 80094fe <_vfiprintf_r+0x1da>
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	3307      	adds	r3, #7
 80094ba:	f023 0307 	bic.w	r3, r3, #7
 80094be:	3308      	adds	r3, #8
 80094c0:	9303      	str	r3, [sp, #12]
 80094c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c4:	443b      	add	r3, r7
 80094c6:	9309      	str	r3, [sp, #36]	; 0x24
 80094c8:	e768      	b.n	800939c <_vfiprintf_r+0x78>
 80094ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80094ce:	460c      	mov	r4, r1
 80094d0:	2001      	movs	r0, #1
 80094d2:	e7a6      	b.n	8009422 <_vfiprintf_r+0xfe>
 80094d4:	2300      	movs	r3, #0
 80094d6:	3401      	adds	r4, #1
 80094d8:	9305      	str	r3, [sp, #20]
 80094da:	4619      	mov	r1, r3
 80094dc:	f04f 0c0a 	mov.w	ip, #10
 80094e0:	4620      	mov	r0, r4
 80094e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094e6:	3a30      	subs	r2, #48	; 0x30
 80094e8:	2a09      	cmp	r2, #9
 80094ea:	d903      	bls.n	80094f4 <_vfiprintf_r+0x1d0>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0c6      	beq.n	800947e <_vfiprintf_r+0x15a>
 80094f0:	9105      	str	r1, [sp, #20]
 80094f2:	e7c4      	b.n	800947e <_vfiprintf_r+0x15a>
 80094f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80094f8:	4604      	mov	r4, r0
 80094fa:	2301      	movs	r3, #1
 80094fc:	e7f0      	b.n	80094e0 <_vfiprintf_r+0x1bc>
 80094fe:	ab03      	add	r3, sp, #12
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	462a      	mov	r2, r5
 8009504:	4b12      	ldr	r3, [pc, #72]	; (8009550 <_vfiprintf_r+0x22c>)
 8009506:	a904      	add	r1, sp, #16
 8009508:	4630      	mov	r0, r6
 800950a:	f7fd fb47 	bl	8006b9c <_printf_float>
 800950e:	4607      	mov	r7, r0
 8009510:	1c78      	adds	r0, r7, #1
 8009512:	d1d6      	bne.n	80094c2 <_vfiprintf_r+0x19e>
 8009514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009516:	07d9      	lsls	r1, r3, #31
 8009518:	d405      	bmi.n	8009526 <_vfiprintf_r+0x202>
 800951a:	89ab      	ldrh	r3, [r5, #12]
 800951c:	059a      	lsls	r2, r3, #22
 800951e:	d402      	bmi.n	8009526 <_vfiprintf_r+0x202>
 8009520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009522:	f7fe f8fb 	bl	800771c <__retarget_lock_release_recursive>
 8009526:	89ab      	ldrh	r3, [r5, #12]
 8009528:	065b      	lsls	r3, r3, #25
 800952a:	f53f af1d 	bmi.w	8009368 <_vfiprintf_r+0x44>
 800952e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009530:	e71c      	b.n	800936c <_vfiprintf_r+0x48>
 8009532:	ab03      	add	r3, sp, #12
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	462a      	mov	r2, r5
 8009538:	4b05      	ldr	r3, [pc, #20]	; (8009550 <_vfiprintf_r+0x22c>)
 800953a:	a904      	add	r1, sp, #16
 800953c:	4630      	mov	r0, r6
 800953e:	f7fd fdd1 	bl	80070e4 <_printf_i>
 8009542:	e7e4      	b.n	800950e <_vfiprintf_r+0x1ea>
 8009544:	08009dc4 	.word	0x08009dc4
 8009548:	08009dce 	.word	0x08009dce
 800954c:	08006b9d 	.word	0x08006b9d
 8009550:	08009301 	.word	0x08009301
 8009554:	08009dca 	.word	0x08009dca

08009558 <__swbuf_r>:
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955a:	460e      	mov	r6, r1
 800955c:	4614      	mov	r4, r2
 800955e:	4605      	mov	r5, r0
 8009560:	b118      	cbz	r0, 800956a <__swbuf_r+0x12>
 8009562:	6a03      	ldr	r3, [r0, #32]
 8009564:	b90b      	cbnz	r3, 800956a <__swbuf_r+0x12>
 8009566:	f7fd ff6b 	bl	8007440 <__sinit>
 800956a:	69a3      	ldr	r3, [r4, #24]
 800956c:	60a3      	str	r3, [r4, #8]
 800956e:	89a3      	ldrh	r3, [r4, #12]
 8009570:	071a      	lsls	r2, r3, #28
 8009572:	d525      	bpl.n	80095c0 <__swbuf_r+0x68>
 8009574:	6923      	ldr	r3, [r4, #16]
 8009576:	b31b      	cbz	r3, 80095c0 <__swbuf_r+0x68>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	6922      	ldr	r2, [r4, #16]
 800957c:	1a98      	subs	r0, r3, r2
 800957e:	6963      	ldr	r3, [r4, #20]
 8009580:	b2f6      	uxtb	r6, r6
 8009582:	4283      	cmp	r3, r0
 8009584:	4637      	mov	r7, r6
 8009586:	dc04      	bgt.n	8009592 <__swbuf_r+0x3a>
 8009588:	4621      	mov	r1, r4
 800958a:	4628      	mov	r0, r5
 800958c:	f7ff fdac 	bl	80090e8 <_fflush_r>
 8009590:	b9e0      	cbnz	r0, 80095cc <__swbuf_r+0x74>
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	3b01      	subs	r3, #1
 8009596:	60a3      	str	r3, [r4, #8]
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	6022      	str	r2, [r4, #0]
 800959e:	701e      	strb	r6, [r3, #0]
 80095a0:	6962      	ldr	r2, [r4, #20]
 80095a2:	1c43      	adds	r3, r0, #1
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d004      	beq.n	80095b2 <__swbuf_r+0x5a>
 80095a8:	89a3      	ldrh	r3, [r4, #12]
 80095aa:	07db      	lsls	r3, r3, #31
 80095ac:	d506      	bpl.n	80095bc <__swbuf_r+0x64>
 80095ae:	2e0a      	cmp	r6, #10
 80095b0:	d104      	bne.n	80095bc <__swbuf_r+0x64>
 80095b2:	4621      	mov	r1, r4
 80095b4:	4628      	mov	r0, r5
 80095b6:	f7ff fd97 	bl	80090e8 <_fflush_r>
 80095ba:	b938      	cbnz	r0, 80095cc <__swbuf_r+0x74>
 80095bc:	4638      	mov	r0, r7
 80095be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c0:	4621      	mov	r1, r4
 80095c2:	4628      	mov	r0, r5
 80095c4:	f000 f806 	bl	80095d4 <__swsetup_r>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d0d5      	beq.n	8009578 <__swbuf_r+0x20>
 80095cc:	f04f 37ff 	mov.w	r7, #4294967295
 80095d0:	e7f4      	b.n	80095bc <__swbuf_r+0x64>
	...

080095d4 <__swsetup_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4b2a      	ldr	r3, [pc, #168]	; (8009680 <__swsetup_r+0xac>)
 80095d8:	4605      	mov	r5, r0
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	460c      	mov	r4, r1
 80095de:	b118      	cbz	r0, 80095e8 <__swsetup_r+0x14>
 80095e0:	6a03      	ldr	r3, [r0, #32]
 80095e2:	b90b      	cbnz	r3, 80095e8 <__swsetup_r+0x14>
 80095e4:	f7fd ff2c 	bl	8007440 <__sinit>
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095ee:	0718      	lsls	r0, r3, #28
 80095f0:	d422      	bmi.n	8009638 <__swsetup_r+0x64>
 80095f2:	06d9      	lsls	r1, r3, #27
 80095f4:	d407      	bmi.n	8009606 <__swsetup_r+0x32>
 80095f6:	2309      	movs	r3, #9
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095fe:	81a3      	strh	r3, [r4, #12]
 8009600:	f04f 30ff 	mov.w	r0, #4294967295
 8009604:	e034      	b.n	8009670 <__swsetup_r+0x9c>
 8009606:	0758      	lsls	r0, r3, #29
 8009608:	d512      	bpl.n	8009630 <__swsetup_r+0x5c>
 800960a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800960c:	b141      	cbz	r1, 8009620 <__swsetup_r+0x4c>
 800960e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009612:	4299      	cmp	r1, r3
 8009614:	d002      	beq.n	800961c <__swsetup_r+0x48>
 8009616:	4628      	mov	r0, r5
 8009618:	f7fe ff0c 	bl	8008434 <_free_r>
 800961c:	2300      	movs	r3, #0
 800961e:	6363      	str	r3, [r4, #52]	; 0x34
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	2300      	movs	r3, #0
 800962a:	6063      	str	r3, [r4, #4]
 800962c:	6923      	ldr	r3, [r4, #16]
 800962e:	6023      	str	r3, [r4, #0]
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f043 0308 	orr.w	r3, r3, #8
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	6923      	ldr	r3, [r4, #16]
 800963a:	b94b      	cbnz	r3, 8009650 <__swsetup_r+0x7c>
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009646:	d003      	beq.n	8009650 <__swsetup_r+0x7c>
 8009648:	4621      	mov	r1, r4
 800964a:	4628      	mov	r0, r5
 800964c:	f000 f884 	bl	8009758 <__smakebuf_r>
 8009650:	89a0      	ldrh	r0, [r4, #12]
 8009652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009656:	f010 0301 	ands.w	r3, r0, #1
 800965a:	d00a      	beq.n	8009672 <__swsetup_r+0x9e>
 800965c:	2300      	movs	r3, #0
 800965e:	60a3      	str	r3, [r4, #8]
 8009660:	6963      	ldr	r3, [r4, #20]
 8009662:	425b      	negs	r3, r3
 8009664:	61a3      	str	r3, [r4, #24]
 8009666:	6923      	ldr	r3, [r4, #16]
 8009668:	b943      	cbnz	r3, 800967c <__swsetup_r+0xa8>
 800966a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800966e:	d1c4      	bne.n	80095fa <__swsetup_r+0x26>
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	0781      	lsls	r1, r0, #30
 8009674:	bf58      	it	pl
 8009676:	6963      	ldrpl	r3, [r4, #20]
 8009678:	60a3      	str	r3, [r4, #8]
 800967a:	e7f4      	b.n	8009666 <__swsetup_r+0x92>
 800967c:	2000      	movs	r0, #0
 800967e:	e7f7      	b.n	8009670 <__swsetup_r+0x9c>
 8009680:	2000006c 	.word	0x2000006c

08009684 <_raise_r>:
 8009684:	291f      	cmp	r1, #31
 8009686:	b538      	push	{r3, r4, r5, lr}
 8009688:	4604      	mov	r4, r0
 800968a:	460d      	mov	r5, r1
 800968c:	d904      	bls.n	8009698 <_raise_r+0x14>
 800968e:	2316      	movs	r3, #22
 8009690:	6003      	str	r3, [r0, #0]
 8009692:	f04f 30ff 	mov.w	r0, #4294967295
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800969a:	b112      	cbz	r2, 80096a2 <_raise_r+0x1e>
 800969c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096a0:	b94b      	cbnz	r3, 80096b6 <_raise_r+0x32>
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 f830 	bl	8009708 <_getpid_r>
 80096a8:	462a      	mov	r2, r5
 80096aa:	4601      	mov	r1, r0
 80096ac:	4620      	mov	r0, r4
 80096ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096b2:	f000 b817 	b.w	80096e4 <_kill_r>
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d00a      	beq.n	80096d0 <_raise_r+0x4c>
 80096ba:	1c59      	adds	r1, r3, #1
 80096bc:	d103      	bne.n	80096c6 <_raise_r+0x42>
 80096be:	2316      	movs	r3, #22
 80096c0:	6003      	str	r3, [r0, #0]
 80096c2:	2001      	movs	r0, #1
 80096c4:	e7e7      	b.n	8009696 <_raise_r+0x12>
 80096c6:	2400      	movs	r4, #0
 80096c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096cc:	4628      	mov	r0, r5
 80096ce:	4798      	blx	r3
 80096d0:	2000      	movs	r0, #0
 80096d2:	e7e0      	b.n	8009696 <_raise_r+0x12>

080096d4 <raise>:
 80096d4:	4b02      	ldr	r3, [pc, #8]	; (80096e0 <raise+0xc>)
 80096d6:	4601      	mov	r1, r0
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	f7ff bfd3 	b.w	8009684 <_raise_r>
 80096de:	bf00      	nop
 80096e0:	2000006c 	.word	0x2000006c

080096e4 <_kill_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	; (8009704 <_kill_r+0x20>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	4611      	mov	r1, r2
 80096f0:	602b      	str	r3, [r5, #0]
 80096f2:	f7f8 fc13 	bl	8001f1c <_kill>
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	d102      	bne.n	8009700 <_kill_r+0x1c>
 80096fa:	682b      	ldr	r3, [r5, #0]
 80096fc:	b103      	cbz	r3, 8009700 <_kill_r+0x1c>
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	bd38      	pop	{r3, r4, r5, pc}
 8009702:	bf00      	nop
 8009704:	200044f0 	.word	0x200044f0

08009708 <_getpid_r>:
 8009708:	f7f8 bc00 	b.w	8001f0c <_getpid>

0800970c <__swhatbuf_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	460c      	mov	r4, r1
 8009710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009714:	2900      	cmp	r1, #0
 8009716:	b096      	sub	sp, #88	; 0x58
 8009718:	4615      	mov	r5, r2
 800971a:	461e      	mov	r6, r3
 800971c:	da0d      	bge.n	800973a <__swhatbuf_r+0x2e>
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009724:	f04f 0100 	mov.w	r1, #0
 8009728:	bf0c      	ite	eq
 800972a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800972e:	2340      	movne	r3, #64	; 0x40
 8009730:	2000      	movs	r0, #0
 8009732:	6031      	str	r1, [r6, #0]
 8009734:	602b      	str	r3, [r5, #0]
 8009736:	b016      	add	sp, #88	; 0x58
 8009738:	bd70      	pop	{r4, r5, r6, pc}
 800973a:	466a      	mov	r2, sp
 800973c:	f000 f848 	bl	80097d0 <_fstat_r>
 8009740:	2800      	cmp	r0, #0
 8009742:	dbec      	blt.n	800971e <__swhatbuf_r+0x12>
 8009744:	9901      	ldr	r1, [sp, #4]
 8009746:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800974a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800974e:	4259      	negs	r1, r3
 8009750:	4159      	adcs	r1, r3
 8009752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009756:	e7eb      	b.n	8009730 <__swhatbuf_r+0x24>

08009758 <__smakebuf_r>:
 8009758:	898b      	ldrh	r3, [r1, #12]
 800975a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800975c:	079d      	lsls	r5, r3, #30
 800975e:	4606      	mov	r6, r0
 8009760:	460c      	mov	r4, r1
 8009762:	d507      	bpl.n	8009774 <__smakebuf_r+0x1c>
 8009764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	2301      	movs	r3, #1
 800976e:	6163      	str	r3, [r4, #20]
 8009770:	b002      	add	sp, #8
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	ab01      	add	r3, sp, #4
 8009776:	466a      	mov	r2, sp
 8009778:	f7ff ffc8 	bl	800970c <__swhatbuf_r>
 800977c:	9900      	ldr	r1, [sp, #0]
 800977e:	4605      	mov	r5, r0
 8009780:	4630      	mov	r0, r6
 8009782:	f7fe fecb 	bl	800851c <_malloc_r>
 8009786:	b948      	cbnz	r0, 800979c <__smakebuf_r+0x44>
 8009788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d4ef      	bmi.n	8009770 <__smakebuf_r+0x18>
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	f043 0302 	orr.w	r3, r3, #2
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	e7e3      	b.n	8009764 <__smakebuf_r+0xc>
 800979c:	89a3      	ldrh	r3, [r4, #12]
 800979e:	6020      	str	r0, [r4, #0]
 80097a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a4:	81a3      	strh	r3, [r4, #12]
 80097a6:	9b00      	ldr	r3, [sp, #0]
 80097a8:	6163      	str	r3, [r4, #20]
 80097aa:	9b01      	ldr	r3, [sp, #4]
 80097ac:	6120      	str	r0, [r4, #16]
 80097ae:	b15b      	cbz	r3, 80097c8 <__smakebuf_r+0x70>
 80097b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b4:	4630      	mov	r0, r6
 80097b6:	f000 f81d 	bl	80097f4 <_isatty_r>
 80097ba:	b128      	cbz	r0, 80097c8 <__smakebuf_r+0x70>
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	f023 0303 	bic.w	r3, r3, #3
 80097c2:	f043 0301 	orr.w	r3, r3, #1
 80097c6:	81a3      	strh	r3, [r4, #12]
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	431d      	orrs	r5, r3
 80097cc:	81a5      	strh	r5, [r4, #12]
 80097ce:	e7cf      	b.n	8009770 <__smakebuf_r+0x18>

080097d0 <_fstat_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d07      	ldr	r5, [pc, #28]	; (80097f0 <_fstat_r+0x20>)
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	4611      	mov	r1, r2
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	f7f8 fbfc 	bl	8001fda <_fstat>
 80097e2:	1c43      	adds	r3, r0, #1
 80097e4:	d102      	bne.n	80097ec <_fstat_r+0x1c>
 80097e6:	682b      	ldr	r3, [r5, #0]
 80097e8:	b103      	cbz	r3, 80097ec <_fstat_r+0x1c>
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	bd38      	pop	{r3, r4, r5, pc}
 80097ee:	bf00      	nop
 80097f0:	200044f0 	.word	0x200044f0

080097f4 <_isatty_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d06      	ldr	r5, [pc, #24]	; (8009810 <_isatty_r+0x1c>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	f7f8 fbfb 	bl	8001ffa <_isatty>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_isatty_r+0x1a>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_isatty_r+0x1a>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	200044f0 	.word	0x200044f0

08009814 <logf>:
 8009814:	b508      	push	{r3, lr}
 8009816:	ed2d 8b02 	vpush	{d8}
 800981a:	eeb0 8a40 	vmov.f32	s16, s0
 800981e:	f000 f82d 	bl	800987c <__ieee754_logf>
 8009822:	eeb4 8a48 	vcmp.f32	s16, s16
 8009826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982a:	d60f      	bvs.n	800984c <logf+0x38>
 800982c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009834:	dc0a      	bgt.n	800984c <logf+0x38>
 8009836:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800983a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800983e:	d108      	bne.n	8009852 <logf+0x3e>
 8009840:	f7fd ff40 	bl	80076c4 <__errno>
 8009844:	2322      	movs	r3, #34	; 0x22
 8009846:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8009868 <logf+0x54>
 800984a:	6003      	str	r3, [r0, #0]
 800984c:	ecbd 8b02 	vpop	{d8}
 8009850:	bd08      	pop	{r3, pc}
 8009852:	f7fd ff37 	bl	80076c4 <__errno>
 8009856:	ecbd 8b02 	vpop	{d8}
 800985a:	2321      	movs	r3, #33	; 0x21
 800985c:	6003      	str	r3, [r0, #0]
 800985e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009862:	4802      	ldr	r0, [pc, #8]	; (800986c <logf+0x58>)
 8009864:	f000 b804 	b.w	8009870 <nanf>
 8009868:	ff800000 	.word	0xff800000
 800986c:	08009e1a 	.word	0x08009e1a

08009870 <nanf>:
 8009870:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009878 <nanf+0x8>
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	7fc00000 	.word	0x7fc00000

0800987c <__ieee754_logf>:
 800987c:	ee10 3a10 	vmov	r3, s0
 8009880:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009884:	d106      	bne.n	8009894 <__ieee754_logf+0x18>
 8009886:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8009a20 <__ieee754_logf+0x1a4>
 800988a:	eddf 7a66 	vldr	s15, [pc, #408]	; 8009a24 <__ieee754_logf+0x1a8>
 800988e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009892:	4770      	bx	lr
 8009894:	2b00      	cmp	r3, #0
 8009896:	da02      	bge.n	800989e <__ieee754_logf+0x22>
 8009898:	ee30 7a40 	vsub.f32	s14, s0, s0
 800989c:	e7f5      	b.n	800988a <__ieee754_logf+0xe>
 800989e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098a2:	db02      	blt.n	80098aa <__ieee754_logf+0x2e>
 80098a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80098a8:	4770      	bx	lr
 80098aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098ae:	bfb8      	it	lt
 80098b0:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8009a28 <__ieee754_logf+0x1ac>
 80098b4:	485d      	ldr	r0, [pc, #372]	; (8009a2c <__ieee754_logf+0x1b0>)
 80098b6:	bfbe      	ittt	lt
 80098b8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80098bc:	f06f 0118 	mvnlt.w	r1, #24
 80098c0:	ee17 3a90 	vmovlt	r3, s15
 80098c4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80098c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80098cc:	4418      	add	r0, r3
 80098ce:	bfa8      	it	ge
 80098d0:	2100      	movge	r1, #0
 80098d2:	3a7f      	subs	r2, #127	; 0x7f
 80098d4:	440a      	add	r2, r1
 80098d6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80098da:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80098de:	4319      	orrs	r1, r3
 80098e0:	ee00 1a10 	vmov	s0, r1
 80098e4:	4952      	ldr	r1, [pc, #328]	; (8009a30 <__ieee754_logf+0x1b4>)
 80098e6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80098ea:	f103 000f 	add.w	r0, r3, #15
 80098ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80098f2:	4001      	ands	r1, r0
 80098f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80098f8:	bb89      	cbnz	r1, 800995e <__ieee754_logf+0xe2>
 80098fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80098fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009902:	d10f      	bne.n	8009924 <__ieee754_logf+0xa8>
 8009904:	2a00      	cmp	r2, #0
 8009906:	f000 8087 	beq.w	8009a18 <__ieee754_logf+0x19c>
 800990a:	ee07 2a90 	vmov	s15, r2
 800990e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8009a34 <__ieee754_logf+0x1b8>
 8009912:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009a38 <__ieee754_logf+0x1bc>
 8009916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800991a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800991e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009922:	4770      	bx	lr
 8009924:	eddf 6a45 	vldr	s13, [pc, #276]	; 8009a3c <__ieee754_logf+0x1c0>
 8009928:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800992c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8009930:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009938:	b912      	cbnz	r2, 8009940 <__ieee754_logf+0xc4>
 800993a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800993e:	4770      	bx	lr
 8009940:	ee07 2a90 	vmov	s15, r2
 8009944:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009a34 <__ieee754_logf+0x1b8>
 8009948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800994c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009950:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009954:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009a38 <__ieee754_logf+0x1bc>
 8009958:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800995c:	4770      	bx	lr
 800995e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009962:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009966:	eddf 5a36 	vldr	s11, [pc, #216]	; 8009a40 <__ieee754_logf+0x1c4>
 800996a:	eddf 4a36 	vldr	s9, [pc, #216]	; 8009a44 <__ieee754_logf+0x1c8>
 800996e:	4936      	ldr	r1, [pc, #216]	; (8009a48 <__ieee754_logf+0x1cc>)
 8009970:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009974:	4419      	add	r1, r3
 8009976:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800997a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800997e:	430b      	orrs	r3, r1
 8009980:	2b00      	cmp	r3, #0
 8009982:	ee07 2a90 	vmov	s15, r2
 8009986:	ee26 5a06 	vmul.f32	s10, s12, s12
 800998a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800998e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009992:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8009a4c <__ieee754_logf+0x1d0>
 8009996:	eee7 7a25 	vfma.f32	s15, s14, s11
 800999a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009a50 <__ieee754_logf+0x1d4>
 800999e:	eee7 5a87 	vfma.f32	s11, s15, s14
 80099a2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009a54 <__ieee754_logf+0x1d8>
 80099a6:	eee7 7a24 	vfma.f32	s15, s14, s9
 80099aa:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8009a58 <__ieee754_logf+0x1dc>
 80099ae:	eee7 4a87 	vfma.f32	s9, s15, s14
 80099b2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8009a5c <__ieee754_logf+0x1e0>
 80099b6:	eee4 7a87 	vfma.f32	s15, s9, s14
 80099ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 80099be:	eee5 7a87 	vfma.f32	s15, s11, s14
 80099c2:	dd1a      	ble.n	80099fa <__ieee754_logf+0x17e>
 80099c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80099c8:	ee20 7a07 	vmul.f32	s14, s0, s14
 80099cc:	ee27 7a00 	vmul.f32	s14, s14, s0
 80099d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80099d8:	b912      	cbnz	r2, 80099e0 <__ieee754_logf+0x164>
 80099da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099de:	e7ac      	b.n	800993a <__ieee754_logf+0xbe>
 80099e0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8009a34 <__ieee754_logf+0x1b8>
 80099e4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80099e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099ec:	ee37 0a40 	vsub.f32	s0, s14, s0
 80099f0:	eddf 7a11 	vldr	s15, [pc, #68]	; 8009a38 <__ieee754_logf+0x1bc>
 80099f4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80099f8:	4770      	bx	lr
 80099fa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80099fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009a02:	b912      	cbnz	r2, 8009a0a <__ieee754_logf+0x18e>
 8009a04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a08:	4770      	bx	lr
 8009a0a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8009a34 <__ieee754_logf+0x1b8>
 8009a0e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8009a12:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009a16:	e7eb      	b.n	80099f0 <__ieee754_logf+0x174>
 8009a18:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8009a24 <__ieee754_logf+0x1a8>
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	cc000000 	.word	0xcc000000
 8009a24:	00000000 	.word	0x00000000
 8009a28:	4c000000 	.word	0x4c000000
 8009a2c:	004afb20 	.word	0x004afb20
 8009a30:	007ffff0 	.word	0x007ffff0
 8009a34:	3717f7d1 	.word	0x3717f7d1
 8009a38:	3f317180 	.word	0x3f317180
 8009a3c:	3eaaaaab 	.word	0x3eaaaaab
 8009a40:	3e1cd04f 	.word	0x3e1cd04f
 8009a44:	3e178897 	.word	0x3e178897
 8009a48:	ffcf5c30 	.word	0xffcf5c30
 8009a4c:	3e638e29 	.word	0x3e638e29
 8009a50:	3ecccccd 	.word	0x3ecccccd
 8009a54:	3e3a3325 	.word	0x3e3a3325
 8009a58:	3e924925 	.word	0x3e924925
 8009a5c:	3f2aaaab 	.word	0x3f2aaaab

08009a60 <_init>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	bf00      	nop
 8009a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a66:	bc08      	pop	{r3}
 8009a68:	469e      	mov	lr, r3
 8009a6a:	4770      	bx	lr

08009a6c <_fini>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	bf00      	nop
 8009a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a72:	bc08      	pop	{r3}
 8009a74:	469e      	mov	lr, r3
 8009a76:	4770      	bx	lr
